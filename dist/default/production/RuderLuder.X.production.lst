

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Jun 30 08:56:47 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F1507
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.20
    46                           ; Generated 12/02/2020 GMT
    47                           ; 
    48                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F1507 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  011D                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  018E                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0197                     	;# 
   141  020C                     	;# 
   142  020D                     	;# 
   143  0391                     	;# 
   144  0392                     	;# 
   145  0393                     	;# 
   146  0394                     	;# 
   147  0395                     	;# 
   148  0396                     	;# 
   149  0498                     	;# 
   150  0498                     	;# 
   151  0499                     	;# 
   152  049A                     	;# 
   153  049B                     	;# 
   154  049B                     	;# 
   155  049C                     	;# 
   156  049D                     	;# 
   157  049E                     	;# 
   158  049F                     	;# 
   159  0611                     	;# 
   160  0612                     	;# 
   161  0613                     	;# 
   162  0613                     	;# 
   163  0614                     	;# 
   164  0615                     	;# 
   165  0616                     	;# 
   166  0616                     	;# 
   167  0617                     	;# 
   168  0618                     	;# 
   169  0619                     	;# 
   170  0619                     	;# 
   171  061A                     	;# 
   172  061B                     	;# 
   173  061C                     	;# 
   174  061C                     	;# 
   175  0691                     	;# 
   176  0692                     	;# 
   177  0693                     	;# 
   178  0694                     	;# 
   179  0695                     	;# 
   180  0F0F                     	;# 
   181  0F10                     	;# 
   182  0F11                     	;# 
   183  0F12                     	;# 
   184  0F13                     	;# 
   185  0F14                     	;# 
   186  0F15                     	;# 
   187  0F16                     	;# 
   188  0F17                     	;# 
   189  0F18                     	;# 
   190  0F19                     	;# 
   191  0F1A                     	;# 
   192  0F1B                     	;# 
   193  0F1C                     	;# 
   194  0F1D                     	;# 
   195  0F1E                     	;# 
   196  0F1F                     	;# 
   197  0FE3                     	;# 
   198  0FE4                     	;# 
   199  0FE5                     	;# 
   200  0FE6                     	;# 
   201  0FE7                     	;# 
   202  0FE8                     	;# 
   203  0FE9                     	;# 
   204  0FEA                     	;# 
   205  0FEB                     	;# 
   206  0FED                     	;# 
   207  0FEE                     	;# 
   208  0FEF                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0013                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0016                     	;# 
   230  0017                     	;# 
   231  0018                     	;# 
   232  0019                     	;# 
   233  001A                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  008E                     	;# 
   239  0091                     	;# 
   240  0092                     	;# 
   241  0093                     	;# 
   242  0095                     	;# 
   243  0096                     	;# 
   244  0097                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009B                     	;# 
   249  009C                     	;# 
   250  009D                     	;# 
   251  009E                     	;# 
   252  009F                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  0116                     	;# 
   257  0117                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  018E                     	;# 
   262  0191                     	;# 
   263  0191                     	;# 
   264  0192                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0197                     	;# 
   271  020C                     	;# 
   272  020D                     	;# 
   273  0391                     	;# 
   274  0392                     	;# 
   275  0393                     	;# 
   276  0394                     	;# 
   277  0395                     	;# 
   278  0396                     	;# 
   279  0498                     	;# 
   280  0498                     	;# 
   281  0499                     	;# 
   282  049A                     	;# 
   283  049B                     	;# 
   284  049B                     	;# 
   285  049C                     	;# 
   286  049D                     	;# 
   287  049E                     	;# 
   288  049F                     	;# 
   289  0611                     	;# 
   290  0612                     	;# 
   291  0613                     	;# 
   292  0613                     	;# 
   293  0614                     	;# 
   294  0615                     	;# 
   295  0616                     	;# 
   296  0616                     	;# 
   297  0617                     	;# 
   298  0618                     	;# 
   299  0619                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061B                     	;# 
   303  061C                     	;# 
   304  061C                     	;# 
   305  0691                     	;# 
   306  0692                     	;# 
   307  0693                     	;# 
   308  0694                     	;# 
   309  0695                     	;# 
   310  0F0F                     	;# 
   311  0F10                     	;# 
   312  0F11                     	;# 
   313  0F12                     	;# 
   314  0F13                     	;# 
   315  0F14                     	;# 
   316  0F15                     	;# 
   317  0F16                     	;# 
   318  0F17                     	;# 
   319  0F18                     	;# 
   320  0F19                     	;# 
   321  0F1A                     	;# 
   322  0F1B                     	;# 
   323  0F1C                     	;# 
   324  0F1D                     	;# 
   325  0F1E                     	;# 
   326  0F1F                     	;# 
   327  0FE3                     	;# 
   328  0FE4                     	;# 
   329  0FE5                     	;# 
   330  0FE6                     	;# 
   331  0FE7                     	;# 
   332  0FE8                     	;# 
   333  0FE9                     	;# 
   334  0FEA                     	;# 
   335  0FEB                     	;# 
   336  0FED                     	;# 
   337  0FEE                     	;# 
   338  0FEF                     	;# 
   339  0000                     	;# 
   340  0001                     	;# 
   341  0002                     	;# 
   342  0003                     	;# 
   343  0004                     	;# 
   344  0005                     	;# 
   345  0006                     	;# 
   346  0007                     	;# 
   347  0008                     	;# 
   348  0009                     	;# 
   349  000A                     	;# 
   350  000B                     	;# 
   351  000C                     	;# 
   352  000D                     	;# 
   353  000E                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0015                     	;# 
   358  0016                     	;# 
   359  0016                     	;# 
   360  0017                     	;# 
   361  0018                     	;# 
   362  0019                     	;# 
   363  001A                     	;# 
   364  001B                     	;# 
   365  001C                     	;# 
   366  008C                     	;# 
   367  008D                     	;# 
   368  008E                     	;# 
   369  0091                     	;# 
   370  0092                     	;# 
   371  0093                     	;# 
   372  0095                     	;# 
   373  0096                     	;# 
   374  0097                     	;# 
   375  0099                     	;# 
   376  009A                     	;# 
   377  009B                     	;# 
   378  009B                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  0116                     	;# 
   387  0117                     	;# 
   388  011D                     	;# 
   389  018C                     	;# 
   390  018D                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0194                     	;# 
   398  0195                     	;# 
   399  0196                     	;# 
   400  0197                     	;# 
   401  020C                     	;# 
   402  020D                     	;# 
   403  0391                     	;# 
   404  0392                     	;# 
   405  0393                     	;# 
   406  0394                     	;# 
   407  0395                     	;# 
   408  0396                     	;# 
   409  0498                     	;# 
   410  0498                     	;# 
   411  0499                     	;# 
   412  049A                     	;# 
   413  049B                     	;# 
   414  049B                     	;# 
   415  049C                     	;# 
   416  049D                     	;# 
   417  049E                     	;# 
   418  049F                     	;# 
   419  0611                     	;# 
   420  0612                     	;# 
   421  0613                     	;# 
   422  0613                     	;# 
   423  0614                     	;# 
   424  0615                     	;# 
   425  0616                     	;# 
   426  0616                     	;# 
   427  0617                     	;# 
   428  0618                     	;# 
   429  0619                     	;# 
   430  0619                     	;# 
   431  061A                     	;# 
   432  061B                     	;# 
   433  061C                     	;# 
   434  061C                     	;# 
   435  0691                     	;# 
   436  0692                     	;# 
   437  0693                     	;# 
   438  0694                     	;# 
   439  0695                     	;# 
   440  0F0F                     	;# 
   441  0F10                     	;# 
   442  0F11                     	;# 
   443  0F12                     	;# 
   444  0F13                     	;# 
   445  0F14                     	;# 
   446  0F15                     	;# 
   447  0F16                     	;# 
   448  0F17                     	;# 
   449  0F18                     	;# 
   450  0F19                     	;# 
   451  0F1A                     	;# 
   452  0F1B                     	;# 
   453  0F1C                     	;# 
   454  0F1D                     	;# 
   455  0F1E                     	;# 
   456  0F1F                     	;# 
   457  0FE3                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000D                     	;# 
   483  000E                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0013                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  0091                     	;# 
   500  0092                     	;# 
   501  0093                     	;# 
   502  0095                     	;# 
   503  0096                     	;# 
   504  0097                     	;# 
   505  0099                     	;# 
   506  009A                     	;# 
   507  009B                     	;# 
   508  009B                     	;# 
   509  009C                     	;# 
   510  009D                     	;# 
   511  009E                     	;# 
   512  009F                     	;# 
   513  010C                     	;# 
   514  010D                     	;# 
   515  010E                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  011D                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  018E                     	;# 
   522  0191                     	;# 
   523  0191                     	;# 
   524  0192                     	;# 
   525  0193                     	;# 
   526  0193                     	;# 
   527  0194                     	;# 
   528  0195                     	;# 
   529  0196                     	;# 
   530  0197                     	;# 
   531  020C                     	;# 
   532  020D                     	;# 
   533  0391                     	;# 
   534  0392                     	;# 
   535  0393                     	;# 
   536  0394                     	;# 
   537  0395                     	;# 
   538  0396                     	;# 
   539  0498                     	;# 
   540  0498                     	;# 
   541  0499                     	;# 
   542  049A                     	;# 
   543  049B                     	;# 
   544  049B                     	;# 
   545  049C                     	;# 
   546  049D                     	;# 
   547  049E                     	;# 
   548  049F                     	;# 
   549  0611                     	;# 
   550  0612                     	;# 
   551  0613                     	;# 
   552  0613                     	;# 
   553  0614                     	;# 
   554  0615                     	;# 
   555  0616                     	;# 
   556  0616                     	;# 
   557  0617                     	;# 
   558  0618                     	;# 
   559  0619                     	;# 
   560  0619                     	;# 
   561  061A                     	;# 
   562  061B                     	;# 
   563  061C                     	;# 
   564  061C                     	;# 
   565  0691                     	;# 
   566  0692                     	;# 
   567  0693                     	;# 
   568  0694                     	;# 
   569  0695                     	;# 
   570  0F0F                     	;# 
   571  0F10                     	;# 
   572  0F11                     	;# 
   573  0F12                     	;# 
   574  0F13                     	;# 
   575  0F14                     	;# 
   576  0F15                     	;# 
   577  0F16                     	;# 
   578  0F17                     	;# 
   579  0F18                     	;# 
   580  0F19                     	;# 
   581  0F1A                     	;# 
   582  0F1B                     	;# 
   583  0F1C                     	;# 
   584  0F1D                     	;# 
   585  0F1E                     	;# 
   586  0F1F                     	;# 
   587  0FE3                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0011                     	;# 
   615  0012                     	;# 
   616  0013                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0091                     	;# 
   630  0092                     	;# 
   631  0093                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  009F                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  020C                     	;# 
   662  020D                     	;# 
   663  0391                     	;# 
   664  0392                     	;# 
   665  0393                     	;# 
   666  0394                     	;# 
   667  0395                     	;# 
   668  0396                     	;# 
   669  0498                     	;# 
   670  0498                     	;# 
   671  0499                     	;# 
   672  049A                     	;# 
   673  049B                     	;# 
   674  049B                     	;# 
   675  049C                     	;# 
   676  049D                     	;# 
   677  049E                     	;# 
   678  049F                     	;# 
   679  0611                     	;# 
   680  0612                     	;# 
   681  0613                     	;# 
   682  0613                     	;# 
   683  0614                     	;# 
   684  0615                     	;# 
   685  0616                     	;# 
   686  0616                     	;# 
   687  0617                     	;# 
   688  0618                     	;# 
   689  0619                     	;# 
   690  0619                     	;# 
   691  061A                     	;# 
   692  061B                     	;# 
   693  061C                     	;# 
   694  061C                     	;# 
   695  0691                     	;# 
   696  0692                     	;# 
   697  0693                     	;# 
   698  0694                     	;# 
   699  0695                     	;# 
   700  0F0F                     	;# 
   701  0F10                     	;# 
   702  0F11                     	;# 
   703  0F12                     	;# 
   704  0F13                     	;# 
   705  0F14                     	;# 
   706  0F15                     	;# 
   707  0F16                     	;# 
   708  0F17                     	;# 
   709  0F18                     	;# 
   710  0F19                     	;# 
   711  0F1A                     	;# 
   712  0F1B                     	;# 
   713  0F1C                     	;# 
   714  0F1D                     	;# 
   715  0F1E                     	;# 
   716  0F1F                     	;# 
   717  0FE3                     	;# 
   718  0FE4                     	;# 
   719  0FE5                     	;# 
   720  0FE6                     	;# 
   721  0FE7                     	;# 
   722  0FE8                     	;# 
   723  0FE9                     	;# 
   724  0FEA                     	;# 
   725  0FEB                     	;# 
   726  0FED                     	;# 
   727  0FEE                     	;# 
   728  0FEF                     	;# 
   729  0000                     	;# 
   730  0001                     	;# 
   731  0002                     	;# 
   732  0003                     	;# 
   733  0004                     	;# 
   734  0005                     	;# 
   735  0006                     	;# 
   736  0007                     	;# 
   737  0008                     	;# 
   738  0009                     	;# 
   739  000A                     	;# 
   740  000B                     	;# 
   741  000C                     	;# 
   742  000D                     	;# 
   743  000E                     	;# 
   744  0011                     	;# 
   745  0012                     	;# 
   746  0013                     	;# 
   747  0015                     	;# 
   748  0016                     	;# 
   749  0016                     	;# 
   750  0017                     	;# 
   751  0018                     	;# 
   752  0019                     	;# 
   753  001A                     	;# 
   754  001B                     	;# 
   755  001C                     	;# 
   756  008C                     	;# 
   757  008D                     	;# 
   758  008E                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0093                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  009F                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010E                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  011D                     	;# 
   779  018C                     	;# 
   780  018D                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0197                     	;# 
   791  020C                     	;# 
   792  020D                     	;# 
   793  0391                     	;# 
   794  0392                     	;# 
   795  0393                     	;# 
   796  0394                     	;# 
   797  0395                     	;# 
   798  0396                     	;# 
   799  0498                     	;# 
   800  0498                     	;# 
   801  0499                     	;# 
   802  049A                     	;# 
   803  049B                     	;# 
   804  049B                     	;# 
   805  049C                     	;# 
   806  049D                     	;# 
   807  049E                     	;# 
   808  049F                     	;# 
   809  0611                     	;# 
   810  0612                     	;# 
   811  0613                     	;# 
   812  0613                     	;# 
   813  0614                     	;# 
   814  0615                     	;# 
   815  0616                     	;# 
   816  0616                     	;# 
   817  0617                     	;# 
   818  0618                     	;# 
   819  0619                     	;# 
   820  0619                     	;# 
   821  061A                     	;# 
   822  061B                     	;# 
   823  061C                     	;# 
   824  061C                     	;# 
   825  0691                     	;# 
   826  0692                     	;# 
   827  0693                     	;# 
   828  0694                     	;# 
   829  0695                     	;# 
   830  0F0F                     	;# 
   831  0F10                     	;# 
   832  0F11                     	;# 
   833  0F12                     	;# 
   834  0F13                     	;# 
   835  0F14                     	;# 
   836  0F15                     	;# 
   837  0F16                     	;# 
   838  0F17                     	;# 
   839  0F18                     	;# 
   840  0F19                     	;# 
   841  0F1A                     	;# 
   842  0F1B                     	;# 
   843  0F1C                     	;# 
   844  0F1D                     	;# 
   845  0F1E                     	;# 
   846  0F1F                     	;# 
   847  0FE3                     	;# 
   848  0FE4                     	;# 
   849  0FE5                     	;# 
   850  0FE6                     	;# 
   851  0FE7                     	;# 
   852  0FE8                     	;# 
   853  0FE9                     	;# 
   854  0FEA                     	;# 
   855  0FEB                     	;# 
   856  0FED                     	;# 
   857  0FEE                     	;# 
   858  0FEF                     	;# 
   859  0000                     	;# 
   860  0001                     	;# 
   861  0002                     	;# 
   862  0003                     	;# 
   863  0004                     	;# 
   864  0005                     	;# 
   865  0006                     	;# 
   866  0007                     	;# 
   867  0008                     	;# 
   868  0009                     	;# 
   869  000A                     	;# 
   870  000B                     	;# 
   871  000C                     	;# 
   872  000D                     	;# 
   873  000E                     	;# 
   874  0011                     	;# 
   875  0012                     	;# 
   876  0013                     	;# 
   877  0015                     	;# 
   878  0016                     	;# 
   879  0016                     	;# 
   880  0017                     	;# 
   881  0018                     	;# 
   882  0019                     	;# 
   883  001A                     	;# 
   884  001B                     	;# 
   885  001C                     	;# 
   886  008C                     	;# 
   887  008D                     	;# 
   888  008E                     	;# 
   889  0091                     	;# 
   890  0092                     	;# 
   891  0093                     	;# 
   892  0095                     	;# 
   893  0096                     	;# 
   894  0097                     	;# 
   895  0099                     	;# 
   896  009A                     	;# 
   897  009B                     	;# 
   898  009B                     	;# 
   899  009C                     	;# 
   900  009D                     	;# 
   901  009E                     	;# 
   902  009F                     	;# 
   903  010C                     	;# 
   904  010D                     	;# 
   905  010E                     	;# 
   906  0116                     	;# 
   907  0117                     	;# 
   908  011D                     	;# 
   909  018C                     	;# 
   910  018D                     	;# 
   911  018E                     	;# 
   912  0191                     	;# 
   913  0191                     	;# 
   914  0192                     	;# 
   915  0193                     	;# 
   916  0193                     	;# 
   917  0194                     	;# 
   918  0195                     	;# 
   919  0196                     	;# 
   920  0197                     	;# 
   921  020C                     	;# 
   922  020D                     	;# 
   923  0391                     	;# 
   924  0392                     	;# 
   925  0393                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  0498                     	;# 
   930  0498                     	;# 
   931  0499                     	;# 
   932  049A                     	;# 
   933  049B                     	;# 
   934  049B                     	;# 
   935  049C                     	;# 
   936  049D                     	;# 
   937  049E                     	;# 
   938  049F                     	;# 
   939  0611                     	;# 
   940  0612                     	;# 
   941  0613                     	;# 
   942  0613                     	;# 
   943  0614                     	;# 
   944  0615                     	;# 
   945  0616                     	;# 
   946  0616                     	;# 
   947  0617                     	;# 
   948  0618                     	;# 
   949  0619                     	;# 
   950  0619                     	;# 
   951  061A                     	;# 
   952  061B                     	;# 
   953  061C                     	;# 
   954  061C                     	;# 
   955  0691                     	;# 
   956  0692                     	;# 
   957  0693                     	;# 
   958  0694                     	;# 
   959  0695                     	;# 
   960  0F0F                     	;# 
   961  0F10                     	;# 
   962  0F11                     	;# 
   963  0F12                     	;# 
   964  0F13                     	;# 
   965  0F14                     	;# 
   966  0F15                     	;# 
   967  0F16                     	;# 
   968  0F17                     	;# 
   969  0F18                     	;# 
   970  0F19                     	;# 
   971  0F1A                     	;# 
   972  0F1B                     	;# 
   973  0F1C                     	;# 
   974  0F1D                     	;# 
   975  0F1E                     	;# 
   976  0F1F                     	;# 
   977  0FE3                     	;# 
   978  0FE4                     	;# 
   979  0FE5                     	;# 
   980  0FE6                     	;# 
   981  0FE7                     	;# 
   982  0FE8                     	;# 
   983  0FE9                     	;# 
   984  0FEA                     	;# 
   985  0FEB                     	;# 
   986  0FED                     	;# 
   987  0FEE                     	;# 
   988  0FEF                     	;# 
   989  0000                     	;# 
   990  0001                     	;# 
   991  0002                     	;# 
   992  0003                     	;# 
   993  0004                     	;# 
   994  0005                     	;# 
   995  0006                     	;# 
   996  0007                     	;# 
   997  0008                     	;# 
   998  0009                     	;# 
   999  000A                     	;# 
  1000  000B                     	;# 
  1001  000C                     	;# 
  1002  000D                     	;# 
  1003  000E                     	;# 
  1004  0011                     	;# 
  1005  0012                     	;# 
  1006  0013                     	;# 
  1007  0015                     	;# 
  1008  0016                     	;# 
  1009  0016                     	;# 
  1010  0017                     	;# 
  1011  0018                     	;# 
  1012  0019                     	;# 
  1013  001A                     	;# 
  1014  001B                     	;# 
  1015  001C                     	;# 
  1016  008C                     	;# 
  1017  008D                     	;# 
  1018  008E                     	;# 
  1019  0091                     	;# 
  1020  0092                     	;# 
  1021  0093                     	;# 
  1022  0095                     	;# 
  1023  0096                     	;# 
  1024  0097                     	;# 
  1025  0099                     	;# 
  1026  009A                     	;# 
  1027  009B                     	;# 
  1028  009B                     	;# 
  1029  009C                     	;# 
  1030  009D                     	;# 
  1031  009E                     	;# 
  1032  009F                     	;# 
  1033  010C                     	;# 
  1034  010D                     	;# 
  1035  010E                     	;# 
  1036  0116                     	;# 
  1037  0117                     	;# 
  1038  011D                     	;# 
  1039  018C                     	;# 
  1040  018D                     	;# 
  1041  018E                     	;# 
  1042  0191                     	;# 
  1043  0191                     	;# 
  1044  0192                     	;# 
  1045  0193                     	;# 
  1046  0193                     	;# 
  1047  0194                     	;# 
  1048  0195                     	;# 
  1049  0196                     	;# 
  1050  0197                     	;# 
  1051  020C                     	;# 
  1052  020D                     	;# 
  1053  0391                     	;# 
  1054  0392                     	;# 
  1055  0393                     	;# 
  1056  0394                     	;# 
  1057  0395                     	;# 
  1058  0396                     	;# 
  1059  0498                     	;# 
  1060  0498                     	;# 
  1061  0499                     	;# 
  1062  049A                     	;# 
  1063  049B                     	;# 
  1064  049B                     	;# 
  1065  049C                     	;# 
  1066  049D                     	;# 
  1067  049E                     	;# 
  1068  049F                     	;# 
  1069  0611                     	;# 
  1070  0612                     	;# 
  1071  0613                     	;# 
  1072  0613                     	;# 
  1073  0614                     	;# 
  1074  0615                     	;# 
  1075  0616                     	;# 
  1076  0616                     	;# 
  1077  0617                     	;# 
  1078  0618                     	;# 
  1079  0619                     	;# 
  1080  0619                     	;# 
  1081  061A                     	;# 
  1082  061B                     	;# 
  1083  061C                     	;# 
  1084  061C                     	;# 
  1085  0691                     	;# 
  1086  0692                     	;# 
  1087  0693                     	;# 
  1088  0694                     	;# 
  1089  0695                     	;# 
  1090  0F0F                     	;# 
  1091  0F10                     	;# 
  1092  0F11                     	;# 
  1093  0F12                     	;# 
  1094  0F13                     	;# 
  1095  0F14                     	;# 
  1096  0F15                     	;# 
  1097  0F16                     	;# 
  1098  0F17                     	;# 
  1099  0F18                     	;# 
  1100  0F19                     	;# 
  1101  0F1A                     	;# 
  1102  0F1B                     	;# 
  1103  0F1C                     	;# 
  1104  0F1D                     	;# 
  1105  0F1E                     	;# 
  1106  0F1F                     	;# 
  1107  0FE3                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000D                     	;# 
  1133  000E                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0095                     	;# 
  1153  0096                     	;# 
  1154  0097                     	;# 
  1155  0099                     	;# 
  1156  009A                     	;# 
  1157  009B                     	;# 
  1158  009B                     	;# 
  1159  009C                     	;# 
  1160  009D                     	;# 
  1161  009E                     	;# 
  1162  009F                     	;# 
  1163  010C                     	;# 
  1164  010D                     	;# 
  1165  010E                     	;# 
  1166  0116                     	;# 
  1167  0117                     	;# 
  1168  011D                     	;# 
  1169  018C                     	;# 
  1170  018D                     	;# 
  1171  018E                     	;# 
  1172  0191                     	;# 
  1173  0191                     	;# 
  1174  0192                     	;# 
  1175  0193                     	;# 
  1176  0193                     	;# 
  1177  0194                     	;# 
  1178  0195                     	;# 
  1179  0196                     	;# 
  1180  0197                     	;# 
  1181  020C                     	;# 
  1182  020D                     	;# 
  1183  0391                     	;# 
  1184  0392                     	;# 
  1185  0393                     	;# 
  1186  0394                     	;# 
  1187  0395                     	;# 
  1188  0396                     	;# 
  1189  0498                     	;# 
  1190  0498                     	;# 
  1191  0499                     	;# 
  1192  049A                     	;# 
  1193  049B                     	;# 
  1194  049B                     	;# 
  1195  049C                     	;# 
  1196  049D                     	;# 
  1197  049E                     	;# 
  1198  049F                     	;# 
  1199  0611                     	;# 
  1200  0612                     	;# 
  1201  0613                     	;# 
  1202  0613                     	;# 
  1203  0614                     	;# 
  1204  0615                     	;# 
  1205  0616                     	;# 
  1206  0616                     	;# 
  1207  0617                     	;# 
  1208  0618                     	;# 
  1209  0619                     	;# 
  1210  0619                     	;# 
  1211  061A                     	;# 
  1212  061B                     	;# 
  1213  061C                     	;# 
  1214  061C                     	;# 
  1215  0691                     	;# 
  1216  0692                     	;# 
  1217  0693                     	;# 
  1218  0694                     	;# 
  1219  0695                     	;# 
  1220  0F0F                     	;# 
  1221  0F10                     	;# 
  1222  0F11                     	;# 
  1223  0F12                     	;# 
  1224  0F13                     	;# 
  1225  0F14                     	;# 
  1226  0F15                     	;# 
  1227  0F16                     	;# 
  1228  0F17                     	;# 
  1229  0F18                     	;# 
  1230  0F19                     	;# 
  1231  0F1A                     	;# 
  1232  0F1B                     	;# 
  1233  0F1C                     	;# 
  1234  0F1D                     	;# 
  1235  0F1E                     	;# 
  1236  0F1F                     	;# 
  1237  0FE3                     	;# 
  1238  0FE4                     	;# 
  1239  0FE5                     	;# 
  1240  0FE6                     	;# 
  1241  0FE7                     	;# 
  1242  0FE8                     	;# 
  1243  0FE9                     	;# 
  1244  0FEA                     	;# 
  1245  0FEB                     	;# 
  1246  0FED                     	;# 
  1247  0FEE                     	;# 
  1248  0FEF                     	;# 
  1249                           
  1250                           	psect	idataBANK0
  1251  05C3                     __pidataBANK0:
  1252                           
  1253                           ;initializer for _m
  1254  05C3  34E8               	retlw	232
  1255  05C4  3403               	retlw	3
  1256  05C5  3400               	retlw	0
  1257  05C6  3400               	retlw	0
  1258                           
  1259                           ;initializer for main@channel
  1260  05C7  340A               	retlw	10
  1261                           
  1262                           ;initializer for _upperLimit
  1263  05C8  34FF               	retlw	255
  1264  05C9  3403               	retlw	3
  1265  05CA  3400               	retlw	0
  1266  05CB  3400               	retlw	0
  1267                           
  1268                           	psect	stringtext1
  1269  060B                     __pstringtext1:
  1270  060B                     _fixedPointFactor:
  1271  060B  34E8               	retlw	232
  1272  060C  3403               	retlw	3
  1273  060D  3400               	retlw	0
  1274  060E  3400               	retlw	0
  1275  060F                     __end_of_fixedPointFactor:
  1276                           
  1277                           	psect	nvBANK1
  1278  00A0                     __pnvBANK1:
  1279  00A0                     _TMR0_InterruptHandler:
  1280  00A0                     	ds	2
  1281  00A2                     _timer0ReloadVal:
  1282  00A2                     	ds	1
  1283  000C                     _PORTAbits	set	12
  1284  000B                     _INTCONbits	set	11
  1285  0015                     _TMR0	set	21
  1286  001C                     _T2CONbits	set	28
  1287  001C                     _T2CON	set	28
  1288  0011                     _PIR1bits	set	17
  1289  001A                     _TMR2	set	26
  1290  001B                     _PR2	set	27
  1291  0095                     _OPTION_REG	set	149
  1292  0095                     _OPTION_REGbits	set	149
  1293  008E                     _TRISC	set	142
  1294  008D                     _TRISB	set	141
  1295  008C                     _TRISA	set	140
  1296  0097                     _WDTCON	set	151
  1297  0099                     _OSCCON	set	153
  1298  009D                     _ADCON0bits	set	157
  1299  009C                     _ADRESH	set	156
  1300  009B                     _ADRESL	set	155
  1301  009F                     _ADCON2	set	159
  1302  009E                     _ADCON1	set	158
  1303  009D                     _ADCON0	set	157
  1304  010D                     _LATBbits	set	269
  1305  010E                     _LATCbits	set	270
  1306  011D                     _APFCON	set	285
  1307  010E                     _LATC	set	270
  1308  010D                     _LATB	set	269
  1309  010C                     _LATA	set	268
  1310  0116                     _BORCON	set	278
  1311  0196                     _PMCON2	set	406
  1312  0193                     _PMDATL	set	403
  1313  0194                     _PMDATH	set	404
  1314  0195                     _PMCON1bits	set	405
  1315  0192                     _PMADRH	set	402
  1316  0191                     _PMADRL	set	401
  1317  018C                     _ANSELA	set	396
  1318  018D                     _ANSELB	set	397
  1319  018E                     _ANSELC	set	398
  1320  020C                     _WPUA	set	524
  1321  020D                     _WPUB	set	525
  1322  0617                     _PWM3DCL	set	1559
  1323  0618                     _PWM3DCH	set	1560
  1324  0619                     _PWM3CON	set	1561
  1325                           
  1326                           	psect	cinit
  1327  000D                     start_initialization:	
  1328                           ; #config settings
  1329                           
  1330  000D                     __initialization:
  1331                           
  1332                           ; Initialize objects allocated to BANK0
  1333  000D  30C3               	movlw	low __pidataBANK0
  1334  000E  0084               	movwf	4
  1335  000F  3085               	movlw	(high __pidataBANK0)| (0+128)
  1336  0010  0085               	movwf	5
  1337  0011  3067               	movlw	low __pdataBANK0
  1338  0012  0086               	movwf	6
  1339  0013  3000               	movlw	high __pdataBANK0
  1340  0014  0087               	movwf	7
  1341  0015  3009               	movlw	9
  1342  0016  25F3               	fcall	init_ram
  1343                           
  1344                           ; Clear objects allocated to BANK0
  1345  0017  3056               	movlw	low __pbssBANK0
  1346  0018  0084               	movwf	4
  1347  0019  3000               	movlw	high __pbssBANK0
  1348  001A  0085               	movwf	5
  1349  001B  3011               	movlw	17
  1350  001C  25F9               	fcall	clear_ram0
  1351                           
  1352                           ; Clear objects allocated to BANK1
  1353  001D  0021               	movlb	1	; select bank1
  1354  001E  01A3               	clrf	__pbssBANK1& (0+127)
  1355  001F  01A4               	clrf	(__pbssBANK1+1)& (0+127)
  1356  0020  01A5               	clrf	(__pbssBANK1+2)& (0+127)
  1357  0021                     end_of_initialization:	
  1358                           ;End of C runtime variable initialization code
  1359                           
  1360  0021                     __end_of__initialization:
  1361  0021  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1362  0022  0020               	movlb	0
  1363  0023  2824               	ljmp	_main	;jump to C main() function
  1364                           
  1365                           	psect	bssBANK0
  1366  0056                     __pbssBANK0:
  1367  0056                     _lowerLimit:
  1368  0056                     	ds	4
  1369  005A                     _adcValuePosition:
  1370  005A                     	ds	4
  1371  005E                     _msPressed:
  1372  005E                     	ds	2
  1373  0060                     _msTick:
  1374  0060                     	ds	2
  1375  0062                     _ADC_InterruptHandler:
  1376  0062                     	ds	2
  1377  0064                     _currentState:
  1378  0064                     	ds	1
  1379  0065                     _doToggle:
  1380  0065                     	ds	1
  1381  0066                     _doButtonAction:
  1382  0066                     	ds	1
  1383                           
  1384                           	psect	dataBANK0
  1385  0067                     __pdataBANK0:
  1386  0067                     _m:
  1387  0067                     	ds	4
  1388  006B                     main@channel:
  1389  006B                     	ds	1
  1390  006C                     _upperLimit:
  1391  006C                     	ds	4
  1392                           
  1393                           	psect	bssBANK1
  1394  00A3                     __pbssBANK1:
  1395  00A3                     _b:
  1396  00A3                     	ds	3
  1397                           
  1398                           	psect	inittext
  1399  05F3                     init_ram:
  1400  05F3  00FE               	movwf	126
  1401  05F4                     initloop:
  1402  05F4  0012               	moviw fsr0++
  1403  05F5  001E               	movwi fsr1++
  1404  05F6  0BFE               	decfsz	126,f
  1405  05F7  2DF4               	goto	initloop
  1406  05F8  3400               	retlw	0
  1407                           
  1408                           	psect	clrtext
  1409  05F9                     clear_ram0:	
  1410                           ;	Called with FSR0 containing the base address, and
  1411                           ;	WREG with the size to clear
  1412                           
  1413  05F9  0064               	clrwdt	;clear the watchdog before getting into this loop
  1414  05FA                     clrloop0:
  1415  05FA  0180               	clrf	0	;clear RAM location pointed to by FSR
  1416  05FB  3101               	addfsr 0,1
  1417  05FC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1418  05FD  2DFA               	goto	clrloop0	;have we reached the end yet?
  1419  05FE  3400               	retlw	0	;all done for this memory range, return
  1420                           
  1421                           	psect	cstackCOMMON
  1422  0070                     __pcstackCOMMON:
  1423  0070                     ?_PIN_MANAGER_Initialize:
  1424  0070                     ??_PIN_MANAGER_Initialize:	
  1425                           ; 1 bytes @ 0x0
  1426                           
  1427  0070                     ?_OSCILLATOR_Initialize:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430  0070                     ??_OSCILLATOR_Initialize:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433  0070                     ?_WDT_Initialize:	
  1434                           ; 1 bytes @ 0x0
  1435                           
  1436  0070                     ??_WDT_Initialize:	
  1437                           ; 1 bytes @ 0x0
  1438                           
  1439  0070                     ?_PWM3_Initialize:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442  0070                     ??_PWM3_Initialize:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0070                     ?_TMR2_Initialize:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0070                     ??_TMR2_Initialize:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0070                     ?_TMR0_Initialize:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0070                     ?_TMR0_SetInterruptHandler:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0070                     ?_TMR0_DefaultInterruptHandler:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0070                     ??_TMR0_DefaultInterruptHandler:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0070                     ?_TMR0_CallBack:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0070                     ??_TMR0_CallBack:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0070                     ?_FLASH_EraseBlock:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  0070                     ?_setLedsForPositioning:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0070                     ?_ADC_Initialize:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0070                     ??_ADC_Initialize:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0070                     ?_SYSTEM_Initialize:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0070                     ?_TMR2_StartTimer:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ??_TMR2_StartTimer:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ?_TMR0_ISR:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ??_TMR0_ISR:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     ?_INTERRUPT_InterruptManager:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ??_INTERRUPT_InterruptManager:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ?_timer0CallBack:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ??_timer0CallBack:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_setState:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_main:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_ADC_GetConversion:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_FLASH_ReadWord:	
  1518                           ; 2 bytes @ 0x0
  1519                           
  1520  0070                     ?___tmul:	
  1521                           ; 2 bytes @ 0x0
  1522                           
  1523  0070                     ?___lmul:	
  1524                           ; 3 bytes @ 0x0
  1525                           
  1526  0070                     ?___lldiv:	
  1527                           ; 4 bytes @ 0x0
  1528                           
  1529  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1530                           ; 4 bytes @ 0x0
  1531                           
  1532  0070                     FLASH_ReadWord@flashAddr:	
  1533                           ; 2 bytes @ 0x0
  1534                           
  1535  0070                     FLASH_EraseBlock@startAddr:	
  1536                           ; 2 bytes @ 0x0
  1537                           
  1538  0070                     ___tmul@multiplier:	
  1539                           ; 2 bytes @ 0x0
  1540                           
  1541  0070                     setLedsForPositioning@adcValue:	
  1542                           ; 3 bytes @ 0x0
  1543                           
  1544  0070                     ___lmul@multiplier:	
  1545                           ; 4 bytes @ 0x0
  1546                           
  1547  0070                     ___lldiv@divisor:	
  1548                           ; 4 bytes @ 0x0
  1549                           
  1550                           
  1551                           ; 4 bytes @ 0x0
  1552  0070                     	ds	2
  1553  0072                     ??_TMR0_Initialize:
  1554  0072                     ??_TMR0_SetInterruptHandler:	
  1555                           ; 1 bytes @ 0x2
  1556                           
  1557  0072                     ??_FLASH_EraseBlock:	
  1558                           ; 1 bytes @ 0x2
  1559                           
  1560  0072                     ??_ADC_GetConversion:	
  1561                           ; 1 bytes @ 0x2
  1562                           
  1563  0072                     ??_FLASH_ReadWord:	
  1564                           ; 1 bytes @ 0x2
  1565                           
  1566  0072                     FLASH_ReadWord@GIEBitValue:	
  1567                           ; 1 bytes @ 0x2
  1568                           
  1569  0072                     FLASH_EraseBlock@GIEBitValue:	
  1570                           ; 1 bytes @ 0x2
  1571                           
  1572                           
  1573                           ; 1 bytes @ 0x2
  1574  0072                     	ds	1
  1575  0073                     ?_FLASH_WriteBlock:
  1576  0073                     ??_SYSTEM_Initialize:	
  1577                           ; 1 bytes @ 0x3
  1578                           
  1579  0073                     ADC_GetConversion@channel:	
  1580                           ; 1 bytes @ 0x3
  1581                           
  1582  0073                     FLASH_WriteBlock@writeAddr:	
  1583                           ; 1 bytes @ 0x3
  1584                           
  1585  0073                     ___tmul@multiplicand:	
  1586                           ; 2 bytes @ 0x3
  1587                           
  1588                           
  1589                           ; 3 bytes @ 0x3
  1590  0073                     	ds	1
  1591  0074                     ??_setLedsForPositioning:
  1592  0074                     ?_PWM3_LoadDutyValue:	
  1593                           ; 1 bytes @ 0x4
  1594                           
  1595  0074                     PWM3_LoadDutyValue@dutyValue:	
  1596                           ; 1 bytes @ 0x4
  1597                           
  1598  0074                     ___lmul@multiplicand:	
  1599                           ; 2 bytes @ 0x4
  1600                           
  1601  0074                     ___lldiv@dividend:	
  1602                           ; 4 bytes @ 0x4
  1603                           
  1604                           
  1605                           ; 4 bytes @ 0x4
  1606  0074                     	ds	1
  1607  0075                     FLASH_WriteBlock@flashWordArray:
  1608                           
  1609                           ; 1 bytes @ 0x5
  1610  0075                     	ds	1
  1611  0076                     ??_FLASH_WriteBlock:
  1612  0076                     ??_PWM3_LoadDutyValue:	
  1613                           ; 1 bytes @ 0x6
  1614                           
  1615  0076                     ??___tmul:	
  1616                           ; 1 bytes @ 0x6
  1617                           
  1618  0076                     ___tmul@product:	
  1619                           ; 1 bytes @ 0x6
  1620                           
  1621                           
  1622                           ; 3 bytes @ 0x6
  1623  0076                     	ds	2
  1624  0078                     ??___lmul:
  1625  0078                     ??___lldiv:	
  1626                           ; 1 bytes @ 0x8
  1627                           
  1628  0078                     ___lmul@product:	
  1629                           ; 1 bytes @ 0x8
  1630                           
  1631                           
  1632                           ; 4 bytes @ 0x8
  1633  0078                     	ds	1
  1634  0079                     FLASH_WriteBlock@blockStartAddr:
  1635  0079                     ___lldiv@quotient:	
  1636                           ; 2 bytes @ 0x9
  1637                           
  1638                           
  1639                           ; 4 bytes @ 0x9
  1640  0079                     	ds	2
  1641  007B                     FLASH_WriteBlock@GIEBitValue:
  1642                           
  1643                           ; 1 bytes @ 0xB
  1644  007B                     	ds	1
  1645  007C                     ??___aldiv:
  1646  007C                     FLASH_WriteBlock@i:	
  1647                           ; 1 bytes @ 0xC
  1648                           
  1649                           
  1650                           ; 1 bytes @ 0xC
  1651  007C                     	ds	1
  1652  007D                     ___lldiv@counter:
  1653                           
  1654                           ; 1 bytes @ 0xD
  1655  007D                     	ds	1
  1656                           
  1657                           	psect	cstackBANK0
  1658  0020                     __pcstackBANK0:
  1659  0020                     ??_setState:
  1660  0020                     ?___aldiv:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0020                     ___aldiv@divisor:	
  1664                           ; 4 bytes @ 0x0
  1665                           
  1666                           
  1667                           ; 4 bytes @ 0x0
  1668  0020                     	ds	4
  1669  0024                     setState@newState:
  1670  0024                     ___aldiv@dividend:	
  1671                           ; 1 bytes @ 0x4
  1672                           
  1673                           
  1674                           ; 4 bytes @ 0x4
  1675  0024                     	ds	4
  1676  0028                     ___aldiv@counter:
  1677                           
  1678                           ; 1 bytes @ 0x8
  1679  0028                     	ds	1
  1680  0029                     ___aldiv@sign:
  1681                           
  1682                           ; 1 bytes @ 0x9
  1683  0029                     	ds	1
  1684  002A                     ___aldiv@quotient:
  1685                           
  1686                           ; 4 bytes @ 0xA
  1687  002A                     	ds	4
  1688  002E                     ??_main:
  1689                           
  1690                           ; 1 bytes @ 0xE
  1691  002E                     	ds	8
  1692  0036                     main@wrBlockData:
  1693                           
  1694                           ; 32 bytes @ 0x16
  1695  0036                     	ds	32
  1696                           
  1697                           	psect	maintext
  1698  0024                     __pmaintext:	
  1699 ;;
  1700 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1701 ;;
  1702 ;; *************** function _main *****************
  1703 ;; Defined at:
  1704 ;;		line 159 in file "main.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;		None
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  wrBlockData    32   22[BANK0 ] unsigned short [16]
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : B1F/0
  1715 ;;		On exit  : 1F/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1
  1718 ;;      Params:         0       0       0
  1719 ;;      Locals:         0      32       0
  1720 ;;      Temps:          0       8       0
  1721 ;;      Totals:         0      40       0
  1722 ;;Total ram usage:       40 bytes
  1723 ;; Hardware stack levels required when called:    7
  1724 ;; This function calls:
  1725 ;;		_ADC_GetConversion
  1726 ;;		_FLASH_WriteBlock
  1727 ;;		_PWM3_LoadDutyValue
  1728 ;;		_SYSTEM_Initialize
  1729 ;;		_TMR0_SetInterruptHandler
  1730 ;;		_TMR2_StartTimer
  1731 ;;		___aldiv
  1732 ;;		___lmul
  1733 ;;		_setLedsForPositioning
  1734 ;;		_setState
  1735 ;; This function is called by:
  1736 ;;		Startup code after reset
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           
  1741                           ;psect for function _main
  1742  0024                     _main:
  1743                           
  1744                           ;main.c: 162:     SYSTEM_Initialize();
  1745                           
  1746                           ;incstack = 0
  1747                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1748  0024  25CC               	fcall	_SYSTEM_Initialize
  1749                           
  1750                           ;main.c: 165:     (INTCONbits.GIE = 1);
  1751  0025  178B               	bsf	11,7	;volatile
  1752                           
  1753                           ;main.c: 167:     setState(STATE_NORMAL);
  1754  0026  3000               	movlw	0
  1755  0027  22CC               	fcall	_setState
  1756                           
  1757                           ;main.c: 170:     TMR0_SetInterruptHandler(timer0CallBack);
  1758  0028  30A7               	movlw	low _timer0CallBack
  1759  0029  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1760  002A  3005               	movlw	high _timer0CallBack
  1761  002B  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1762  002C  25FF               	fcall	_TMR0_SetInterruptHandler
  1763                           
  1764                           ;main.c: 171:     TMR2_StartTimer();
  1765  002D  2613               	fcall	_TMR2_StartTimer
  1766  002E                     l1864:
  1767                           
  1768                           ;main.c: 174:     {;main.c: 175:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 178:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1769  002E  3003               	movlw	3
  1770  002F  0020               	movlb	0	; select bank0
  1771  0030  066B               	xorwf	main@channel,w
  1772  0031  1903               	btfsc	3,2
  1773  0032  2835               	goto	l1868
  1774  0033  3003               	movlw	3
  1775  0034  2836               	goto	L1
  1776  0035                     l1868:
  1777  0035  300A               	movlw	10
  1778  0036                     L1:
  1779  0036  00AE               	movwf	??_main
  1780  0037  082E               	movf	??_main,w
  1781  0038  00EB               	movwf	main@channel
  1782                           
  1783                           ;main.c: 183:         if(channel == channelRudder)
  1784  0039  3003               	movlw	3
  1785  003A  066B               	xorwf	main@channel,w
  1786  003B  1D03               	btfss	3,2
  1787  003C  2847               	goto	l1874
  1788                           
  1789                           ;main.c: 184:         {;main.c: 185:             adcValuePosition = ADC_GetConversion(ch
      +                          annel);
  1790  003D  086B               	movf	main@channel,w
  1791  003E  2564               	fcall	_ADC_GetConversion
  1792  003F  0870               	movf	?_ADC_GetConversion,w
  1793  0040  0020               	movlb	0	; select bank0
  1794  0041  00DA               	movwf	_adcValuePosition
  1795  0042  0871               	movf	?_ADC_GetConversion+1,w
  1796  0043  00DB               	movwf	_adcValuePosition+1
  1797  0044  01DC               	clrf	_adcValuePosition+2
  1798  0045  01DD               	clrf	_adcValuePosition+3
  1799                           
  1800                           ;main.c: 186:         }
  1801  0046  284E               	goto	l1876
  1802  0047                     l1874:
  1803                           
  1804                           ;main.c: 188:         {;main.c: 190:             PWM3_LoadDutyValue(ADC_GetConversion(ch
      +                          annel));
  1805  0047  086B               	movf	main@channel,w
  1806  0048  2564               	fcall	_ADC_GetConversion
  1807  0049  0871               	movf	?_ADC_GetConversion+1,w
  1808  004A  00F5               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1809  004B  0870               	movf	?_ADC_GetConversion,w
  1810  004C  00F4               	movwf	PWM3_LoadDutyValue@dutyValue
  1811  004D  257C               	fcall	_PWM3_LoadDutyValue
  1812  004E                     l1876:
  1813                           
  1814                           ;main.c: 195:         if(!PORTAbits.RA5 && !doButtonAction)
  1815  004E  0020               	movlb	0	; select bank0
  1816  004F  1A8C               	btfsc	12,5	;volatile
  1817  0050  2866               	goto	l1886
  1818  0051  0866               	movf	_doButtonAction,w	;volatile
  1819  0052  1D03               	btfss	3,2
  1820  0053  2866               	goto	l1886
  1821                           
  1822                           ;main.c: 196:         {;main.c: 197:             msPressed++;
  1823  0054  3001               	movlw	1
  1824  0055  07DE               	addwf	_msPressed,f	;volatile
  1825  0056  3000               	movlw	0
  1826  0057  3DDF               	addwfc	_msPressed+1,f	;volatile
  1827                           
  1828                           ;main.c: 199:             if(msPressed > 3000)
  1829  0058  300B               	movlw	11
  1830  0059  025F               	subwf	_msPressed+1,w	;volatile
  1831  005A  30B9               	movlw	185
  1832  005B  1903               	skipnz
  1833  005C  025E               	subwf	_msPressed,w	;volatile
  1834  005D  1C03               	skipc
  1835  005E  2863               	goto	l1884
  1836                           
  1837                           ;main.c: 200:             {;main.c: 201:                 doButtonAction = 1;
  1838  005F  3001               	movlw	1
  1839  0060  00AE               	movwf	??_main
  1840  0061  082E               	movf	??_main,w
  1841  0062  00E6               	movwf	_doButtonAction	;volatile
  1842  0063                     l1884:
  1843  0063  0022               	movlb	2	; select bank2
  1844  0064  168E               	bsf	14,5	;volatile
  1845  0065  286A               	goto	l1890
  1846  0066                     l1886:
  1847                           
  1848                           ;main.c: 206:         {;main.c: 207:             msPressed = 0;
  1849  0066  01DE               	clrf	_msPressed	;volatile
  1850  0067  01DF               	clrf	_msPressed+1	;volatile
  1851  0068  0022               	movlb	2	; select bank2
  1852  0069  128E               	bcf	14,5	;volatile
  1853  006A                     l1890:
  1854                           
  1855                           ;main.c: 213:         if(doButtonAction)
  1856  006A  0020               	movlb	0	; select bank0
  1857  006B  0866               	movf	_doButtonAction,w	;volatile
  1858  006C  1903               	btfsc	3,2
  1859  006D  2980               	goto	l1930
  1860  006E                     l299:	
  1861                           ;main.c: 217:             {;main.c: 219:             }
  1862                           
  1863                           
  1864                           ;main.c: 216:             while(!PORTAbits.RA5)
  1865  006E  1A8C               	btfsc	12,5	;volatile
  1866  006F  28A3               	goto	l1908
  1867  0070  286E               	goto	l299
  1868  0071                     l1894:
  1869                           
  1870                           ;main.c: 226:                     setState(STATE_TEACH_LEFT);
  1871  0071  3001               	movlw	1
  1872  0072  22CC               	fcall	_setState
  1873                           
  1874                           ;main.c: 227:                     break;
  1875  0073  28B6               	goto	l1910
  1876  0074                     l1896:
  1877                           
  1878                           ;main.c: 230:                     lowerLimit = adcValuePosition;
  1879  0074  085D               	movf	_adcValuePosition+3,w
  1880  0075  00D9               	movwf	_lowerLimit+3
  1881  0076  085C               	movf	_adcValuePosition+2,w
  1882  0077  00D8               	movwf	_lowerLimit+2
  1883  0078  085B               	movf	_adcValuePosition+1,w
  1884  0079  00D7               	movwf	_lowerLimit+1
  1885  007A  085A               	movf	_adcValuePosition,w
  1886  007B  00D6               	movwf	_lowerLimit
  1887                           
  1888                           ;main.c: 232:                     setState(STATE_TEACH_RIGHT);
  1889  007C  3002               	movlw	2
  1890  007D  22CC               	fcall	_setState
  1891                           
  1892                           ;main.c: 233:                     break;
  1893  007E  28B6               	goto	l1910
  1894  007F                     l1900:
  1895                           
  1896                           ;main.c: 236:                 {;main.c: 237:                     upperLimit = adcValuePo
      +                          sition;
  1897  007F  085D               	movf	_adcValuePosition+3,w
  1898  0080  00EF               	movwf	_upperLimit+3
  1899  0081  085C               	movf	_adcValuePosition+2,w
  1900  0082  00EE               	movwf	_upperLimit+2
  1901  0083  085B               	movf	_adcValuePosition+1,w
  1902  0084  00ED               	movwf	_upperLimit+1
  1903  0085  085A               	movf	_adcValuePosition,w
  1904  0086  00EC               	movwf	_upperLimit
  1905                           
  1906                           ;main.c: 243:                     uint16_t wrBlockData[16];;main.c: 246:                
      +                               wrBlockData[16 -1] = (uint16_t)(upperLimit);
  1907  0087  086D               	movf	_upperLimit+1,w
  1908  0088  00D5               	movwf	main@wrBlockData+31
  1909  0089  086C               	movf	_upperLimit,w
  1910  008A  00D4               	movwf	main@wrBlockData+30
  1911                           
  1912                           ;main.c: 247:                     wrBlockData[16 -2] = (uint16_t)(upperLimit >> 16);
  1913  008B  086F               	movf	_upperLimit+3,w
  1914  008C  00D3               	movwf	main@wrBlockData+29
  1915  008D  086E               	movf	_upperLimit+2,w
  1916  008E  00D2               	movwf	main@wrBlockData+28
  1917                           
  1918                           ;main.c: 248:                     wrBlockData[16 -3] = (uint16_t)(lowerLimit);
  1919  008F  0857               	movf	_lowerLimit+1,w
  1920  0090  00D1               	movwf	main@wrBlockData+27
  1921  0091  0856               	movf	_lowerLimit,w
  1922  0092  00D0               	movwf	main@wrBlockData+26
  1923                           
  1924                           ;main.c: 249:                     wrBlockData[16 -4] = (uint16_t)(lowerLimit >> 16);
  1925  0093  0859               	movf	_lowerLimit+3,w
  1926  0094  00CF               	movwf	main@wrBlockData+25
  1927  0095  0858               	movf	_lowerLimit+2,w
  1928  0096  00CE               	movwf	main@wrBlockData+24
  1929                           
  1930                           ;main.c: 252:                     FLASH_WriteBlock((uint16_t)( 0x800 -16 -1), (uint16_t*
      +                          )wrBlockData);
  1931  0097  30EF               	movlw	239
  1932  0098  00F3               	movwf	FLASH_WriteBlock@writeAddr
  1933  0099  3007               	movlw	7
  1934  009A  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  1935  009B  3036               	movlw	(low (main@wrBlockData| 0))& (0+255)
  1936  009C  00AE               	movwf	??_main
  1937  009D  082E               	movf	??_main,w
  1938  009E  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  1939  009F  241C               	fcall	_FLASH_WriteBlock
  1940                           
  1941                           ;main.c: 254:                     setState(STATE_NORMAL);
  1942  00A0  3000               	movlw	0
  1943  00A1  22CC               	fcall	_setState
  1944                           
  1945                           ;main.c: 255:                     break;
  1946  00A2  28B6               	goto	l1910
  1947  00A3                     l1908:
  1948  00A3  0864               	movf	_currentState,w
  1949  00A4  00AE               	movwf	??_main
  1950  00A5  01AF               	clrf	??_main+1
  1951                           
  1952                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1953                           ; Switch size 1, requested type "simple"
  1954                           ; Number of cases is 1, Range of values is 0 to 0
  1955                           ; switch strategies available:
  1956                           ; Name         Instructions Cycles
  1957                           ; simple_byte            4     3 (average)
  1958                           ; direct_byte            8     6 (fixed)
  1959                           ; jumptable            260     6 (fixed)
  1960                           ;	Chosen strategy is simple_byte
  1961  00A6  082F               	movf	??_main+1,w
  1962  00A7  3A00               	xorlw	0	; case 0
  1963  00A8  1903               	skipnz
  1964  00A9  28AB               	goto	l2024
  1965  00AA  28B6               	goto	l1910
  1966  00AB                     l2024:
  1967                           
  1968                           ; Switch size 1, requested type "simple"
  1969                           ; Number of cases is 3, Range of values is 0 to 2
  1970                           ; switch strategies available:
  1971                           ; Name         Instructions Cycles
  1972                           ; simple_byte           10     6 (average)
  1973                           ; direct_byte           12     6 (fixed)
  1974                           ; jumptable            260     6 (fixed)
  1975                           ;	Chosen strategy is simple_byte
  1976  00AB  082E               	movf	??_main,w
  1977  00AC  3A00               	xorlw	0	; case 0
  1978  00AD  1903               	skipnz
  1979  00AE  2871               	goto	l1894
  1980  00AF  3A01               	xorlw	1	; case 1
  1981  00B0  1903               	skipnz
  1982  00B1  2874               	goto	l1896
  1983  00B2  3A03               	xorlw	3	; case 2
  1984  00B3  1903               	skipnz
  1985  00B4  287F               	goto	l1900
  1986  00B5  28B6               	goto	l1910
  1987  00B6                     l1910:
  1988                           
  1989                           ;main.c: 259:             doButtonAction = 0;
  1990  00B6  01E6               	clrf	_doButtonAction	;volatile
  1991  00B7  2980               	goto	l1930
  1992  00B8                     l1912:
  1993                           
  1994                           ;main.c: 267:                 if(channel == channelBrightness)
  1995  00B8  300A               	movlw	10
  1996  00B9  066B               	xorwf	main@channel,w
  1997  00BA  1D03               	btfss	3,2
  1998  00BB  282E               	goto	l1864
  1999                           
  2000                           ;main.c: 268:                 {;main.c: 269:                     adcValuePosition = (adc
      +                          ValuePosition*m-b)/fixedPointFactor;
  2001  00BC  3000               	movlw	0
  2002  00BD  00A3               	movwf	___aldiv@divisor+3
  2003  00BE  3000               	movlw	0
  2004  00BF  00A2               	movwf	___aldiv@divisor+2
  2005  00C0  3003               	movlw	3
  2006  00C1  00A1               	movwf	___aldiv@divisor+1
  2007  00C2  30E8               	movlw	232
  2008  00C3  00A0               	movwf	___aldiv@divisor
  2009  00C4  0021               	movlb	1	; select bank1
  2010  00C5  0823               	movf	_b^(0+128),w
  2011  00C6  0020               	movlb	0	; select bank0
  2012  00C7  00AE               	movwf	??_main
  2013  00C8  0021               	movlb	1	; select bank1
  2014  00C9  0824               	movf	(_b+1)^(0+128),w
  2015  00CA  0020               	movlb	0	; select bank0
  2016  00CB  00AF               	movwf	??_main+1
  2017  00CC  0021               	movlb	1	; select bank1
  2018  00CD  0825               	movf	(_b+2)^(0+128),w
  2019  00CE  0020               	movlb	0	; select bank0
  2020  00CF  00B0               	movwf	??_main+2
  2021  00D0  3000               	movlw	0
  2022  00D1  1BB0               	btfsc	??_main+2,7
  2023  00D2  30FF               	movlw	255
  2024  00D3  00B1               	movwf	??_main+3
  2025  00D4  085D               	movf	_adcValuePosition+3,w
  2026  00D5  00F3               	movwf	___lmul@multiplier+3
  2027  00D6  085C               	movf	_adcValuePosition+2,w
  2028  00D7  00F2               	movwf	___lmul@multiplier+2
  2029  00D8  085B               	movf	_adcValuePosition+1,w
  2030  00D9  00F1               	movwf	___lmul@multiplier+1
  2031  00DA  085A               	movf	_adcValuePosition,w
  2032  00DB  00F0               	movwf	___lmul@multiplier
  2033  00DC  086A               	movf	_m+3,w
  2034  00DD  00F7               	movwf	___lmul@multiplicand+3
  2035  00DE  0869               	movf	_m+2,w
  2036  00DF  00F6               	movwf	___lmul@multiplicand+2
  2037  00E0  0868               	movf	_m+1,w
  2038  00E1  00F5               	movwf	___lmul@multiplicand+1
  2039  00E2  0867               	movf	_m,w
  2040  00E3  00F4               	movwf	___lmul@multiplicand
  2041  00E4  24C2               	fcall	___lmul
  2042  00E5  0870               	movf	?___lmul,w
  2043  00E6  00B2               	movwf	??_main+4
  2044  00E7  0871               	movf	?___lmul+1,w
  2045  00E8  00B3               	movwf	??_main+5
  2046  00E9  0872               	movf	?___lmul+2,w
  2047  00EA  00B4               	movwf	??_main+6
  2048  00EB  0873               	movf	?___lmul+3,w
  2049  00EC  00B5               	movwf	??_main+7
  2050  00ED  082E               	movf	??_main,w
  2051  00EE  02B2               	subwf	??_main+4,f
  2052  00EF  082F               	movf	??_main+1,w
  2053  00F0  3BB3               	subwfb	??_main+5,f
  2054  00F1  0830               	movf	??_main+2,w
  2055  00F2  3BB4               	subwfb	??_main+6,f
  2056  00F3  0831               	movf	??_main+3,w
  2057  00F4  3BB5               	subwfb	??_main+7,f
  2058  00F5  0835               	movf	??_main+7,w
  2059  00F6  00A7               	movwf	___aldiv@dividend+3
  2060  00F7  0834               	movf	??_main+6,w
  2061  00F8  00A6               	movwf	___aldiv@dividend+2
  2062  00F9  0833               	movf	??_main+5,w
  2063  00FA  00A5               	movwf	___aldiv@dividend+1
  2064  00FB  0832               	movf	??_main+4,w
  2065  00FC  00A4               	movwf	___aldiv@dividend
  2066  00FD  239B               	fcall	___aldiv
  2067  00FE  0823               	movf	?___aldiv+3,w
  2068  00FF  00DD               	movwf	_adcValuePosition+3
  2069  0100  0822               	movf	?___aldiv+2,w
  2070  0101  00DC               	movwf	_adcValuePosition+2
  2071  0102  0821               	movf	?___aldiv+1,w
  2072  0103  00DB               	movwf	_adcValuePosition+1
  2073  0104  0820               	movf	?___aldiv,w
  2074  0105  00DA               	movwf	_adcValuePosition
  2075                           
  2076                           ;main.c: 270:                     setLedsForPositioning(adcValuePosition);
  2077  0106  085D               	movf	_adcValuePosition+3,w
  2078  0107  00F3               	movwf	setLedsForPositioning@adcValue+3
  2079  0108  085C               	movf	_adcValuePosition+2,w
  2080  0109  00F2               	movwf	setLedsForPositioning@adcValue+2
  2081  010A  085B               	movf	_adcValuePosition+1,w
  2082  010B  00F1               	movwf	setLedsForPositioning@adcValue+1
  2083  010C  085A               	movf	_adcValuePosition,w
  2084  010D  00F0               	movwf	setLedsForPositioning@adcValue
  2085  010E  2194               	fcall	_setLedsForPositioning
  2086  010F  282E               	goto	l1864
  2087  0110                     l1916:
  2088                           
  2089                           ;main.c: 275:                 if(doToggle)
  2090  0110  0865               	movf	_doToggle,w
  2091  0111  1903               	btfsc	3,2
  2092  0112  282E               	goto	l1864
  2093  0113  1003               	clrc
  2094  0114  0022               	movlb	2	; select bank2
  2095  0115  1C0E               	btfss	14,0	;volatile
  2096  0116  1403               	setc
  2097  0117  1C03               	btfss	3,0
  2098  0118  291C               	goto	u1500
  2099  0119  0022               	movlb	2	; select bank2
  2100  011A  140E               	bsf	14,0	;volatile
  2101  011B  291E               	goto	l315
  2102  011C                     u1500:
  2103  011C  0022               	movlb	2	; select bank2
  2104  011D  100E               	bcf	14,0	;volatile
  2105  011E                     l315:	
  2106                           ;main.c: 278:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2107                           
  2108  011E  1003               	clrc
  2109  011F  1C8E               	btfss	14,1	;volatile
  2110  0120  1403               	setc
  2111  0121  1C03               	btfss	3,0
  2112  0122  2926               	goto	u1520
  2113  0123  0022               	movlb	2	; select bank2
  2114  0124  148E               	bsf	14,1	;volatile
  2115  0125  2928               	goto	l317
  2116  0126                     u1520:
  2117  0126  0022               	movlb	2	; select bank2
  2118  0127  108E               	bcf	14,1	;volatile
  2119  0128                     l317:	
  2120                           ;main.c: 279:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2121                           
  2122  0128  1003               	clrc
  2123  0129  1D0E               	btfss	14,2	;volatile
  2124  012A  1403               	setc
  2125  012B  1C03               	btfss	3,0
  2126  012C  2930               	goto	u1540
  2127  012D  0022               	movlb	2	; select bank2
  2128  012E  150E               	bsf	14,2	;volatile
  2129  012F  2932               	goto	l319
  2130  0130                     u1540:
  2131  0130  0022               	movlb	2	; select bank2
  2132  0131  110E               	bcf	14,2	;volatile
  2133  0132                     l319:	
  2134                           ;main.c: 280:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2135                           
  2136  0132  1003               	clrc
  2137  0133  1D8E               	btfss	14,3	;volatile
  2138  0134  1403               	setc
  2139  0135  1C03               	btfss	3,0
  2140  0136  293A               	goto	u1560
  2141  0137  0022               	movlb	2	; select bank2
  2142  0138  158E               	bsf	14,3	;volatile
  2143  0139  293C               	goto	l321
  2144  013A                     u1560:
  2145  013A  0022               	movlb	2	; select bank2
  2146  013B  118E               	bcf	14,3	;volatile
  2147  013C                     l321:	
  2148                           ;main.c: 281:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2149                           
  2150  013C  1003               	clrc
  2151  013D  1E0E               	btfss	14,4	;volatile
  2152  013E  1403               	setc
  2153  013F  1C03               	btfss	3,0
  2154  0140  2944               	goto	u1580
  2155  0141  0022               	movlb	2	; select bank2
  2156  0142  160E               	bsf	14,4	;volatile
  2157  0143  2946               	goto	l1920
  2158  0144                     u1580:
  2159  0144  0022               	movlb	2	; select bank2
  2160  0145  120E               	bcf	14,4	;volatile
  2161  0146                     l1920:
  2162                           
  2163                           ;main.c: 282:                     doToggle = 0;
  2164  0146  0020               	movlb	0	; select bank0
  2165  0147  01E5               	clrf	_doToggle
  2166  0148  282E               	goto	l1864
  2167  0149                     l1922:
  2168                           
  2169                           ;main.c: 289:                 if(doToggle)
  2170  0149  0865               	movf	_doToggle,w
  2171  014A  1903               	btfsc	3,2
  2172  014B  282E               	goto	l1864
  2173  014C  1003               	clrc
  2174  014D  0022               	movlb	2	; select bank2
  2175  014E  1F0E               	btfss	14,6	;volatile
  2176  014F  1403               	setc
  2177  0150  1C03               	btfss	3,0
  2178  0151  2955               	goto	u1610
  2179  0152  0022               	movlb	2	; select bank2
  2180  0153  170E               	bsf	14,6	;volatile
  2181  0154  2957               	goto	l327
  2182  0155                     u1610:
  2183  0155  0022               	movlb	2	; select bank2
  2184  0156  130E               	bcf	14,6	;volatile
  2185  0157                     l327:	
  2186                           ;main.c: 292:                     do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2187                           
  2188  0157  1003               	clrc
  2189  0158  1F8E               	btfss	14,7	;volatile
  2190  0159  1403               	setc
  2191  015A  1C03               	btfss	3,0
  2192  015B  295F               	goto	u1630
  2193  015C  0022               	movlb	2	; select bank2
  2194  015D  178E               	bsf	14,7	;volatile
  2195  015E  2961               	goto	l329
  2196  015F                     u1630:
  2197  015F  0022               	movlb	2	; select bank2
  2198  0160  138E               	bcf	14,7	;volatile
  2199  0161                     l329:	
  2200                           ;main.c: 293:                     do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  2201                           
  2202  0161  1003               	clrc
  2203  0162  1E8D               	btfss	13,5	;volatile
  2204  0163  1403               	setc
  2205  0164  1C03               	btfss	3,0
  2206  0165  2969               	goto	u1650
  2207  0166  0022               	movlb	2	; select bank2
  2208  0167  168D               	bsf	13,5	;volatile
  2209  0168  296B               	goto	l331
  2210  0169                     u1650:
  2211  0169  0022               	movlb	2	; select bank2
  2212  016A  128D               	bcf	13,5	;volatile
  2213  016B                     l331:	
  2214                           ;main.c: 294:                     do { LATBbits.LATB6 = ~LATBbits.LATB6; } while(0);
  2215                           
  2216  016B  1003               	clrc
  2217  016C  1F0D               	btfss	13,6	;volatile
  2218  016D  1403               	setc
  2219  016E  1C03               	btfss	3,0
  2220  016F  2973               	goto	u1670
  2221  0170  0022               	movlb	2	; select bank2
  2222  0171  170D               	bsf	13,6	;volatile
  2223  0172  2975               	goto	l333
  2224  0173                     u1670:
  2225  0173  0022               	movlb	2	; select bank2
  2226  0174  130D               	bcf	13,6	;volatile
  2227  0175                     l333:	
  2228                           ;main.c: 295:                     do { LATBbits.LATB7 = ~LATBbits.LATB7; } while(0);
  2229                           
  2230  0175  1003               	clrc
  2231  0176  1F8D               	btfss	13,7	;volatile
  2232  0177  1403               	setc
  2233  0178  1C03               	btfss	3,0
  2234  0179  297D               	goto	u1690
  2235  017A  0022               	movlb	2	; select bank2
  2236  017B  178D               	bsf	13,7	;volatile
  2237  017C  2946               	goto	l1920
  2238  017D                     u1690:
  2239  017D  0022               	movlb	2	; select bank2
  2240  017E  138D               	bcf	13,7	;volatile
  2241  017F  2946               	goto	l1920
  2242  0180                     l1930:
  2243  0180  0864               	movf	_currentState,w
  2244  0181  00AE               	movwf	??_main
  2245  0182  01AF               	clrf	??_main+1
  2246                           
  2247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2248                           ; Switch size 1, requested type "simple"
  2249                           ; Number of cases is 1, Range of values is 0 to 0
  2250                           ; switch strategies available:
  2251                           ; Name         Instructions Cycles
  2252                           ; simple_byte            4     3 (average)
  2253                           ; direct_byte            8     6 (fixed)
  2254                           ; jumptable            260     6 (fixed)
  2255                           ;	Chosen strategy is simple_byte
  2256  0183  082F               	movf	??_main+1,w
  2257  0184  3A00               	xorlw	0	; case 0
  2258  0185  1903               	skipnz
  2259  0186  2988               	goto	l2026
  2260  0187  282E               	goto	l1864
  2261  0188                     l2026:
  2262                           
  2263                           ; Switch size 1, requested type "simple"
  2264                           ; Number of cases is 3, Range of values is 0 to 2
  2265                           ; switch strategies available:
  2266                           ; Name         Instructions Cycles
  2267                           ; simple_byte           10     6 (average)
  2268                           ; direct_byte           12     6 (fixed)
  2269                           ; jumptable            260     6 (fixed)
  2270                           ;	Chosen strategy is simple_byte
  2271  0188  082E               	movf	??_main,w
  2272  0189  3A00               	xorlw	0	; case 0
  2273  018A  1903               	skipnz
  2274  018B  28B8               	goto	l1912
  2275  018C  3A01               	xorlw	1	; case 1
  2276  018D  1903               	skipnz
  2277  018E  2910               	goto	l1916
  2278  018F  3A03               	xorlw	3	; case 2
  2279  0190  1903               	skipnz
  2280  0191  2949               	goto	l1922
  2281  0192  282E               	goto	l1864
  2282  0193  280C               	ljmp	start
  2283  0194                     __end_of_main:
  2284                           
  2285                           	psect	text1
  2286  02CC                     __ptext1:	
  2287 ;; *************** function _setState *****************
  2288 ;; Defined at:
  2289 ;;		line 96 in file "main.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  newState        1    wreg     enum E2406
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  newState        1    4[BANK0 ] enum E2406
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  1    wreg      void 
  2296 ;; Registers used:
  2297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 1C/1
  2300 ;;		On exit  : 1F/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMMON   BANK0   BANK1
  2303 ;;      Params:         0       0       0
  2304 ;;      Locals:         0       1       0
  2305 ;;      Temps:          0       4       0
  2306 ;;      Totals:         0       5       0
  2307 ;;Total ram usage:        5 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    5
  2310 ;; This function calls:
  2311 ;;		_FLASH_ReadWord
  2312 ;;		___lldiv
  2313 ;;		___tmul
  2314 ;; This function is called by:
  2315 ;;		_main
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           
  2320                           ;psect for function _setState
  2321  02CC                     _setState:
  2322                           
  2323                           ;incstack = 0
  2324                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2325                           ;setState@newState stored from wreg
  2326  02CC  0020               	movlb	0	; select bank0
  2327  02CD  00A4               	movwf	setState@newState
  2328                           
  2329                           ;main.c: 96: void setState(state_t newState);main.c: 97: {;main.c: 98:     if(newState =
      +                          = currentState)
  2330  02CE  0824               	movf	setState@newState,w
  2331  02CF  0664               	xorwf	_currentState,w
  2332  02D0  1903               	btfsc	3,2
  2333  02D1  0008               	return
  2334                           
  2335                           ;main.c: 104:     do { LATCbits.LATC0 = 0; } while(0);
  2336  02D2  0022               	movlb	2	; select bank2
  2337  02D3  100E               	bcf	14,0	;volatile
  2338                           
  2339                           ;main.c: 105:     do { LATCbits.LATC1 = 0; } while(0);
  2340  02D4  108E               	bcf	14,1	;volatile
  2341                           
  2342                           ;main.c: 106:     do { LATCbits.LATC2 = 0; } while(0);
  2343  02D5  110E               	bcf	14,2	;volatile
  2344                           
  2345                           ;main.c: 107:     do { LATCbits.LATC3 = 0; } while(0);
  2346  02D6  118E               	bcf	14,3	;volatile
  2347                           
  2348                           ;main.c: 108:     do { LATCbits.LATC4 = 0; } while(0);
  2349  02D7  120E               	bcf	14,4	;volatile
  2350                           
  2351                           ;main.c: 109:     do { LATCbits.LATC5 = 0; } while(0);
  2352  02D8  128E               	bcf	14,5	;volatile
  2353                           
  2354                           ;main.c: 110:     do { LATCbits.LATC6 = 0; } while(0);
  2355  02D9  130E               	bcf	14,6	;volatile
  2356                           
  2357                           ;main.c: 111:     do { LATCbits.LATC7 = 0; } while(0);
  2358  02DA  138E               	bcf	14,7	;volatile
  2359                           
  2360                           ;main.c: 112:     do { LATBbits.LATB5 = 0; } while(0);
  2361  02DB  128D               	bcf	13,5	;volatile
  2362                           
  2363                           ;main.c: 113:     do { LATBbits.LATB6 = 0; } while(0);
  2364  02DC  130D               	bcf	13,6	;volatile
  2365                           
  2366                           ;main.c: 114:     do { LATBbits.LATB7 = 0; } while(0);
  2367  02DD  138D               	bcf	13,7	;volatile
  2368  02DE  2B7F               	goto	l1746
  2369  02DF                     l1730:
  2370                           
  2371                           ;main.c: 125:             lowerLimit = 0;
  2372  02DF  3000               	movlw	0
  2373  02E0  00D9               	movwf	_lowerLimit+3
  2374  02E1  3000               	movlw	0
  2375  02E2  00D8               	movwf	_lowerLimit+2
  2376  02E3  3000               	movlw	0
  2377  02E4  00D7               	movwf	_lowerLimit+1
  2378  02E5  3000               	movlw	0
  2379  02E6  00D6               	movwf	_lowerLimit
  2380                           
  2381                           ;main.c: 126:             lowerLimit += (int32_t)FLASH_ReadWord(0x800 -4) << 16;
  2382  02E7  30FC               	movlw	252
  2383  02E8  00F0               	movwf	FLASH_ReadWord@flashAddr
  2384  02E9  3007               	movlw	7
  2385  02EA  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2386  02EB  2533               	fcall	_FLASH_ReadWord
  2387  02EC  0870               	movf	?_FLASH_ReadWord,w
  2388  02ED  0020               	movlb	0	; select bank0
  2389  02EE  00A0               	movwf	??_setState
  2390  02EF  0871               	movf	?_FLASH_ReadWord+1,w
  2391  02F0  00A1               	movwf	??_setState+1
  2392  02F1  01A2               	clrf	??_setState+2
  2393  02F2  01A3               	clrf	??_setState+3
  2394  02F3  3010               	movlw	16
  2395  02F4                     u1055:
  2396  02F4  35A0               	lslf	??_setState,f
  2397  02F5  0DA1               	rlf	??_setState+1,f
  2398  02F6  0DA2               	rlf	??_setState+2,f
  2399  02F7  0DA3               	rlf	??_setState+3,f
  2400  02F8  0B89               	decfsz	9,f
  2401  02F9  2AF4               	goto	u1055
  2402  02FA  0820               	movf	??_setState,w
  2403  02FB  07D6               	addwf	_lowerLimit,f
  2404  02FC  0821               	movf	??_setState+1,w
  2405  02FD  3DD7               	addwfc	_lowerLimit+1,f
  2406  02FE  0822               	movf	??_setState+2,w
  2407  02FF  3DD8               	addwfc	_lowerLimit+2,f
  2408  0300  0823               	movf	??_setState+3,w
  2409  0301  3DD9               	addwfc	_lowerLimit+3,f
  2410                           
  2411                           ;main.c: 127:             lowerLimit += (int32_t)FLASH_ReadWord(0x800 -3);
  2412  0302  30FD               	movlw	253
  2413  0303  00F0               	movwf	FLASH_ReadWord@flashAddr
  2414  0304  3007               	movlw	7
  2415  0305  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2416  0306  2533               	fcall	_FLASH_ReadWord
  2417  0307  0870               	movf	?_FLASH_ReadWord,w
  2418  0308  0020               	movlb	0	; select bank0
  2419  0309  07D6               	addwf	_lowerLimit,f
  2420  030A  0871               	movf	?_FLASH_ReadWord+1,w
  2421  030B  3DD7               	addwfc	_lowerLimit+1,f
  2422  030C  3000               	movlw	0
  2423  030D  3DD8               	addwfc	_lowerLimit+2,f
  2424  030E  3DD9               	addwfc	_lowerLimit+3,f
  2425                           
  2426                           ;main.c: 130:             upperLimit = 0;
  2427  030F  3000               	movlw	0
  2428  0310  00EF               	movwf	_upperLimit+3
  2429  0311  3000               	movlw	0
  2430  0312  00EE               	movwf	_upperLimit+2
  2431  0313  3000               	movlw	0
  2432  0314  00ED               	movwf	_upperLimit+1
  2433  0315  3000               	movlw	0
  2434  0316  00EC               	movwf	_upperLimit
  2435                           
  2436                           ;main.c: 131:             upperLimit += (int32_t)FLASH_ReadWord(0x800 -2) << 16;
  2437  0317  30FE               	movlw	254
  2438  0318  00F0               	movwf	FLASH_ReadWord@flashAddr
  2439  0319  3007               	movlw	7
  2440  031A  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2441  031B  2533               	fcall	_FLASH_ReadWord
  2442  031C  0870               	movf	?_FLASH_ReadWord,w
  2443  031D  0020               	movlb	0	; select bank0
  2444  031E  00A0               	movwf	??_setState
  2445  031F  0871               	movf	?_FLASH_ReadWord+1,w
  2446  0320  00A1               	movwf	??_setState+1
  2447  0321  01A2               	clrf	??_setState+2
  2448  0322  01A3               	clrf	??_setState+3
  2449  0323  3010               	movlw	16
  2450  0324                     u1065:
  2451  0324  35A0               	lslf	??_setState,f
  2452  0325  0DA1               	rlf	??_setState+1,f
  2453  0326  0DA2               	rlf	??_setState+2,f
  2454  0327  0DA3               	rlf	??_setState+3,f
  2455  0328  0B89               	decfsz	9,f
  2456  0329  2B24               	goto	u1065
  2457  032A  0820               	movf	??_setState,w
  2458  032B  07EC               	addwf	_upperLimit,f
  2459  032C  0821               	movf	??_setState+1,w
  2460  032D  3DED               	addwfc	_upperLimit+1,f
  2461  032E  0822               	movf	??_setState+2,w
  2462  032F  3DEE               	addwfc	_upperLimit+2,f
  2463  0330  0823               	movf	??_setState+3,w
  2464  0331  3DEF               	addwfc	_upperLimit+3,f
  2465                           
  2466                           ;main.c: 132:             upperLimit += (int32_t)FLASH_ReadWord(0x800 -1) ;
  2467  0332  30FF               	movlw	255
  2468  0333  00F0               	movwf	FLASH_ReadWord@flashAddr
  2469  0334  3007               	movlw	7
  2470  0335  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2471  0336  2533               	fcall	_FLASH_ReadWord
  2472  0337  0870               	movf	?_FLASH_ReadWord,w
  2473  0338  0020               	movlb	0	; select bank0
  2474  0339  07EC               	addwf	_upperLimit,f
  2475  033A  0871               	movf	?_FLASH_ReadWord+1,w
  2476  033B  3DED               	addwfc	_upperLimit+1,f
  2477  033C  3000               	movlw	0
  2478  033D  3DEE               	addwfc	_upperLimit+2,f
  2479  033E  3DEF               	addwfc	_upperLimit+3,f
  2480                           
  2481                           ;main.c: 139:             m = (1023*fixedPointFactor)/(upperLimit - lowerLimit);
  2482  033F  0856               	movf	_lowerLimit,w
  2483  0340  026C               	subwf	_upperLimit,w
  2484  0341  00A0               	movwf	??_setState
  2485  0342  0857               	movf	_lowerLimit+1,w
  2486  0343  3B6D               	subwfb	_upperLimit+1,w
  2487  0344  00A1               	movwf	??_setState+1
  2488  0345  0858               	movf	_lowerLimit+2,w
  2489  0346  3B6E               	subwfb	_upperLimit+2,w
  2490  0347  00A2               	movwf	??_setState+2
  2491  0348  0859               	movf	_lowerLimit+3,w
  2492  0349  3B6F               	subwfb	_upperLimit+3,w
  2493  034A  00A3               	movwf	??_setState+3
  2494  034B  0823               	movf	??_setState+3,w
  2495  034C  00F3               	movwf	___lldiv@divisor+3
  2496  034D  0822               	movf	??_setState+2,w
  2497  034E  00F2               	movwf	___lldiv@divisor+2
  2498  034F  0821               	movf	??_setState+1,w
  2499  0350  00F1               	movwf	___lldiv@divisor+1
  2500  0351  0820               	movf	??_setState,w
  2501  0352  00F0               	movwf	___lldiv@divisor
  2502  0353  3000               	movlw	0
  2503  0354  00F7               	movwf	___lldiv@dividend+3
  2504  0355  300F               	movlw	15
  2505  0356  00F6               	movwf	___lldiv@dividend+2
  2506  0357  309C               	movlw	156
  2507  0358  00F5               	movwf	___lldiv@dividend+1
  2508  0359  3018               	movlw	24
  2509  035A  00F4               	movwf	___lldiv@dividend
  2510  035B  2470               	fcall	___lldiv
  2511  035C  0873               	movf	?___lldiv+3,w
  2512  035D  00EA               	movwf	_m+3
  2513  035E  0872               	movf	?___lldiv+2,w
  2514  035F  00E9               	movwf	_m+2
  2515  0360  0871               	movf	?___lldiv+1,w
  2516  0361  00E8               	movwf	_m+1
  2517  0362  0870               	movf	?___lldiv,w
  2518  0363  00E7               	movwf	_m
  2519                           
  2520                           ;main.c: 140:             b = lowerLimit*m;
  2521  0364  0867               	movf	_m,w
  2522  0365  00F0               	movwf	___tmul@multiplier
  2523  0366  0868               	movf	_m+1,w
  2524  0367  00F1               	movwf	___tmul@multiplier+1
  2525  0368  0869               	movf	_m+2,w
  2526  0369  00F2               	movwf	___tmul@multiplier+2
  2527  036A  0856               	movf	_lowerLimit,w
  2528  036B  00F3               	movwf	___tmul@multiplicand
  2529  036C  0857               	movf	_lowerLimit+1,w
  2530  036D  00F4               	movwf	___tmul@multiplicand+1
  2531  036E  0858               	movf	_lowerLimit+2,w
  2532  036F  00F5               	movwf	___tmul@multiplicand+2
  2533  0370  24F1               	fcall	___tmul
  2534  0371  0870               	movf	?___tmul,w
  2535  0372  0021               	movlb	1	; select bank1
  2536  0373  00A3               	movwf	_b^(0+128)
  2537  0374  0871               	movf	?___tmul+1,w
  2538  0375  00A4               	movwf	(_b+1)^(0+128)
  2539  0376  0872               	movf	?___tmul+2,w
  2540  0377  00A5               	movwf	(_b+2)^(0+128)
  2541                           
  2542                           ;main.c: 141:             break;
  2543  0378  2B93               	goto	l1748
  2544  0379                     l273:	
  2545                           ;main.c: 145:             do { LATCbits.LATC0 = 1; } while(0);
  2546                           
  2547  0379  0022               	movlb	2	; select bank2
  2548  037A  140E               	bsf	14,0	;volatile
  2549  037B  2B93               	goto	l1748
  2550  037C                     l276:	
  2551                           ;main.c: 149:             do { LATBbits.LATB7 = 1; } while(0);
  2552                           
  2553  037C  0022               	movlb	2	; select bank2
  2554  037D  178D               	bsf	13,7	;volatile
  2555  037E  2B93               	goto	l1748
  2556  037F                     l1746:
  2557  037F  0020               	movlb	0	; select bank0
  2558  0380  0824               	movf	setState@newState,w
  2559  0381  00A0               	movwf	??_setState
  2560  0382  01A1               	clrf	??_setState+1
  2561                           
  2562                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2563                           ; Switch size 1, requested type "simple"
  2564                           ; Number of cases is 1, Range of values is 0 to 0
  2565                           ; switch strategies available:
  2566                           ; Name         Instructions Cycles
  2567                           ; simple_byte            4     3 (average)
  2568                           ; direct_byte            8     6 (fixed)
  2569                           ; jumptable            260     6 (fixed)
  2570                           ;	Chosen strategy is simple_byte
  2571  0383  0821               	movf	??_setState+1,w
  2572  0384  3A00               	xorlw	0	; case 0
  2573  0385  1903               	skipnz
  2574  0386  2B88               	goto	l2028
  2575  0387  2B93               	goto	l1748
  2576  0388                     l2028:
  2577                           
  2578                           ; Switch size 1, requested type "simple"
  2579                           ; Number of cases is 3, Range of values is 0 to 2
  2580                           ; switch strategies available:
  2581                           ; Name         Instructions Cycles
  2582                           ; simple_byte           10     6 (average)
  2583                           ; direct_byte           12     6 (fixed)
  2584                           ; jumptable            260     6 (fixed)
  2585                           ;	Chosen strategy is simple_byte
  2586  0388  0820               	movf	??_setState,w
  2587  0389  3A00               	xorlw	0	; case 0
  2588  038A  1903               	skipnz
  2589  038B  2ADF               	goto	l1730
  2590  038C  3A01               	xorlw	1	; case 1
  2591  038D  1903               	skipnz
  2592  038E  2B79               	goto	l273
  2593  038F  3A03               	xorlw	3	; case 2
  2594  0390  1903               	skipnz
  2595  0391  2B7C               	goto	l276
  2596  0392  2B93               	goto	l1748
  2597  0393                     l1748:
  2598                           
  2599                           ;main.c: 153:     msTick = 0;
  2600  0393  0020               	movlb	0	; select bank0
  2601  0394  01E0               	clrf	_msTick	;volatile
  2602  0395  01E1               	clrf	_msTick+1	;volatile
  2603                           
  2604                           ;main.c: 155:     currentState = newState;
  2605  0396  0824               	movf	setState@newState,w
  2606  0397  00A0               	movwf	??_setState
  2607  0398  0820               	movf	??_setState,w
  2608  0399  00E4               	movwf	_currentState
  2609  039A  0008               	return
  2610  039B                     __end_of_setState:
  2611                           
  2612                           	psect	text2
  2613  04F1                     __ptext2:	
  2614 ;; *************** function ___tmul *****************
  2615 ;; Defined at:
  2616 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul24.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;  multiplier      3    0[COMMON] unsigned um
  2619 ;;  multiplicand    3    3[COMMON] unsigned um
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;  product         3    6[COMMON] unsigned um
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  3    0[COMMON] unsigned um
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0
  2626 ;; Tracked objects:
  2627 ;;		On entry : 1F/0
  2628 ;;		On exit  : 1F/0
  2629 ;;		Unchanged: 1F/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1
  2631 ;;      Params:         6       0       0
  2632 ;;      Locals:         3       0       0
  2633 ;;      Temps:          0       0       0
  2634 ;;      Totals:         9       0       0
  2635 ;;Total ram usage:        9 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    4
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_setState
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           
  2646                           ;psect for function ___tmul
  2647  04F1                     ___tmul:
  2648                           
  2649                           ;incstack = 0
  2650                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  2651  04F1  3000               	movlw	0
  2652  04F2  00F6               	movwf	___tmul@product
  2653  04F3  3000               	movlw	0
  2654  04F4  00F7               	movwf	___tmul@product+1
  2655  04F5  3000               	movlw	0
  2656  04F6  00F8               	movwf	___tmul@product+2
  2657  04F7                     l1618:
  2658  04F7  1C70               	btfss	___tmul@multiplier,0
  2659  04F8  2CFF               	goto	l1622
  2660  04F9  0873               	movf	___tmul@multiplicand,w
  2661  04FA  07F6               	addwf	___tmul@product,f
  2662  04FB  0874               	movf	___tmul@multiplicand+1,w
  2663  04FC  3DF7               	addwfc	___tmul@product+1,f
  2664  04FD  0875               	movf	___tmul@multiplicand+2,w
  2665  04FE  3DF8               	addwfc	___tmul@product+2,f
  2666  04FF                     l1622:
  2667  04FF  3001               	movlw	1
  2668  0500                     u895:
  2669  0500  35F3               	lslf	___tmul@multiplicand,f
  2670  0501  0DF4               	rlf	___tmul@multiplicand+1,f
  2671  0502  0DF5               	rlf	___tmul@multiplicand+2,f
  2672  0503  0B89               	decfsz	9,f
  2673  0504  2D00               	goto	u895
  2674  0505  3001               	movlw	1
  2675  0506                     u905:
  2676  0506  36F2               	lsrf	___tmul@multiplier+2,f
  2677  0507  0CF1               	rrf	___tmul@multiplier+1,f
  2678  0508  0CF0               	rrf	___tmul@multiplier,f
  2679  0509  0B89               	decfsz	9,f
  2680  050A  2D06               	goto	u905
  2681  050B  0872               	movf	___tmul@multiplier+2,w
  2682  050C  0471               	iorwf	___tmul@multiplier+1,w
  2683  050D  0470               	iorwf	___tmul@multiplier,w
  2684  050E  1D03               	skipz
  2685  050F  2CF7               	goto	l1618
  2686  0510  0876               	movf	___tmul@product,w
  2687  0511  00F0               	movwf	?___tmul
  2688  0512  0877               	movf	___tmul@product+1,w
  2689  0513  00F1               	movwf	?___tmul+1
  2690  0514  0878               	movf	___tmul@product+2,w
  2691  0515  00F2               	movwf	?___tmul+2
  2692  0516  0008               	return
  2693  0517                     __end_of___tmul:
  2694                           
  2695                           	psect	text3
  2696  0470                     __ptext3:	
  2697 ;; *************** function ___lldiv *****************
  2698 ;; Defined at:
  2699 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\__lldiv.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  divisor         4    0[COMMON] unsigned long 
  2702 ;;  dividend        4    4[COMMON] unsigned long 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  quotient        4    9[COMMON] unsigned long 
  2705 ;;  counter         1   13[COMMON] unsigned char 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  4    0[COMMON] unsigned long 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0
  2710 ;; Tracked objects:
  2711 ;;		On entry : 1F/0
  2712 ;;		On exit  : 1F/0
  2713 ;;		Unchanged: 1F/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1
  2715 ;;      Params:         8       0       0
  2716 ;;      Locals:         5       0       0
  2717 ;;      Temps:          1       0       0
  2718 ;;      Totals:        14       0       0
  2719 ;;Total ram usage:       14 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    4
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_setState
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function ___lldiv
  2731  0470                     ___lldiv:
  2732                           
  2733                           ;incstack = 0
  2734                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2735  0470  3000               	movlw	0
  2736  0471  00FC               	movwf	___lldiv@quotient+3
  2737  0472  3000               	movlw	0
  2738  0473  00FB               	movwf	___lldiv@quotient+2
  2739  0474  3000               	movlw	0
  2740  0475  00FA               	movwf	___lldiv@quotient+1
  2741  0476  3000               	movlw	0
  2742  0477  00F9               	movwf	___lldiv@quotient
  2743  0478  0873               	movf	___lldiv@divisor+3,w
  2744  0479  0472               	iorwf	___lldiv@divisor+2,w
  2745  047A  0471               	iorwf	___lldiv@divisor+1,w
  2746  047B  0470               	iorwf	___lldiv@divisor,w
  2747  047C  1903               	skipnz
  2748  047D  2CB9               	goto	l1650
  2749  047E  01FD               	clrf	___lldiv@counter
  2750  047F  0AFD               	incf	___lldiv@counter,f
  2751  0480                     l1636:
  2752  0480  1BF3               	btfsc	___lldiv@divisor+3,7
  2753  0481  2C8E               	goto	l1638
  2754  0482  3001               	movlw	1
  2755  0483                     u935:
  2756  0483  35F0               	lslf	___lldiv@divisor,f
  2757  0484  0DF1               	rlf	___lldiv@divisor+1,f
  2758  0485  0DF2               	rlf	___lldiv@divisor+2,f
  2759  0486  0DF3               	rlf	___lldiv@divisor+3,f
  2760  0487  0B89               	decfsz	9,f
  2761  0488  2C83               	goto	u935
  2762  0489  3001               	movlw	1
  2763  048A  00F8               	movwf	??___lldiv
  2764  048B  0878               	movf	??___lldiv,w
  2765  048C  07FD               	addwf	___lldiv@counter,f
  2766  048D  2C80               	goto	l1636
  2767  048E                     l1638:
  2768  048E  3001               	movlw	1
  2769  048F                     u955:
  2770  048F  35F9               	lslf	___lldiv@quotient,f
  2771  0490  0DFA               	rlf	___lldiv@quotient+1,f
  2772  0491  0DFB               	rlf	___lldiv@quotient+2,f
  2773  0492  0DFC               	rlf	___lldiv@quotient+3,f
  2774  0493  0B89               	decfsz	9,f
  2775  0494  2C8F               	goto	u955
  2776  0495  0873               	movf	___lldiv@divisor+3,w
  2777  0496  0277               	subwf	___lldiv@dividend+3,w
  2778  0497  1D03               	skipz
  2779  0498  2CA3               	goto	u965
  2780  0499  0872               	movf	___lldiv@divisor+2,w
  2781  049A  0276               	subwf	___lldiv@dividend+2,w
  2782  049B  1D03               	skipz
  2783  049C  2CA3               	goto	u965
  2784  049D  0871               	movf	___lldiv@divisor+1,w
  2785  049E  0275               	subwf	___lldiv@dividend+1,w
  2786  049F  1D03               	skipz
  2787  04A0  2CA3               	goto	u965
  2788  04A1  0870               	movf	___lldiv@divisor,w
  2789  04A2  0274               	subwf	___lldiv@dividend,w
  2790  04A3                     u965:
  2791  04A3  1C03               	skipc
  2792  04A4  2CAE               	goto	l1646
  2793  04A5  0870               	movf	___lldiv@divisor,w
  2794  04A6  02F4               	subwf	___lldiv@dividend,f
  2795  04A7  0871               	movf	___lldiv@divisor+1,w
  2796  04A8  3BF5               	subwfb	___lldiv@dividend+1,f
  2797  04A9  0872               	movf	___lldiv@divisor+2,w
  2798  04AA  3BF6               	subwfb	___lldiv@dividend+2,f
  2799  04AB  0873               	movf	___lldiv@divisor+3,w
  2800  04AC  3BF7               	subwfb	___lldiv@dividend+3,f
  2801  04AD  1479               	bsf	___lldiv@quotient,0
  2802  04AE                     l1646:
  2803  04AE  3001               	movlw	1
  2804  04AF                     u975:
  2805  04AF  36F3               	lsrf	___lldiv@divisor+3,f
  2806  04B0  0CF2               	rrf	___lldiv@divisor+2,f
  2807  04B1  0CF1               	rrf	___lldiv@divisor+1,f
  2808  04B2  0CF0               	rrf	___lldiv@divisor,f
  2809  04B3  0B89               	decfsz	9,f
  2810  04B4  2CAF               	goto	u975
  2811  04B5  3001               	movlw	1
  2812  04B6  02FD               	subwf	___lldiv@counter,f
  2813  04B7  1D03               	btfss	3,2
  2814  04B8  2C8E               	goto	l1638
  2815  04B9                     l1650:
  2816  04B9  087C               	movf	___lldiv@quotient+3,w
  2817  04BA  00F3               	movwf	?___lldiv+3
  2818  04BB  087B               	movf	___lldiv@quotient+2,w
  2819  04BC  00F2               	movwf	?___lldiv+2
  2820  04BD  087A               	movf	___lldiv@quotient+1,w
  2821  04BE  00F1               	movwf	?___lldiv+1
  2822  04BF  0879               	movf	___lldiv@quotient,w
  2823  04C0  00F0               	movwf	?___lldiv
  2824  04C1  0008               	return
  2825  04C2                     __end_of___lldiv:
  2826                           
  2827                           	psect	text4
  2828  0533                     __ptext4:	
  2829 ;; *************** function _FLASH_ReadWord *****************
  2830 ;; Defined at:
  2831 ;;		line 58 in file "mcc_generated_files/memory.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  flashAddr       2    0[COMMON] unsigned short 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  2    0[COMMON] unsigned short 
  2838 ;; Registers used:
  2839 ;;		wreg, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 1F/0
  2842 ;;		On exit  : 1F/3
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMMON   BANK0   BANK1
  2845 ;;      Params:         2       0       0
  2846 ;;      Locals:         1       0       0
  2847 ;;      Temps:          0       0       0
  2848 ;;      Totals:         3       0       0
  2849 ;;Total ram usage:        3 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    4
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_setState
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           
  2860                           ;psect for function _FLASH_ReadWord
  2861  0533                     _FLASH_ReadWord:
  2862                           
  2863                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  2864                           
  2865                           ;incstack = 0
  2866                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  2867  0533  3000               	movlw	0
  2868  0534  1B8B               	btfsc	11,7	;volatile
  2869  0535  3001               	movlw	1
  2870  0536  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  2871                           
  2872                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  2873  0537  138B               	bcf	11,7	;volatile
  2874                           
  2875                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  2876  0538  0870               	movf	FLASH_ReadWord@flashAddr,w
  2877  0539  0023               	movlb	3	; select bank3
  2878  053A  0091               	movwf	17	;volatile
  2879                           
  2880                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  2881  053B  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  2882  053C  0092               	movwf	18	;volatile
  2883                           
  2884                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  2885  053D  1315               	bcf	21,6	;volatile
  2886                           
  2887                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  2888  053E  1415               	bsf	21,0	;volatile
  2889                           
  2890                           ;mcc_generated_files/memory.c: 68:     __nop();
  2891  053F  0000               	nop
  2892                           
  2893                           ;mcc_generated_files/memory.c: 69:     __nop();
  2894  0540  0000               	nop
  2895                           
  2896                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  2897  0541  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  2898  0542  1C03               	skipc
  2899  0543  138B               	bcf	11,7	;volatile
  2900  0544  1803               	skipnc
  2901  0545  178B               	bsf	11,7	;volatile
  2902                           
  2903                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  2904  0546  0023               	movlb	3	; select bank3
  2905  0547  0814               	movf	20,w	;volatile
  2906  0548  00F1               	movwf	?_FLASH_ReadWord+1
  2907  0549  0813               	movf	19,w	;volatile
  2908  054A  00F0               	movwf	?_FLASH_ReadWord
  2909  054B  0008               	return
  2910  054C                     __end_of_FLASH_ReadWord:
  2911                           
  2912                           	psect	text5
  2913  0194                     __ptext5:	
  2914 ;; *************** function _setLedsForPositioning *****************
  2915 ;; Defined at:
  2916 ;;		line 307 in file "main.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  adcValue        4    0[COMMON] long 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;		None
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, status,2, status,0
  2925 ;; Tracked objects:
  2926 ;;		On entry : 1F/0
  2927 ;;		On exit  : 1F/2
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMMON   BANK0   BANK1
  2930 ;;      Params:         4       0       0
  2931 ;;      Locals:         0       0       0
  2932 ;;      Temps:          0       0       0
  2933 ;;      Totals:         4       0       0
  2934 ;;Total ram usage:        4 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:    4
  2937 ;; This function calls:
  2938 ;;		Nothing
  2939 ;; This function is called by:
  2940 ;;		_main
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           
  2945                           ;psect for function _setLedsForPositioning
  2946  0194                     _setLedsForPositioning:
  2947                           
  2948                           ;incstack = 0
  2949                           ; Regs used in _setLedsForPositioning: [wreg+status,2+status,0]
  2950                           ;main.c: 307: void setLedsForPositioning(int32_t adcValue);main.c: 308: {;main.c: 309:  
      +                             do { LATCbits.LATC0 = 0; } while(0);
  2951  0194  0022               	movlb	2	; select bank2
  2952  0195  100E               	bcf	14,0	;volatile
  2953                           
  2954                           ;main.c: 310:     do { LATCbits.LATC1 = 0; } while(0);
  2955  0196  108E               	bcf	14,1	;volatile
  2956                           
  2957                           ;main.c: 311:     do { LATCbits.LATC2 = 0; } while(0);
  2958  0197  110E               	bcf	14,2	;volatile
  2959                           
  2960                           ;main.c: 312:     do { LATCbits.LATC3 = 0; } while(0);
  2961  0198  118E               	bcf	14,3	;volatile
  2962                           
  2963                           ;main.c: 313:     do { LATCbits.LATC4 = 0; } while(0);
  2964  0199  120E               	bcf	14,4	;volatile
  2965                           
  2966                           ;main.c: 314:     do { LATCbits.LATC5 = 1; } while(0);
  2967  019A  168E               	bsf	14,5	;volatile
  2968                           
  2969                           ;main.c: 315:     do { LATCbits.LATC6 = 0; } while(0);
  2970  019B  130E               	bcf	14,6	;volatile
  2971                           
  2972                           ;main.c: 316:     do { LATCbits.LATC7 = 0; } while(0);
  2973  019C  138E               	bcf	14,7	;volatile
  2974                           
  2975                           ;main.c: 317:     do { LATBbits.LATB5 = 0; } while(0);
  2976  019D  128D               	bcf	13,5	;volatile
  2977                           
  2978                           ;main.c: 318:     do { LATBbits.LATB6 = 0; } while(0);
  2979  019E  130D               	bcf	13,6	;volatile
  2980                           
  2981                           ;main.c: 319:     do { LATBbits.LATB7 = 0; } while(0);
  2982  019F  138D               	bcf	13,7	;volatile
  2983                           
  2984                           ;main.c: 323:     if(adcValue < 54)
  2985  01A0  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  2986  01A1  29AF               	goto	l363
  2987  01A2  0873               	movf	setLedsForPositioning@adcValue+3,w
  2988  01A3  1D03               	btfss	3,2
  2989  01A4  29B1               	goto	l1758
  2990  01A5  0872               	movf	setLedsForPositioning@adcValue+2,w
  2991  01A6  1D03               	btfss	3,2
  2992  01A7  29B1               	goto	l1758
  2993  01A8  0871               	movf	setLedsForPositioning@adcValue+1,w
  2994  01A9  1D03               	btfss	3,2
  2995  01AA  29B1               	goto	l1758
  2996  01AB  3036               	movlw	54
  2997  01AC  0270               	subwf	setLedsForPositioning@adcValue,w
  2998  01AD  1803               	btfsc	3,0
  2999  01AE  29B1               	goto	l1758
  3000  01AF                     l363:	
  3001                           ;main.c: 324:     {;main.c: 325:         do { LATCbits.LATC0 = 1; } while(0);
  3002                           
  3003  01AF  140E               	bsf	14,0	;volatile
  3004  01B0  0008               	return
  3005  01B1                     l1758:
  3006  01B1  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3007  01B2  29C0               	goto	l367
  3008  01B3  0873               	movf	setLedsForPositioning@adcValue+3,w
  3009  01B4  1D03               	btfss	3,2
  3010  01B5  29C3               	goto	l1760
  3011  01B6  0872               	movf	setLedsForPositioning@adcValue+2,w
  3012  01B7  1D03               	btfss	3,2
  3013  01B8  29C3               	goto	l1760
  3014  01B9  0871               	movf	setLedsForPositioning@adcValue+1,w
  3015  01BA  1D03               	btfss	3,2
  3016  01BB  29C3               	goto	l1760
  3017  01BC  306C               	movlw	108
  3018  01BD  0270               	subwf	setLedsForPositioning@adcValue,w
  3019  01BE  1803               	btfsc	3,0
  3020  01BF  29C3               	goto	l1760
  3021  01C0                     l367:	
  3022                           ;main.c: 328:     {;main.c: 329:         do { LATCbits.LATC0 = 1; } while(0);
  3023                           
  3024  01C0  140E               	bsf	14,0	;volatile
  3025                           
  3026                           ;main.c: 330:         do { LATCbits.LATC1 = 1; } while(0);
  3027  01C1  148E               	bsf	14,1	;volatile
  3028  01C2  0008               	return
  3029  01C3                     l1760:
  3030  01C3  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3031  01C4  29D2               	goto	l373
  3032  01C5  0873               	movf	setLedsForPositioning@adcValue+3,w
  3033  01C6  1D03               	btfss	3,2
  3034  01C7  29D4               	goto	l1762
  3035  01C8  0872               	movf	setLedsForPositioning@adcValue+2,w
  3036  01C9  1D03               	btfss	3,2
  3037  01CA  29D4               	goto	l1762
  3038  01CB  0871               	movf	setLedsForPositioning@adcValue+1,w
  3039  01CC  1D03               	btfss	3,2
  3040  01CD  29D4               	goto	l1762
  3041  01CE  30A2               	movlw	162
  3042  01CF  0270               	subwf	setLedsForPositioning@adcValue,w
  3043  01D0  1803               	btfsc	3,0
  3044  01D1  29D4               	goto	l1762
  3045  01D2                     l373:	
  3046                           ;main.c: 333:     {;main.c: 334:         do { LATCbits.LATC1 = 1; } while(0);
  3047                           
  3048  01D2  148E               	bsf	14,1	;volatile
  3049  01D3  0008               	return
  3050  01D4                     l1762:
  3051  01D4  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3052  01D5  29E3               	goto	l377
  3053  01D6  0873               	movf	setLedsForPositioning@adcValue+3,w
  3054  01D7  1D03               	btfss	3,2
  3055  01D8  29E6               	goto	l1764
  3056  01D9  0872               	movf	setLedsForPositioning@adcValue+2,w
  3057  01DA  1D03               	btfss	3,2
  3058  01DB  29E6               	goto	l1764
  3059  01DC  0871               	movf	setLedsForPositioning@adcValue+1,w
  3060  01DD  1D03               	btfss	3,2
  3061  01DE  29E6               	goto	l1764
  3062  01DF  30D7               	movlw	215
  3063  01E0  0270               	subwf	setLedsForPositioning@adcValue,w
  3064  01E1  1803               	btfsc	3,0
  3065  01E2  29E6               	goto	l1764
  3066  01E3                     l377:	
  3067                           ;main.c: 337:     {;main.c: 338:         do { LATCbits.LATC1 = 1; } while(0);
  3068                           
  3069  01E3  148E               	bsf	14,1	;volatile
  3070                           
  3071                           ;main.c: 339:         do { LATCbits.LATC2 = 1; } while(0);
  3072  01E4  150E               	bsf	14,2	;volatile
  3073  01E5  0008               	return
  3074  01E6                     l1764:
  3075  01E6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3076  01E7  29F4               	goto	l383
  3077  01E8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3078  01E9  1D03               	btfss	3,2
  3079  01EA  29F6               	goto	l1766
  3080  01EB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3081  01EC  1D03               	btfss	3,2
  3082  01ED  29F6               	goto	l1766
  3083  01EE  300D               	movlw	13
  3084  01EF  0270               	subwf	setLedsForPositioning@adcValue,w
  3085  01F0  3001               	movlw	1
  3086  01F1  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3087  01F2  1803               	btfsc	3,0
  3088  01F3  29F6               	goto	l1766
  3089  01F4                     l383:	
  3090                           ;main.c: 342:     {;main.c: 343:         do { LATCbits.LATC2 = 1; } while(0);
  3091                           
  3092  01F4  150E               	bsf	14,2	;volatile
  3093  01F5  0008               	return
  3094  01F6                     l1766:
  3095  01F6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3096  01F7  2A04               	goto	l387
  3097  01F8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3098  01F9  1D03               	btfss	3,2
  3099  01FA  2A07               	goto	l1768
  3100  01FB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3101  01FC  1D03               	btfss	3,2
  3102  01FD  2A07               	goto	l1768
  3103  01FE  3043               	movlw	67
  3104  01FF  0270               	subwf	setLedsForPositioning@adcValue,w
  3105  0200  3001               	movlw	1
  3106  0201  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3107  0202  1803               	btfsc	3,0
  3108  0203  2A07               	goto	l1768
  3109  0204                     l387:	
  3110                           ;main.c: 346:     {;main.c: 347:         do { LATCbits.LATC2 = 1; } while(0);
  3111                           
  3112  0204  150E               	bsf	14,2	;volatile
  3113                           
  3114                           ;main.c: 348:         do { LATCbits.LATC3 = 1; } while(0);
  3115  0205  158E               	bsf	14,3	;volatile
  3116  0206  0008               	return
  3117  0207                     l1768:
  3118  0207  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3119  0208  2A15               	goto	l393
  3120  0209  0873               	movf	setLedsForPositioning@adcValue+3,w
  3121  020A  1D03               	btfss	3,2
  3122  020B  2A17               	goto	l1770
  3123  020C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3124  020D  1D03               	btfss	3,2
  3125  020E  2A17               	goto	l1770
  3126  020F  3079               	movlw	121
  3127  0210  0270               	subwf	setLedsForPositioning@adcValue,w
  3128  0211  3001               	movlw	1
  3129  0212  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3130  0213  1803               	btfsc	3,0
  3131  0214  2A17               	goto	l1770
  3132  0215                     l393:	
  3133                           ;main.c: 351:     {;main.c: 352:         do { LATCbits.LATC3 = 1; } while(0);
  3134                           
  3135  0215  158E               	bsf	14,3	;volatile
  3136  0216  0008               	return
  3137  0217                     l1770:
  3138  0217  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3139  0218  2A25               	goto	l397
  3140  0219  0873               	movf	setLedsForPositioning@adcValue+3,w
  3141  021A  1D03               	btfss	3,2
  3142  021B  2A28               	goto	l1772
  3143  021C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3144  021D  1D03               	btfss	3,2
  3145  021E  2A28               	goto	l1772
  3146  021F  30AF               	movlw	175
  3147  0220  0270               	subwf	setLedsForPositioning@adcValue,w
  3148  0221  3001               	movlw	1
  3149  0222  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3150  0223  1803               	btfsc	3,0
  3151  0224  2A28               	goto	l1772
  3152  0225                     l397:	
  3153                           ;main.c: 355:     {;main.c: 356:         do { LATCbits.LATC3 = 1; } while(0);
  3154                           
  3155  0225  158E               	bsf	14,3	;volatile
  3156                           
  3157                           ;main.c: 357:         do { LATCbits.LATC4 = 1; } while(0);
  3158  0226  160E               	bsf	14,4	;volatile
  3159  0227  0008               	return
  3160  0228                     l1772:
  3161  0228  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3162  0229  2A36               	goto	l403
  3163  022A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3164  022B  1D03               	btfss	3,2
  3165  022C  2A38               	goto	l1774
  3166  022D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3167  022E  1D03               	btfss	3,2
  3168  022F  2A38               	goto	l1774
  3169  0230  30E5               	movlw	229
  3170  0231  0270               	subwf	setLedsForPositioning@adcValue,w
  3171  0232  3001               	movlw	1
  3172  0233  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3173  0234  1803               	btfsc	3,0
  3174  0235  2A38               	goto	l1774
  3175  0236                     l403:	
  3176                           ;main.c: 360:     {;main.c: 361:         do { LATCbits.LATC4 = 1; } while(0);
  3177                           
  3178  0236  160E               	bsf	14,4	;volatile
  3179  0237  0008               	return
  3180  0238                     l1774:
  3181  0238  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3182  0239  0008               	return
  3183  023A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3184  023B  1D03               	btfss	3,2
  3185  023C  2A46               	goto	l1778
  3186  023D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3187  023E  1D03               	btfss	3,2
  3188  023F  2A46               	goto	l1778
  3189  0240  301A               	movlw	26
  3190  0241  0270               	subwf	setLedsForPositioning@adcValue,w
  3191  0242  3002               	movlw	2
  3192  0243  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3193  0244  1C03               	btfss	3,0
  3194  0245  0008               	return
  3195  0246                     l1778:
  3196  0246  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3197  0247  2A54               	goto	l409
  3198  0248  0873               	movf	setLedsForPositioning@adcValue+3,w
  3199  0249  1D03               	btfss	3,2
  3200  024A  2A56               	goto	l1780
  3201  024B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3202  024C  1D03               	btfss	3,2
  3203  024D  2A56               	goto	l1780
  3204  024E  3050               	movlw	80
  3205  024F  0270               	subwf	setLedsForPositioning@adcValue,w
  3206  0250  3002               	movlw	2
  3207  0251  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3208  0252  1803               	btfsc	3,0
  3209  0253  2A56               	goto	l1780
  3210  0254                     l409:	
  3211                           ;main.c: 368:     {;main.c: 369:         do { LATCbits.LATC6 = 1; } while(0);
  3212                           
  3213  0254  170E               	bsf	14,6	;volatile
  3214  0255  0008               	return
  3215  0256                     l1780:
  3216  0256  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3217  0257  2A64               	goto	l413
  3218  0258  0873               	movf	setLedsForPositioning@adcValue+3,w
  3219  0259  1D03               	btfss	3,2
  3220  025A  2A67               	goto	l1782
  3221  025B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3222  025C  1D03               	btfss	3,2
  3223  025D  2A67               	goto	l1782
  3224  025E  3086               	movlw	134
  3225  025F  0270               	subwf	setLedsForPositioning@adcValue,w
  3226  0260  3002               	movlw	2
  3227  0261  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3228  0262  1803               	btfsc	3,0
  3229  0263  2A67               	goto	l1782
  3230  0264                     l413:	
  3231                           ;main.c: 372:     {;main.c: 373:         do { LATCbits.LATC6 = 1; } while(0);
  3232                           
  3233  0264  170E               	bsf	14,6	;volatile
  3234                           
  3235                           ;main.c: 374:         do { LATCbits.LATC7 = 1; } while(0);
  3236  0265  178E               	bsf	14,7	;volatile
  3237  0266  0008               	return
  3238  0267                     l1782:
  3239  0267  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3240  0268  2A75               	goto	l419
  3241  0269  0873               	movf	setLedsForPositioning@adcValue+3,w
  3242  026A  1D03               	btfss	3,2
  3243  026B  2A77               	goto	l1784
  3244  026C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3245  026D  1D03               	btfss	3,2
  3246  026E  2A77               	goto	l1784
  3247  026F  30BC               	movlw	188
  3248  0270  0270               	subwf	setLedsForPositioning@adcValue,w
  3249  0271  3002               	movlw	2
  3250  0272  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3251  0273  1803               	btfsc	3,0
  3252  0274  2A77               	goto	l1784
  3253  0275                     l419:	
  3254                           ;main.c: 377:     {;main.c: 378:         do { LATCbits.LATC7 = 1; } while(0);
  3255                           
  3256  0275  178E               	bsf	14,7	;volatile
  3257  0276  0008               	return
  3258  0277                     l1784:
  3259  0277  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3260  0278  2A85               	goto	l423
  3261  0279  0873               	movf	setLedsForPositioning@adcValue+3,w
  3262  027A  1D03               	btfss	3,2
  3263  027B  2A88               	goto	l1786
  3264  027C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3265  027D  1D03               	btfss	3,2
  3266  027E  2A88               	goto	l1786
  3267  027F  30F2               	movlw	242
  3268  0280  0270               	subwf	setLedsForPositioning@adcValue,w
  3269  0281  3002               	movlw	2
  3270  0282  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3271  0283  1803               	btfsc	3,0
  3272  0284  2A88               	goto	l1786
  3273  0285                     l423:	
  3274                           ;main.c: 381:     {;main.c: 382:         do { LATCbits.LATC7 = 1; } while(0);
  3275                           
  3276  0285  178E               	bsf	14,7	;volatile
  3277                           
  3278                           ;main.c: 383:         do { LATBbits.LATB5 = 1; } while(0);
  3279  0286  168D               	bsf	13,5	;volatile
  3280  0287  0008               	return
  3281  0288                     l1786:
  3282  0288  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3283  0289  2A96               	goto	l429
  3284  028A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3285  028B  1D03               	btfss	3,2
  3286  028C  2A98               	goto	l1788
  3287  028D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3288  028E  1D03               	btfss	3,2
  3289  028F  2A98               	goto	l1788
  3290  0290  3028               	movlw	40
  3291  0291  0270               	subwf	setLedsForPositioning@adcValue,w
  3292  0292  3003               	movlw	3
  3293  0293  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3294  0294  1803               	btfsc	3,0
  3295  0295  2A98               	goto	l1788
  3296  0296                     l429:	
  3297                           ;main.c: 386:     {;main.c: 387:         do { LATBbits.LATB5 = 1; } while(0);
  3298                           
  3299  0296  168D               	bsf	13,5	;volatile
  3300  0297  0008               	return
  3301  0298                     l1788:
  3302  0298  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3303  0299  2AA6               	goto	l433
  3304  029A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3305  029B  1D03               	btfss	3,2
  3306  029C  2AA9               	goto	l1790
  3307  029D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3308  029E  1D03               	btfss	3,2
  3309  029F  2AA9               	goto	l1790
  3310  02A0  305D               	movlw	93
  3311  02A1  0270               	subwf	setLedsForPositioning@adcValue,w
  3312  02A2  3003               	movlw	3
  3313  02A3  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3314  02A4  1803               	btfsc	3,0
  3315  02A5  2AA9               	goto	l1790
  3316  02A6                     l433:	
  3317                           ;main.c: 390:     {;main.c: 391:         do { LATBbits.LATB5 = 1; } while(0);
  3318                           
  3319  02A6  168D               	bsf	13,5	;volatile
  3320                           
  3321                           ;main.c: 392:         do { LATBbits.LATB6 = 1; } while(0);
  3322  02A7  170D               	bsf	13,6	;volatile
  3323  02A8  0008               	return
  3324  02A9                     l1790:
  3325  02A9  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3326  02AA  2AB7               	goto	l439
  3327  02AB  0873               	movf	setLedsForPositioning@adcValue+3,w
  3328  02AC  1D03               	btfss	3,2
  3329  02AD  2AB9               	goto	l1792
  3330  02AE  0872               	movf	setLedsForPositioning@adcValue+2,w
  3331  02AF  1D03               	btfss	3,2
  3332  02B0  2AB9               	goto	l1792
  3333  02B1  3093               	movlw	147
  3334  02B2  0270               	subwf	setLedsForPositioning@adcValue,w
  3335  02B3  3003               	movlw	3
  3336  02B4  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3337  02B5  1803               	btfsc	3,0
  3338  02B6  2AB9               	goto	l1792
  3339  02B7                     l439:	
  3340                           ;main.c: 395:     {;main.c: 396:         do { LATBbits.LATB6 = 1; } while(0);
  3341                           
  3342  02B7  170D               	bsf	13,6	;volatile
  3343  02B8  0008               	return
  3344  02B9                     l1792:
  3345  02B9  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3346  02BA  2AC7               	goto	l443
  3347  02BB  0873               	movf	setLedsForPositioning@adcValue+3,w
  3348  02BC  1D03               	btfss	3,2
  3349  02BD  2ACA               	goto	l448
  3350  02BE  0872               	movf	setLedsForPositioning@adcValue+2,w
  3351  02BF  1D03               	btfss	3,2
  3352  02C0  2ACA               	goto	l448
  3353  02C1  30C9               	movlw	201
  3354  02C2  0270               	subwf	setLedsForPositioning@adcValue,w
  3355  02C3  3003               	movlw	3
  3356  02C4  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3357  02C5  1803               	btfsc	3,0
  3358  02C6  2ACA               	goto	l448
  3359  02C7                     l443:	
  3360                           ;main.c: 399:     {;main.c: 400:         do { LATBbits.LATB6 = 1; } while(0);
  3361                           
  3362  02C7  170D               	bsf	13,6	;volatile
  3363                           
  3364                           ;main.c: 401:         do { LATBbits.LATB7 = 1; } while(0);
  3365  02C8  178D               	bsf	13,7	;volatile
  3366  02C9  0008               	return
  3367  02CA                     l448:	
  3368                           ;main.c: 404:     {;main.c: 405:         do { LATBbits.LATB7 = 1; } while(0);
  3369                           
  3370  02CA  178D               	bsf	13,7	;volatile
  3371  02CB  0008               	return
  3372  02CC                     __end_of_setLedsForPositioning:
  3373                           
  3374                           	psect	text6
  3375  04C2                     __ptext6:	
  3376 ;; *************** function ___lmul *****************
  3377 ;; Defined at:
  3378 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  multiplier      4    0[COMMON] unsigned long 
  3381 ;;  multiplicand    4    4[COMMON] unsigned long 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  product         4    8[COMMON] unsigned long 
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  4    0[COMMON] unsigned long 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2, status,0
  3388 ;; Tracked objects:
  3389 ;;		On entry : 1F/0
  3390 ;;		On exit  : 1F/0
  3391 ;;		Unchanged: 1F/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1
  3393 ;;      Params:         8       0       0
  3394 ;;      Locals:         4       0       0
  3395 ;;      Temps:          0       0       0
  3396 ;;      Totals:        12       0       0
  3397 ;;Total ram usage:       12 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    4
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_main
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           
  3408                           ;psect for function ___lmul
  3409  04C2                     ___lmul:
  3410                           
  3411                           ;incstack = 0
  3412                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3413  04C2  3000               	movlw	0
  3414  04C3  00FB               	movwf	___lmul@product+3
  3415  04C4  3000               	movlw	0
  3416  04C5  00FA               	movwf	___lmul@product+2
  3417  04C6  3000               	movlw	0
  3418  04C7  00F9               	movwf	___lmul@product+1
  3419  04C8  3000               	movlw	0
  3420  04C9  00F8               	movwf	___lmul@product
  3421  04CA                     l1796:
  3422  04CA  1C70               	btfss	___lmul@multiplier,0
  3423  04CB  2CD4               	goto	l1800
  3424  04CC  0874               	movf	___lmul@multiplicand,w
  3425  04CD  07F8               	addwf	___lmul@product,f
  3426  04CE  0875               	movf	___lmul@multiplicand+1,w
  3427  04CF  3DF9               	addwfc	___lmul@product+1,f
  3428  04D0  0876               	movf	___lmul@multiplicand+2,w
  3429  04D1  3DFA               	addwfc	___lmul@product+2,f
  3430  04D2  0877               	movf	___lmul@multiplicand+3,w
  3431  04D3  3DFB               	addwfc	___lmul@product+3,f
  3432  04D4                     l1800:
  3433  04D4  3001               	movlw	1
  3434  04D5                     u1265:
  3435  04D5  35F4               	lslf	___lmul@multiplicand,f
  3436  04D6  0DF5               	rlf	___lmul@multiplicand+1,f
  3437  04D7  0DF6               	rlf	___lmul@multiplicand+2,f
  3438  04D8  0DF7               	rlf	___lmul@multiplicand+3,f
  3439  04D9  0B89               	decfsz	9,f
  3440  04DA  2CD5               	goto	u1265
  3441  04DB  3001               	movlw	1
  3442  04DC                     u1275:
  3443  04DC  36F3               	lsrf	___lmul@multiplier+3,f
  3444  04DD  0CF2               	rrf	___lmul@multiplier+2,f
  3445  04DE  0CF1               	rrf	___lmul@multiplier+1,f
  3446  04DF  0CF0               	rrf	___lmul@multiplier,f
  3447  04E0  0B89               	decfsz	9,f
  3448  04E1  2CDC               	goto	u1275
  3449  04E2  0873               	movf	___lmul@multiplier+3,w
  3450  04E3  0472               	iorwf	___lmul@multiplier+2,w
  3451  04E4  0471               	iorwf	___lmul@multiplier+1,w
  3452  04E5  0470               	iorwf	___lmul@multiplier,w
  3453  04E6  1D03               	skipz
  3454  04E7  2CCA               	goto	l1796
  3455  04E8  087B               	movf	___lmul@product+3,w
  3456  04E9  00F3               	movwf	?___lmul+3
  3457  04EA  087A               	movf	___lmul@product+2,w
  3458  04EB  00F2               	movwf	?___lmul+2
  3459  04EC  0879               	movf	___lmul@product+1,w
  3460  04ED  00F1               	movwf	?___lmul+1
  3461  04EE  0878               	movf	___lmul@product,w
  3462  04EF  00F0               	movwf	?___lmul
  3463  04F0  0008               	return
  3464  04F1                     __end_of___lmul:
  3465                           
  3466                           	psect	text7
  3467  039B                     __ptext7:	
  3468 ;; *************** function ___aldiv *****************
  3469 ;; Defined at:
  3470 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  divisor         4    0[BANK0 ] long 
  3473 ;;  dividend        4    4[BANK0 ] long 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  quotient        4   10[BANK0 ] long 
  3476 ;;  sign            1    9[BANK0 ] unsigned char 
  3477 ;;  counter         1    8[BANK0 ] unsigned char 
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  4    0[BANK0 ] long 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0
  3482 ;; Tracked objects:
  3483 ;;		On entry : 1F/0
  3484 ;;		On exit  : 1F/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMMON   BANK0   BANK1
  3487 ;;      Params:         0       8       0
  3488 ;;      Locals:         0       6       0
  3489 ;;      Temps:          1       0       0
  3490 ;;      Totals:         1      14       0
  3491 ;;Total ram usage:       15 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    4
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_main
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           
  3502                           ;psect for function ___aldiv
  3503  039B                     ___aldiv:
  3504                           
  3505                           ;incstack = 0
  3506                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3507  039B  01A9               	clrf	___aldiv@sign
  3508  039C  1FA3               	btfss	___aldiv@divisor+3,7
  3509  039D  2BAB               	goto	l583
  3510  039E  09A0               	comf	___aldiv@divisor,f
  3511  039F  09A1               	comf	___aldiv@divisor+1,f
  3512  03A0  09A2               	comf	___aldiv@divisor+2,f
  3513  03A1  09A3               	comf	___aldiv@divisor+3,f
  3514  03A2  0AA0               	incf	___aldiv@divisor,f
  3515  03A3  1903               	skipnz
  3516  03A4  0AA1               	incf	___aldiv@divisor+1,f
  3517  03A5  1903               	skipnz
  3518  03A6  0AA2               	incf	___aldiv@divisor+2,f
  3519  03A7  1903               	skipnz
  3520  03A8  0AA3               	incf	___aldiv@divisor+3,f
  3521  03A9  01A9               	clrf	___aldiv@sign
  3522  03AA  0AA9               	incf	___aldiv@sign,f
  3523  03AB                     l583:
  3524  03AB  1FA7               	btfss	___aldiv@dividend+3,7
  3525  03AC  2BBC               	goto	l1818
  3526  03AD  09A4               	comf	___aldiv@dividend,f
  3527  03AE  09A5               	comf	___aldiv@dividend+1,f
  3528  03AF  09A6               	comf	___aldiv@dividend+2,f
  3529  03B0  09A7               	comf	___aldiv@dividend+3,f
  3530  03B1  0AA4               	incf	___aldiv@dividend,f
  3531  03B2  1903               	skipnz
  3532  03B3  0AA5               	incf	___aldiv@dividend+1,f
  3533  03B4  1903               	skipnz
  3534  03B5  0AA6               	incf	___aldiv@dividend+2,f
  3535  03B6  1903               	skipnz
  3536  03B7  0AA7               	incf	___aldiv@dividend+3,f
  3537  03B8  3001               	movlw	1
  3538  03B9  00FC               	movwf	??___aldiv
  3539  03BA  087C               	movf	??___aldiv,w
  3540  03BB  06A9               	xorwf	___aldiv@sign,f
  3541  03BC                     l1818:
  3542  03BC  3000               	movlw	0
  3543  03BD  00AD               	movwf	___aldiv@quotient+3
  3544  03BE  3000               	movlw	0
  3545  03BF  00AC               	movwf	___aldiv@quotient+2
  3546  03C0  3000               	movlw	0
  3547  03C1  00AB               	movwf	___aldiv@quotient+1
  3548  03C2  3000               	movlw	0
  3549  03C3  00AA               	movwf	___aldiv@quotient
  3550  03C4  0823               	movf	___aldiv@divisor+3,w
  3551  03C5  0422               	iorwf	___aldiv@divisor+2,w
  3552  03C6  0421               	iorwf	___aldiv@divisor+1,w
  3553  03C7  0420               	iorwf	___aldiv@divisor,w
  3554  03C8  1903               	skipnz
  3555  03C9  2C05               	goto	l1840
  3556  03CA  01A8               	clrf	___aldiv@counter
  3557  03CB  0AA8               	incf	___aldiv@counter,f
  3558  03CC                     l1826:
  3559  03CC  1BA3               	btfsc	___aldiv@divisor+3,7
  3560  03CD  2BDA               	goto	l1828
  3561  03CE  3001               	movlw	1
  3562  03CF                     u1325:
  3563  03CF  35A0               	lslf	___aldiv@divisor,f
  3564  03D0  0DA1               	rlf	___aldiv@divisor+1,f
  3565  03D1  0DA2               	rlf	___aldiv@divisor+2,f
  3566  03D2  0DA3               	rlf	___aldiv@divisor+3,f
  3567  03D3  0B89               	decfsz	9,f
  3568  03D4  2BCF               	goto	u1325
  3569  03D5  3001               	movlw	1
  3570  03D6  00FC               	movwf	??___aldiv
  3571  03D7  087C               	movf	??___aldiv,w
  3572  03D8  07A8               	addwf	___aldiv@counter,f
  3573  03D9  2BCC               	goto	l1826
  3574  03DA                     l1828:
  3575  03DA  3001               	movlw	1
  3576  03DB                     u1345:
  3577  03DB  35AA               	lslf	___aldiv@quotient,f
  3578  03DC  0DAB               	rlf	___aldiv@quotient+1,f
  3579  03DD  0DAC               	rlf	___aldiv@quotient+2,f
  3580  03DE  0DAD               	rlf	___aldiv@quotient+3,f
  3581  03DF  0B89               	decfsz	9,f
  3582  03E0  2BDB               	goto	u1345
  3583  03E1  0823               	movf	___aldiv@divisor+3,w
  3584  03E2  0227               	subwf	___aldiv@dividend+3,w
  3585  03E3  1D03               	skipz
  3586  03E4  2BEF               	goto	u1355
  3587  03E5  0822               	movf	___aldiv@divisor+2,w
  3588  03E6  0226               	subwf	___aldiv@dividend+2,w
  3589  03E7  1D03               	skipz
  3590  03E8  2BEF               	goto	u1355
  3591  03E9  0821               	movf	___aldiv@divisor+1,w
  3592  03EA  0225               	subwf	___aldiv@dividend+1,w
  3593  03EB  1D03               	skipz
  3594  03EC  2BEF               	goto	u1355
  3595  03ED  0820               	movf	___aldiv@divisor,w
  3596  03EE  0224               	subwf	___aldiv@dividend,w
  3597  03EF                     u1355:
  3598  03EF  1C03               	skipc
  3599  03F0  2BFA               	goto	l1836
  3600  03F1  0820               	movf	___aldiv@divisor,w
  3601  03F2  02A4               	subwf	___aldiv@dividend,f
  3602  03F3  0821               	movf	___aldiv@divisor+1,w
  3603  03F4  3BA5               	subwfb	___aldiv@dividend+1,f
  3604  03F5  0822               	movf	___aldiv@divisor+2,w
  3605  03F6  3BA6               	subwfb	___aldiv@dividend+2,f
  3606  03F7  0823               	movf	___aldiv@divisor+3,w
  3607  03F8  3BA7               	subwfb	___aldiv@dividend+3,f
  3608  03F9  142A               	bsf	___aldiv@quotient,0
  3609  03FA                     l1836:
  3610  03FA  3001               	movlw	1
  3611  03FB                     u1365:
  3612  03FB  36A3               	lsrf	___aldiv@divisor+3,f
  3613  03FC  0CA2               	rrf	___aldiv@divisor+2,f
  3614  03FD  0CA1               	rrf	___aldiv@divisor+1,f
  3615  03FE  0CA0               	rrf	___aldiv@divisor,f
  3616  03FF  0B89               	decfsz	9,f
  3617  0400  2BFB               	goto	u1365
  3618  0401  3001               	movlw	1
  3619  0402  02A8               	subwf	___aldiv@counter,f
  3620  0403  1D03               	btfss	3,2
  3621  0404  2BDA               	goto	l1828
  3622  0405                     l1840:
  3623  0405  0829               	movf	___aldiv@sign,w
  3624  0406  1903               	btfsc	3,2
  3625  0407  2C13               	goto	l1844
  3626  0408  09AA               	comf	___aldiv@quotient,f
  3627  0409  09AB               	comf	___aldiv@quotient+1,f
  3628  040A  09AC               	comf	___aldiv@quotient+2,f
  3629  040B  09AD               	comf	___aldiv@quotient+3,f
  3630  040C  0AAA               	incf	___aldiv@quotient,f
  3631  040D  1903               	skipnz
  3632  040E  0AAB               	incf	___aldiv@quotient+1,f
  3633  040F  1903               	skipnz
  3634  0410  0AAC               	incf	___aldiv@quotient+2,f
  3635  0411  1903               	skipnz
  3636  0412  0AAD               	incf	___aldiv@quotient+3,f
  3637  0413                     l1844:
  3638  0413  082D               	movf	___aldiv@quotient+3,w
  3639  0414  00A3               	movwf	?___aldiv+3
  3640  0415  082C               	movf	___aldiv@quotient+2,w
  3641  0416  00A2               	movwf	?___aldiv+2
  3642  0417  082B               	movf	___aldiv@quotient+1,w
  3643  0418  00A1               	movwf	?___aldiv+1
  3644  0419  082A               	movf	___aldiv@quotient,w
  3645  041A  00A0               	movwf	?___aldiv
  3646  041B  0008               	return
  3647  041C                     __end_of___aldiv:
  3648                           
  3649                           	psect	text8
  3650  0613                     __ptext8:	
  3651 ;; *************** function _TMR2_StartTimer *****************
  3652 ;; Defined at:
  3653 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;		None
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;		None
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		None
  3662 ;; Tracked objects:
  3663 ;;		On entry : 1F/1
  3664 ;;		On exit  : 1F/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMMON   BANK0   BANK1
  3667 ;;      Params:         0       0       0
  3668 ;;      Locals:         0       0       0
  3669 ;;      Temps:          0       0       0
  3670 ;;      Totals:         0       0       0
  3671 ;;Total ram usage:        0 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    4
  3674 ;; This function calls:
  3675 ;;		Nothing
  3676 ;; This function is called by:
  3677 ;;		_main
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           
  3682                           ;psect for function _TMR2_StartTimer
  3683  0613                     _TMR2_StartTimer:
  3684                           
  3685                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  3686                           
  3687                           ;incstack = 0
  3688                           ; Regs used in _TMR2_StartTimer: []
  3689  0613  0020               	movlb	0	; select bank0
  3690  0614  151C               	bsf	28,2	;volatile
  3691  0615  0008               	return
  3692  0616                     __end_of_TMR2_StartTimer:
  3693                           
  3694                           	psect	text9
  3695  05CC                     __ptext9:	
  3696 ;; *************** function _SYSTEM_Initialize *****************
  3697 ;; Defined at:
  3698 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, pclath, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : B1F/0
  3709 ;;		On exit  : 1F/1
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1
  3712 ;;      Params:         0       0       0
  3713 ;;      Locals:         0       0       0
  3714 ;;      Temps:          0       0       0
  3715 ;;      Totals:         0       0       0
  3716 ;;Total ram usage:        0 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    6
  3719 ;; This function calls:
  3720 ;;		_ADC_Initialize
  3721 ;;		_OSCILLATOR_Initialize
  3722 ;;		_PIN_MANAGER_Initialize
  3723 ;;		_PWM3_Initialize
  3724 ;;		_TMR0_Initialize
  3725 ;;		_TMR2_Initialize
  3726 ;;		_WDT_Initialize
  3727 ;; This function is called by:
  3728 ;;		_main
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           
  3733                           ;psect for function _SYSTEM_Initialize
  3734  05CC                     _SYSTEM_Initialize:
  3735                           
  3736                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3737                           
  3738                           ;incstack = 0
  3739                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3740  05CC  254C               	fcall	_PIN_MANAGER_Initialize
  3741                           
  3742                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3743  05CD  2605               	fcall	_OSCILLATOR_Initialize
  3744                           
  3745                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3746  05CE  260F               	fcall	_WDT_Initialize
  3747                           
  3748                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  3749  05CF  25E4               	fcall	_ADC_Initialize
  3750                           
  3751                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  3752  05D0  25DC               	fcall	_PWM3_Initialize
  3753                           
  3754                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3755  05D1  25D4               	fcall	_TMR2_Initialize
  3756                           
  3757                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3758  05D2  2592               	fcall	_TMR0_Initialize
  3759  05D3  0008               	return
  3760  05D4                     __end_of_SYSTEM_Initialize:
  3761                           
  3762                           	psect	text10
  3763  060F                     __ptext10:	
  3764 ;; *************** function _WDT_Initialize *****************
  3765 ;; Defined at:
  3766 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;		None
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg
  3775 ;; Tracked objects:
  3776 ;;		On entry : B1F/2
  3777 ;;		On exit  : B1F/1
  3778 ;;		Unchanged: B00/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1
  3780 ;;      Params:         0       0       0
  3781 ;;      Locals:         0       0       0
  3782 ;;      Temps:          0       0       0
  3783 ;;      Totals:         0       0       0
  3784 ;;Total ram usage:        0 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    4
  3787 ;; This function calls:
  3788 ;;		Nothing
  3789 ;; This function is called by:
  3790 ;;		_SYSTEM_Initialize
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           
  3795                           ;psect for function _WDT_Initialize
  3796  060F                     _WDT_Initialize:
  3797                           
  3798                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  3799                           
  3800                           ;incstack = 0
  3801                           ; Regs used in _WDT_Initialize: [wreg]
  3802  060F  3016               	movlw	22
  3803  0610  0021               	movlb	1	; select bank1
  3804  0611  0097               	movwf	23	;volatile
  3805  0612  0008               	return
  3806  0613                     __end_of_WDT_Initialize:
  3807                           
  3808                           	psect	text11
  3809  05D4                     __ptext11:	
  3810 ;; *************** function _TMR2_Initialize *****************
  3811 ;; Defined at:
  3812 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;		None
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;		None
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2
  3821 ;; Tracked objects:
  3822 ;;		On entry : B1F/C
  3823 ;;		On exit  : B1F/0
  3824 ;;		Unchanged: B00/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1
  3826 ;;      Params:         0       0       0
  3827 ;;      Locals:         0       0       0
  3828 ;;      Temps:          0       0       0
  3829 ;;      Totals:         0       0       0
  3830 ;;Total ram usage:        0 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    4
  3833 ;; This function calls:
  3834 ;;		Nothing
  3835 ;; This function is called by:
  3836 ;;		_SYSTEM_Initialize
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           
  3841                           ;psect for function _TMR2_Initialize
  3842  05D4                     _TMR2_Initialize:
  3843                           
  3844                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  3845                           
  3846                           ;incstack = 0
  3847                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  3848  05D4  30FF               	movlw	255
  3849  05D5  0020               	movlb	0	; select bank0
  3850  05D6  009B               	movwf	27	;volatile
  3851                           
  3852                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  3853  05D7  019A               	clrf	26	;volatile
  3854                           
  3855                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  3856  05D8  1091               	bcf	17,1	;volatile
  3857                           
  3858                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  3859  05D9  301C               	movlw	28
  3860  05DA  009C               	movwf	28	;volatile
  3861  05DB  0008               	return
  3862  05DC                     __end_of_TMR2_Initialize:
  3863                           
  3864                           	psect	text12
  3865  0592                     __ptext12:	
  3866 ;; *************** function _TMR0_Initialize *****************
  3867 ;; Defined at:
  3868 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      void 
  3875 ;; Registers used:
  3876 ;;		wreg, status,2, status,0, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : B1F/0
  3879 ;;		On exit  : 1F/1
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1
  3882 ;;      Params:         0       0       0
  3883 ;;      Locals:         0       0       0
  3884 ;;      Temps:          1       0       0
  3885 ;;      Totals:         1       0       0
  3886 ;;Total ram usage:        1 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    5
  3889 ;; This function calls:
  3890 ;;		_TMR0_SetInterruptHandler
  3891 ;; This function is called by:
  3892 ;;		_SYSTEM_Initialize
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           
  3897                           ;psect for function _TMR0_Initialize
  3898  0592                     _TMR0_Initialize:
  3899                           
  3900                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3904  0592  0021               	movlb	1	; select bank1
  3905  0593  0815               	movf	21,w	;volatile
  3906  0594  39C0               	andlw	192
  3907  0595  3811               	iorlw	17
  3908  0596  0095               	movwf	21	;volatile
  3909                           
  3910                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  3911  0597  3006               	movlw	6
  3912  0598  0020               	movlb	0	; select bank0
  3913  0599  0095               	movwf	21	;volatile
  3914                           
  3915                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  3916  059A  3006               	movlw	6
  3917  059B  00F2               	movwf	??_TMR0_Initialize
  3918  059C  0872               	movf	??_TMR0_Initialize,w
  3919  059D  0021               	movlb	1	; select bank1
  3920  059E  00A2               	movwf	_timer0ReloadVal^(0+128)	;volatile
  3921                           
  3922                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3923  059F  110B               	bcf	11,2	;volatile
  3924                           
  3925                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3926  05A0  168B               	bsf	11,5	;volatile
  3927                           
  3928                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3929  05A1  3016               	movlw	low _TMR0_DefaultInterruptHandler
  3930  05A2  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3931  05A3  3006               	movlw	high _TMR0_DefaultInterruptHandler
  3932  05A4  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3933  05A5  25FF               	fcall	_TMR0_SetInterruptHandler
  3934  05A6  0008               	return
  3935  05A7                     __end_of_TMR0_Initialize:
  3936                           
  3937                           	psect	text13
  3938  05FF                     __ptext13:	
  3939 ;; *************** function _TMR0_SetInterruptHandler *****************
  3940 ;; Defined at:
  3941 ;;		line 117 in file "mcc_generated_files/tmr0.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  3944 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      void 
  3949 ;; Registers used:
  3950 ;;		wreg
  3951 ;; Tracked objects:
  3952 ;;		On entry : 1E/0
  3953 ;;		On exit  : 1F/1
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1
  3956 ;;      Params:         2       0       0
  3957 ;;      Locals:         0       0       0
  3958 ;;      Temps:          0       0       0
  3959 ;;      Totals:         2       0       0
  3960 ;;Total ram usage:        2 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    4
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_TMR0_Initialize
  3967 ;;		_main
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           
  3972                           ;psect for function _TMR0_SetInterruptHandler
  3973  05FF                     _TMR0_SetInterruptHandler:
  3974                           
  3975                           ;mcc_generated_files/tmr0.c: 118:     TMR0_InterruptHandler = InterruptHandler;
  3976                           
  3977                           ;incstack = 0
  3978                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3979  05FF  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3980  0600  0021               	movlb	1	; select bank1
  3981  0601  00A1               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  3982  0602  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3983  0603  00A0               	movwf	_TMR0_InterruptHandler^(0+128)
  3984  0604  0008               	return
  3985  0605                     __end_of_TMR0_SetInterruptHandler:
  3986                           
  3987                           	psect	text14
  3988  05DC                     __ptext14:	
  3989 ;; *************** function _PWM3_Initialize *****************
  3990 ;; Defined at:
  3991 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;		None
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg
  4000 ;; Tracked objects:
  4001 ;;		On entry : B1F/1
  4002 ;;		On exit  : B1F/C
  4003 ;;		Unchanged: B00/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1
  4005 ;;      Params:         0       0       0
  4006 ;;      Locals:         0       0       0
  4007 ;;      Temps:          0       0       0
  4008 ;;      Totals:         0       0       0
  4009 ;;Total ram usage:        0 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    4
  4012 ;; This function calls:
  4013 ;;		Nothing
  4014 ;; This function is called by:
  4015 ;;		_SYSTEM_Initialize
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           
  4020                           ;psect for function _PWM3_Initialize
  4021  05DC                     _PWM3_Initialize:
  4022                           
  4023                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  4024                           
  4025                           ;incstack = 0
  4026                           ; Regs used in _PWM3_Initialize: [wreg]
  4027  05DC  30D0               	movlw	208
  4028  05DD  002C               	movlb	12	; select bank12
  4029  05DE  0099               	movwf	25	;volatile
  4030                           
  4031                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  4032  05DF  30FF               	movlw	255
  4033  05E0  0098               	movwf	24	;volatile
  4034                           
  4035                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  4036  05E1  30C0               	movlw	192
  4037  05E2  0097               	movwf	23	;volatile
  4038  05E3  0008               	return
  4039  05E4                     __end_of_PWM3_Initialize:
  4040                           
  4041                           	psect	text15
  4042  054C                     __ptext15:	
  4043 ;; *************** function _PIN_MANAGER_Initialize *****************
  4044 ;; Defined at:
  4045 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, status,2
  4054 ;; Tracked objects:
  4055 ;;		On entry : B1F/0
  4056 ;;		On exit  : B1F/2
  4057 ;;		Unchanged: B00/0
  4058 ;; Data sizes:     COMMON   BANK0   BANK1
  4059 ;;      Params:         0       0       0
  4060 ;;      Locals:         0       0       0
  4061 ;;      Temps:          0       0       0
  4062 ;;      Totals:         0       0       0
  4063 ;;Total ram usage:        0 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    4
  4066 ;; This function calls:
  4067 ;;		Nothing
  4068 ;; This function is called by:
  4069 ;;		_SYSTEM_Initialize
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           
  4074                           ;psect for function _PIN_MANAGER_Initialize
  4075  054C                     _PIN_MANAGER_Initialize:
  4076                           
  4077                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4078                           
  4079                           ;incstack = 0
  4080                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4081  054C  0022               	movlb	2	; select bank2
  4082  054D  018C               	clrf	12	;volatile
  4083                           
  4084                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4085  054E  018D               	clrf	13	;volatile
  4086                           
  4087                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4088  054F  018E               	clrf	14	;volatile
  4089                           
  4090                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  4091  0550  303B               	movlw	59
  4092  0551  0021               	movlb	1	; select bank1
  4093  0552  008C               	movwf	12	;volatile
  4094                           
  4095                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  4096  0553  3010               	movlw	16
  4097  0554  008D               	movwf	13	;volatile
  4098                           
  4099                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  4100  0555  018E               	clrf	14	;volatile
  4101                           
  4102                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4103  0556  0023               	movlb	3	; select bank3
  4104  0557  018E               	clrf	14	;volatile
  4105                           
  4106                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  4107  0558  3030               	movlw	48
  4108  0559  008D               	movwf	13	;volatile
  4109                           
  4110                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  4111  055A  3013               	movlw	19
  4112  055B  008C               	movwf	12	;volatile
  4113                           
  4114                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4115  055C  0024               	movlb	4	; select bank4
  4116  055D  018D               	clrf	13	;volatile
  4117                           
  4118                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4119  055E  018C               	clrf	12	;volatile
  4120                           
  4121                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4122  055F  0021               	movlb	1	; select bank1
  4123  0560  1795               	bsf	21,7	;volatile
  4124                           
  4125                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4126  0561  0022               	movlb	2	; select bank2
  4127  0562  019D               	clrf	29	;volatile
  4128  0563  0008               	return
  4129  0564                     __end_of_PIN_MANAGER_Initialize:
  4130                           
  4131                           	psect	text16
  4132  0605                     __ptext16:	
  4133 ;; *************** function _OSCILLATOR_Initialize *****************
  4134 ;; Defined at:
  4135 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, status,2
  4144 ;; Tracked objects:
  4145 ;;		On entry : B1F/2
  4146 ;;		On exit  : B1F/2
  4147 ;;		Unchanged: B00/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1
  4149 ;;      Params:         0       0       0
  4150 ;;      Locals:         0       0       0
  4151 ;;      Temps:          0       0       0
  4152 ;;      Totals:         0       0       0
  4153 ;;Total ram usage:        0 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    4
  4156 ;; This function calls:
  4157 ;;		Nothing
  4158 ;; This function is called by:
  4159 ;;		_SYSTEM_Initialize
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _OSCILLATOR_Initialize
  4165  0605                     _OSCILLATOR_Initialize:
  4166                           
  4167                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  4168                           
  4169                           ;incstack = 0
  4170                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4171  0605  306A               	movlw	106
  4172  0606  0021               	movlb	1	; select bank1
  4173  0607  0099               	movwf	25	;volatile
  4174                           
  4175                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4176  0608  0022               	movlb	2	; select bank2
  4177  0609  0196               	clrf	22	;volatile
  4178  060A  0008               	return
  4179  060B                     __end_of_OSCILLATOR_Initialize:
  4180                           
  4181                           	psect	text17
  4182  05E4                     __ptext17:	
  4183 ;; *************** function _ADC_Initialize *****************
  4184 ;; Defined at:
  4185 ;;		line 67 in file "mcc_generated_files/adc.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2
  4194 ;; Tracked objects:
  4195 ;;		On entry : B1F/1
  4196 ;;		On exit  : B1F/1
  4197 ;;		Unchanged: B00/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1
  4199 ;;      Params:         0       0       0
  4200 ;;      Locals:         0       0       0
  4201 ;;      Temps:          0       0       0
  4202 ;;      Totals:         0       0       0
  4203 ;;Total ram usage:        0 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    4
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_SYSTEM_Initialize
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function _ADC_Initialize
  4215  05E4                     _ADC_Initialize:
  4216                           
  4217                           ;mcc_generated_files/adc.c: 72:     ADCON0 = 0x01;
  4218                           
  4219                           ;incstack = 0
  4220                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4221  05E4  3001               	movlw	1
  4222  05E5  009D               	movwf	29	;volatile
  4223                           
  4224                           ;mcc_generated_files/adc.c: 75:     ADCON1 = 0xC0;
  4225  05E6  30C0               	movlw	192
  4226  05E7  009E               	movwf	30	;volatile
  4227                           
  4228                           ;mcc_generated_files/adc.c: 78:     ADCON2 = 0x00;
  4229  05E8  019F               	clrf	31	;volatile
  4230                           
  4231                           ;mcc_generated_files/adc.c: 81:     ADRESL = 0x00;
  4232  05E9  019B               	clrf	27	;volatile
  4233                           
  4234                           ;mcc_generated_files/adc.c: 84:     ADRESH = 0x00;
  4235  05EA  019C               	clrf	28	;volatile
  4236  05EB  0008               	return
  4237  05EC                     __end_of_ADC_Initialize:
  4238                           
  4239                           	psect	text18
  4240  057C                     __ptext18:	
  4241 ;; *************** function _PWM3_LoadDutyValue *****************
  4242 ;; Defined at:
  4243 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;  dutyValue       2    4[COMMON] unsigned short 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg, status,2, status,0
  4252 ;; Tracked objects:
  4253 ;;		On entry : 1F/1
  4254 ;;		On exit  : 1F/C
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1
  4257 ;;      Params:         2       0       0
  4258 ;;      Locals:         0       0       0
  4259 ;;      Temps:          2       0       0
  4260 ;;      Totals:         4       0       0
  4261 ;;Total ram usage:        4 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    4
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_main
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _PWM3_LoadDutyValue
  4273  057C                     _PWM3_LoadDutyValue:
  4274                           
  4275                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  4279  057C  0875               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  4280  057D  00F7               	movwf	??_PWM3_LoadDutyValue+1
  4281  057E  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4282  057F  00F6               	movwf	??_PWM3_LoadDutyValue
  4283  0580  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4284  0581  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4285  0582  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4286  0583  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4287  0584  0876               	movf	??_PWM3_LoadDutyValue,w
  4288  0585  002C               	movlb	12	; select bank12
  4289  0586  0098               	movwf	24	;volatile
  4290                           
  4291                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  4292  0587  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4293  0588  3903               	andlw	3
  4294  0589  00F6               	movwf	??_PWM3_LoadDutyValue
  4295  058A  3005               	movlw	5
  4296  058B                     u1005:
  4297  058B  35F6               	lslf	??_PWM3_LoadDutyValue,f
  4298  058C  3EFF               	addlw	-1
  4299  058D  1D03               	skipz
  4300  058E  2D8B               	goto	u1005
  4301  058F  3576               	lslf	??_PWM3_LoadDutyValue,w
  4302  0590  0097               	movwf	23	;volatile
  4303  0591  0008               	return
  4304  0592                     __end_of_PWM3_LoadDutyValue:
  4305                           
  4306                           	psect	text19
  4307  041C                     __ptext19:	
  4308 ;; *************** function _FLASH_WriteBlock *****************
  4309 ;; Defined at:
  4310 ;;		line 94 in file "mcc_generated_files/memory.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  writeAddr       2    3[COMMON] unsigned short 
  4313 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  4314 ;;		 -> main@wrBlockData(32), 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  blockStartAd    2    9[COMMON] unsigned short 
  4317 ;;  i               1   12[COMMON] unsigned char 
  4318 ;;  GIEBitValue     1   11[COMMON] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      char 
  4321 ;; Registers used:
  4322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 1F/0
  4325 ;;		On exit  : 1C/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1
  4328 ;;      Params:         3       0       0
  4329 ;;      Locals:         4       0       0
  4330 ;;      Temps:          3       0       0
  4331 ;;      Totals:        10       0       0
  4332 ;;Total ram usage:       10 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    5
  4335 ;; This function calls:
  4336 ;;		_FLASH_EraseBlock
  4337 ;; This function is called by:
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           
  4343                           ;psect for function _FLASH_WriteBlock
  4344  041C                     _FLASH_WriteBlock:
  4345                           
  4346                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x800 -1) ^ (16 -1)));
  4347                           
  4348                           ;incstack = 0
  4349                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4350  041C  30F0               	movlw	240
  4351  041D  0573               	andwf	FLASH_WriteBlock@writeAddr,w
  4352  041E  00F9               	movwf	FLASH_WriteBlock@blockStartAddr
  4353  041F  3007               	movlw	7
  4354  0420  0574               	andwf	FLASH_WriteBlock@writeAddr+1,w
  4355  0421  00FA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  4356                           
  4357                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  4358  0422  3000               	movlw	0
  4359  0423  1B8B               	btfsc	11,7	;volatile
  4360  0424  3001               	movlw	1
  4361  0425  00FB               	movwf	FLASH_WriteBlock@GIEBitValue
  4362                           
  4363                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  4364  0426  087A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  4365  0427  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  4366  0428  1D03               	skipz
  4367  0429  2C2C               	goto	u1015
  4368  042A  0879               	movf	FLASH_WriteBlock@blockStartAddr,w
  4369  042B  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  4370  042C                     u1015:
  4371  042C  1D03               	btfss	3,2
  4372  042D  0008               	return
  4373                           
  4374                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  4375                           
  4376                           ;mcc_generated_files/memory.c: 104:     }
  4377  042E  138B               	bcf	11,7	;volatile
  4378                           
  4379                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  4380  042F  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  4381  0430  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  4382  0431  0873               	movf	FLASH_WriteBlock@writeAddr,w
  4383  0432  00F0               	movwf	FLASH_EraseBlock@startAddr
  4384  0433  2517               	fcall	_FLASH_EraseBlock
  4385                           
  4386                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  4387  0434  1315               	bcf	21,6	;volatile
  4388                           
  4389                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  4390  0435  1515               	bsf	21,2	;volatile
  4391                           
  4392                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  4393  0436  1695               	bsf	21,5	;volatile
  4394                           
  4395                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<16; i++)
  4396  0437  01FC               	clrf	FLASH_WriteBlock@i
  4397  0438                     l1700:
  4398                           
  4399                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  4400  0438  0873               	movf	FLASH_WriteBlock@writeAddr,w
  4401  0439  0023               	movlb	3	; select bank3
  4402  043A  0091               	movwf	17	;volatile
  4403                           
  4404                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  4405  043B  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  4406  043C  0092               	movwf	18	;volatile
  4407                           
  4408                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  4409  043D  357C               	lslf	FLASH_WriteBlock@i,w
  4410  043E  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  4411  043F  00F6               	movwf	??_FLASH_WriteBlock
  4412  0440  0876               	movf	??_FLASH_WriteBlock,w
  4413  0441  0086               	movwf	6
  4414  0442  0187               	clrf	7
  4415  0443  0801               	movf	1,w
  4416  0444  0093               	movwf	19	;volatile
  4417                           
  4418                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  4419  0445  357C               	lslf	FLASH_WriteBlock@i,w
  4420  0446  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  4421  0447  00F6               	movwf	??_FLASH_WriteBlock
  4422  0448  0876               	movf	??_FLASH_WriteBlock,w
  4423  0449  0086               	movwf	6
  4424  044A  0187               	clrf	7
  4425  044B  3F40               	moviw [0]fsr1
  4426  044C  00F7               	movwf	??_FLASH_WriteBlock+1
  4427  044D  3F41               	moviw [1]fsr1
  4428  044E  00F8               	movwf	??_FLASH_WriteBlock+2
  4429  044F  0878               	movf	??_FLASH_WriteBlock+2,w
  4430  0450  0094               	movwf	20	;volatile
  4431                           
  4432                           ;mcc_generated_files/memory.c: 127:         if(i == (16 -1))
  4433  0451  300F               	movlw	15
  4434  0452  067C               	xorwf	FLASH_WriteBlock@i,w
  4435  0453  1903               	btfsc	3,2
  4436                           
  4437                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  4438  0454  1295               	bcf	21,5	;volatile
  4439                           
  4440                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  4441  0455  3055               	movlw	85
  4442  0456  0096               	movwf	22	;volsfr
  4443                           
  4444                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  4445  0457  30AA               	movlw	170
  4446  0458  0096               	movwf	22	;volsfr
  4447                           
  4448                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  4449  0459  1495               	bsf	21,1	;volatile
  4450                           
  4451                           ;mcc_generated_files/memory.c: 136:         __nop();
  4452  045A  0000               	nop
  4453                           
  4454                           ;mcc_generated_files/memory.c: 137:         __nop();
  4455  045B  0000               	nop
  4456                           
  4457                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  4458  045C  3001               	movlw	1
  4459  045D  07F3               	addwf	FLASH_WriteBlock@writeAddr,f
  4460  045E  3000               	movlw	0
  4461  045F  3DF4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  4462                           
  4463                           ;mcc_generated_files/memory.c: 140:     }
  4464  0460  3001               	movlw	1
  4465  0461  00F6               	movwf	??_FLASH_WriteBlock
  4466  0462  0876               	movf	??_FLASH_WriteBlock,w
  4467  0463  07FC               	addwf	FLASH_WriteBlock@i,f
  4468  0464  3010               	movlw	16
  4469  0465  027C               	subwf	FLASH_WriteBlock@i,w
  4470  0466  1C03               	skipc
  4471  0467  2C38               	goto	l1700
  4472                           
  4473                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  4474  0468  0023               	movlb	3	; select bank3
  4475  0469  1115               	bcf	21,2	;volatile
  4476                           
  4477                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  4478  046A  0C7B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  4479  046B  1C03               	skipc
  4480  046C  138B               	bcf	11,7	;volatile
  4481  046D  1803               	skipnc
  4482  046E  178B               	bsf	11,7	;volatile
  4483  046F  0008               	return
  4484  0470                     __end_of_FLASH_WriteBlock:
  4485                           
  4486                           	psect	text20
  4487  0517                     __ptext20:	
  4488 ;; *************** function _FLASH_EraseBlock *****************
  4489 ;; Defined at:
  4490 ;;		line 148 in file "mcc_generated_files/memory.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  startAddr       2    0[COMMON] unsigned short 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      void 
  4497 ;; Registers used:
  4498 ;;		wreg, status,2, status,0
  4499 ;; Tracked objects:
  4500 ;;		On entry : 1F/0
  4501 ;;		On exit  : 1F/3
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMMON   BANK0   BANK1
  4504 ;;      Params:         2       0       0
  4505 ;;      Locals:         1       0       0
  4506 ;;      Temps:          0       0       0
  4507 ;;      Totals:         3       0       0
  4508 ;;Total ram usage:        3 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    4
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_FLASH_WriteBlock
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           
  4519                           ;psect for function _FLASH_EraseBlock
  4520  0517                     _FLASH_EraseBlock:
  4521                           
  4522                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  4523                           
  4524                           ;incstack = 0
  4525                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  4526  0517  3000               	movlw	0
  4527  0518  1B8B               	btfsc	11,7	;volatile
  4528  0519  3001               	movlw	1
  4529  051A  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  4530                           
  4531                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  4532  051B  138B               	bcf	11,7	;volatile
  4533                           
  4534                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  4535  051C  0870               	movf	FLASH_EraseBlock@startAddr,w
  4536  051D  0023               	movlb	3	; select bank3
  4537  051E  0091               	movwf	17	;volatile
  4538                           
  4539                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  4540  051F  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  4541  0520  0092               	movwf	18	;volatile
  4542                           
  4543                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  4544  0521  1315               	bcf	21,6	;volatile
  4545                           
  4546                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  4547  0522  1615               	bsf	21,4	;volatile
  4548                           
  4549                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  4550  0523  1515               	bsf	21,2	;volatile
  4551                           
  4552                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  4553  0524  3055               	movlw	85
  4554  0525  0096               	movwf	22	;volsfr
  4555                           
  4556                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  4557  0526  30AA               	movlw	170
  4558  0527  0096               	movwf	22	;volsfr
  4559                           
  4560                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  4561  0528  1495               	bsf	21,1	;volatile
  4562                           
  4563                           ;mcc_generated_files/memory.c: 168:     __nop();
  4564  0529  0000               	nop
  4565                           
  4566                           ;mcc_generated_files/memory.c: 169:     __nop();
  4567  052A  0000               	nop
  4568                           
  4569                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  4570  052B  0023               	movlb	3	; select bank3
  4571  052C  1115               	bcf	21,2	;volatile
  4572                           
  4573                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  4574  052D  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  4575  052E  1C03               	skipc
  4576  052F  138B               	bcf	11,7	;volatile
  4577  0530  1803               	skipnc
  4578  0531  178B               	bsf	11,7	;volatile
  4579  0532  0008               	return
  4580  0533                     __end_of_FLASH_EraseBlock:
  4581                           
  4582                           	psect	text21
  4583  0564                     __ptext21:	
  4584 ;; *************** function _ADC_GetConversion *****************
  4585 ;; Defined at:
  4586 ;;		line 96 in file "mcc_generated_files/adc.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  channel         1    wreg     enum E2336
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  channel         1    3[COMMON] enum E2336
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  2    0[COMMON] unsigned short 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0
  4595 ;; Tracked objects:
  4596 ;;		On entry : 1F/0
  4597 ;;		On exit  : 1F/1
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMMON   BANK0   BANK1
  4600 ;;      Params:         2       0       0
  4601 ;;      Locals:         1       0       0
  4602 ;;      Temps:          1       0       0
  4603 ;;      Totals:         4       0       0
  4604 ;;Total ram usage:        4 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    4
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_main
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           
  4615                           ;psect for function _ADC_GetConversion
  4616  0564                     _ADC_GetConversion:
  4617                           
  4618                           ;incstack = 0
  4619                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4620                           ;ADC_GetConversion@channel stored from wreg
  4621  0564  00F3               	movwf	ADC_GetConversion@channel
  4622                           
  4623                           ;mcc_generated_files/adc.c: 96: adc_result_t ADC_GetConversion(adc_channel_t channel);mc
      +                          c_generated_files/adc.c: 97: {;mcc_generated_files/adc.c: 99:     ADCON0bits.CHS = chann
      +                          el;
  4624  0565  0873               	movf	ADC_GetConversion@channel,w
  4625  0566  00F2               	movwf	??_ADC_GetConversion
  4626  0567  0DF2               	rlf	??_ADC_GetConversion,f
  4627  0568  0DF2               	rlf	??_ADC_GetConversion,f
  4628  0569  0021               	movlb	1	; select bank1
  4629  056A  081D               	movf	29,w	;volatile
  4630  056B  0672               	xorwf	??_ADC_GetConversion,w
  4631  056C  3983               	andlw	-125
  4632  056D  0672               	xorwf	??_ADC_GetConversion,w
  4633  056E  009D               	movwf	29	;volatile
  4634                           
  4635                           ;mcc_generated_files/adc.c: 102:     ADCON0bits.ADON = 1;
  4636  056F  141D               	bsf	29,0	;volatile
  4637                           
  4638                           ;mcc_generated_files/adc.c: 105:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4639  0570  3200               	nop2	;2 cycle nop
  4640  0571  3200               	nop2	;2 cycle nop
  4641  0572  0000               	nop
  4642                           
  4643                           ;mcc_generated_files/adc.c: 108:     ADCON0bits.GO_nDONE = 1;
  4644  0573  0021               	movlb	1	; select bank1
  4645  0574  149D               	bsf	29,1	;volatile
  4646  0575                     l22:	
  4647                           ;mcc_generated_files/adc.c: 112:     {;mcc_generated_files/adc.c: 113:     }
  4648                           
  4649                           
  4650                           ;mcc_generated_files/adc.c: 111:     while (ADCON0bits.GO_nDONE)
  4651  0575  189D               	btfsc	29,1	;volatile
  4652  0576  2D75               	goto	l22
  4653                           
  4654                           ;mcc_generated_files/adc.c: 116:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4655  0577  081C               	movf	28,w	;volatile
  4656  0578  00F1               	movwf	?_ADC_GetConversion+1
  4657  0579  081B               	movf	27,w	;volatile
  4658  057A  00F0               	movwf	?_ADC_GetConversion
  4659  057B  0008               	return
  4660  057C                     __end_of_ADC_GetConversion:
  4661                           
  4662                           	psect	intentry
  4663  0004                     __pintentry:	
  4664 ;; *************** function _INTERRUPT_InterruptManager *****************
  4665 ;; Defined at:
  4666 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      void 
  4673 ;; Registers used:
  4674 ;;		wreg, status,2, status,0, pclath, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMMON   BANK0   BANK1
  4680 ;;      Params:         0       0       0
  4681 ;;      Locals:         0       0       0
  4682 ;;      Temps:          0       0       0
  4683 ;;      Totals:         0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    3
  4687 ;; This function calls:
  4688 ;;		_TMR0_ISR
  4689 ;; This function is called by:
  4690 ;;		Interrupt level 1
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694  0004                     _INTERRUPT_InterruptManager:
  4695                           
  4696                           ;incstack = 0
  4697  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4698                           
  4699                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4700  0005  3180               	pagesel	$
  4701                           
  4702                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4703  0006  1A8B               	btfsc	11,5	;volatile
  4704  0007  1D0B               	btfss	11,2	;volatile
  4705  0008  280A               	goto	i1l154
  4706                           
  4707                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4708  0009  25EC               	fcall	_TMR0_ISR
  4709  000A                     i1l154:	
  4710                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4711                           
  4712  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4713  000B  0009               	retfie
  4714  000C                     __end_of_INTERRUPT_InterruptManager:
  4715                           
  4716                           	psect	text23
  4717  05EC                     __ptext23:	
  4718 ;; *************** function _TMR0_ISR *****************
  4719 ;; Defined at:
  4720 ;;		line 92 in file "mcc_generated_files/tmr0.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1
  4734 ;;      Params:         0       0       0
  4735 ;;      Locals:         0       0       0
  4736 ;;      Temps:          0       0       0
  4737 ;;      Totals:         0       0       0
  4738 ;;Total ram usage:        0 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    2
  4741 ;; This function calls:
  4742 ;;		_TMR0_CallBack
  4743 ;; This function is called by:
  4744 ;;		_INTERRUPT_InterruptManager
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           
  4749                           ;psect for function _TMR0_ISR
  4750  05EC                     _TMR0_ISR:
  4751                           
  4752                           ;mcc_generated_files/tmr0.c: 96:     INTCONbits.TMR0IF = 0;
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4756  05EC  110B               	bcf	11,2	;volatile
  4757                           
  4758                           ;mcc_generated_files/tmr0.c: 98:     TMR0 = timer0ReloadVal;
  4759  05ED  0021               	movlb	1	; select bank1
  4760  05EE  0822               	movf	_timer0ReloadVal^(0+128),w	;volatile
  4761  05EF  0020               	movlb	0	; select bank0
  4762  05F0  0095               	movwf	21	;volatile
  4763                           
  4764                           ;mcc_generated_files/tmr0.c: 102:     TMR0_CallBack();
  4765  05F1  25B8               	fcall	_TMR0_CallBack
  4766  05F2  0008               	return
  4767  05F3                     __end_of_TMR0_ISR:
  4768                           
  4769                           	psect	text24
  4770  05B8                     __ptext24:	
  4771 ;; *************** function _TMR0_CallBack *****************
  4772 ;; Defined at:
  4773 ;;		line 107 in file "mcc_generated_files/tmr0.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;		None
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  1    wreg      void 
  4780 ;; Registers used:
  4781 ;;		wreg, status,2, status,0, pclath, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 1F/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMMON   BANK0   BANK1
  4787 ;;      Params:         0       0       0
  4788 ;;      Locals:         0       0       0
  4789 ;;      Temps:          0       0       0
  4790 ;;      Totals:         0       0       0
  4791 ;;Total ram usage:        0 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    1
  4794 ;; This function calls:
  4795 ;;		Absolute function
  4796 ;;		_TMR0_DefaultInterruptHandler
  4797 ;;		_timer0CallBack
  4798 ;; This function is called by:
  4799 ;;		_TMR0_ISR
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           
  4804                           ;psect for function _TMR0_CallBack
  4805  05B8                     _TMR0_CallBack:
  4806                           
  4807                           ;mcc_generated_files/tmr0.c: 111:     if(TMR0_InterruptHandler)
  4808                           
  4809                           ;incstack = 0
  4810                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4811  05B8  0021               	movlb	1	; select bank1
  4812  05B9  0820               	movf	_TMR0_InterruptHandler^(0+128),w
  4813  05BA  0421               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
  4814  05BB  1903               	btfsc	3,2
  4815  05BC  0008               	return
  4816                           
  4817                           ;mcc_generated_files/tmr0.c: 112:     {;mcc_generated_files/tmr0.c: 113:         TMR0_In
      +                          terruptHandler();
  4818  05BD  0821               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
  4819  05BE  008A               	movwf	10
  4820  05BF  0820               	movf	_TMR0_InterruptHandler^(0+128),w
  4821  05C0  000A               	callw
  4822  05C1  3185               	pagesel	$
  4823  05C2  0008               	return
  4824  05C3                     __end_of_TMR0_CallBack:
  4825                           
  4826                           	psect	text25
  4827  0616                     __ptext25:	
  4828 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4829 ;; Defined at:
  4830 ;;		line 121 in file "mcc_generated_files/tmr0.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;		None
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		None
  4839 ;; Tracked objects:
  4840 ;;		On entry : 1F/1
  4841 ;;		On exit  : 1F/1
  4842 ;;		Unchanged: 1F/0
  4843 ;; Data sizes:     COMMON   BANK0   BANK1
  4844 ;;      Params:         0       0       0
  4845 ;;      Locals:         0       0       0
  4846 ;;      Temps:          0       0       0
  4847 ;;      Totals:         0       0       0
  4848 ;;Total ram usage:        0 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; This function calls:
  4851 ;;		Nothing
  4852 ;; This function is called by:
  4853 ;;		_TMR0_Initialize
  4854 ;;		_TMR0_CallBack
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           
  4859                           ;psect for function _TMR0_DefaultInterruptHandler
  4860  0616                     _TMR0_DefaultInterruptHandler:
  4861                           
  4862                           ;incstack = 0
  4863                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  4864  0616  0008               	return
  4865  0617                     __end_of_TMR0_DefaultInterruptHandler:
  4866                           
  4867                           	psect	text26
  4868  05A7                     __ptext26:	
  4869 ;; *************** function _timer0CallBack *****************
  4870 ;; Defined at:
  4871 ;;		line 81 in file "main.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;		None
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      void 
  4878 ;; Registers used:
  4879 ;;		wreg, status,2
  4880 ;; Tracked objects:
  4881 ;;		On entry : 1F/1
  4882 ;;		On exit  : 1F/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1
  4885 ;;      Params:         0       0       0
  4886 ;;      Locals:         0       0       0
  4887 ;;      Temps:          0       0       0
  4888 ;;      Totals:         0       0       0
  4889 ;;Total ram usage:        0 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_main
  4895 ;;		_TMR0_CallBack
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function _timer0CallBack
  4901  05A7                     _timer0CallBack:
  4902                           
  4903                           ;main.c: 83:     msTick++;
  4904                           
  4905                           ;incstack = 0
  4906                           ; Regs used in _timer0CallBack: [wreg+status,2]
  4907  05A7  3001               	movlw	1
  4908  05A8  0020               	movlb	0	; select bank0
  4909  05A9  07E0               	addwf	_msTick,f	;volatile
  4910  05AA  3000               	movlw	0
  4911  05AB  3DE1               	addwfc	_msTick+1,f	;volatile
  4912                           
  4913                           ;main.c: 85:     if(msTick > 200)
  4914  05AC  3000               	movlw	0
  4915  05AD  0261               	subwf	_msTick+1,w	;volatile
  4916  05AE  30C9               	movlw	201
  4917  05AF  1903               	skipnz
  4918  05B0  0260               	subwf	_msTick,w	;volatile
  4919  05B1  1C03               	skipc
  4920  05B2  0008               	return
  4921                           
  4922                           ;main.c: 86:     {;main.c: 87:         doToggle = 1;
  4923  05B3  01E5               	clrf	_doToggle
  4924  05B4  0AE5               	incf	_doToggle,f
  4925                           
  4926                           ;main.c: 88:         msTick = 0;
  4927  05B5  01E0               	clrf	_msTick	;volatile
  4928  05B6  01E1               	clrf	_msTick+1	;volatile
  4929  05B7  0008               	return
  4930  05B8                     __end_of_timer0CallBack:
  4931  007E                     btemp	set	126	;btemp
  4932  007E                     int$flags	set	126
  4933  007E                     wtemp0	set	126
  4934                           
  4935                           	psect	config
  4936                           
  4937                           ;Config register CONFIG1 @ 0x8007
  4938                           ;	Oscillator Selection bits
  4939                           ;	FOSC = INTOSC, Internal Oscillator, I/O Function on OSC1
  4940                           ;	Watchdog Timer Enable
  4941                           ;	WDTE = OFF, WDT disabled
  4942                           ;	Power-up Timer Enable
  4943                           ;	PWRTE = OFF, PWRT disabled
  4944                           ;	MCLR Pin Function Select
  4945                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  4946                           ;	Flash Program Memory Code Protection
  4947                           ;	CP = OFF, Program memory code protection is disabled
  4948                           ;	Brown-out Reset Enable
  4949                           ;	BOREN = ON, Brown-out Reset enabled
  4950                           ;	Clock Out Enable
  4951                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  4952  8007                     	org	32775
  4953  8007  3FE4               	dw	16356
  4954                           
  4955                           ;Config register CONFIG2 @ 0x8008
  4956                           ;	Flash Memory Self-Write Protection
  4957                           ;	WRT = OFF, Write protection off
  4958                           ;	Stack Overflow/Underflow Reset Enable
  4959                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  4960                           ;	Brown-out Reset Voltage Selection
  4961                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  4962                           ;	Low-Power Brown Out Reset
  4963                           ;	LPBOR = OFF, Low-Power BOR is disabled
  4964                           ;	Low-Voltage Programming Enable
  4965                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  4966  8008                     	org	32776
  4967  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        9
    BSS         20
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     54      80
    BANK1            32      0       6

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 32
		 -> main@wrBlockData(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _setState->___lldiv
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PWM3_LoadDutyValue->_ADC_GetConversion
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___aldiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0    3573
                                             14 BANK0     40    40      0
                  _ADC_GetConversion
                   _FLASH_WriteBlock
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___aldiv
                             ___lmul
              _setLedsForPositioning
                           _setState
 ---------------------------------------------------------------------------------
 (1) _setState                                             5     5      0    1059
                                              0 BANK0      5     5      0
                     _FLASH_ReadWord
                            ___lldiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     435
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setLedsForPositioning                                4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     452
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     120
                                              4 COMMON     4     2      2
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _FLASH_WriteBlock                                    10     7      3     736
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_EraseBlock                                     3     1      2     144
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _FLASH_WriteBlock
     _FLASH_EraseBlock
   _PWM3_LoadDutyValue
     _ADC_GetConversion (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___aldiv
     ___lmul (ARG)
   ___lmul
   _setLedsForPositioning
   _setState
     _FLASH_ReadWord
     ___lldiv
     ___tmul

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      64       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     36      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       6       8       18.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      64       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Jun 30 08:56:47 2020

                                       _b 00A3                                         _m 0067  
                                      l22 0575                           _timer0ReloadVal 00A2  
          __size_of_setLedsForPositioning 0138             __end_of_setLedsForPositioning 02CC  
                                     l321 013C                                       l403 0236  
                                     l331 016B                                       l315 011E  
                                     l413 0264                                       l333 0175  
                                     l317 0128                                       l423 0285  
                                     l327 0157                                       l319 0132  
                                     l433 02A6                                       l409 0254  
                                     l273 0379                                       l329 0161  
                                     l443 02C7                                       l419 0275  
                                     l363 01AF                                       l276 037C  
                                     l429 0296                                       l373 01D2  
                                     l439 02B7                                       l383 01F4  
                                     l367 01C0                                       l448 02CA  
                                     l393 0215                                       l377 01E3  
                                     l387 0204                                       l299 006E  
                                     l397 0225                                       l583 03AB  
                                     _PR2 001B                                       u905 0506  
                                     u935 0483                                       u955 048F  
                                     u965 04A3                                       u975 04AF  
                                     u895 0500                           _TMR2_Initialize 05D4  
                                     wreg 0009                               main@channel 006B  
          FLASH_WriteBlock@flashWordArray 0075                                      l2024 00AB  
                                    l2026 0188                                      l2028 0388  
                                    l1700 0438                                      l1622 04FF  
                                    l1800 04D4                                      l1650 04B9  
                                    l1618 04F7                                      l1730 02DF  
                                    l1636 0480                                      l1900 007F  
                                    l1646 04AE                                      l1638 048E  
                                    l1910 00B6                                      l1840 0405  
                                    l1760 01C3                                      l1920 0146  
                                    l1912 00B8                                      l1826 03CC  
                                    l1818 03BC                                      l1770 0217  
                                    l1762 01D4                                      l1746 037F  
                                    l1922 0149                                      l1930 0180  
                                    l1844 0413                                      l1836 03FA  
                                    l1828 03DA                                      l1780 0256  
                                    l1772 0228                                      l1764 01E6  
                                    l1748 0393                                      l1916 0110  
                                    l1908 00A3                                      l1790 02A9  
                                    l1782 0267                                      l1774 0238  
                                    l1766 01F6                                      l1758 01B1  
                                    l1792 02B9                                      l1784 0277  
                                    l1768 0207                                      l1864 002E  
                                    l1786 0288                                      l1778 0246  
                                    l1890 006A                                      l1874 0047  
                                    l1796 04CA                                      l1788 0298  
                                    l1884 0063                                      l1876 004E  
                                    l1868 0035                                      l1894 0071  
                                    l1886 0066                                      l1896 0074  
                                    u1005 058B                                      u1015 042C  
                                    u1055 02F4                                      u1065 0324  
                                    u1500 011C                                      u1325 03CF  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u1520 0126  
                                    u1345 03DB                                      u1265 04D5  
                                    u1610 0155                                      u1355 03EF  
                                    u1275 04DC                                      u1540 0130  
                                    u1365 03FB                                      u1630 015F  
                                    u1560 013A                                      u1650 0169  
                                    u1580 0144                                      u1670 0173  
                                    u1690 017D                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                                      _main 0024  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                         ?_FLASH_WriteBlock 0073  
                                    start 000C                        ??_FLASH_WriteBlock 0076  
                 __end_of_TMR0_Initialize 05A7            ??_TMR0_DefaultInterruptHandler 0070  
          __size_of_OSCILLATOR_Initialize 0006             __end_of_OSCILLATOR_Initialize 060B  
                         __end_of___aldiv 041C                                     ?_main 0070  
                         __end_of___lldiv 04C2                                     _T2CON 001C  
                                   i1l154 000A                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
       __size_of_TMR0_SetInterruptHandler 0006                       ___lmul@multiplicand 0074  
               ?_TMR0_SetInterruptHandler 0070                          __end_of_TMR0_ISR 05F3  
                          _WDT_Initialize 060F                   __end_of_PWM3_Initialize 05E4  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 0613  
                         __initialization 000D                              __end_of_main 0194  
                 __end_of_TMR2_Initialize 05DC               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 002E                   __size_of_FLASH_ReadWord 0019  
                  __end_of_WDT_Initialize 0613                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADCON2 009F  
               FLASH_WriteBlock@writeAddr 0073                                    _ADRESH 009C  
                                  _ADRESL 009B                                    _APFCON 011D  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                 __size_of_FLASH_EraseBlock 001C  
                                  _OSCCON 0099                                    _WDTCON 0097  
                                  ___lmul 04C2               __size_of_PWM3_LoadDutyValue 0016  
                               ??___aldiv 007C                                    ___tmul 04F1  
                               ??___lldiv 0078                                    _msTick 0060  
                        ?_TMR0_Initialize 0070                          __end_of_setState 039B  
                 FLASH_ReadWord@flashAddr 0070                           ?_WDT_Initialize 0070  
                ADC_GetConversion@channel 0073                     __end_of_TMR0_CallBack 05C3  
                 __end_of_TMR2_StartTimer 0616  TMR0_SetInterruptHandler@InterruptHandler 0070  
                        ?_PWM3_Initialize 0070                         _SYSTEM_Initialize 05CC  
                 __end_of__initialization 0021                        ?_SYSTEM_Initialize 0070  
                        _fixedPointFactor 060B                            __pcstackCOMMON 0070  
                 __size_of_timer0CallBack 0011                              __pidataBANK0 05C3  
                     ??_SYSTEM_Initialize 0073                                 ?_TMR0_ISR 0070  
                        ?_TMR2_Initialize 0070                            _OPTION_REGbits 0095  
             FLASH_WriteBlock@GIEBitValue 007B                 __end_of_SYSTEM_Initialize 05D4  
                              __pbssBANK0 0056                                __pbssBANK1 00A3  
                              __pmaintext 0024          __end_of_TMR0_SetInterruptHandler 0605  
                                 ?___lmul 0070                                   ?___tmul 0070  
                              ??_TMR0_ISR 0070                                __pintentry 0004  
                          ___lmul@product 0078                 __size_of_FLASH_WriteBlock 0054  
                 __size_of_ADC_Initialize 0008                            _FLASH_ReadWord 0533  
                   _setLedsForPositioning 0194                                   _PWM3DCH 0618  
                                 _PWM3DCL 0617                                   _PWM3CON 0619  
                        ?_TMR2_StartTimer 0070                          _FLASH_EraseBlock 0517  
                    _ADC_InterruptHandler 0062                                 ?_setState 0070  
                                 ___aldiv 039B                           __size_of___lmul 002F  
                         __size_of___tmul 0026                                   ___lldiv 0470  
                  __end_of_FLASH_ReadWord 054C                                   __ptext1 02CC  
                                 __ptext2 04F1                                   __ptext3 0470  
                                 __ptext4 0533                                   __ptext5 0194  
                                 __ptext6 04C2                                   __ptext7 039B  
                                 __ptext8 0613                                   __ptext9 05CC  
                   _OSCILLATOR_Initialize 0605                                 _T2CONbits 001C  
                        ___aldiv@dividend 0024                  ??_PIN_MANAGER_Initialize 0070  
              __size_of_SYSTEM_Initialize 0008                                   clrloop0 05FA  
                    end_of_initialization 0021                                   init_ram 05F3  
                                 initloop 05F4                                _lowerLimit 0056  
                         ___lldiv@divisor 0070                           ___lldiv@counter 007D  
                              ??_setState 0020                            _timer0CallBack 05A7  
                        ___aldiv@quotient 002A                 FLASH_ReadWord@GIEBitValue 0072  
                         ?_FLASH_ReadWord 0070                          ??_WDT_Initialize 0070  
                _TMR0_SetInterruptHandler 05FF                                 _PORTAbits 000C  
                  ?_setLedsForPositioning 0070                  __end_of_fixedPointFactor 060F  
                              _upperLimit 006C                    __end_of_timer0CallBack 05B8  
              __end_of_PWM3_LoadDutyValue 0592                         FLASH_WriteBlock@i 007C  
                          __end_of___lmul 04F1                            __end_of___tmul 0517  
                       __size_of_TMR0_ISR 0007                            _ADC_Initialize 05E4  
                        _FLASH_WriteBlock 041C                    ?_OSCILLATOR_Initialize 0070  
                     start_initialization 000D                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0018                           ?_timer0CallBack 0070  
                __size_of_PWM3_Initialize 0008                                  ??___lmul 0078  
                                ??___tmul 0076                    __size_of_TMR0_CallBack 000B  
                  __end_of_ADC_Initialize 05EC                               __pdataBANK0 0067  
             FLASH_EraseBlock@GIEBitValue 0072                  __end_of_FLASH_EraseBlock 0533  
                          ___tmul@product 0076                                 ___latbits 0000  
                           __pcstackBANK0 0020                  __size_of_TMR2_Initialize 0008  
                        setState@newState 0024                              _currentState 0064  
                   _TMR0_InterruptHandler 00A0                                 __pnvBANK1 00A0  
                  _PIN_MANAGER_Initialize 054C                                  ?___aldiv 0020  
                       __size_of_setState 00CF                                  ?___lldiv 0070  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0070  
                           _TMR0_CallBack 05B8                                 _msPressed 005E  
                        _adcValuePosition 005A            FLASH_WriteBlock@blockStartAddr 0079  
                         ___aldiv@divisor 0020                         ??_TMR0_Initialize 0072  
                         ___aldiv@counter 0028                                  _LATBbits 010D  
                                _LATCbits 010E                                 clear_ram0 05F9  
                __size_of_TMR2_StartTimer 0003       __size_of_INTERRUPT_InterruptManager 0008  
              ??_TMR0_SetInterruptHandler 0072                                  _PIR1bits 0011  
               FLASH_EraseBlock@startAddr 0070                          ??_FLASH_ReadWord 0072  
                                _TMR0_ISR 05EC                   ??_setLedsForPositioning 0074  
                       ??_PWM3_Initialize 0070                                _ADCON0bits 009D  
                     ___tmul@multiplicand 0073                            ?_TMR0_CallBack 0070  
                       ___lmul@multiplier 0070                         ??_TMR2_Initialize 0070  
                __end_of_FLASH_WriteBlock 0470             setLedsForPositioning@adcValue 0070  
                       _ADC_GetConversion 0564                   ??_OSCILLATOR_Initialize 0070  
                      ?_ADC_GetConversion 0070                          __size_of___aldiv 0081  
                        __size_of___lldiv 0052                        _PWM3_LoadDutyValue 057C  
                     ??_ADC_GetConversion 0072                                  _doToggle 0065  
                                __ptext10 060F                                  __ptext11 05D4  
                                __ptext20 0517                                  __ptext12 0592  
                                __ptext21 0564                                  __ptext13 05FF  
                                __ptext14 05DC                                  __ptext23 05EC  
                                __ptext15 054C                                  __ptext24 05B8  
                                __ptext16 0605                                  __ptext25 0616  
                                __ptext17 05E4                                  __ptext26 05A7  
                                __ptext18 057C                                  __ptext19 041C  
                     ?_PWM3_LoadDutyValue 0074                          ??_timer0CallBack 0070  
                           __size_of_main 0170                           main@wrBlockData 0036  
    __end_of_TMR0_DefaultInterruptHandler 0617     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0616                 __end_of_ADC_GetConversion 057C  
                                _setState 02CC                      ??_PWM3_LoadDutyValue 0076  
                                int$flags 007E                         ??_TMR2_StartTimer 0070  
      __end_of_INTERRUPT_InterruptManager 000C                _INTERRUPT_InterruptManager 0004  
                       ?_FLASH_EraseBlock 0070                        ??_FLASH_EraseBlock 0072  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0070  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                          _doButtonAction 0066                                _PMCON1bits 0195  
                        ___lldiv@dividend 0074                   ?_PIN_MANAGER_Initialize 0070  
                        ??_ADC_Initialize 0070             ?_TMR0_DefaultInterruptHandler 0070  
                       ___tmul@multiplier 0070               PWM3_LoadDutyValue@dutyValue 0074  
                           __pstringtext1 060B                                _OPTION_REG 0095  
                        ___lldiv@quotient 0079                           _TMR0_Initialize 0592  
                            ___aldiv@sign 0029            __end_of_PIN_MANAGER_Initialize 0564  
              __size_of_ADC_GetConversion 0018                           _PWM3_Initialize 05DC  
