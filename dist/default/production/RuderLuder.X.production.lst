

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Jul 14 14:57:37 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F1507
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.20
    46                           ; Generated 12/02/2020 GMT
    47                           ; 
    48                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F1507 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  011D                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  018E                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0197                     	;# 
   141  020C                     	;# 
   142  020D                     	;# 
   143  0391                     	;# 
   144  0392                     	;# 
   145  0393                     	;# 
   146  0394                     	;# 
   147  0395                     	;# 
   148  0396                     	;# 
   149  0498                     	;# 
   150  0498                     	;# 
   151  0499                     	;# 
   152  049A                     	;# 
   153  049B                     	;# 
   154  049B                     	;# 
   155  049C                     	;# 
   156  049D                     	;# 
   157  049E                     	;# 
   158  049F                     	;# 
   159  0611                     	;# 
   160  0612                     	;# 
   161  0613                     	;# 
   162  0613                     	;# 
   163  0614                     	;# 
   164  0615                     	;# 
   165  0616                     	;# 
   166  0616                     	;# 
   167  0617                     	;# 
   168  0618                     	;# 
   169  0619                     	;# 
   170  0619                     	;# 
   171  061A                     	;# 
   172  061B                     	;# 
   173  061C                     	;# 
   174  061C                     	;# 
   175  0691                     	;# 
   176  0692                     	;# 
   177  0693                     	;# 
   178  0694                     	;# 
   179  0695                     	;# 
   180  0F0F                     	;# 
   181  0F10                     	;# 
   182  0F11                     	;# 
   183  0F12                     	;# 
   184  0F13                     	;# 
   185  0F14                     	;# 
   186  0F15                     	;# 
   187  0F16                     	;# 
   188  0F17                     	;# 
   189  0F18                     	;# 
   190  0F19                     	;# 
   191  0F1A                     	;# 
   192  0F1B                     	;# 
   193  0F1C                     	;# 
   194  0F1D                     	;# 
   195  0F1E                     	;# 
   196  0F1F                     	;# 
   197  0FE3                     	;# 
   198  0FE4                     	;# 
   199  0FE5                     	;# 
   200  0FE6                     	;# 
   201  0FE7                     	;# 
   202  0FE8                     	;# 
   203  0FE9                     	;# 
   204  0FEA                     	;# 
   205  0FEB                     	;# 
   206  0FED                     	;# 
   207  0FEE                     	;# 
   208  0FEF                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0013                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0016                     	;# 
   230  0017                     	;# 
   231  0018                     	;# 
   232  0019                     	;# 
   233  001A                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  008E                     	;# 
   239  0091                     	;# 
   240  0092                     	;# 
   241  0093                     	;# 
   242  0095                     	;# 
   243  0096                     	;# 
   244  0097                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009B                     	;# 
   249  009C                     	;# 
   250  009D                     	;# 
   251  009E                     	;# 
   252  009F                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  0116                     	;# 
   257  0117                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  018E                     	;# 
   262  0191                     	;# 
   263  0191                     	;# 
   264  0192                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0197                     	;# 
   271  020C                     	;# 
   272  020D                     	;# 
   273  0391                     	;# 
   274  0392                     	;# 
   275  0393                     	;# 
   276  0394                     	;# 
   277  0395                     	;# 
   278  0396                     	;# 
   279  0498                     	;# 
   280  0498                     	;# 
   281  0499                     	;# 
   282  049A                     	;# 
   283  049B                     	;# 
   284  049B                     	;# 
   285  049C                     	;# 
   286  049D                     	;# 
   287  049E                     	;# 
   288  049F                     	;# 
   289  0611                     	;# 
   290  0612                     	;# 
   291  0613                     	;# 
   292  0613                     	;# 
   293  0614                     	;# 
   294  0615                     	;# 
   295  0616                     	;# 
   296  0616                     	;# 
   297  0617                     	;# 
   298  0618                     	;# 
   299  0619                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061B                     	;# 
   303  061C                     	;# 
   304  061C                     	;# 
   305  0691                     	;# 
   306  0692                     	;# 
   307  0693                     	;# 
   308  0694                     	;# 
   309  0695                     	;# 
   310  0F0F                     	;# 
   311  0F10                     	;# 
   312  0F11                     	;# 
   313  0F12                     	;# 
   314  0F13                     	;# 
   315  0F14                     	;# 
   316  0F15                     	;# 
   317  0F16                     	;# 
   318  0F17                     	;# 
   319  0F18                     	;# 
   320  0F19                     	;# 
   321  0F1A                     	;# 
   322  0F1B                     	;# 
   323  0F1C                     	;# 
   324  0F1D                     	;# 
   325  0F1E                     	;# 
   326  0F1F                     	;# 
   327  0FE3                     	;# 
   328  0FE4                     	;# 
   329  0FE5                     	;# 
   330  0FE6                     	;# 
   331  0FE7                     	;# 
   332  0FE8                     	;# 
   333  0FE9                     	;# 
   334  0FEA                     	;# 
   335  0FEB                     	;# 
   336  0FED                     	;# 
   337  0FEE                     	;# 
   338  0FEF                     	;# 
   339  0000                     	;# 
   340  0001                     	;# 
   341  0002                     	;# 
   342  0003                     	;# 
   343  0004                     	;# 
   344  0005                     	;# 
   345  0006                     	;# 
   346  0007                     	;# 
   347  0008                     	;# 
   348  0009                     	;# 
   349  000A                     	;# 
   350  000B                     	;# 
   351  000C                     	;# 
   352  000D                     	;# 
   353  000E                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0015                     	;# 
   358  0016                     	;# 
   359  0016                     	;# 
   360  0017                     	;# 
   361  0018                     	;# 
   362  0019                     	;# 
   363  001A                     	;# 
   364  001B                     	;# 
   365  001C                     	;# 
   366  008C                     	;# 
   367  008D                     	;# 
   368  008E                     	;# 
   369  0091                     	;# 
   370  0092                     	;# 
   371  0093                     	;# 
   372  0095                     	;# 
   373  0096                     	;# 
   374  0097                     	;# 
   375  0099                     	;# 
   376  009A                     	;# 
   377  009B                     	;# 
   378  009B                     	;# 
   379  009C                     	;# 
   380  009D                     	;# 
   381  009E                     	;# 
   382  009F                     	;# 
   383  010C                     	;# 
   384  010D                     	;# 
   385  010E                     	;# 
   386  0116                     	;# 
   387  0117                     	;# 
   388  011D                     	;# 
   389  018C                     	;# 
   390  018D                     	;# 
   391  018E                     	;# 
   392  0191                     	;# 
   393  0191                     	;# 
   394  0192                     	;# 
   395  0193                     	;# 
   396  0193                     	;# 
   397  0194                     	;# 
   398  0195                     	;# 
   399  0196                     	;# 
   400  0197                     	;# 
   401  020C                     	;# 
   402  020D                     	;# 
   403  0391                     	;# 
   404  0392                     	;# 
   405  0393                     	;# 
   406  0394                     	;# 
   407  0395                     	;# 
   408  0396                     	;# 
   409  0498                     	;# 
   410  0498                     	;# 
   411  0499                     	;# 
   412  049A                     	;# 
   413  049B                     	;# 
   414  049B                     	;# 
   415  049C                     	;# 
   416  049D                     	;# 
   417  049E                     	;# 
   418  049F                     	;# 
   419  0611                     	;# 
   420  0612                     	;# 
   421  0613                     	;# 
   422  0613                     	;# 
   423  0614                     	;# 
   424  0615                     	;# 
   425  0616                     	;# 
   426  0616                     	;# 
   427  0617                     	;# 
   428  0618                     	;# 
   429  0619                     	;# 
   430  0619                     	;# 
   431  061A                     	;# 
   432  061B                     	;# 
   433  061C                     	;# 
   434  061C                     	;# 
   435  0691                     	;# 
   436  0692                     	;# 
   437  0693                     	;# 
   438  0694                     	;# 
   439  0695                     	;# 
   440  0F0F                     	;# 
   441  0F10                     	;# 
   442  0F11                     	;# 
   443  0F12                     	;# 
   444  0F13                     	;# 
   445  0F14                     	;# 
   446  0F15                     	;# 
   447  0F16                     	;# 
   448  0F17                     	;# 
   449  0F18                     	;# 
   450  0F19                     	;# 
   451  0F1A                     	;# 
   452  0F1B                     	;# 
   453  0F1C                     	;# 
   454  0F1D                     	;# 
   455  0F1E                     	;# 
   456  0F1F                     	;# 
   457  0FE3                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000D                     	;# 
   483  000E                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0013                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  0091                     	;# 
   500  0092                     	;# 
   501  0093                     	;# 
   502  0095                     	;# 
   503  0096                     	;# 
   504  0097                     	;# 
   505  0099                     	;# 
   506  009A                     	;# 
   507  009B                     	;# 
   508  009B                     	;# 
   509  009C                     	;# 
   510  009D                     	;# 
   511  009E                     	;# 
   512  009F                     	;# 
   513  010C                     	;# 
   514  010D                     	;# 
   515  010E                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  011D                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  018E                     	;# 
   522  0191                     	;# 
   523  0191                     	;# 
   524  0192                     	;# 
   525  0193                     	;# 
   526  0193                     	;# 
   527  0194                     	;# 
   528  0195                     	;# 
   529  0196                     	;# 
   530  0197                     	;# 
   531  020C                     	;# 
   532  020D                     	;# 
   533  0391                     	;# 
   534  0392                     	;# 
   535  0393                     	;# 
   536  0394                     	;# 
   537  0395                     	;# 
   538  0396                     	;# 
   539  0498                     	;# 
   540  0498                     	;# 
   541  0499                     	;# 
   542  049A                     	;# 
   543  049B                     	;# 
   544  049B                     	;# 
   545  049C                     	;# 
   546  049D                     	;# 
   547  049E                     	;# 
   548  049F                     	;# 
   549  0611                     	;# 
   550  0612                     	;# 
   551  0613                     	;# 
   552  0613                     	;# 
   553  0614                     	;# 
   554  0615                     	;# 
   555  0616                     	;# 
   556  0616                     	;# 
   557  0617                     	;# 
   558  0618                     	;# 
   559  0619                     	;# 
   560  0619                     	;# 
   561  061A                     	;# 
   562  061B                     	;# 
   563  061C                     	;# 
   564  061C                     	;# 
   565  0691                     	;# 
   566  0692                     	;# 
   567  0693                     	;# 
   568  0694                     	;# 
   569  0695                     	;# 
   570  0F0F                     	;# 
   571  0F10                     	;# 
   572  0F11                     	;# 
   573  0F12                     	;# 
   574  0F13                     	;# 
   575  0F14                     	;# 
   576  0F15                     	;# 
   577  0F16                     	;# 
   578  0F17                     	;# 
   579  0F18                     	;# 
   580  0F19                     	;# 
   581  0F1A                     	;# 
   582  0F1B                     	;# 
   583  0F1C                     	;# 
   584  0F1D                     	;# 
   585  0F1E                     	;# 
   586  0F1F                     	;# 
   587  0FE3                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0011                     	;# 
   615  0012                     	;# 
   616  0013                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0091                     	;# 
   630  0092                     	;# 
   631  0093                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  009F                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  020C                     	;# 
   662  020D                     	;# 
   663  0391                     	;# 
   664  0392                     	;# 
   665  0393                     	;# 
   666  0394                     	;# 
   667  0395                     	;# 
   668  0396                     	;# 
   669  0498                     	;# 
   670  0498                     	;# 
   671  0499                     	;# 
   672  049A                     	;# 
   673  049B                     	;# 
   674  049B                     	;# 
   675  049C                     	;# 
   676  049D                     	;# 
   677  049E                     	;# 
   678  049F                     	;# 
   679  0611                     	;# 
   680  0612                     	;# 
   681  0613                     	;# 
   682  0613                     	;# 
   683  0614                     	;# 
   684  0615                     	;# 
   685  0616                     	;# 
   686  0616                     	;# 
   687  0617                     	;# 
   688  0618                     	;# 
   689  0619                     	;# 
   690  0619                     	;# 
   691  061A                     	;# 
   692  061B                     	;# 
   693  061C                     	;# 
   694  061C                     	;# 
   695  0691                     	;# 
   696  0692                     	;# 
   697  0693                     	;# 
   698  0694                     	;# 
   699  0695                     	;# 
   700  0F0F                     	;# 
   701  0F10                     	;# 
   702  0F11                     	;# 
   703  0F12                     	;# 
   704  0F13                     	;# 
   705  0F14                     	;# 
   706  0F15                     	;# 
   707  0F16                     	;# 
   708  0F17                     	;# 
   709  0F18                     	;# 
   710  0F19                     	;# 
   711  0F1A                     	;# 
   712  0F1B                     	;# 
   713  0F1C                     	;# 
   714  0F1D                     	;# 
   715  0F1E                     	;# 
   716  0F1F                     	;# 
   717  0FE3                     	;# 
   718  0FE4                     	;# 
   719  0FE5                     	;# 
   720  0FE6                     	;# 
   721  0FE7                     	;# 
   722  0FE8                     	;# 
   723  0FE9                     	;# 
   724  0FEA                     	;# 
   725  0FEB                     	;# 
   726  0FED                     	;# 
   727  0FEE                     	;# 
   728  0FEF                     	;# 
   729  0000                     	;# 
   730  0001                     	;# 
   731  0002                     	;# 
   732  0003                     	;# 
   733  0004                     	;# 
   734  0005                     	;# 
   735  0006                     	;# 
   736  0007                     	;# 
   737  0008                     	;# 
   738  0009                     	;# 
   739  000A                     	;# 
   740  000B                     	;# 
   741  000C                     	;# 
   742  000D                     	;# 
   743  000E                     	;# 
   744  0011                     	;# 
   745  0012                     	;# 
   746  0013                     	;# 
   747  0015                     	;# 
   748  0016                     	;# 
   749  0016                     	;# 
   750  0017                     	;# 
   751  0018                     	;# 
   752  0019                     	;# 
   753  001A                     	;# 
   754  001B                     	;# 
   755  001C                     	;# 
   756  008C                     	;# 
   757  008D                     	;# 
   758  008E                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0093                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0099                     	;# 
   766  009A                     	;# 
   767  009B                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  009F                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010E                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  011D                     	;# 
   779  018C                     	;# 
   780  018D                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0197                     	;# 
   791  020C                     	;# 
   792  020D                     	;# 
   793  0391                     	;# 
   794  0392                     	;# 
   795  0393                     	;# 
   796  0394                     	;# 
   797  0395                     	;# 
   798  0396                     	;# 
   799  0498                     	;# 
   800  0498                     	;# 
   801  0499                     	;# 
   802  049A                     	;# 
   803  049B                     	;# 
   804  049B                     	;# 
   805  049C                     	;# 
   806  049D                     	;# 
   807  049E                     	;# 
   808  049F                     	;# 
   809  0611                     	;# 
   810  0612                     	;# 
   811  0613                     	;# 
   812  0613                     	;# 
   813  0614                     	;# 
   814  0615                     	;# 
   815  0616                     	;# 
   816  0616                     	;# 
   817  0617                     	;# 
   818  0618                     	;# 
   819  0619                     	;# 
   820  0619                     	;# 
   821  061A                     	;# 
   822  061B                     	;# 
   823  061C                     	;# 
   824  061C                     	;# 
   825  0691                     	;# 
   826  0692                     	;# 
   827  0693                     	;# 
   828  0694                     	;# 
   829  0695                     	;# 
   830  0F0F                     	;# 
   831  0F10                     	;# 
   832  0F11                     	;# 
   833  0F12                     	;# 
   834  0F13                     	;# 
   835  0F14                     	;# 
   836  0F15                     	;# 
   837  0F16                     	;# 
   838  0F17                     	;# 
   839  0F18                     	;# 
   840  0F19                     	;# 
   841  0F1A                     	;# 
   842  0F1B                     	;# 
   843  0F1C                     	;# 
   844  0F1D                     	;# 
   845  0F1E                     	;# 
   846  0F1F                     	;# 
   847  0FE3                     	;# 
   848  0FE4                     	;# 
   849  0FE5                     	;# 
   850  0FE6                     	;# 
   851  0FE7                     	;# 
   852  0FE8                     	;# 
   853  0FE9                     	;# 
   854  0FEA                     	;# 
   855  0FEB                     	;# 
   856  0FED                     	;# 
   857  0FEE                     	;# 
   858  0FEF                     	;# 
   859  0000                     	;# 
   860  0001                     	;# 
   861  0002                     	;# 
   862  0003                     	;# 
   863  0004                     	;# 
   864  0005                     	;# 
   865  0006                     	;# 
   866  0007                     	;# 
   867  0008                     	;# 
   868  0009                     	;# 
   869  000A                     	;# 
   870  000B                     	;# 
   871  000C                     	;# 
   872  000D                     	;# 
   873  000E                     	;# 
   874  0011                     	;# 
   875  0012                     	;# 
   876  0013                     	;# 
   877  0015                     	;# 
   878  0016                     	;# 
   879  0016                     	;# 
   880  0017                     	;# 
   881  0018                     	;# 
   882  0019                     	;# 
   883  001A                     	;# 
   884  001B                     	;# 
   885  001C                     	;# 
   886  008C                     	;# 
   887  008D                     	;# 
   888  008E                     	;# 
   889  0091                     	;# 
   890  0092                     	;# 
   891  0093                     	;# 
   892  0095                     	;# 
   893  0096                     	;# 
   894  0097                     	;# 
   895  0099                     	;# 
   896  009A                     	;# 
   897  009B                     	;# 
   898  009B                     	;# 
   899  009C                     	;# 
   900  009D                     	;# 
   901  009E                     	;# 
   902  009F                     	;# 
   903  010C                     	;# 
   904  010D                     	;# 
   905  010E                     	;# 
   906  0116                     	;# 
   907  0117                     	;# 
   908  011D                     	;# 
   909  018C                     	;# 
   910  018D                     	;# 
   911  018E                     	;# 
   912  0191                     	;# 
   913  0191                     	;# 
   914  0192                     	;# 
   915  0193                     	;# 
   916  0193                     	;# 
   917  0194                     	;# 
   918  0195                     	;# 
   919  0196                     	;# 
   920  0197                     	;# 
   921  020C                     	;# 
   922  020D                     	;# 
   923  0391                     	;# 
   924  0392                     	;# 
   925  0393                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  0498                     	;# 
   930  0498                     	;# 
   931  0499                     	;# 
   932  049A                     	;# 
   933  049B                     	;# 
   934  049B                     	;# 
   935  049C                     	;# 
   936  049D                     	;# 
   937  049E                     	;# 
   938  049F                     	;# 
   939  0611                     	;# 
   940  0612                     	;# 
   941  0613                     	;# 
   942  0613                     	;# 
   943  0614                     	;# 
   944  0615                     	;# 
   945  0616                     	;# 
   946  0616                     	;# 
   947  0617                     	;# 
   948  0618                     	;# 
   949  0619                     	;# 
   950  0619                     	;# 
   951  061A                     	;# 
   952  061B                     	;# 
   953  061C                     	;# 
   954  061C                     	;# 
   955  0691                     	;# 
   956  0692                     	;# 
   957  0693                     	;# 
   958  0694                     	;# 
   959  0695                     	;# 
   960  0F0F                     	;# 
   961  0F10                     	;# 
   962  0F11                     	;# 
   963  0F12                     	;# 
   964  0F13                     	;# 
   965  0F14                     	;# 
   966  0F15                     	;# 
   967  0F16                     	;# 
   968  0F17                     	;# 
   969  0F18                     	;# 
   970  0F19                     	;# 
   971  0F1A                     	;# 
   972  0F1B                     	;# 
   973  0F1C                     	;# 
   974  0F1D                     	;# 
   975  0F1E                     	;# 
   976  0F1F                     	;# 
   977  0FE3                     	;# 
   978  0FE4                     	;# 
   979  0FE5                     	;# 
   980  0FE6                     	;# 
   981  0FE7                     	;# 
   982  0FE8                     	;# 
   983  0FE9                     	;# 
   984  0FEA                     	;# 
   985  0FEB                     	;# 
   986  0FED                     	;# 
   987  0FEE                     	;# 
   988  0FEF                     	;# 
   989  0000                     	;# 
   990  0001                     	;# 
   991  0002                     	;# 
   992  0003                     	;# 
   993  0004                     	;# 
   994  0005                     	;# 
   995  0006                     	;# 
   996  0007                     	;# 
   997  0008                     	;# 
   998  0009                     	;# 
   999  000A                     	;# 
  1000  000B                     	;# 
  1001  000C                     	;# 
  1002  000D                     	;# 
  1003  000E                     	;# 
  1004  0011                     	;# 
  1005  0012                     	;# 
  1006  0013                     	;# 
  1007  0015                     	;# 
  1008  0016                     	;# 
  1009  0016                     	;# 
  1010  0017                     	;# 
  1011  0018                     	;# 
  1012  0019                     	;# 
  1013  001A                     	;# 
  1014  001B                     	;# 
  1015  001C                     	;# 
  1016  008C                     	;# 
  1017  008D                     	;# 
  1018  008E                     	;# 
  1019  0091                     	;# 
  1020  0092                     	;# 
  1021  0093                     	;# 
  1022  0095                     	;# 
  1023  0096                     	;# 
  1024  0097                     	;# 
  1025  0099                     	;# 
  1026  009A                     	;# 
  1027  009B                     	;# 
  1028  009B                     	;# 
  1029  009C                     	;# 
  1030  009D                     	;# 
  1031  009E                     	;# 
  1032  009F                     	;# 
  1033  010C                     	;# 
  1034  010D                     	;# 
  1035  010E                     	;# 
  1036  0116                     	;# 
  1037  0117                     	;# 
  1038  011D                     	;# 
  1039  018C                     	;# 
  1040  018D                     	;# 
  1041  018E                     	;# 
  1042  0191                     	;# 
  1043  0191                     	;# 
  1044  0192                     	;# 
  1045  0193                     	;# 
  1046  0193                     	;# 
  1047  0194                     	;# 
  1048  0195                     	;# 
  1049  0196                     	;# 
  1050  0197                     	;# 
  1051  020C                     	;# 
  1052  020D                     	;# 
  1053  0391                     	;# 
  1054  0392                     	;# 
  1055  0393                     	;# 
  1056  0394                     	;# 
  1057  0395                     	;# 
  1058  0396                     	;# 
  1059  0498                     	;# 
  1060  0498                     	;# 
  1061  0499                     	;# 
  1062  049A                     	;# 
  1063  049B                     	;# 
  1064  049B                     	;# 
  1065  049C                     	;# 
  1066  049D                     	;# 
  1067  049E                     	;# 
  1068  049F                     	;# 
  1069  0611                     	;# 
  1070  0612                     	;# 
  1071  0613                     	;# 
  1072  0613                     	;# 
  1073  0614                     	;# 
  1074  0615                     	;# 
  1075  0616                     	;# 
  1076  0616                     	;# 
  1077  0617                     	;# 
  1078  0618                     	;# 
  1079  0619                     	;# 
  1080  0619                     	;# 
  1081  061A                     	;# 
  1082  061B                     	;# 
  1083  061C                     	;# 
  1084  061C                     	;# 
  1085  0691                     	;# 
  1086  0692                     	;# 
  1087  0693                     	;# 
  1088  0694                     	;# 
  1089  0695                     	;# 
  1090  0F0F                     	;# 
  1091  0F10                     	;# 
  1092  0F11                     	;# 
  1093  0F12                     	;# 
  1094  0F13                     	;# 
  1095  0F14                     	;# 
  1096  0F15                     	;# 
  1097  0F16                     	;# 
  1098  0F17                     	;# 
  1099  0F18                     	;# 
  1100  0F19                     	;# 
  1101  0F1A                     	;# 
  1102  0F1B                     	;# 
  1103  0F1C                     	;# 
  1104  0F1D                     	;# 
  1105  0F1E                     	;# 
  1106  0F1F                     	;# 
  1107  0FE3                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000D                     	;# 
  1133  000E                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0095                     	;# 
  1153  0096                     	;# 
  1154  0097                     	;# 
  1155  0099                     	;# 
  1156  009A                     	;# 
  1157  009B                     	;# 
  1158  009B                     	;# 
  1159  009C                     	;# 
  1160  009D                     	;# 
  1161  009E                     	;# 
  1162  009F                     	;# 
  1163  010C                     	;# 
  1164  010D                     	;# 
  1165  010E                     	;# 
  1166  0116                     	;# 
  1167  0117                     	;# 
  1168  011D                     	;# 
  1169  018C                     	;# 
  1170  018D                     	;# 
  1171  018E                     	;# 
  1172  0191                     	;# 
  1173  0191                     	;# 
  1174  0192                     	;# 
  1175  0193                     	;# 
  1176  0193                     	;# 
  1177  0194                     	;# 
  1178  0195                     	;# 
  1179  0196                     	;# 
  1180  0197                     	;# 
  1181  020C                     	;# 
  1182  020D                     	;# 
  1183  0391                     	;# 
  1184  0392                     	;# 
  1185  0393                     	;# 
  1186  0394                     	;# 
  1187  0395                     	;# 
  1188  0396                     	;# 
  1189  0498                     	;# 
  1190  0498                     	;# 
  1191  0499                     	;# 
  1192  049A                     	;# 
  1193  049B                     	;# 
  1194  049B                     	;# 
  1195  049C                     	;# 
  1196  049D                     	;# 
  1197  049E                     	;# 
  1198  049F                     	;# 
  1199  0611                     	;# 
  1200  0612                     	;# 
  1201  0613                     	;# 
  1202  0613                     	;# 
  1203  0614                     	;# 
  1204  0615                     	;# 
  1205  0616                     	;# 
  1206  0616                     	;# 
  1207  0617                     	;# 
  1208  0618                     	;# 
  1209  0619                     	;# 
  1210  0619                     	;# 
  1211  061A                     	;# 
  1212  061B                     	;# 
  1213  061C                     	;# 
  1214  061C                     	;# 
  1215  0691                     	;# 
  1216  0692                     	;# 
  1217  0693                     	;# 
  1218  0694                     	;# 
  1219  0695                     	;# 
  1220  0F0F                     	;# 
  1221  0F10                     	;# 
  1222  0F11                     	;# 
  1223  0F12                     	;# 
  1224  0F13                     	;# 
  1225  0F14                     	;# 
  1226  0F15                     	;# 
  1227  0F16                     	;# 
  1228  0F17                     	;# 
  1229  0F18                     	;# 
  1230  0F19                     	;# 
  1231  0F1A                     	;# 
  1232  0F1B                     	;# 
  1233  0F1C                     	;# 
  1234  0F1D                     	;# 
  1235  0F1E                     	;# 
  1236  0F1F                     	;# 
  1237  0FE3                     	;# 
  1238  0FE4                     	;# 
  1239  0FE5                     	;# 
  1240  0FE6                     	;# 
  1241  0FE7                     	;# 
  1242  0FE8                     	;# 
  1243  0FE9                     	;# 
  1244  0FEA                     	;# 
  1245  0FEB                     	;# 
  1246  0FED                     	;# 
  1247  0FEE                     	;# 
  1248  0FEF                     	;# 
  1249                           
  1250                           	psect	idataBANK0
  1251  05C3                     __pidataBANK0:
  1252                           
  1253                           ;initializer for _m
  1254  05C3  34E8               	retlw	232
  1255  05C4  3403               	retlw	3
  1256  05C5  3400               	retlw	0
  1257  05C6  3400               	retlw	0
  1258                           
  1259                           ;initializer for main@channel
  1260  05C7  340A               	retlw	10
  1261                           
  1262                           ;initializer for _currentState
  1263  05C8  3401               	retlw	1
  1264                           
  1265                           ;initializer for _upperLimit
  1266  05C9  34FF               	retlw	255
  1267  05CA  3403               	retlw	3
  1268  05CB  3400               	retlw	0
  1269  05CC  3400               	retlw	0
  1270                           
  1271                           	psect	stringtext1
  1272  060C                     __pstringtext1:
  1273  060C                     _fixedPointFactor:
  1274  060C  34E8               	retlw	232
  1275  060D  3403               	retlw	3
  1276  060E  3400               	retlw	0
  1277  060F  3400               	retlw	0
  1278  0610                     __end_of_fixedPointFactor:
  1279                           
  1280                           	psect	nvBANK1
  1281  00A0                     __pnvBANK1:
  1282  00A0                     _TMR0_InterruptHandler:
  1283  00A0                     	ds	2
  1284  00A2                     _timer0ReloadVal:
  1285  00A2                     	ds	1
  1286  000C                     _PORTAbits	set	12
  1287  000B                     _INTCONbits	set	11
  1288  0015                     _TMR0	set	21
  1289  001C                     _T2CONbits	set	28
  1290  001C                     _T2CON	set	28
  1291  0011                     _PIR1bits	set	17
  1292  001A                     _TMR2	set	26
  1293  001B                     _PR2	set	27
  1294  0095                     _OPTION_REG	set	149
  1295  0095                     _OPTION_REGbits	set	149
  1296  008E                     _TRISC	set	142
  1297  008D                     _TRISB	set	141
  1298  008C                     _TRISA	set	140
  1299  0097                     _WDTCON	set	151
  1300  0099                     _OSCCON	set	153
  1301  009D                     _ADCON0bits	set	157
  1302  009C                     _ADRESH	set	156
  1303  009B                     _ADRESL	set	155
  1304  009F                     _ADCON2	set	159
  1305  009E                     _ADCON1	set	158
  1306  009D                     _ADCON0	set	157
  1307  010D                     _LATBbits	set	269
  1308  010E                     _LATCbits	set	270
  1309  011D                     _APFCON	set	285
  1310  010E                     _LATC	set	270
  1311  010D                     _LATB	set	269
  1312  010C                     _LATA	set	268
  1313  0116                     _BORCON	set	278
  1314  0196                     _PMCON2	set	406
  1315  0193                     _PMDATL	set	403
  1316  0194                     _PMDATH	set	404
  1317  0195                     _PMCON1bits	set	405
  1318  0192                     _PMADRH	set	402
  1319  0191                     _PMADRL	set	401
  1320  018C                     _ANSELA	set	396
  1321  018D                     _ANSELB	set	397
  1322  018E                     _ANSELC	set	398
  1323  020C                     _WPUA	set	524
  1324  020D                     _WPUB	set	525
  1325  0617                     _PWM3DCL	set	1559
  1326  0618                     _PWM3DCH	set	1560
  1327  0619                     _PWM3CON	set	1561
  1328                           
  1329                           	psect	cinit
  1330  000D                     start_initialization:	
  1331                           ; #config settings
  1332                           
  1333  000D                     __initialization:
  1334                           
  1335                           ; Initialize objects allocated to BANK0
  1336  000D  30C3               	movlw	low __pidataBANK0
  1337  000E  0084               	movwf	4
  1338  000F  3085               	movlw	(high __pidataBANK0)| (0+128)
  1339  0010  0085               	movwf	5
  1340  0011  3066               	movlw	low __pdataBANK0
  1341  0012  0086               	movwf	6
  1342  0013  3000               	movlw	high __pdataBANK0
  1343  0014  0087               	movwf	7
  1344  0015  300A               	movlw	10
  1345  0016  25F4               	fcall	init_ram
  1346                           
  1347                           ; Clear objects allocated to BANK0
  1348  0017  3056               	movlw	low __pbssBANK0
  1349  0018  0084               	movwf	4
  1350  0019  3000               	movlw	high __pbssBANK0
  1351  001A  0085               	movwf	5
  1352  001B  3010               	movlw	16
  1353  001C  25FA               	fcall	clear_ram0
  1354                           
  1355                           ; Clear objects allocated to BANK1
  1356  001D  0021               	movlb	1	; select bank1
  1357  001E  01A3               	clrf	__pbssBANK1& (0+127)
  1358  001F  01A4               	clrf	(__pbssBANK1+1)& (0+127)
  1359  0020  01A5               	clrf	(__pbssBANK1+2)& (0+127)
  1360  0021                     end_of_initialization:	
  1361                           ;End of C runtime variable initialization code
  1362                           
  1363  0021                     __end_of__initialization:
  1364  0021  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1365  0022  0020               	movlb	0
  1366  0023  2824               	ljmp	_main	;jump to C main() function
  1367                           
  1368                           	psect	bssBANK0
  1369  0056                     __pbssBANK0:
  1370  0056                     _lowerLimit:
  1371  0056                     	ds	4
  1372  005A                     _adcValuePosition:
  1373  005A                     	ds	4
  1374  005E                     _msPressed:
  1375  005E                     	ds	2
  1376  0060                     _msTick:
  1377  0060                     	ds	2
  1378  0062                     _ADC_InterruptHandler:
  1379  0062                     	ds	2
  1380  0064                     _doToggle:
  1381  0064                     	ds	1
  1382  0065                     _doButtonAction:
  1383  0065                     	ds	1
  1384                           
  1385                           	psect	dataBANK0
  1386  0066                     __pdataBANK0:
  1387  0066                     _m:
  1388  0066                     	ds	4
  1389  006A                     main@channel:
  1390  006A                     	ds	1
  1391  006B                     _currentState:
  1392  006B                     	ds	1
  1393  006C                     _upperLimit:
  1394  006C                     	ds	4
  1395                           
  1396                           	psect	bssBANK1
  1397  00A3                     __pbssBANK1:
  1398  00A3                     _b:
  1399  00A3                     	ds	3
  1400                           
  1401                           	psect	inittext
  1402  05F4                     init_ram:
  1403  05F4  00FE               	movwf	126
  1404  05F5                     initloop:
  1405  05F5  0012               	moviw fsr0++
  1406  05F6  001E               	movwi fsr1++
  1407  05F7  0BFE               	decfsz	126,f
  1408  05F8  2DF5               	goto	initloop
  1409  05F9  3400               	retlw	0
  1410                           
  1411                           	psect	clrtext
  1412  05FA                     clear_ram0:	
  1413                           ;	Called with FSR0 containing the base address, and
  1414                           ;	WREG with the size to clear
  1415                           
  1416  05FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  1417  05FB                     clrloop0:
  1418  05FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  1419  05FC  3101               	addfsr 0,1
  1420  05FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1421  05FE  2DFB               	goto	clrloop0	;have we reached the end yet?
  1422  05FF  3400               	retlw	0	;all done for this memory range, return
  1423                           
  1424                           	psect	cstackCOMMON
  1425  0070                     __pcstackCOMMON:
  1426  0070                     ?_PIN_MANAGER_Initialize:
  1427  0070                     ??_PIN_MANAGER_Initialize:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430  0070                     ?_OSCILLATOR_Initialize:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433  0070                     ??_OSCILLATOR_Initialize:	
  1434                           ; 1 bytes @ 0x0
  1435                           
  1436  0070                     ?_WDT_Initialize:	
  1437                           ; 1 bytes @ 0x0
  1438                           
  1439  0070                     ??_WDT_Initialize:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442  0070                     ?_PWM3_Initialize:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0070                     ??_PWM3_Initialize:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0070                     ?_TMR2_Initialize:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0070                     ??_TMR2_Initialize:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0070                     ?_TMR0_Initialize:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0070                     ?_TMR0_SetInterruptHandler:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0070                     ?_TMR0_DefaultInterruptHandler:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0070                     ??_TMR0_DefaultInterruptHandler:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0070                     ?_TMR0_CallBack:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0070                     ??_TMR0_CallBack:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  0070                     ?_FLASH_EraseBlock:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0070                     ?_setLedsForPositioning:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0070                     ?_ADC_Initialize:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0070                     ??_ADC_Initialize:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0070                     ?_SYSTEM_Initialize:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ?_TMR2_StartTimer:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ??_TMR2_StartTimer:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ?_TMR0_ISR:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     ??_TMR0_ISR:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ?_INTERRUPT_InterruptManager:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ??_INTERRUPT_InterruptManager:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_timer0CallBack:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ??_timer0CallBack:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_setState:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_main:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_ADC_GetConversion:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_FLASH_ReadWord:	
  1521                           ; 2 bytes @ 0x0
  1522                           
  1523  0070                     ?___tmul:	
  1524                           ; 2 bytes @ 0x0
  1525                           
  1526  0070                     ?___lmul:	
  1527                           ; 3 bytes @ 0x0
  1528                           
  1529  0070                     ?___lldiv:	
  1530                           ; 4 bytes @ 0x0
  1531                           
  1532  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1533                           ; 4 bytes @ 0x0
  1534                           
  1535  0070                     FLASH_ReadWord@flashAddr:	
  1536                           ; 2 bytes @ 0x0
  1537                           
  1538  0070                     FLASH_EraseBlock@startAddr:	
  1539                           ; 2 bytes @ 0x0
  1540                           
  1541  0070                     ___tmul@multiplier:	
  1542                           ; 2 bytes @ 0x0
  1543                           
  1544  0070                     setLedsForPositioning@adcValue:	
  1545                           ; 3 bytes @ 0x0
  1546                           
  1547  0070                     ___lmul@multiplier:	
  1548                           ; 4 bytes @ 0x0
  1549                           
  1550  0070                     ___lldiv@divisor:	
  1551                           ; 4 bytes @ 0x0
  1552                           
  1553                           
  1554                           ; 4 bytes @ 0x0
  1555  0070                     	ds	2
  1556  0072                     ??_TMR0_Initialize:
  1557  0072                     ??_TMR0_SetInterruptHandler:	
  1558                           ; 1 bytes @ 0x2
  1559                           
  1560  0072                     ??_FLASH_EraseBlock:	
  1561                           ; 1 bytes @ 0x2
  1562                           
  1563  0072                     ??_ADC_GetConversion:	
  1564                           ; 1 bytes @ 0x2
  1565                           
  1566  0072                     ??_FLASH_ReadWord:	
  1567                           ; 1 bytes @ 0x2
  1568                           
  1569  0072                     FLASH_ReadWord@GIEBitValue:	
  1570                           ; 1 bytes @ 0x2
  1571                           
  1572  0072                     FLASH_EraseBlock@GIEBitValue:	
  1573                           ; 1 bytes @ 0x2
  1574                           
  1575                           
  1576                           ; 1 bytes @ 0x2
  1577  0072                     	ds	1
  1578  0073                     ?_FLASH_WriteBlock:
  1579  0073                     ??_SYSTEM_Initialize:	
  1580                           ; 1 bytes @ 0x3
  1581                           
  1582  0073                     ADC_GetConversion@channel:	
  1583                           ; 1 bytes @ 0x3
  1584                           
  1585  0073                     FLASH_WriteBlock@writeAddr:	
  1586                           ; 1 bytes @ 0x3
  1587                           
  1588  0073                     ___tmul@multiplicand:	
  1589                           ; 2 bytes @ 0x3
  1590                           
  1591                           
  1592                           ; 3 bytes @ 0x3
  1593  0073                     	ds	1
  1594  0074                     ??_setLedsForPositioning:
  1595  0074                     ?_PWM3_LoadDutyValue:	
  1596                           ; 1 bytes @ 0x4
  1597                           
  1598  0074                     PWM3_LoadDutyValue@dutyValue:	
  1599                           ; 1 bytes @ 0x4
  1600                           
  1601  0074                     ___lmul@multiplicand:	
  1602                           ; 2 bytes @ 0x4
  1603                           
  1604  0074                     ___lldiv@dividend:	
  1605                           ; 4 bytes @ 0x4
  1606                           
  1607                           
  1608                           ; 4 bytes @ 0x4
  1609  0074                     	ds	1
  1610  0075                     FLASH_WriteBlock@flashWordArray:
  1611                           
  1612                           ; 1 bytes @ 0x5
  1613  0075                     	ds	1
  1614  0076                     ??_FLASH_WriteBlock:
  1615  0076                     ??_PWM3_LoadDutyValue:	
  1616                           ; 1 bytes @ 0x6
  1617                           
  1618  0076                     ??___tmul:	
  1619                           ; 1 bytes @ 0x6
  1620                           
  1621  0076                     ___tmul@product:	
  1622                           ; 1 bytes @ 0x6
  1623                           
  1624                           
  1625                           ; 3 bytes @ 0x6
  1626  0076                     	ds	2
  1627  0078                     ??___lmul:
  1628  0078                     ??___lldiv:	
  1629                           ; 1 bytes @ 0x8
  1630                           
  1631  0078                     ___lmul@product:	
  1632                           ; 1 bytes @ 0x8
  1633                           
  1634                           
  1635                           ; 4 bytes @ 0x8
  1636  0078                     	ds	1
  1637  0079                     FLASH_WriteBlock@blockStartAddr:
  1638  0079                     ___lldiv@quotient:	
  1639                           ; 2 bytes @ 0x9
  1640                           
  1641                           
  1642                           ; 4 bytes @ 0x9
  1643  0079                     	ds	2
  1644  007B                     FLASH_WriteBlock@GIEBitValue:
  1645                           
  1646                           ; 1 bytes @ 0xB
  1647  007B                     	ds	1
  1648  007C                     ??___aldiv:
  1649  007C                     FLASH_WriteBlock@i:	
  1650                           ; 1 bytes @ 0xC
  1651                           
  1652                           
  1653                           ; 1 bytes @ 0xC
  1654  007C                     	ds	1
  1655  007D                     ___lldiv@counter:
  1656                           
  1657                           ; 1 bytes @ 0xD
  1658  007D                     	ds	1
  1659                           
  1660                           	psect	cstackBANK0
  1661  0020                     __pcstackBANK0:
  1662  0020                     ??_setState:
  1663  0020                     ?___aldiv:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0020                     ___aldiv@divisor:	
  1667                           ; 4 bytes @ 0x0
  1668                           
  1669                           
  1670                           ; 4 bytes @ 0x0
  1671  0020                     	ds	4
  1672  0024                     setState@newState:
  1673  0024                     ___aldiv@dividend:	
  1674                           ; 1 bytes @ 0x4
  1675                           
  1676                           
  1677                           ; 4 bytes @ 0x4
  1678  0024                     	ds	4
  1679  0028                     ___aldiv@counter:
  1680                           
  1681                           ; 1 bytes @ 0x8
  1682  0028                     	ds	1
  1683  0029                     ___aldiv@sign:
  1684                           
  1685                           ; 1 bytes @ 0x9
  1686  0029                     	ds	1
  1687  002A                     ___aldiv@quotient:
  1688                           
  1689                           ; 4 bytes @ 0xA
  1690  002A                     	ds	4
  1691  002E                     ??_main:
  1692                           
  1693                           ; 1 bytes @ 0xE
  1694  002E                     	ds	8
  1695  0036                     main@wrBlockData:
  1696                           
  1697                           ; 32 bytes @ 0x16
  1698  0036                     	ds	32
  1699                           
  1700                           	psect	maintext
  1701  0024                     __pmaintext:	
  1702 ;;
  1703 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1704 ;;
  1705 ;; *************** function _main *****************
  1706 ;; Defined at:
  1707 ;;		line 160 in file "main.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  wrBlockData    32   22[BANK0 ] unsigned short [16]
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      void 
  1714 ;; Registers used:
  1715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : B1F/0
  1718 ;;		On exit  : 1F/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMMON   BANK0   BANK1
  1721 ;;      Params:         0       0       0
  1722 ;;      Locals:         0      32       0
  1723 ;;      Temps:          0       8       0
  1724 ;;      Totals:         0      40       0
  1725 ;;Total ram usage:       40 bytes
  1726 ;; Hardware stack levels required when called:    7
  1727 ;; This function calls:
  1728 ;;		_ADC_GetConversion
  1729 ;;		_FLASH_WriteBlock
  1730 ;;		_PWM3_LoadDutyValue
  1731 ;;		_SYSTEM_Initialize
  1732 ;;		_TMR0_SetInterruptHandler
  1733 ;;		_TMR2_StartTimer
  1734 ;;		___aldiv
  1735 ;;		___lmul
  1736 ;;		_setLedsForPositioning
  1737 ;;		_setState
  1738 ;; This function is called by:
  1739 ;;		Startup code after reset
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           
  1744                           ;psect for function _main
  1745  0024                     _main:
  1746                           
  1747                           ;main.c: 163:     SYSTEM_Initialize();
  1748                           
  1749                           ;incstack = 0
  1750                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1751  0024  25CD               	fcall	_SYSTEM_Initialize
  1752                           
  1753                           ;main.c: 166:     (INTCONbits.GIE = 1);
  1754  0025  178B               	bsf	11,7	;volatile
  1755                           
  1756                           ;main.c: 168:     setState(STATE_NORMAL);
  1757  0026  3001               	movlw	1
  1758  0027  22CC               	fcall	_setState
  1759                           
  1760                           ;main.c: 171:     TMR0_SetInterruptHandler(timer0CallBack);
  1761  0028  30A7               	movlw	low _timer0CallBack
  1762  0029  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1763  002A  3005               	movlw	high _timer0CallBack
  1764  002B  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1765  002C  2600               	fcall	_TMR0_SetInterruptHandler
  1766                           
  1767                           ;main.c: 172:     TMR2_StartTimer();
  1768  002D  2614               	fcall	_TMR2_StartTimer
  1769  002E                     l1864:
  1770                           
  1771                           ;main.c: 175:     {;main.c: 176:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 179:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1772  002E  3003               	movlw	3
  1773  002F  0020               	movlb	0	; select bank0
  1774  0030  066A               	xorwf	main@channel,w
  1775  0031  1903               	btfsc	3,2
  1776  0032  2835               	goto	l1868
  1777  0033  3003               	movlw	3
  1778  0034  2836               	goto	L1
  1779  0035                     l1868:
  1780  0035  300A               	movlw	10
  1781  0036                     L1:
  1782  0036  00AE               	movwf	??_main
  1783  0037  082E               	movf	??_main,w
  1784  0038  00EA               	movwf	main@channel
  1785                           
  1786                           ;main.c: 184:         if(channel == channelRudder)
  1787  0039  3003               	movlw	3
  1788  003A  066A               	xorwf	main@channel,w
  1789  003B  1D03               	btfss	3,2
  1790  003C  2847               	goto	l1874
  1791                           
  1792                           ;main.c: 185:         {;main.c: 186:             adcValuePosition = ADC_GetConversion(ch
      +                          annel);
  1793  003D  086A               	movf	main@channel,w
  1794  003E  2564               	fcall	_ADC_GetConversion
  1795  003F  0870               	movf	?_ADC_GetConversion,w
  1796  0040  0020               	movlb	0	; select bank0
  1797  0041  00DA               	movwf	_adcValuePosition
  1798  0042  0871               	movf	?_ADC_GetConversion+1,w
  1799  0043  00DB               	movwf	_adcValuePosition+1
  1800  0044  01DC               	clrf	_adcValuePosition+2
  1801  0045  01DD               	clrf	_adcValuePosition+3
  1802                           
  1803                           ;main.c: 187:         }
  1804  0046  284E               	goto	l1876
  1805  0047                     l1874:
  1806                           
  1807                           ;main.c: 189:         {;main.c: 191:             PWM3_LoadDutyValue(ADC_GetConversion(ch
      +                          annel));
  1808  0047  086A               	movf	main@channel,w
  1809  0048  2564               	fcall	_ADC_GetConversion
  1810  0049  0871               	movf	?_ADC_GetConversion+1,w
  1811  004A  00F5               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1812  004B  0870               	movf	?_ADC_GetConversion,w
  1813  004C  00F4               	movwf	PWM3_LoadDutyValue@dutyValue
  1814  004D  257C               	fcall	_PWM3_LoadDutyValue
  1815  004E                     l1876:
  1816                           
  1817                           ;main.c: 196:         if(!PORTAbits.RA5 && !doButtonAction)
  1818  004E  0020               	movlb	0	; select bank0
  1819  004F  1A8C               	btfsc	12,5	;volatile
  1820  0050  2866               	goto	l1886
  1821  0051  0865               	movf	_doButtonAction,w	;volatile
  1822  0052  1D03               	btfss	3,2
  1823  0053  2866               	goto	l1886
  1824                           
  1825                           ;main.c: 197:         {;main.c: 198:             msPressed++;
  1826  0054  3001               	movlw	1
  1827  0055  07DE               	addwf	_msPressed,f	;volatile
  1828  0056  3000               	movlw	0
  1829  0057  3DDF               	addwfc	_msPressed+1,f	;volatile
  1830                           
  1831                           ;main.c: 200:             if(msPressed > 3000)
  1832  0058  300B               	movlw	11
  1833  0059  025F               	subwf	_msPressed+1,w	;volatile
  1834  005A  30B9               	movlw	185
  1835  005B  1903               	skipnz
  1836  005C  025E               	subwf	_msPressed,w	;volatile
  1837  005D  1C03               	skipc
  1838  005E  2863               	goto	l1884
  1839                           
  1840                           ;main.c: 201:             {;main.c: 202:                 doButtonAction = 1;
  1841  005F  3001               	movlw	1
  1842  0060  00AE               	movwf	??_main
  1843  0061  082E               	movf	??_main,w
  1844  0062  00E5               	movwf	_doButtonAction	;volatile
  1845  0063                     l1884:
  1846  0063  0022               	movlb	2	; select bank2
  1847  0064  168E               	bsf	14,5	;volatile
  1848  0065  286A               	goto	l1890
  1849  0066                     l1886:
  1850                           
  1851                           ;main.c: 207:         {;main.c: 208:             msPressed = 0;
  1852  0066  01DE               	clrf	_msPressed	;volatile
  1853  0067  01DF               	clrf	_msPressed+1	;volatile
  1854  0068  0022               	movlb	2	; select bank2
  1855  0069  128E               	bcf	14,5	;volatile
  1856  006A                     l1890:
  1857                           
  1858                           ;main.c: 214:         if(doButtonAction)
  1859  006A  0020               	movlb	0	; select bank0
  1860  006B  0865               	movf	_doButtonAction,w	;volatile
  1861  006C  1903               	btfsc	3,2
  1862  006D  2980               	goto	l1930
  1863  006E                     l299:	
  1864                           ;main.c: 218:             {;main.c: 220:             }
  1865                           
  1866                           
  1867                           ;main.c: 217:             while(!PORTAbits.RA5)
  1868  006E  1A8C               	btfsc	12,5	;volatile
  1869  006F  28A3               	goto	l1908
  1870  0070  286E               	goto	l299
  1871  0071                     l1894:
  1872                           
  1873                           ;main.c: 227:                     setState(STATE_TEACH_LEFT);
  1874  0071  3002               	movlw	2
  1875  0072  22CC               	fcall	_setState
  1876                           
  1877                           ;main.c: 228:                     break;
  1878  0073  28B6               	goto	l1910
  1879  0074                     l1896:
  1880                           
  1881                           ;main.c: 231:                     lowerLimit = adcValuePosition;
  1882  0074  085D               	movf	_adcValuePosition+3,w
  1883  0075  00D9               	movwf	_lowerLimit+3
  1884  0076  085C               	movf	_adcValuePosition+2,w
  1885  0077  00D8               	movwf	_lowerLimit+2
  1886  0078  085B               	movf	_adcValuePosition+1,w
  1887  0079  00D7               	movwf	_lowerLimit+1
  1888  007A  085A               	movf	_adcValuePosition,w
  1889  007B  00D6               	movwf	_lowerLimit
  1890                           
  1891                           ;main.c: 233:                     setState(STATE_TEACH_RIGHT);
  1892  007C  3003               	movlw	3
  1893  007D  22CC               	fcall	_setState
  1894                           
  1895                           ;main.c: 234:                     break;
  1896  007E  28B6               	goto	l1910
  1897  007F                     l1900:
  1898                           
  1899                           ;main.c: 237:                 {;main.c: 238:                     upperLimit = adcValuePo
      +                          sition;
  1900  007F  085D               	movf	_adcValuePosition+3,w
  1901  0080  00EF               	movwf	_upperLimit+3
  1902  0081  085C               	movf	_adcValuePosition+2,w
  1903  0082  00EE               	movwf	_upperLimit+2
  1904  0083  085B               	movf	_adcValuePosition+1,w
  1905  0084  00ED               	movwf	_upperLimit+1
  1906  0085  085A               	movf	_adcValuePosition,w
  1907  0086  00EC               	movwf	_upperLimit
  1908                           
  1909                           ;main.c: 244:                     uint16_t wrBlockData[16];;main.c: 247:                
      +                               wrBlockData[16 -1] = (uint16_t)(upperLimit);
  1910  0087  086D               	movf	_upperLimit+1,w
  1911  0088  00D5               	movwf	main@wrBlockData+31
  1912  0089  086C               	movf	_upperLimit,w
  1913  008A  00D4               	movwf	main@wrBlockData+30
  1914                           
  1915                           ;main.c: 248:                     wrBlockData[16 -2] = (uint16_t)(upperLimit >> 16);
  1916  008B  086F               	movf	_upperLimit+3,w
  1917  008C  00D3               	movwf	main@wrBlockData+29
  1918  008D  086E               	movf	_upperLimit+2,w
  1919  008E  00D2               	movwf	main@wrBlockData+28
  1920                           
  1921                           ;main.c: 249:                     wrBlockData[16 -3] = (uint16_t)(lowerLimit);
  1922  008F  0857               	movf	_lowerLimit+1,w
  1923  0090  00D1               	movwf	main@wrBlockData+27
  1924  0091  0856               	movf	_lowerLimit,w
  1925  0092  00D0               	movwf	main@wrBlockData+26
  1926                           
  1927                           ;main.c: 250:                     wrBlockData[16 -4] = (uint16_t)(lowerLimit >> 16);
  1928  0093  0859               	movf	_lowerLimit+3,w
  1929  0094  00CF               	movwf	main@wrBlockData+25
  1930  0095  0858               	movf	_lowerLimit+2,w
  1931  0096  00CE               	movwf	main@wrBlockData+24
  1932                           
  1933                           ;main.c: 253:                     FLASH_WriteBlock((uint16_t)( 0x800 -16 -1), (uint16_t*
      +                          )wrBlockData);
  1934  0097  30EF               	movlw	239
  1935  0098  00F3               	movwf	FLASH_WriteBlock@writeAddr
  1936  0099  3007               	movlw	7
  1937  009A  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  1938  009B  3036               	movlw	(low (main@wrBlockData| 0))& (0+255)
  1939  009C  00AE               	movwf	??_main
  1940  009D  082E               	movf	??_main,w
  1941  009E  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  1942  009F  241C               	fcall	_FLASH_WriteBlock
  1943                           
  1944                           ;main.c: 255:                     setState(STATE_NORMAL);
  1945  00A0  3001               	movlw	1
  1946  00A1  22CC               	fcall	_setState
  1947                           
  1948                           ;main.c: 256:                     break;
  1949  00A2  28B6               	goto	l1910
  1950  00A3                     l1908:
  1951  00A3  086B               	movf	_currentState,w
  1952  00A4  00AE               	movwf	??_main
  1953  00A5  01AF               	clrf	??_main+1
  1954                           
  1955                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1956                           ; Switch size 1, requested type "simple"
  1957                           ; Number of cases is 1, Range of values is 0 to 0
  1958                           ; switch strategies available:
  1959                           ; Name         Instructions Cycles
  1960                           ; simple_byte            4     3 (average)
  1961                           ; direct_byte            8     6 (fixed)
  1962                           ; jumptable            260     6 (fixed)
  1963                           ;	Chosen strategy is simple_byte
  1964  00A6  082F               	movf	??_main+1,w
  1965  00A7  3A00               	xorlw	0	; case 0
  1966  00A8  1903               	skipnz
  1967  00A9  28AB               	goto	l2024
  1968  00AA  28B6               	goto	l1910
  1969  00AB                     l2024:
  1970                           
  1971                           ; Switch size 1, requested type "simple"
  1972                           ; Number of cases is 3, Range of values is 1 to 3
  1973                           ; switch strategies available:
  1974                           ; Name         Instructions Cycles
  1975                           ; simple_byte           10     6 (average)
  1976                           ; direct_byte           15     9 (fixed)
  1977                           ; jumptable            263     9 (fixed)
  1978                           ;	Chosen strategy is simple_byte
  1979  00AB  082E               	movf	??_main,w
  1980  00AC  3A01               	xorlw	1	; case 1
  1981  00AD  1903               	skipnz
  1982  00AE  2871               	goto	l1894
  1983  00AF  3A03               	xorlw	3	; case 2
  1984  00B0  1903               	skipnz
  1985  00B1  2874               	goto	l1896
  1986  00B2  3A01               	xorlw	1	; case 3
  1987  00B3  1903               	skipnz
  1988  00B4  287F               	goto	l1900
  1989  00B5  28B6               	goto	l1910
  1990  00B6                     l1910:
  1991                           
  1992                           ;main.c: 260:             doButtonAction = 0;
  1993  00B6  01E5               	clrf	_doButtonAction	;volatile
  1994  00B7  2980               	goto	l1930
  1995  00B8                     l1912:
  1996                           
  1997                           ;main.c: 268:                 if(channel == channelBrightness)
  1998  00B8  300A               	movlw	10
  1999  00B9  066A               	xorwf	main@channel,w
  2000  00BA  1D03               	btfss	3,2
  2001  00BB  282E               	goto	l1864
  2002                           
  2003                           ;main.c: 269:                 {;main.c: 270:                     adcValuePosition = (adc
      +                          ValuePosition*m-b)/fixedPointFactor;
  2004  00BC  3000               	movlw	0
  2005  00BD  00A3               	movwf	___aldiv@divisor+3
  2006  00BE  3000               	movlw	0
  2007  00BF  00A2               	movwf	___aldiv@divisor+2
  2008  00C0  3003               	movlw	3
  2009  00C1  00A1               	movwf	___aldiv@divisor+1
  2010  00C2  30E8               	movlw	232
  2011  00C3  00A0               	movwf	___aldiv@divisor
  2012  00C4  0021               	movlb	1	; select bank1
  2013  00C5  0823               	movf	_b^(0+128),w
  2014  00C6  0020               	movlb	0	; select bank0
  2015  00C7  00AE               	movwf	??_main
  2016  00C8  0021               	movlb	1	; select bank1
  2017  00C9  0824               	movf	(_b+1)^(0+128),w
  2018  00CA  0020               	movlb	0	; select bank0
  2019  00CB  00AF               	movwf	??_main+1
  2020  00CC  0021               	movlb	1	; select bank1
  2021  00CD  0825               	movf	(_b+2)^(0+128),w
  2022  00CE  0020               	movlb	0	; select bank0
  2023  00CF  00B0               	movwf	??_main+2
  2024  00D0  3000               	movlw	0
  2025  00D1  1BB0               	btfsc	??_main+2,7
  2026  00D2  30FF               	movlw	255
  2027  00D3  00B1               	movwf	??_main+3
  2028  00D4  085D               	movf	_adcValuePosition+3,w
  2029  00D5  00F3               	movwf	___lmul@multiplier+3
  2030  00D6  085C               	movf	_adcValuePosition+2,w
  2031  00D7  00F2               	movwf	___lmul@multiplier+2
  2032  00D8  085B               	movf	_adcValuePosition+1,w
  2033  00D9  00F1               	movwf	___lmul@multiplier+1
  2034  00DA  085A               	movf	_adcValuePosition,w
  2035  00DB  00F0               	movwf	___lmul@multiplier
  2036  00DC  0869               	movf	_m+3,w
  2037  00DD  00F7               	movwf	___lmul@multiplicand+3
  2038  00DE  0868               	movf	_m+2,w
  2039  00DF  00F6               	movwf	___lmul@multiplicand+2
  2040  00E0  0867               	movf	_m+1,w
  2041  00E1  00F5               	movwf	___lmul@multiplicand+1
  2042  00E2  0866               	movf	_m,w
  2043  00E3  00F4               	movwf	___lmul@multiplicand
  2044  00E4  24C2               	fcall	___lmul
  2045  00E5  0870               	movf	?___lmul,w
  2046  00E6  00B2               	movwf	??_main+4
  2047  00E7  0871               	movf	?___lmul+1,w
  2048  00E8  00B3               	movwf	??_main+5
  2049  00E9  0872               	movf	?___lmul+2,w
  2050  00EA  00B4               	movwf	??_main+6
  2051  00EB  0873               	movf	?___lmul+3,w
  2052  00EC  00B5               	movwf	??_main+7
  2053  00ED  082E               	movf	??_main,w
  2054  00EE  02B2               	subwf	??_main+4,f
  2055  00EF  082F               	movf	??_main+1,w
  2056  00F0  3BB3               	subwfb	??_main+5,f
  2057  00F1  0830               	movf	??_main+2,w
  2058  00F2  3BB4               	subwfb	??_main+6,f
  2059  00F3  0831               	movf	??_main+3,w
  2060  00F4  3BB5               	subwfb	??_main+7,f
  2061  00F5  0835               	movf	??_main+7,w
  2062  00F6  00A7               	movwf	___aldiv@dividend+3
  2063  00F7  0834               	movf	??_main+6,w
  2064  00F8  00A6               	movwf	___aldiv@dividend+2
  2065  00F9  0833               	movf	??_main+5,w
  2066  00FA  00A5               	movwf	___aldiv@dividend+1
  2067  00FB  0832               	movf	??_main+4,w
  2068  00FC  00A4               	movwf	___aldiv@dividend
  2069  00FD  239B               	fcall	___aldiv
  2070  00FE  0823               	movf	?___aldiv+3,w
  2071  00FF  00DD               	movwf	_adcValuePosition+3
  2072  0100  0822               	movf	?___aldiv+2,w
  2073  0101  00DC               	movwf	_adcValuePosition+2
  2074  0102  0821               	movf	?___aldiv+1,w
  2075  0103  00DB               	movwf	_adcValuePosition+1
  2076  0104  0820               	movf	?___aldiv,w
  2077  0105  00DA               	movwf	_adcValuePosition
  2078                           
  2079                           ;main.c: 271:                     setLedsForPositioning(adcValuePosition);
  2080  0106  085D               	movf	_adcValuePosition+3,w
  2081  0107  00F3               	movwf	setLedsForPositioning@adcValue+3
  2082  0108  085C               	movf	_adcValuePosition+2,w
  2083  0109  00F2               	movwf	setLedsForPositioning@adcValue+2
  2084  010A  085B               	movf	_adcValuePosition+1,w
  2085  010B  00F1               	movwf	setLedsForPositioning@adcValue+1
  2086  010C  085A               	movf	_adcValuePosition,w
  2087  010D  00F0               	movwf	setLedsForPositioning@adcValue
  2088  010E  2194               	fcall	_setLedsForPositioning
  2089  010F  282E               	goto	l1864
  2090  0110                     l1916:
  2091                           
  2092                           ;main.c: 276:                 if(doToggle)
  2093  0110  0864               	movf	_doToggle,w
  2094  0111  1903               	btfsc	3,2
  2095  0112  282E               	goto	l1864
  2096  0113  1003               	clrc
  2097  0114  0022               	movlb	2	; select bank2
  2098  0115  1C0E               	btfss	14,0	;volatile
  2099  0116  1403               	setc
  2100  0117  1C03               	btfss	3,0
  2101  0118  291C               	goto	u1500
  2102  0119  0022               	movlb	2	; select bank2
  2103  011A  140E               	bsf	14,0	;volatile
  2104  011B  291E               	goto	l315
  2105  011C                     u1500:
  2106  011C  0022               	movlb	2	; select bank2
  2107  011D  100E               	bcf	14,0	;volatile
  2108  011E                     l315:	
  2109                           ;main.c: 279:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2110                           
  2111  011E  1003               	clrc
  2112  011F  1C8E               	btfss	14,1	;volatile
  2113  0120  1403               	setc
  2114  0121  1C03               	btfss	3,0
  2115  0122  2926               	goto	u1520
  2116  0123  0022               	movlb	2	; select bank2
  2117  0124  148E               	bsf	14,1	;volatile
  2118  0125  2928               	goto	l317
  2119  0126                     u1520:
  2120  0126  0022               	movlb	2	; select bank2
  2121  0127  108E               	bcf	14,1	;volatile
  2122  0128                     l317:	
  2123                           ;main.c: 280:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2124                           
  2125  0128  1003               	clrc
  2126  0129  1D0E               	btfss	14,2	;volatile
  2127  012A  1403               	setc
  2128  012B  1C03               	btfss	3,0
  2129  012C  2930               	goto	u1540
  2130  012D  0022               	movlb	2	; select bank2
  2131  012E  150E               	bsf	14,2	;volatile
  2132  012F  2932               	goto	l319
  2133  0130                     u1540:
  2134  0130  0022               	movlb	2	; select bank2
  2135  0131  110E               	bcf	14,2	;volatile
  2136  0132                     l319:	
  2137                           ;main.c: 281:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2138                           
  2139  0132  1003               	clrc
  2140  0133  1D8E               	btfss	14,3	;volatile
  2141  0134  1403               	setc
  2142  0135  1C03               	btfss	3,0
  2143  0136  293A               	goto	u1560
  2144  0137  0022               	movlb	2	; select bank2
  2145  0138  158E               	bsf	14,3	;volatile
  2146  0139  293C               	goto	l321
  2147  013A                     u1560:
  2148  013A  0022               	movlb	2	; select bank2
  2149  013B  118E               	bcf	14,3	;volatile
  2150  013C                     l321:	
  2151                           ;main.c: 282:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2152                           
  2153  013C  1003               	clrc
  2154  013D  1E0E               	btfss	14,4	;volatile
  2155  013E  1403               	setc
  2156  013F  1C03               	btfss	3,0
  2157  0140  2944               	goto	u1580
  2158  0141  0022               	movlb	2	; select bank2
  2159  0142  160E               	bsf	14,4	;volatile
  2160  0143  2946               	goto	l1920
  2161  0144                     u1580:
  2162  0144  0022               	movlb	2	; select bank2
  2163  0145  120E               	bcf	14,4	;volatile
  2164  0146                     l1920:
  2165                           
  2166                           ;main.c: 283:                     doToggle = 0;
  2167  0146  0020               	movlb	0	; select bank0
  2168  0147  01E4               	clrf	_doToggle
  2169  0148  282E               	goto	l1864
  2170  0149                     l1922:
  2171                           
  2172                           ;main.c: 290:                 if(doToggle)
  2173  0149  0864               	movf	_doToggle,w
  2174  014A  1903               	btfsc	3,2
  2175  014B  282E               	goto	l1864
  2176  014C  1003               	clrc
  2177  014D  0022               	movlb	2	; select bank2
  2178  014E  1F0E               	btfss	14,6	;volatile
  2179  014F  1403               	setc
  2180  0150  1C03               	btfss	3,0
  2181  0151  2955               	goto	u1610
  2182  0152  0022               	movlb	2	; select bank2
  2183  0153  170E               	bsf	14,6	;volatile
  2184  0154  2957               	goto	l327
  2185  0155                     u1610:
  2186  0155  0022               	movlb	2	; select bank2
  2187  0156  130E               	bcf	14,6	;volatile
  2188  0157                     l327:	
  2189                           ;main.c: 293:                     do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2190                           
  2191  0157  1003               	clrc
  2192  0158  1F8E               	btfss	14,7	;volatile
  2193  0159  1403               	setc
  2194  015A  1C03               	btfss	3,0
  2195  015B  295F               	goto	u1630
  2196  015C  0022               	movlb	2	; select bank2
  2197  015D  178E               	bsf	14,7	;volatile
  2198  015E  2961               	goto	l329
  2199  015F                     u1630:
  2200  015F  0022               	movlb	2	; select bank2
  2201  0160  138E               	bcf	14,7	;volatile
  2202  0161                     l329:	
  2203                           ;main.c: 294:                     do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  2204                           
  2205  0161  1003               	clrc
  2206  0162  1E8D               	btfss	13,5	;volatile
  2207  0163  1403               	setc
  2208  0164  1C03               	btfss	3,0
  2209  0165  2969               	goto	u1650
  2210  0166  0022               	movlb	2	; select bank2
  2211  0167  168D               	bsf	13,5	;volatile
  2212  0168  296B               	goto	l331
  2213  0169                     u1650:
  2214  0169  0022               	movlb	2	; select bank2
  2215  016A  128D               	bcf	13,5	;volatile
  2216  016B                     l331:	
  2217                           ;main.c: 295:                     do { LATBbits.LATB6 = ~LATBbits.LATB6; } while(0);
  2218                           
  2219  016B  1003               	clrc
  2220  016C  1F0D               	btfss	13,6	;volatile
  2221  016D  1403               	setc
  2222  016E  1C03               	btfss	3,0
  2223  016F  2973               	goto	u1670
  2224  0170  0022               	movlb	2	; select bank2
  2225  0171  170D               	bsf	13,6	;volatile
  2226  0172  2975               	goto	l333
  2227  0173                     u1670:
  2228  0173  0022               	movlb	2	; select bank2
  2229  0174  130D               	bcf	13,6	;volatile
  2230  0175                     l333:	
  2231                           ;main.c: 296:                     do { LATBbits.LATB7 = ~LATBbits.LATB7; } while(0);
  2232                           
  2233  0175  1003               	clrc
  2234  0176  1F8D               	btfss	13,7	;volatile
  2235  0177  1403               	setc
  2236  0178  1C03               	btfss	3,0
  2237  0179  297D               	goto	u1690
  2238  017A  0022               	movlb	2	; select bank2
  2239  017B  178D               	bsf	13,7	;volatile
  2240  017C  2946               	goto	l1920
  2241  017D                     u1690:
  2242  017D  0022               	movlb	2	; select bank2
  2243  017E  138D               	bcf	13,7	;volatile
  2244  017F  2946               	goto	l1920
  2245  0180                     l1930:
  2246  0180  086B               	movf	_currentState,w
  2247  0181  00AE               	movwf	??_main
  2248  0182  01AF               	clrf	??_main+1
  2249                           
  2250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2251                           ; Switch size 1, requested type "simple"
  2252                           ; Number of cases is 1, Range of values is 0 to 0
  2253                           ; switch strategies available:
  2254                           ; Name         Instructions Cycles
  2255                           ; simple_byte            4     3 (average)
  2256                           ; direct_byte            8     6 (fixed)
  2257                           ; jumptable            260     6 (fixed)
  2258                           ;	Chosen strategy is simple_byte
  2259  0183  082F               	movf	??_main+1,w
  2260  0184  3A00               	xorlw	0	; case 0
  2261  0185  1903               	skipnz
  2262  0186  2988               	goto	l2026
  2263  0187  282E               	goto	l1864
  2264  0188                     l2026:
  2265                           
  2266                           ; Switch size 1, requested type "simple"
  2267                           ; Number of cases is 3, Range of values is 1 to 3
  2268                           ; switch strategies available:
  2269                           ; Name         Instructions Cycles
  2270                           ; simple_byte           10     6 (average)
  2271                           ; direct_byte           15     9 (fixed)
  2272                           ; jumptable            263     9 (fixed)
  2273                           ;	Chosen strategy is simple_byte
  2274  0188  082E               	movf	??_main,w
  2275  0189  3A01               	xorlw	1	; case 1
  2276  018A  1903               	skipnz
  2277  018B  28B8               	goto	l1912
  2278  018C  3A03               	xorlw	3	; case 2
  2279  018D  1903               	skipnz
  2280  018E  2910               	goto	l1916
  2281  018F  3A01               	xorlw	1	; case 3
  2282  0190  1903               	skipnz
  2283  0191  2949               	goto	l1922
  2284  0192  282E               	goto	l1864
  2285  0193  280C               	ljmp	start
  2286  0194                     __end_of_main:
  2287                           
  2288                           	psect	text1
  2289  02CC                     __ptext1:	
  2290 ;; *************** function _setState *****************
  2291 ;; Defined at:
  2292 ;;		line 97 in file "main.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;  newState        1    wreg     enum E2406
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  newState        1    4[BANK0 ] enum E2406
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 1C/1
  2303 ;;		On exit  : 1F/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMMON   BANK0   BANK1
  2306 ;;      Params:         0       0       0
  2307 ;;      Locals:         0       1       0
  2308 ;;      Temps:          0       4       0
  2309 ;;      Totals:         0       5       0
  2310 ;;Total ram usage:        5 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    5
  2313 ;; This function calls:
  2314 ;;		_FLASH_ReadWord
  2315 ;;		___lldiv
  2316 ;;		___tmul
  2317 ;; This function is called by:
  2318 ;;		_main
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           
  2323                           ;psect for function _setState
  2324  02CC                     _setState:
  2325                           
  2326                           ;incstack = 0
  2327                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2328                           ;setState@newState stored from wreg
  2329  02CC  0020               	movlb	0	; select bank0
  2330  02CD  00A4               	movwf	setState@newState
  2331                           
  2332                           ;main.c: 97: void setState(state_t newState);main.c: 98: {;main.c: 99:     if(newState =
      +                          = currentState)
  2333  02CE  0824               	movf	setState@newState,w
  2334  02CF  066B               	xorwf	_currentState,w
  2335  02D0  1903               	btfsc	3,2
  2336  02D1  0008               	return
  2337                           
  2338                           ;main.c: 105:     do { LATCbits.LATC0 = 0; } while(0);
  2339  02D2  0022               	movlb	2	; select bank2
  2340  02D3  100E               	bcf	14,0	;volatile
  2341                           
  2342                           ;main.c: 106:     do { LATCbits.LATC1 = 0; } while(0);
  2343  02D4  108E               	bcf	14,1	;volatile
  2344                           
  2345                           ;main.c: 107:     do { LATCbits.LATC2 = 0; } while(0);
  2346  02D5  110E               	bcf	14,2	;volatile
  2347                           
  2348                           ;main.c: 108:     do { LATCbits.LATC3 = 0; } while(0);
  2349  02D6  118E               	bcf	14,3	;volatile
  2350                           
  2351                           ;main.c: 109:     do { LATCbits.LATC4 = 0; } while(0);
  2352  02D7  120E               	bcf	14,4	;volatile
  2353                           
  2354                           ;main.c: 110:     do { LATCbits.LATC5 = 0; } while(0);
  2355  02D8  128E               	bcf	14,5	;volatile
  2356                           
  2357                           ;main.c: 111:     do { LATCbits.LATC6 = 0; } while(0);
  2358  02D9  130E               	bcf	14,6	;volatile
  2359                           
  2360                           ;main.c: 112:     do { LATCbits.LATC7 = 0; } while(0);
  2361  02DA  138E               	bcf	14,7	;volatile
  2362                           
  2363                           ;main.c: 113:     do { LATBbits.LATB5 = 0; } while(0);
  2364  02DB  128D               	bcf	13,5	;volatile
  2365                           
  2366                           ;main.c: 114:     do { LATBbits.LATB6 = 0; } while(0);
  2367  02DC  130D               	bcf	13,6	;volatile
  2368                           
  2369                           ;main.c: 115:     do { LATBbits.LATB7 = 0; } while(0);
  2370  02DD  138D               	bcf	13,7	;volatile
  2371  02DE  2B7F               	goto	l1746
  2372  02DF                     l1730:
  2373                           
  2374                           ;main.c: 126:             lowerLimit = 0;
  2375  02DF  3000               	movlw	0
  2376  02E0  00D9               	movwf	_lowerLimit+3
  2377  02E1  3000               	movlw	0
  2378  02E2  00D8               	movwf	_lowerLimit+2
  2379  02E3  3000               	movlw	0
  2380  02E4  00D7               	movwf	_lowerLimit+1
  2381  02E5  3000               	movlw	0
  2382  02E6  00D6               	movwf	_lowerLimit
  2383                           
  2384                           ;main.c: 127:             lowerLimit += (int32_t)FLASH_ReadWord(0x800 -4) << 16;
  2385  02E7  30FC               	movlw	252
  2386  02E8  00F0               	movwf	FLASH_ReadWord@flashAddr
  2387  02E9  3007               	movlw	7
  2388  02EA  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2389  02EB  2533               	fcall	_FLASH_ReadWord
  2390  02EC  0870               	movf	?_FLASH_ReadWord,w
  2391  02ED  0020               	movlb	0	; select bank0
  2392  02EE  00A0               	movwf	??_setState
  2393  02EF  0871               	movf	?_FLASH_ReadWord+1,w
  2394  02F0  00A1               	movwf	??_setState+1
  2395  02F1  01A2               	clrf	??_setState+2
  2396  02F2  01A3               	clrf	??_setState+3
  2397  02F3  3010               	movlw	16
  2398  02F4                     u1055:
  2399  02F4  35A0               	lslf	??_setState,f
  2400  02F5  0DA1               	rlf	??_setState+1,f
  2401  02F6  0DA2               	rlf	??_setState+2,f
  2402  02F7  0DA3               	rlf	??_setState+3,f
  2403  02F8  0B89               	decfsz	9,f
  2404  02F9  2AF4               	goto	u1055
  2405  02FA  0820               	movf	??_setState,w
  2406  02FB  07D6               	addwf	_lowerLimit,f
  2407  02FC  0821               	movf	??_setState+1,w
  2408  02FD  3DD7               	addwfc	_lowerLimit+1,f
  2409  02FE  0822               	movf	??_setState+2,w
  2410  02FF  3DD8               	addwfc	_lowerLimit+2,f
  2411  0300  0823               	movf	??_setState+3,w
  2412  0301  3DD9               	addwfc	_lowerLimit+3,f
  2413                           
  2414                           ;main.c: 128:             lowerLimit += (int32_t)FLASH_ReadWord(0x800 -3);
  2415  0302  30FD               	movlw	253
  2416  0303  00F0               	movwf	FLASH_ReadWord@flashAddr
  2417  0304  3007               	movlw	7
  2418  0305  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2419  0306  2533               	fcall	_FLASH_ReadWord
  2420  0307  0870               	movf	?_FLASH_ReadWord,w
  2421  0308  0020               	movlb	0	; select bank0
  2422  0309  07D6               	addwf	_lowerLimit,f
  2423  030A  0871               	movf	?_FLASH_ReadWord+1,w
  2424  030B  3DD7               	addwfc	_lowerLimit+1,f
  2425  030C  3000               	movlw	0
  2426  030D  3DD8               	addwfc	_lowerLimit+2,f
  2427  030E  3DD9               	addwfc	_lowerLimit+3,f
  2428                           
  2429                           ;main.c: 131:             upperLimit = 0;
  2430  030F  3000               	movlw	0
  2431  0310  00EF               	movwf	_upperLimit+3
  2432  0311  3000               	movlw	0
  2433  0312  00EE               	movwf	_upperLimit+2
  2434  0313  3000               	movlw	0
  2435  0314  00ED               	movwf	_upperLimit+1
  2436  0315  3000               	movlw	0
  2437  0316  00EC               	movwf	_upperLimit
  2438                           
  2439                           ;main.c: 132:             upperLimit += (int32_t)FLASH_ReadWord(0x800 -2) << 16;
  2440  0317  30FE               	movlw	254
  2441  0318  00F0               	movwf	FLASH_ReadWord@flashAddr
  2442  0319  3007               	movlw	7
  2443  031A  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2444  031B  2533               	fcall	_FLASH_ReadWord
  2445  031C  0870               	movf	?_FLASH_ReadWord,w
  2446  031D  0020               	movlb	0	; select bank0
  2447  031E  00A0               	movwf	??_setState
  2448  031F  0871               	movf	?_FLASH_ReadWord+1,w
  2449  0320  00A1               	movwf	??_setState+1
  2450  0321  01A2               	clrf	??_setState+2
  2451  0322  01A3               	clrf	??_setState+3
  2452  0323  3010               	movlw	16
  2453  0324                     u1065:
  2454  0324  35A0               	lslf	??_setState,f
  2455  0325  0DA1               	rlf	??_setState+1,f
  2456  0326  0DA2               	rlf	??_setState+2,f
  2457  0327  0DA3               	rlf	??_setState+3,f
  2458  0328  0B89               	decfsz	9,f
  2459  0329  2B24               	goto	u1065
  2460  032A  0820               	movf	??_setState,w
  2461  032B  07EC               	addwf	_upperLimit,f
  2462  032C  0821               	movf	??_setState+1,w
  2463  032D  3DED               	addwfc	_upperLimit+1,f
  2464  032E  0822               	movf	??_setState+2,w
  2465  032F  3DEE               	addwfc	_upperLimit+2,f
  2466  0330  0823               	movf	??_setState+3,w
  2467  0331  3DEF               	addwfc	_upperLimit+3,f
  2468                           
  2469                           ;main.c: 133:             upperLimit += (int32_t)FLASH_ReadWord(0x800 -1) ;
  2470  0332  30FF               	movlw	255
  2471  0333  00F0               	movwf	FLASH_ReadWord@flashAddr
  2472  0334  3007               	movlw	7
  2473  0335  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2474  0336  2533               	fcall	_FLASH_ReadWord
  2475  0337  0870               	movf	?_FLASH_ReadWord,w
  2476  0338  0020               	movlb	0	; select bank0
  2477  0339  07EC               	addwf	_upperLimit,f
  2478  033A  0871               	movf	?_FLASH_ReadWord+1,w
  2479  033B  3DED               	addwfc	_upperLimit+1,f
  2480  033C  3000               	movlw	0
  2481  033D  3DEE               	addwfc	_upperLimit+2,f
  2482  033E  3DEF               	addwfc	_upperLimit+3,f
  2483                           
  2484                           ;main.c: 140:             m = (1023*fixedPointFactor)/(upperLimit - lowerLimit);
  2485  033F  0856               	movf	_lowerLimit,w
  2486  0340  026C               	subwf	_upperLimit,w
  2487  0341  00A0               	movwf	??_setState
  2488  0342  0857               	movf	_lowerLimit+1,w
  2489  0343  3B6D               	subwfb	_upperLimit+1,w
  2490  0344  00A1               	movwf	??_setState+1
  2491  0345  0858               	movf	_lowerLimit+2,w
  2492  0346  3B6E               	subwfb	_upperLimit+2,w
  2493  0347  00A2               	movwf	??_setState+2
  2494  0348  0859               	movf	_lowerLimit+3,w
  2495  0349  3B6F               	subwfb	_upperLimit+3,w
  2496  034A  00A3               	movwf	??_setState+3
  2497  034B  0823               	movf	??_setState+3,w
  2498  034C  00F3               	movwf	___lldiv@divisor+3
  2499  034D  0822               	movf	??_setState+2,w
  2500  034E  00F2               	movwf	___lldiv@divisor+2
  2501  034F  0821               	movf	??_setState+1,w
  2502  0350  00F1               	movwf	___lldiv@divisor+1
  2503  0351  0820               	movf	??_setState,w
  2504  0352  00F0               	movwf	___lldiv@divisor
  2505  0353  3000               	movlw	0
  2506  0354  00F7               	movwf	___lldiv@dividend+3
  2507  0355  300F               	movlw	15
  2508  0356  00F6               	movwf	___lldiv@dividend+2
  2509  0357  309C               	movlw	156
  2510  0358  00F5               	movwf	___lldiv@dividend+1
  2511  0359  3018               	movlw	24
  2512  035A  00F4               	movwf	___lldiv@dividend
  2513  035B  2470               	fcall	___lldiv
  2514  035C  0873               	movf	?___lldiv+3,w
  2515  035D  00E9               	movwf	_m+3
  2516  035E  0872               	movf	?___lldiv+2,w
  2517  035F  00E8               	movwf	_m+2
  2518  0360  0871               	movf	?___lldiv+1,w
  2519  0361  00E7               	movwf	_m+1
  2520  0362  0870               	movf	?___lldiv,w
  2521  0363  00E6               	movwf	_m
  2522                           
  2523                           ;main.c: 141:             b = lowerLimit*m;
  2524  0364  0866               	movf	_m,w
  2525  0365  00F0               	movwf	___tmul@multiplier
  2526  0366  0867               	movf	_m+1,w
  2527  0367  00F1               	movwf	___tmul@multiplier+1
  2528  0368  0868               	movf	_m+2,w
  2529  0369  00F2               	movwf	___tmul@multiplier+2
  2530  036A  0856               	movf	_lowerLimit,w
  2531  036B  00F3               	movwf	___tmul@multiplicand
  2532  036C  0857               	movf	_lowerLimit+1,w
  2533  036D  00F4               	movwf	___tmul@multiplicand+1
  2534  036E  0858               	movf	_lowerLimit+2,w
  2535  036F  00F5               	movwf	___tmul@multiplicand+2
  2536  0370  24F1               	fcall	___tmul
  2537  0371  0870               	movf	?___tmul,w
  2538  0372  0021               	movlb	1	; select bank1
  2539  0373  00A3               	movwf	_b^(0+128)
  2540  0374  0871               	movf	?___tmul+1,w
  2541  0375  00A4               	movwf	(_b+1)^(0+128)
  2542  0376  0872               	movf	?___tmul+2,w
  2543  0377  00A5               	movwf	(_b+2)^(0+128)
  2544                           
  2545                           ;main.c: 142:             break;
  2546  0378  2B93               	goto	l1748
  2547  0379                     l273:	
  2548                           ;main.c: 146:             do { LATCbits.LATC0 = 1; } while(0);
  2549                           
  2550  0379  0022               	movlb	2	; select bank2
  2551  037A  140E               	bsf	14,0	;volatile
  2552  037B  2B93               	goto	l1748
  2553  037C                     l276:	
  2554                           ;main.c: 150:             do { LATBbits.LATB7 = 1; } while(0);
  2555                           
  2556  037C  0022               	movlb	2	; select bank2
  2557  037D  178D               	bsf	13,7	;volatile
  2558  037E  2B93               	goto	l1748
  2559  037F                     l1746:
  2560  037F  0020               	movlb	0	; select bank0
  2561  0380  0824               	movf	setState@newState,w
  2562  0381  00A0               	movwf	??_setState
  2563  0382  01A1               	clrf	??_setState+1
  2564                           
  2565                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2566                           ; Switch size 1, requested type "simple"
  2567                           ; Number of cases is 1, Range of values is 0 to 0
  2568                           ; switch strategies available:
  2569                           ; Name         Instructions Cycles
  2570                           ; simple_byte            4     3 (average)
  2571                           ; direct_byte            8     6 (fixed)
  2572                           ; jumptable            260     6 (fixed)
  2573                           ;	Chosen strategy is simple_byte
  2574  0383  0821               	movf	??_setState+1,w
  2575  0384  3A00               	xorlw	0	; case 0
  2576  0385  1903               	skipnz
  2577  0386  2B88               	goto	l2028
  2578  0387  2B93               	goto	l1748
  2579  0388                     l2028:
  2580                           
  2581                           ; Switch size 1, requested type "simple"
  2582                           ; Number of cases is 3, Range of values is 1 to 3
  2583                           ; switch strategies available:
  2584                           ; Name         Instructions Cycles
  2585                           ; simple_byte           10     6 (average)
  2586                           ; direct_byte           15     9 (fixed)
  2587                           ; jumptable            263     9 (fixed)
  2588                           ;	Chosen strategy is simple_byte
  2589  0388  0820               	movf	??_setState,w
  2590  0389  3A01               	xorlw	1	; case 1
  2591  038A  1903               	skipnz
  2592  038B  2ADF               	goto	l1730
  2593  038C  3A03               	xorlw	3	; case 2
  2594  038D  1903               	skipnz
  2595  038E  2B79               	goto	l273
  2596  038F  3A01               	xorlw	1	; case 3
  2597  0390  1903               	skipnz
  2598  0391  2B7C               	goto	l276
  2599  0392  2B93               	goto	l1748
  2600  0393                     l1748:
  2601                           
  2602                           ;main.c: 154:     msTick = 0;
  2603  0393  0020               	movlb	0	; select bank0
  2604  0394  01E0               	clrf	_msTick	;volatile
  2605  0395  01E1               	clrf	_msTick+1	;volatile
  2606                           
  2607                           ;main.c: 156:     currentState = newState;
  2608  0396  0824               	movf	setState@newState,w
  2609  0397  00A0               	movwf	??_setState
  2610  0398  0820               	movf	??_setState,w
  2611  0399  00EB               	movwf	_currentState
  2612  039A  0008               	return
  2613  039B                     __end_of_setState:
  2614                           
  2615                           	psect	text2
  2616  04F1                     __ptext2:	
  2617 ;; *************** function ___tmul *****************
  2618 ;; Defined at:
  2619 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul24.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  multiplier      3    0[COMMON] unsigned um
  2622 ;;  multiplicand    3    3[COMMON] unsigned um
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  product         3    6[COMMON] unsigned um
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  3    0[COMMON] unsigned um
  2627 ;; Registers used:
  2628 ;;		wreg, status,2, status,0
  2629 ;; Tracked objects:
  2630 ;;		On entry : 1F/0
  2631 ;;		On exit  : 1F/0
  2632 ;;		Unchanged: 1F/0
  2633 ;; Data sizes:     COMMON   BANK0   BANK1
  2634 ;;      Params:         6       0       0
  2635 ;;      Locals:         3       0       0
  2636 ;;      Temps:          0       0       0
  2637 ;;      Totals:         9       0       0
  2638 ;;Total ram usage:        9 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    4
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_setState
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           
  2649                           ;psect for function ___tmul
  2650  04F1                     ___tmul:
  2651                           
  2652                           ;incstack = 0
  2653                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  2654  04F1  3000               	movlw	0
  2655  04F2  00F6               	movwf	___tmul@product
  2656  04F3  3000               	movlw	0
  2657  04F4  00F7               	movwf	___tmul@product+1
  2658  04F5  3000               	movlw	0
  2659  04F6  00F8               	movwf	___tmul@product+2
  2660  04F7                     l1618:
  2661  04F7  1C70               	btfss	___tmul@multiplier,0
  2662  04F8  2CFF               	goto	l1622
  2663  04F9  0873               	movf	___tmul@multiplicand,w
  2664  04FA  07F6               	addwf	___tmul@product,f
  2665  04FB  0874               	movf	___tmul@multiplicand+1,w
  2666  04FC  3DF7               	addwfc	___tmul@product+1,f
  2667  04FD  0875               	movf	___tmul@multiplicand+2,w
  2668  04FE  3DF8               	addwfc	___tmul@product+2,f
  2669  04FF                     l1622:
  2670  04FF  3001               	movlw	1
  2671  0500                     u895:
  2672  0500  35F3               	lslf	___tmul@multiplicand,f
  2673  0501  0DF4               	rlf	___tmul@multiplicand+1,f
  2674  0502  0DF5               	rlf	___tmul@multiplicand+2,f
  2675  0503  0B89               	decfsz	9,f
  2676  0504  2D00               	goto	u895
  2677  0505  3001               	movlw	1
  2678  0506                     u905:
  2679  0506  36F2               	lsrf	___tmul@multiplier+2,f
  2680  0507  0CF1               	rrf	___tmul@multiplier+1,f
  2681  0508  0CF0               	rrf	___tmul@multiplier,f
  2682  0509  0B89               	decfsz	9,f
  2683  050A  2D06               	goto	u905
  2684  050B  0872               	movf	___tmul@multiplier+2,w
  2685  050C  0471               	iorwf	___tmul@multiplier+1,w
  2686  050D  0470               	iorwf	___tmul@multiplier,w
  2687  050E  1D03               	skipz
  2688  050F  2CF7               	goto	l1618
  2689  0510  0876               	movf	___tmul@product,w
  2690  0511  00F0               	movwf	?___tmul
  2691  0512  0877               	movf	___tmul@product+1,w
  2692  0513  00F1               	movwf	?___tmul+1
  2693  0514  0878               	movf	___tmul@product+2,w
  2694  0515  00F2               	movwf	?___tmul+2
  2695  0516  0008               	return
  2696  0517                     __end_of___tmul:
  2697                           
  2698                           	psect	text3
  2699  0470                     __ptext3:	
  2700 ;; *************** function ___lldiv *****************
  2701 ;; Defined at:
  2702 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\__lldiv.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;  divisor         4    0[COMMON] unsigned long 
  2705 ;;  dividend        4    4[COMMON] unsigned long 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;  quotient        4    9[COMMON] unsigned long 
  2708 ;;  counter         1   13[COMMON] unsigned char 
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  4    0[COMMON] unsigned long 
  2711 ;; Registers used:
  2712 ;;		wreg, status,2, status,0
  2713 ;; Tracked objects:
  2714 ;;		On entry : 1F/0
  2715 ;;		On exit  : 1F/0
  2716 ;;		Unchanged: 1F/0
  2717 ;; Data sizes:     COMMON   BANK0   BANK1
  2718 ;;      Params:         8       0       0
  2719 ;;      Locals:         5       0       0
  2720 ;;      Temps:          1       0       0
  2721 ;;      Totals:        14       0       0
  2722 ;;Total ram usage:       14 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    4
  2725 ;; This function calls:
  2726 ;;		Nothing
  2727 ;; This function is called by:
  2728 ;;		_setState
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           
  2733                           ;psect for function ___lldiv
  2734  0470                     ___lldiv:
  2735                           
  2736                           ;incstack = 0
  2737                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2738  0470  3000               	movlw	0
  2739  0471  00FC               	movwf	___lldiv@quotient+3
  2740  0472  3000               	movlw	0
  2741  0473  00FB               	movwf	___lldiv@quotient+2
  2742  0474  3000               	movlw	0
  2743  0475  00FA               	movwf	___lldiv@quotient+1
  2744  0476  3000               	movlw	0
  2745  0477  00F9               	movwf	___lldiv@quotient
  2746  0478  0873               	movf	___lldiv@divisor+3,w
  2747  0479  0472               	iorwf	___lldiv@divisor+2,w
  2748  047A  0471               	iorwf	___lldiv@divisor+1,w
  2749  047B  0470               	iorwf	___lldiv@divisor,w
  2750  047C  1903               	skipnz
  2751  047D  2CB9               	goto	l1650
  2752  047E  01FD               	clrf	___lldiv@counter
  2753  047F  0AFD               	incf	___lldiv@counter,f
  2754  0480                     l1636:
  2755  0480  1BF3               	btfsc	___lldiv@divisor+3,7
  2756  0481  2C8E               	goto	l1638
  2757  0482  3001               	movlw	1
  2758  0483                     u935:
  2759  0483  35F0               	lslf	___lldiv@divisor,f
  2760  0484  0DF1               	rlf	___lldiv@divisor+1,f
  2761  0485  0DF2               	rlf	___lldiv@divisor+2,f
  2762  0486  0DF3               	rlf	___lldiv@divisor+3,f
  2763  0487  0B89               	decfsz	9,f
  2764  0488  2C83               	goto	u935
  2765  0489  3001               	movlw	1
  2766  048A  00F8               	movwf	??___lldiv
  2767  048B  0878               	movf	??___lldiv,w
  2768  048C  07FD               	addwf	___lldiv@counter,f
  2769  048D  2C80               	goto	l1636
  2770  048E                     l1638:
  2771  048E  3001               	movlw	1
  2772  048F                     u955:
  2773  048F  35F9               	lslf	___lldiv@quotient,f
  2774  0490  0DFA               	rlf	___lldiv@quotient+1,f
  2775  0491  0DFB               	rlf	___lldiv@quotient+2,f
  2776  0492  0DFC               	rlf	___lldiv@quotient+3,f
  2777  0493  0B89               	decfsz	9,f
  2778  0494  2C8F               	goto	u955
  2779  0495  0873               	movf	___lldiv@divisor+3,w
  2780  0496  0277               	subwf	___lldiv@dividend+3,w
  2781  0497  1D03               	skipz
  2782  0498  2CA3               	goto	u965
  2783  0499  0872               	movf	___lldiv@divisor+2,w
  2784  049A  0276               	subwf	___lldiv@dividend+2,w
  2785  049B  1D03               	skipz
  2786  049C  2CA3               	goto	u965
  2787  049D  0871               	movf	___lldiv@divisor+1,w
  2788  049E  0275               	subwf	___lldiv@dividend+1,w
  2789  049F  1D03               	skipz
  2790  04A0  2CA3               	goto	u965
  2791  04A1  0870               	movf	___lldiv@divisor,w
  2792  04A2  0274               	subwf	___lldiv@dividend,w
  2793  04A3                     u965:
  2794  04A3  1C03               	skipc
  2795  04A4  2CAE               	goto	l1646
  2796  04A5  0870               	movf	___lldiv@divisor,w
  2797  04A6  02F4               	subwf	___lldiv@dividend,f
  2798  04A7  0871               	movf	___lldiv@divisor+1,w
  2799  04A8  3BF5               	subwfb	___lldiv@dividend+1,f
  2800  04A9  0872               	movf	___lldiv@divisor+2,w
  2801  04AA  3BF6               	subwfb	___lldiv@dividend+2,f
  2802  04AB  0873               	movf	___lldiv@divisor+3,w
  2803  04AC  3BF7               	subwfb	___lldiv@dividend+3,f
  2804  04AD  1479               	bsf	___lldiv@quotient,0
  2805  04AE                     l1646:
  2806  04AE  3001               	movlw	1
  2807  04AF                     u975:
  2808  04AF  36F3               	lsrf	___lldiv@divisor+3,f
  2809  04B0  0CF2               	rrf	___lldiv@divisor+2,f
  2810  04B1  0CF1               	rrf	___lldiv@divisor+1,f
  2811  04B2  0CF0               	rrf	___lldiv@divisor,f
  2812  04B3  0B89               	decfsz	9,f
  2813  04B4  2CAF               	goto	u975
  2814  04B5  3001               	movlw	1
  2815  04B6  02FD               	subwf	___lldiv@counter,f
  2816  04B7  1D03               	btfss	3,2
  2817  04B8  2C8E               	goto	l1638
  2818  04B9                     l1650:
  2819  04B9  087C               	movf	___lldiv@quotient+3,w
  2820  04BA  00F3               	movwf	?___lldiv+3
  2821  04BB  087B               	movf	___lldiv@quotient+2,w
  2822  04BC  00F2               	movwf	?___lldiv+2
  2823  04BD  087A               	movf	___lldiv@quotient+1,w
  2824  04BE  00F1               	movwf	?___lldiv+1
  2825  04BF  0879               	movf	___lldiv@quotient,w
  2826  04C0  00F0               	movwf	?___lldiv
  2827  04C1  0008               	return
  2828  04C2                     __end_of___lldiv:
  2829                           
  2830                           	psect	text4
  2831  0533                     __ptext4:	
  2832 ;; *************** function _FLASH_ReadWord *****************
  2833 ;; Defined at:
  2834 ;;		line 58 in file "mcc_generated_files/memory.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  flashAddr       2    0[COMMON] unsigned short 
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  2    0[COMMON] unsigned short 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0
  2843 ;; Tracked objects:
  2844 ;;		On entry : 1F/0
  2845 ;;		On exit  : 1F/3
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1
  2848 ;;      Params:         2       0       0
  2849 ;;      Locals:         1       0       0
  2850 ;;      Temps:          0       0       0
  2851 ;;      Totals:         3       0       0
  2852 ;;Total ram usage:        3 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    4
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_setState
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           
  2863                           ;psect for function _FLASH_ReadWord
  2864  0533                     _FLASH_ReadWord:
  2865                           
  2866                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  2867                           
  2868                           ;incstack = 0
  2869                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  2870  0533  3000               	movlw	0
  2871  0534  1B8B               	btfsc	11,7	;volatile
  2872  0535  3001               	movlw	1
  2873  0536  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  2874                           
  2875                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  2876  0537  138B               	bcf	11,7	;volatile
  2877                           
  2878                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  2879  0538  0870               	movf	FLASH_ReadWord@flashAddr,w
  2880  0539  0023               	movlb	3	; select bank3
  2881  053A  0091               	movwf	17	;volatile
  2882                           
  2883                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  2884  053B  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  2885  053C  0092               	movwf	18	;volatile
  2886                           
  2887                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  2888  053D  1315               	bcf	21,6	;volatile
  2889                           
  2890                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  2891  053E  1415               	bsf	21,0	;volatile
  2892                           
  2893                           ;mcc_generated_files/memory.c: 68:     __nop();
  2894  053F  0000               	nop
  2895                           
  2896                           ;mcc_generated_files/memory.c: 69:     __nop();
  2897  0540  0000               	nop
  2898                           
  2899                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  2900  0541  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  2901  0542  1C03               	skipc
  2902  0543  138B               	bcf	11,7	;volatile
  2903  0544  1803               	skipnc
  2904  0545  178B               	bsf	11,7	;volatile
  2905                           
  2906                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  2907  0546  0023               	movlb	3	; select bank3
  2908  0547  0814               	movf	20,w	;volatile
  2909  0548  00F1               	movwf	?_FLASH_ReadWord+1
  2910  0549  0813               	movf	19,w	;volatile
  2911  054A  00F0               	movwf	?_FLASH_ReadWord
  2912  054B  0008               	return
  2913  054C                     __end_of_FLASH_ReadWord:
  2914                           
  2915                           	psect	text5
  2916  0194                     __ptext5:	
  2917 ;; *************** function _setLedsForPositioning *****************
  2918 ;; Defined at:
  2919 ;;		line 308 in file "main.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;  adcValue        4    0[COMMON] long 
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0
  2928 ;; Tracked objects:
  2929 ;;		On entry : 1F/0
  2930 ;;		On exit  : 1F/2
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMMON   BANK0   BANK1
  2933 ;;      Params:         4       0       0
  2934 ;;      Locals:         0       0       0
  2935 ;;      Temps:          0       0       0
  2936 ;;      Totals:         4       0       0
  2937 ;;Total ram usage:        4 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    4
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_main
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function _setLedsForPositioning
  2949  0194                     _setLedsForPositioning:
  2950                           
  2951                           ;incstack = 0
  2952                           ; Regs used in _setLedsForPositioning: [wreg+status,2+status,0]
  2953                           ;main.c: 308: void setLedsForPositioning(int32_t adcValue);main.c: 309: {;main.c: 310:  
      +                             do { LATCbits.LATC0 = 0; } while(0);
  2954  0194  0022               	movlb	2	; select bank2
  2955  0195  100E               	bcf	14,0	;volatile
  2956                           
  2957                           ;main.c: 311:     do { LATCbits.LATC1 = 0; } while(0);
  2958  0196  108E               	bcf	14,1	;volatile
  2959                           
  2960                           ;main.c: 312:     do { LATCbits.LATC2 = 0; } while(0);
  2961  0197  110E               	bcf	14,2	;volatile
  2962                           
  2963                           ;main.c: 313:     do { LATCbits.LATC3 = 0; } while(0);
  2964  0198  118E               	bcf	14,3	;volatile
  2965                           
  2966                           ;main.c: 314:     do { LATCbits.LATC4 = 0; } while(0);
  2967  0199  120E               	bcf	14,4	;volatile
  2968                           
  2969                           ;main.c: 315:     do { LATCbits.LATC5 = 1; } while(0);
  2970  019A  168E               	bsf	14,5	;volatile
  2971                           
  2972                           ;main.c: 316:     do { LATCbits.LATC6 = 0; } while(0);
  2973  019B  130E               	bcf	14,6	;volatile
  2974                           
  2975                           ;main.c: 317:     do { LATCbits.LATC7 = 0; } while(0);
  2976  019C  138E               	bcf	14,7	;volatile
  2977                           
  2978                           ;main.c: 318:     do { LATBbits.LATB5 = 0; } while(0);
  2979  019D  128D               	bcf	13,5	;volatile
  2980                           
  2981                           ;main.c: 319:     do { LATBbits.LATB6 = 0; } while(0);
  2982  019E  130D               	bcf	13,6	;volatile
  2983                           
  2984                           ;main.c: 320:     do { LATBbits.LATB7 = 0; } while(0);
  2985  019F  138D               	bcf	13,7	;volatile
  2986                           
  2987                           ;main.c: 324:     if(adcValue < 54)
  2988  01A0  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  2989  01A1  29AF               	goto	l363
  2990  01A2  0873               	movf	setLedsForPositioning@adcValue+3,w
  2991  01A3  1D03               	btfss	3,2
  2992  01A4  29B1               	goto	l1758
  2993  01A5  0872               	movf	setLedsForPositioning@adcValue+2,w
  2994  01A6  1D03               	btfss	3,2
  2995  01A7  29B1               	goto	l1758
  2996  01A8  0871               	movf	setLedsForPositioning@adcValue+1,w
  2997  01A9  1D03               	btfss	3,2
  2998  01AA  29B1               	goto	l1758
  2999  01AB  3036               	movlw	54
  3000  01AC  0270               	subwf	setLedsForPositioning@adcValue,w
  3001  01AD  1803               	btfsc	3,0
  3002  01AE  29B1               	goto	l1758
  3003  01AF                     l363:	
  3004                           ;main.c: 325:     {;main.c: 326:         do { LATCbits.LATC0 = 1; } while(0);
  3005                           
  3006  01AF  140E               	bsf	14,0	;volatile
  3007  01B0  0008               	return
  3008  01B1                     l1758:
  3009  01B1  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3010  01B2  29C0               	goto	l367
  3011  01B3  0873               	movf	setLedsForPositioning@adcValue+3,w
  3012  01B4  1D03               	btfss	3,2
  3013  01B5  29C3               	goto	l1760
  3014  01B6  0872               	movf	setLedsForPositioning@adcValue+2,w
  3015  01B7  1D03               	btfss	3,2
  3016  01B8  29C3               	goto	l1760
  3017  01B9  0871               	movf	setLedsForPositioning@adcValue+1,w
  3018  01BA  1D03               	btfss	3,2
  3019  01BB  29C3               	goto	l1760
  3020  01BC  306C               	movlw	108
  3021  01BD  0270               	subwf	setLedsForPositioning@adcValue,w
  3022  01BE  1803               	btfsc	3,0
  3023  01BF  29C3               	goto	l1760
  3024  01C0                     l367:	
  3025                           ;main.c: 329:     {;main.c: 330:         do { LATCbits.LATC0 = 1; } while(0);
  3026                           
  3027  01C0  140E               	bsf	14,0	;volatile
  3028                           
  3029                           ;main.c: 331:         do { LATCbits.LATC1 = 1; } while(0);
  3030  01C1  148E               	bsf	14,1	;volatile
  3031  01C2  0008               	return
  3032  01C3                     l1760:
  3033  01C3  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3034  01C4  29D2               	goto	l373
  3035  01C5  0873               	movf	setLedsForPositioning@adcValue+3,w
  3036  01C6  1D03               	btfss	3,2
  3037  01C7  29D4               	goto	l1762
  3038  01C8  0872               	movf	setLedsForPositioning@adcValue+2,w
  3039  01C9  1D03               	btfss	3,2
  3040  01CA  29D4               	goto	l1762
  3041  01CB  0871               	movf	setLedsForPositioning@adcValue+1,w
  3042  01CC  1D03               	btfss	3,2
  3043  01CD  29D4               	goto	l1762
  3044  01CE  30A2               	movlw	162
  3045  01CF  0270               	subwf	setLedsForPositioning@adcValue,w
  3046  01D0  1803               	btfsc	3,0
  3047  01D1  29D4               	goto	l1762
  3048  01D2                     l373:	
  3049                           ;main.c: 334:     {;main.c: 335:         do { LATCbits.LATC1 = 1; } while(0);
  3050                           
  3051  01D2  148E               	bsf	14,1	;volatile
  3052  01D3  0008               	return
  3053  01D4                     l1762:
  3054  01D4  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3055  01D5  29E3               	goto	l377
  3056  01D6  0873               	movf	setLedsForPositioning@adcValue+3,w
  3057  01D7  1D03               	btfss	3,2
  3058  01D8  29E6               	goto	l1764
  3059  01D9  0872               	movf	setLedsForPositioning@adcValue+2,w
  3060  01DA  1D03               	btfss	3,2
  3061  01DB  29E6               	goto	l1764
  3062  01DC  0871               	movf	setLedsForPositioning@adcValue+1,w
  3063  01DD  1D03               	btfss	3,2
  3064  01DE  29E6               	goto	l1764
  3065  01DF  30D7               	movlw	215
  3066  01E0  0270               	subwf	setLedsForPositioning@adcValue,w
  3067  01E1  1803               	btfsc	3,0
  3068  01E2  29E6               	goto	l1764
  3069  01E3                     l377:	
  3070                           ;main.c: 338:     {;main.c: 339:         do { LATCbits.LATC1 = 1; } while(0);
  3071                           
  3072  01E3  148E               	bsf	14,1	;volatile
  3073                           
  3074                           ;main.c: 340:         do { LATCbits.LATC2 = 1; } while(0);
  3075  01E4  150E               	bsf	14,2	;volatile
  3076  01E5  0008               	return
  3077  01E6                     l1764:
  3078  01E6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3079  01E7  29F4               	goto	l383
  3080  01E8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3081  01E9  1D03               	btfss	3,2
  3082  01EA  29F6               	goto	l1766
  3083  01EB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3084  01EC  1D03               	btfss	3,2
  3085  01ED  29F6               	goto	l1766
  3086  01EE  300D               	movlw	13
  3087  01EF  0270               	subwf	setLedsForPositioning@adcValue,w
  3088  01F0  3001               	movlw	1
  3089  01F1  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3090  01F2  1803               	btfsc	3,0
  3091  01F3  29F6               	goto	l1766
  3092  01F4                     l383:	
  3093                           ;main.c: 343:     {;main.c: 344:         do { LATCbits.LATC2 = 1; } while(0);
  3094                           
  3095  01F4  150E               	bsf	14,2	;volatile
  3096  01F5  0008               	return
  3097  01F6                     l1766:
  3098  01F6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3099  01F7  2A04               	goto	l387
  3100  01F8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3101  01F9  1D03               	btfss	3,2
  3102  01FA  2A07               	goto	l1768
  3103  01FB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3104  01FC  1D03               	btfss	3,2
  3105  01FD  2A07               	goto	l1768
  3106  01FE  3043               	movlw	67
  3107  01FF  0270               	subwf	setLedsForPositioning@adcValue,w
  3108  0200  3001               	movlw	1
  3109  0201  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3110  0202  1803               	btfsc	3,0
  3111  0203  2A07               	goto	l1768
  3112  0204                     l387:	
  3113                           ;main.c: 347:     {;main.c: 348:         do { LATCbits.LATC2 = 1; } while(0);
  3114                           
  3115  0204  150E               	bsf	14,2	;volatile
  3116                           
  3117                           ;main.c: 349:         do { LATCbits.LATC3 = 1; } while(0);
  3118  0205  158E               	bsf	14,3	;volatile
  3119  0206  0008               	return
  3120  0207                     l1768:
  3121  0207  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3122  0208  2A15               	goto	l393
  3123  0209  0873               	movf	setLedsForPositioning@adcValue+3,w
  3124  020A  1D03               	btfss	3,2
  3125  020B  2A17               	goto	l1770
  3126  020C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3127  020D  1D03               	btfss	3,2
  3128  020E  2A17               	goto	l1770
  3129  020F  3079               	movlw	121
  3130  0210  0270               	subwf	setLedsForPositioning@adcValue,w
  3131  0211  3001               	movlw	1
  3132  0212  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3133  0213  1803               	btfsc	3,0
  3134  0214  2A17               	goto	l1770
  3135  0215                     l393:	
  3136                           ;main.c: 352:     {;main.c: 353:         do { LATCbits.LATC3 = 1; } while(0);
  3137                           
  3138  0215  158E               	bsf	14,3	;volatile
  3139  0216  0008               	return
  3140  0217                     l1770:
  3141  0217  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3142  0218  2A25               	goto	l397
  3143  0219  0873               	movf	setLedsForPositioning@adcValue+3,w
  3144  021A  1D03               	btfss	3,2
  3145  021B  2A28               	goto	l1772
  3146  021C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3147  021D  1D03               	btfss	3,2
  3148  021E  2A28               	goto	l1772
  3149  021F  30AF               	movlw	175
  3150  0220  0270               	subwf	setLedsForPositioning@adcValue,w
  3151  0221  3001               	movlw	1
  3152  0222  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3153  0223  1803               	btfsc	3,0
  3154  0224  2A28               	goto	l1772
  3155  0225                     l397:	
  3156                           ;main.c: 356:     {;main.c: 357:         do { LATCbits.LATC3 = 1; } while(0);
  3157                           
  3158  0225  158E               	bsf	14,3	;volatile
  3159                           
  3160                           ;main.c: 358:         do { LATCbits.LATC4 = 1; } while(0);
  3161  0226  160E               	bsf	14,4	;volatile
  3162  0227  0008               	return
  3163  0228                     l1772:
  3164  0228  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3165  0229  2A36               	goto	l403
  3166  022A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3167  022B  1D03               	btfss	3,2
  3168  022C  2A38               	goto	l1774
  3169  022D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3170  022E  1D03               	btfss	3,2
  3171  022F  2A38               	goto	l1774
  3172  0230  30E5               	movlw	229
  3173  0231  0270               	subwf	setLedsForPositioning@adcValue,w
  3174  0232  3001               	movlw	1
  3175  0233  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3176  0234  1803               	btfsc	3,0
  3177  0235  2A38               	goto	l1774
  3178  0236                     l403:	
  3179                           ;main.c: 361:     {;main.c: 362:         do { LATCbits.LATC4 = 1; } while(0);
  3180                           
  3181  0236  160E               	bsf	14,4	;volatile
  3182  0237  0008               	return
  3183  0238                     l1774:
  3184  0238  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3185  0239  0008               	return
  3186  023A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3187  023B  1D03               	btfss	3,2
  3188  023C  2A46               	goto	l1778
  3189  023D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3190  023E  1D03               	btfss	3,2
  3191  023F  2A46               	goto	l1778
  3192  0240  301A               	movlw	26
  3193  0241  0270               	subwf	setLedsForPositioning@adcValue,w
  3194  0242  3002               	movlw	2
  3195  0243  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3196  0244  1C03               	btfss	3,0
  3197  0245  0008               	return
  3198  0246                     l1778:
  3199  0246  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3200  0247  2A54               	goto	l409
  3201  0248  0873               	movf	setLedsForPositioning@adcValue+3,w
  3202  0249  1D03               	btfss	3,2
  3203  024A  2A56               	goto	l1780
  3204  024B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3205  024C  1D03               	btfss	3,2
  3206  024D  2A56               	goto	l1780
  3207  024E  3050               	movlw	80
  3208  024F  0270               	subwf	setLedsForPositioning@adcValue,w
  3209  0250  3002               	movlw	2
  3210  0251  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3211  0252  1803               	btfsc	3,0
  3212  0253  2A56               	goto	l1780
  3213  0254                     l409:	
  3214                           ;main.c: 369:     {;main.c: 370:         do { LATCbits.LATC6 = 1; } while(0);
  3215                           
  3216  0254  170E               	bsf	14,6	;volatile
  3217  0255  0008               	return
  3218  0256                     l1780:
  3219  0256  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3220  0257  2A64               	goto	l413
  3221  0258  0873               	movf	setLedsForPositioning@adcValue+3,w
  3222  0259  1D03               	btfss	3,2
  3223  025A  2A67               	goto	l1782
  3224  025B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3225  025C  1D03               	btfss	3,2
  3226  025D  2A67               	goto	l1782
  3227  025E  3086               	movlw	134
  3228  025F  0270               	subwf	setLedsForPositioning@adcValue,w
  3229  0260  3002               	movlw	2
  3230  0261  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3231  0262  1803               	btfsc	3,0
  3232  0263  2A67               	goto	l1782
  3233  0264                     l413:	
  3234                           ;main.c: 373:     {;main.c: 374:         do { LATCbits.LATC6 = 1; } while(0);
  3235                           
  3236  0264  170E               	bsf	14,6	;volatile
  3237                           
  3238                           ;main.c: 375:         do { LATCbits.LATC7 = 1; } while(0);
  3239  0265  178E               	bsf	14,7	;volatile
  3240  0266  0008               	return
  3241  0267                     l1782:
  3242  0267  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3243  0268  2A75               	goto	l419
  3244  0269  0873               	movf	setLedsForPositioning@adcValue+3,w
  3245  026A  1D03               	btfss	3,2
  3246  026B  2A77               	goto	l1784
  3247  026C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3248  026D  1D03               	btfss	3,2
  3249  026E  2A77               	goto	l1784
  3250  026F  30BC               	movlw	188
  3251  0270  0270               	subwf	setLedsForPositioning@adcValue,w
  3252  0271  3002               	movlw	2
  3253  0272  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3254  0273  1803               	btfsc	3,0
  3255  0274  2A77               	goto	l1784
  3256  0275                     l419:	
  3257                           ;main.c: 378:     {;main.c: 379:         do { LATCbits.LATC7 = 1; } while(0);
  3258                           
  3259  0275  178E               	bsf	14,7	;volatile
  3260  0276  0008               	return
  3261  0277                     l1784:
  3262  0277  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3263  0278  2A85               	goto	l423
  3264  0279  0873               	movf	setLedsForPositioning@adcValue+3,w
  3265  027A  1D03               	btfss	3,2
  3266  027B  2A88               	goto	l1786
  3267  027C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3268  027D  1D03               	btfss	3,2
  3269  027E  2A88               	goto	l1786
  3270  027F  30F2               	movlw	242
  3271  0280  0270               	subwf	setLedsForPositioning@adcValue,w
  3272  0281  3002               	movlw	2
  3273  0282  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3274  0283  1803               	btfsc	3,0
  3275  0284  2A88               	goto	l1786
  3276  0285                     l423:	
  3277                           ;main.c: 382:     {;main.c: 383:         do { LATCbits.LATC7 = 1; } while(0);
  3278                           
  3279  0285  178E               	bsf	14,7	;volatile
  3280                           
  3281                           ;main.c: 384:         do { LATBbits.LATB5 = 1; } while(0);
  3282  0286  168D               	bsf	13,5	;volatile
  3283  0287  0008               	return
  3284  0288                     l1786:
  3285  0288  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3286  0289  2A96               	goto	l429
  3287  028A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3288  028B  1D03               	btfss	3,2
  3289  028C  2A98               	goto	l1788
  3290  028D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3291  028E  1D03               	btfss	3,2
  3292  028F  2A98               	goto	l1788
  3293  0290  3028               	movlw	40
  3294  0291  0270               	subwf	setLedsForPositioning@adcValue,w
  3295  0292  3003               	movlw	3
  3296  0293  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3297  0294  1803               	btfsc	3,0
  3298  0295  2A98               	goto	l1788
  3299  0296                     l429:	
  3300                           ;main.c: 387:     {;main.c: 388:         do { LATBbits.LATB5 = 1; } while(0);
  3301                           
  3302  0296  168D               	bsf	13,5	;volatile
  3303  0297  0008               	return
  3304  0298                     l1788:
  3305  0298  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3306  0299  2AA6               	goto	l433
  3307  029A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3308  029B  1D03               	btfss	3,2
  3309  029C  2AA9               	goto	l1790
  3310  029D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3311  029E  1D03               	btfss	3,2
  3312  029F  2AA9               	goto	l1790
  3313  02A0  305D               	movlw	93
  3314  02A1  0270               	subwf	setLedsForPositioning@adcValue,w
  3315  02A2  3003               	movlw	3
  3316  02A3  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3317  02A4  1803               	btfsc	3,0
  3318  02A5  2AA9               	goto	l1790
  3319  02A6                     l433:	
  3320                           ;main.c: 391:     {;main.c: 392:         do { LATBbits.LATB5 = 1; } while(0);
  3321                           
  3322  02A6  168D               	bsf	13,5	;volatile
  3323                           
  3324                           ;main.c: 393:         do { LATBbits.LATB6 = 1; } while(0);
  3325  02A7  170D               	bsf	13,6	;volatile
  3326  02A8  0008               	return
  3327  02A9                     l1790:
  3328  02A9  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3329  02AA  2AB7               	goto	l439
  3330  02AB  0873               	movf	setLedsForPositioning@adcValue+3,w
  3331  02AC  1D03               	btfss	3,2
  3332  02AD  2AB9               	goto	l1792
  3333  02AE  0872               	movf	setLedsForPositioning@adcValue+2,w
  3334  02AF  1D03               	btfss	3,2
  3335  02B0  2AB9               	goto	l1792
  3336  02B1  3093               	movlw	147
  3337  02B2  0270               	subwf	setLedsForPositioning@adcValue,w
  3338  02B3  3003               	movlw	3
  3339  02B4  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3340  02B5  1803               	btfsc	3,0
  3341  02B6  2AB9               	goto	l1792
  3342  02B7                     l439:	
  3343                           ;main.c: 396:     {;main.c: 397:         do { LATBbits.LATB6 = 1; } while(0);
  3344                           
  3345  02B7  170D               	bsf	13,6	;volatile
  3346  02B8  0008               	return
  3347  02B9                     l1792:
  3348  02B9  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3349  02BA  2AC7               	goto	l443
  3350  02BB  0873               	movf	setLedsForPositioning@adcValue+3,w
  3351  02BC  1D03               	btfss	3,2
  3352  02BD  2ACA               	goto	l448
  3353  02BE  0872               	movf	setLedsForPositioning@adcValue+2,w
  3354  02BF  1D03               	btfss	3,2
  3355  02C0  2ACA               	goto	l448
  3356  02C1  30C9               	movlw	201
  3357  02C2  0270               	subwf	setLedsForPositioning@adcValue,w
  3358  02C3  3003               	movlw	3
  3359  02C4  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3360  02C5  1803               	btfsc	3,0
  3361  02C6  2ACA               	goto	l448
  3362  02C7                     l443:	
  3363                           ;main.c: 400:     {;main.c: 401:         do { LATBbits.LATB6 = 1; } while(0);
  3364                           
  3365  02C7  170D               	bsf	13,6	;volatile
  3366                           
  3367                           ;main.c: 402:         do { LATBbits.LATB7 = 1; } while(0);
  3368  02C8  178D               	bsf	13,7	;volatile
  3369  02C9  0008               	return
  3370  02CA                     l448:	
  3371                           ;main.c: 405:     {;main.c: 406:         do { LATBbits.LATB7 = 1; } while(0);
  3372                           
  3373  02CA  178D               	bsf	13,7	;volatile
  3374  02CB  0008               	return
  3375  02CC                     __end_of_setLedsForPositioning:
  3376                           
  3377                           	psect	text6
  3378  04C2                     __ptext6:	
  3379 ;; *************** function ___lmul *****************
  3380 ;; Defined at:
  3381 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  multiplier      4    0[COMMON] unsigned long 
  3384 ;;  multiplicand    4    4[COMMON] unsigned long 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  product         4    8[COMMON] unsigned long 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  4    0[COMMON] unsigned long 
  3389 ;; Registers used:
  3390 ;;		wreg, status,2, status,0
  3391 ;; Tracked objects:
  3392 ;;		On entry : 1F/0
  3393 ;;		On exit  : 1F/0
  3394 ;;		Unchanged: 1F/0
  3395 ;; Data sizes:     COMMON   BANK0   BANK1
  3396 ;;      Params:         8       0       0
  3397 ;;      Locals:         4       0       0
  3398 ;;      Temps:          0       0       0
  3399 ;;      Totals:        12       0       0
  3400 ;;Total ram usage:       12 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    4
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_main
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           
  3411                           ;psect for function ___lmul
  3412  04C2                     ___lmul:
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3416  04C2  3000               	movlw	0
  3417  04C3  00FB               	movwf	___lmul@product+3
  3418  04C4  3000               	movlw	0
  3419  04C5  00FA               	movwf	___lmul@product+2
  3420  04C6  3000               	movlw	0
  3421  04C7  00F9               	movwf	___lmul@product+1
  3422  04C8  3000               	movlw	0
  3423  04C9  00F8               	movwf	___lmul@product
  3424  04CA                     l1796:
  3425  04CA  1C70               	btfss	___lmul@multiplier,0
  3426  04CB  2CD4               	goto	l1800
  3427  04CC  0874               	movf	___lmul@multiplicand,w
  3428  04CD  07F8               	addwf	___lmul@product,f
  3429  04CE  0875               	movf	___lmul@multiplicand+1,w
  3430  04CF  3DF9               	addwfc	___lmul@product+1,f
  3431  04D0  0876               	movf	___lmul@multiplicand+2,w
  3432  04D1  3DFA               	addwfc	___lmul@product+2,f
  3433  04D2  0877               	movf	___lmul@multiplicand+3,w
  3434  04D3  3DFB               	addwfc	___lmul@product+3,f
  3435  04D4                     l1800:
  3436  04D4  3001               	movlw	1
  3437  04D5                     u1265:
  3438  04D5  35F4               	lslf	___lmul@multiplicand,f
  3439  04D6  0DF5               	rlf	___lmul@multiplicand+1,f
  3440  04D7  0DF6               	rlf	___lmul@multiplicand+2,f
  3441  04D8  0DF7               	rlf	___lmul@multiplicand+3,f
  3442  04D9  0B89               	decfsz	9,f
  3443  04DA  2CD5               	goto	u1265
  3444  04DB  3001               	movlw	1
  3445  04DC                     u1275:
  3446  04DC  36F3               	lsrf	___lmul@multiplier+3,f
  3447  04DD  0CF2               	rrf	___lmul@multiplier+2,f
  3448  04DE  0CF1               	rrf	___lmul@multiplier+1,f
  3449  04DF  0CF0               	rrf	___lmul@multiplier,f
  3450  04E0  0B89               	decfsz	9,f
  3451  04E1  2CDC               	goto	u1275
  3452  04E2  0873               	movf	___lmul@multiplier+3,w
  3453  04E3  0472               	iorwf	___lmul@multiplier+2,w
  3454  04E4  0471               	iorwf	___lmul@multiplier+1,w
  3455  04E5  0470               	iorwf	___lmul@multiplier,w
  3456  04E6  1D03               	skipz
  3457  04E7  2CCA               	goto	l1796
  3458  04E8  087B               	movf	___lmul@product+3,w
  3459  04E9  00F3               	movwf	?___lmul+3
  3460  04EA  087A               	movf	___lmul@product+2,w
  3461  04EB  00F2               	movwf	?___lmul+2
  3462  04EC  0879               	movf	___lmul@product+1,w
  3463  04ED  00F1               	movwf	?___lmul+1
  3464  04EE  0878               	movf	___lmul@product,w
  3465  04EF  00F0               	movwf	?___lmul
  3466  04F0  0008               	return
  3467  04F1                     __end_of___lmul:
  3468                           
  3469                           	psect	text7
  3470  039B                     __ptext7:	
  3471 ;; *************** function ___aldiv *****************
  3472 ;; Defined at:
  3473 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  divisor         4    0[BANK0 ] long 
  3476 ;;  dividend        4    4[BANK0 ] long 
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  quotient        4   10[BANK0 ] long 
  3479 ;;  sign            1    9[BANK0 ] unsigned char 
  3480 ;;  counter         1    8[BANK0 ] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  4    0[BANK0 ] long 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 1F/0
  3487 ;;		On exit  : 1F/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1
  3490 ;;      Params:         0       8       0
  3491 ;;      Locals:         0       6       0
  3492 ;;      Temps:          1       0       0
  3493 ;;      Totals:         1      14       0
  3494 ;;Total ram usage:       15 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    4
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_main
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function ___aldiv
  3506  039B                     ___aldiv:
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3510  039B  01A9               	clrf	___aldiv@sign
  3511  039C  1FA3               	btfss	___aldiv@divisor+3,7
  3512  039D  2BAB               	goto	l583
  3513  039E  09A0               	comf	___aldiv@divisor,f
  3514  039F  09A1               	comf	___aldiv@divisor+1,f
  3515  03A0  09A2               	comf	___aldiv@divisor+2,f
  3516  03A1  09A3               	comf	___aldiv@divisor+3,f
  3517  03A2  0AA0               	incf	___aldiv@divisor,f
  3518  03A3  1903               	skipnz
  3519  03A4  0AA1               	incf	___aldiv@divisor+1,f
  3520  03A5  1903               	skipnz
  3521  03A6  0AA2               	incf	___aldiv@divisor+2,f
  3522  03A7  1903               	skipnz
  3523  03A8  0AA3               	incf	___aldiv@divisor+3,f
  3524  03A9  01A9               	clrf	___aldiv@sign
  3525  03AA  0AA9               	incf	___aldiv@sign,f
  3526  03AB                     l583:
  3527  03AB  1FA7               	btfss	___aldiv@dividend+3,7
  3528  03AC  2BBC               	goto	l1818
  3529  03AD  09A4               	comf	___aldiv@dividend,f
  3530  03AE  09A5               	comf	___aldiv@dividend+1,f
  3531  03AF  09A6               	comf	___aldiv@dividend+2,f
  3532  03B0  09A7               	comf	___aldiv@dividend+3,f
  3533  03B1  0AA4               	incf	___aldiv@dividend,f
  3534  03B2  1903               	skipnz
  3535  03B3  0AA5               	incf	___aldiv@dividend+1,f
  3536  03B4  1903               	skipnz
  3537  03B5  0AA6               	incf	___aldiv@dividend+2,f
  3538  03B6  1903               	skipnz
  3539  03B7  0AA7               	incf	___aldiv@dividend+3,f
  3540  03B8  3001               	movlw	1
  3541  03B9  00FC               	movwf	??___aldiv
  3542  03BA  087C               	movf	??___aldiv,w
  3543  03BB  06A9               	xorwf	___aldiv@sign,f
  3544  03BC                     l1818:
  3545  03BC  3000               	movlw	0
  3546  03BD  00AD               	movwf	___aldiv@quotient+3
  3547  03BE  3000               	movlw	0
  3548  03BF  00AC               	movwf	___aldiv@quotient+2
  3549  03C0  3000               	movlw	0
  3550  03C1  00AB               	movwf	___aldiv@quotient+1
  3551  03C2  3000               	movlw	0
  3552  03C3  00AA               	movwf	___aldiv@quotient
  3553  03C4  0823               	movf	___aldiv@divisor+3,w
  3554  03C5  0422               	iorwf	___aldiv@divisor+2,w
  3555  03C6  0421               	iorwf	___aldiv@divisor+1,w
  3556  03C7  0420               	iorwf	___aldiv@divisor,w
  3557  03C8  1903               	skipnz
  3558  03C9  2C05               	goto	l1840
  3559  03CA  01A8               	clrf	___aldiv@counter
  3560  03CB  0AA8               	incf	___aldiv@counter,f
  3561  03CC                     l1826:
  3562  03CC  1BA3               	btfsc	___aldiv@divisor+3,7
  3563  03CD  2BDA               	goto	l1828
  3564  03CE  3001               	movlw	1
  3565  03CF                     u1325:
  3566  03CF  35A0               	lslf	___aldiv@divisor,f
  3567  03D0  0DA1               	rlf	___aldiv@divisor+1,f
  3568  03D1  0DA2               	rlf	___aldiv@divisor+2,f
  3569  03D2  0DA3               	rlf	___aldiv@divisor+3,f
  3570  03D3  0B89               	decfsz	9,f
  3571  03D4  2BCF               	goto	u1325
  3572  03D5  3001               	movlw	1
  3573  03D6  00FC               	movwf	??___aldiv
  3574  03D7  087C               	movf	??___aldiv,w
  3575  03D8  07A8               	addwf	___aldiv@counter,f
  3576  03D9  2BCC               	goto	l1826
  3577  03DA                     l1828:
  3578  03DA  3001               	movlw	1
  3579  03DB                     u1345:
  3580  03DB  35AA               	lslf	___aldiv@quotient,f
  3581  03DC  0DAB               	rlf	___aldiv@quotient+1,f
  3582  03DD  0DAC               	rlf	___aldiv@quotient+2,f
  3583  03DE  0DAD               	rlf	___aldiv@quotient+3,f
  3584  03DF  0B89               	decfsz	9,f
  3585  03E0  2BDB               	goto	u1345
  3586  03E1  0823               	movf	___aldiv@divisor+3,w
  3587  03E2  0227               	subwf	___aldiv@dividend+3,w
  3588  03E3  1D03               	skipz
  3589  03E4  2BEF               	goto	u1355
  3590  03E5  0822               	movf	___aldiv@divisor+2,w
  3591  03E6  0226               	subwf	___aldiv@dividend+2,w
  3592  03E7  1D03               	skipz
  3593  03E8  2BEF               	goto	u1355
  3594  03E9  0821               	movf	___aldiv@divisor+1,w
  3595  03EA  0225               	subwf	___aldiv@dividend+1,w
  3596  03EB  1D03               	skipz
  3597  03EC  2BEF               	goto	u1355
  3598  03ED  0820               	movf	___aldiv@divisor,w
  3599  03EE  0224               	subwf	___aldiv@dividend,w
  3600  03EF                     u1355:
  3601  03EF  1C03               	skipc
  3602  03F0  2BFA               	goto	l1836
  3603  03F1  0820               	movf	___aldiv@divisor,w
  3604  03F2  02A4               	subwf	___aldiv@dividend,f
  3605  03F3  0821               	movf	___aldiv@divisor+1,w
  3606  03F4  3BA5               	subwfb	___aldiv@dividend+1,f
  3607  03F5  0822               	movf	___aldiv@divisor+2,w
  3608  03F6  3BA6               	subwfb	___aldiv@dividend+2,f
  3609  03F7  0823               	movf	___aldiv@divisor+3,w
  3610  03F8  3BA7               	subwfb	___aldiv@dividend+3,f
  3611  03F9  142A               	bsf	___aldiv@quotient,0
  3612  03FA                     l1836:
  3613  03FA  3001               	movlw	1
  3614  03FB                     u1365:
  3615  03FB  36A3               	lsrf	___aldiv@divisor+3,f
  3616  03FC  0CA2               	rrf	___aldiv@divisor+2,f
  3617  03FD  0CA1               	rrf	___aldiv@divisor+1,f
  3618  03FE  0CA0               	rrf	___aldiv@divisor,f
  3619  03FF  0B89               	decfsz	9,f
  3620  0400  2BFB               	goto	u1365
  3621  0401  3001               	movlw	1
  3622  0402  02A8               	subwf	___aldiv@counter,f
  3623  0403  1D03               	btfss	3,2
  3624  0404  2BDA               	goto	l1828
  3625  0405                     l1840:
  3626  0405  0829               	movf	___aldiv@sign,w
  3627  0406  1903               	btfsc	3,2
  3628  0407  2C13               	goto	l1844
  3629  0408  09AA               	comf	___aldiv@quotient,f
  3630  0409  09AB               	comf	___aldiv@quotient+1,f
  3631  040A  09AC               	comf	___aldiv@quotient+2,f
  3632  040B  09AD               	comf	___aldiv@quotient+3,f
  3633  040C  0AAA               	incf	___aldiv@quotient,f
  3634  040D  1903               	skipnz
  3635  040E  0AAB               	incf	___aldiv@quotient+1,f
  3636  040F  1903               	skipnz
  3637  0410  0AAC               	incf	___aldiv@quotient+2,f
  3638  0411  1903               	skipnz
  3639  0412  0AAD               	incf	___aldiv@quotient+3,f
  3640  0413                     l1844:
  3641  0413  082D               	movf	___aldiv@quotient+3,w
  3642  0414  00A3               	movwf	?___aldiv+3
  3643  0415  082C               	movf	___aldiv@quotient+2,w
  3644  0416  00A2               	movwf	?___aldiv+2
  3645  0417  082B               	movf	___aldiv@quotient+1,w
  3646  0418  00A1               	movwf	?___aldiv+1
  3647  0419  082A               	movf	___aldiv@quotient,w
  3648  041A  00A0               	movwf	?___aldiv
  3649  041B  0008               	return
  3650  041C                     __end_of___aldiv:
  3651                           
  3652                           	psect	text8
  3653  0614                     __ptext8:	
  3654 ;; *************** function _TMR2_StartTimer *****************
  3655 ;; Defined at:
  3656 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;		None
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      void 
  3663 ;; Registers used:
  3664 ;;		None
  3665 ;; Tracked objects:
  3666 ;;		On entry : 1F/1
  3667 ;;		On exit  : 1F/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1
  3670 ;;      Params:         0       0       0
  3671 ;;      Locals:         0       0       0
  3672 ;;      Temps:          0       0       0
  3673 ;;      Totals:         0       0       0
  3674 ;;Total ram usage:        0 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    4
  3677 ;; This function calls:
  3678 ;;		Nothing
  3679 ;; This function is called by:
  3680 ;;		_main
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           
  3685                           ;psect for function _TMR2_StartTimer
  3686  0614                     _TMR2_StartTimer:
  3687                           
  3688                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  3689                           
  3690                           ;incstack = 0
  3691                           ; Regs used in _TMR2_StartTimer: []
  3692  0614  0020               	movlb	0	; select bank0
  3693  0615  151C               	bsf	28,2	;volatile
  3694  0616  0008               	return
  3695  0617                     __end_of_TMR2_StartTimer:
  3696                           
  3697                           	psect	text9
  3698  05CD                     __ptext9:	
  3699 ;; *************** function _SYSTEM_Initialize *****************
  3700 ;; Defined at:
  3701 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;		None
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0, pclath, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : B1F/0
  3712 ;;		On exit  : 1F/1
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMMON   BANK0   BANK1
  3715 ;;      Params:         0       0       0
  3716 ;;      Locals:         0       0       0
  3717 ;;      Temps:          0       0       0
  3718 ;;      Totals:         0       0       0
  3719 ;;Total ram usage:        0 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    6
  3722 ;; This function calls:
  3723 ;;		_ADC_Initialize
  3724 ;;		_OSCILLATOR_Initialize
  3725 ;;		_PIN_MANAGER_Initialize
  3726 ;;		_PWM3_Initialize
  3727 ;;		_TMR0_Initialize
  3728 ;;		_TMR2_Initialize
  3729 ;;		_WDT_Initialize
  3730 ;; This function is called by:
  3731 ;;		_main
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _SYSTEM_Initialize
  3737  05CD                     _SYSTEM_Initialize:
  3738                           
  3739                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3740                           
  3741                           ;incstack = 0
  3742                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3743  05CD  254C               	fcall	_PIN_MANAGER_Initialize
  3744                           
  3745                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3746  05CE  2606               	fcall	_OSCILLATOR_Initialize
  3747                           
  3748                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3749  05CF  2610               	fcall	_WDT_Initialize
  3750                           
  3751                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  3752  05D0  25E5               	fcall	_ADC_Initialize
  3753                           
  3754                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  3755  05D1  25DD               	fcall	_PWM3_Initialize
  3756                           
  3757                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3758  05D2  25D5               	fcall	_TMR2_Initialize
  3759                           
  3760                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3761  05D3  2592               	fcall	_TMR0_Initialize
  3762  05D4  0008               	return
  3763  05D5                     __end_of_SYSTEM_Initialize:
  3764                           
  3765                           	psect	text10
  3766  0610                     __ptext10:	
  3767 ;; *************** function _WDT_Initialize *****************
  3768 ;; Defined at:
  3769 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;		None
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;		None
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg
  3778 ;; Tracked objects:
  3779 ;;		On entry : B1F/2
  3780 ;;		On exit  : B1F/1
  3781 ;;		Unchanged: B00/0
  3782 ;; Data sizes:     COMMON   BANK0   BANK1
  3783 ;;      Params:         0       0       0
  3784 ;;      Locals:         0       0       0
  3785 ;;      Temps:          0       0       0
  3786 ;;      Totals:         0       0       0
  3787 ;;Total ram usage:        0 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    4
  3790 ;; This function calls:
  3791 ;;		Nothing
  3792 ;; This function is called by:
  3793 ;;		_SYSTEM_Initialize
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _WDT_Initialize
  3799  0610                     _WDT_Initialize:
  3800                           
  3801                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _WDT_Initialize: [wreg]
  3805  0610  3016               	movlw	22
  3806  0611  0021               	movlb	1	; select bank1
  3807  0612  0097               	movwf	23	;volatile
  3808  0613  0008               	return
  3809  0614                     __end_of_WDT_Initialize:
  3810                           
  3811                           	psect	text11
  3812  05D5                     __ptext11:	
  3813 ;; *************** function _TMR2_Initialize *****************
  3814 ;; Defined at:
  3815 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;		None
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;		None
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  1    wreg      void 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2
  3824 ;; Tracked objects:
  3825 ;;		On entry : B1F/C
  3826 ;;		On exit  : B1F/0
  3827 ;;		Unchanged: B00/0
  3828 ;; Data sizes:     COMMON   BANK0   BANK1
  3829 ;;      Params:         0       0       0
  3830 ;;      Locals:         0       0       0
  3831 ;;      Temps:          0       0       0
  3832 ;;      Totals:         0       0       0
  3833 ;;Total ram usage:        0 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    4
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_SYSTEM_Initialize
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           
  3844                           ;psect for function _TMR2_Initialize
  3845  05D5                     _TMR2_Initialize:
  3846                           
  3847                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  3848                           
  3849                           ;incstack = 0
  3850                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  3851  05D5  30FF               	movlw	255
  3852  05D6  0020               	movlb	0	; select bank0
  3853  05D7  009B               	movwf	27	;volatile
  3854                           
  3855                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  3856  05D8  019A               	clrf	26	;volatile
  3857                           
  3858                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  3859  05D9  1091               	bcf	17,1	;volatile
  3860                           
  3861                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  3862  05DA  301C               	movlw	28
  3863  05DB  009C               	movwf	28	;volatile
  3864  05DC  0008               	return
  3865  05DD                     __end_of_TMR2_Initialize:
  3866                           
  3867                           	psect	text12
  3868  0592                     __ptext12:	
  3869 ;; *************** function _TMR0_Initialize *****************
  3870 ;; Defined at:
  3871 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;		None
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;		None
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1    wreg      void 
  3878 ;; Registers used:
  3879 ;;		wreg, status,2, status,0, pclath, cstack
  3880 ;; Tracked objects:
  3881 ;;		On entry : B1F/0
  3882 ;;		On exit  : 1F/1
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMMON   BANK0   BANK1
  3885 ;;      Params:         0       0       0
  3886 ;;      Locals:         0       0       0
  3887 ;;      Temps:          1       0       0
  3888 ;;      Totals:         1       0       0
  3889 ;;Total ram usage:        1 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    5
  3892 ;; This function calls:
  3893 ;;		_TMR0_SetInterruptHandler
  3894 ;; This function is called by:
  3895 ;;		_SYSTEM_Initialize
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _TMR0_Initialize
  3901  0592                     _TMR0_Initialize:
  3902                           
  3903                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  3904                           
  3905                           ;incstack = 0
  3906                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3907  0592  0021               	movlb	1	; select bank1
  3908  0593  0815               	movf	21,w	;volatile
  3909  0594  39C0               	andlw	192
  3910  0595  3811               	iorlw	17
  3911  0596  0095               	movwf	21	;volatile
  3912                           
  3913                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  3914  0597  3006               	movlw	6
  3915  0598  0020               	movlb	0	; select bank0
  3916  0599  0095               	movwf	21	;volatile
  3917                           
  3918                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  3919  059A  3006               	movlw	6
  3920  059B  00F2               	movwf	??_TMR0_Initialize
  3921  059C  0872               	movf	??_TMR0_Initialize,w
  3922  059D  0021               	movlb	1	; select bank1
  3923  059E  00A2               	movwf	_timer0ReloadVal^(0+128)	;volatile
  3924                           
  3925                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3926  059F  110B               	bcf	11,2	;volatile
  3927                           
  3928                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3929  05A0  168B               	bsf	11,5	;volatile
  3930                           
  3931                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3932  05A1  3017               	movlw	low _TMR0_DefaultInterruptHandler
  3933  05A2  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3934  05A3  3006               	movlw	high _TMR0_DefaultInterruptHandler
  3935  05A4  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3936  05A5  2600               	fcall	_TMR0_SetInterruptHandler
  3937  05A6  0008               	return
  3938  05A7                     __end_of_TMR0_Initialize:
  3939                           
  3940                           	psect	text13
  3941  0600                     __ptext13:	
  3942 ;; *************** function _TMR0_SetInterruptHandler *****************
  3943 ;; Defined at:
  3944 ;;		line 117 in file "mcc_generated_files/tmr0.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  3947 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg
  3954 ;; Tracked objects:
  3955 ;;		On entry : 1E/0
  3956 ;;		On exit  : 1F/1
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1
  3959 ;;      Params:         2       0       0
  3960 ;;      Locals:         0       0       0
  3961 ;;      Temps:          0       0       0
  3962 ;;      Totals:         2       0       0
  3963 ;;Total ram usage:        2 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    4
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_TMR0_Initialize
  3970 ;;		_main
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           
  3975                           ;psect for function _TMR0_SetInterruptHandler
  3976  0600                     _TMR0_SetInterruptHandler:
  3977                           
  3978                           ;mcc_generated_files/tmr0.c: 118:     TMR0_InterruptHandler = InterruptHandler;
  3979                           
  3980                           ;incstack = 0
  3981                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3982  0600  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3983  0601  0021               	movlb	1	; select bank1
  3984  0602  00A1               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  3985  0603  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3986  0604  00A0               	movwf	_TMR0_InterruptHandler^(0+128)
  3987  0605  0008               	return
  3988  0606                     __end_of_TMR0_SetInterruptHandler:
  3989                           
  3990                           	psect	text14
  3991  05DD                     __ptext14:	
  3992 ;; *************** function _PWM3_Initialize *****************
  3993 ;; Defined at:
  3994 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;		None
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;		None
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      void 
  4001 ;; Registers used:
  4002 ;;		wreg
  4003 ;; Tracked objects:
  4004 ;;		On entry : B1F/1
  4005 ;;		On exit  : B1F/C
  4006 ;;		Unchanged: B00/0
  4007 ;; Data sizes:     COMMON   BANK0   BANK1
  4008 ;;      Params:         0       0       0
  4009 ;;      Locals:         0       0       0
  4010 ;;      Temps:          0       0       0
  4011 ;;      Totals:         0       0       0
  4012 ;;Total ram usage:        0 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    4
  4015 ;; This function calls:
  4016 ;;		Nothing
  4017 ;; This function is called by:
  4018 ;;		_SYSTEM_Initialize
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _PWM3_Initialize
  4024  05DD                     _PWM3_Initialize:
  4025                           
  4026                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _PWM3_Initialize: [wreg]
  4030  05DD  30D0               	movlw	208
  4031  05DE  002C               	movlb	12	; select bank12
  4032  05DF  0099               	movwf	25	;volatile
  4033                           
  4034                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  4035  05E0  30FF               	movlw	255
  4036  05E1  0098               	movwf	24	;volatile
  4037                           
  4038                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  4039  05E2  30C0               	movlw	192
  4040  05E3  0097               	movwf	23	;volatile
  4041  05E4  0008               	return
  4042  05E5                     __end_of_PWM3_Initialize:
  4043                           
  4044                           	psect	text15
  4045  054C                     __ptext15:	
  4046 ;; *************** function _PIN_MANAGER_Initialize *****************
  4047 ;; Defined at:
  4048 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2
  4057 ;; Tracked objects:
  4058 ;;		On entry : B1F/0
  4059 ;;		On exit  : B1F/2
  4060 ;;		Unchanged: B00/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1
  4062 ;;      Params:         0       0       0
  4063 ;;      Locals:         0       0       0
  4064 ;;      Temps:          0       0       0
  4065 ;;      Totals:         0       0       0
  4066 ;;Total ram usage:        0 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    4
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_SYSTEM_Initialize
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _PIN_MANAGER_Initialize
  4078  054C                     _PIN_MANAGER_Initialize:
  4079                           
  4080                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4084  054C  0022               	movlb	2	; select bank2
  4085  054D  018C               	clrf	12	;volatile
  4086                           
  4087                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4088  054E  018D               	clrf	13	;volatile
  4089                           
  4090                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4091  054F  018E               	clrf	14	;volatile
  4092                           
  4093                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  4094  0550  303B               	movlw	59
  4095  0551  0021               	movlb	1	; select bank1
  4096  0552  008C               	movwf	12	;volatile
  4097                           
  4098                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  4099  0553  3010               	movlw	16
  4100  0554  008D               	movwf	13	;volatile
  4101                           
  4102                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  4103  0555  018E               	clrf	14	;volatile
  4104                           
  4105                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4106  0556  0023               	movlb	3	; select bank3
  4107  0557  018E               	clrf	14	;volatile
  4108                           
  4109                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  4110  0558  3030               	movlw	48
  4111  0559  008D               	movwf	13	;volatile
  4112                           
  4113                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  4114  055A  3013               	movlw	19
  4115  055B  008C               	movwf	12	;volatile
  4116                           
  4117                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4118  055C  0024               	movlb	4	; select bank4
  4119  055D  018D               	clrf	13	;volatile
  4120                           
  4121                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4122  055E  018C               	clrf	12	;volatile
  4123                           
  4124                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4125  055F  0021               	movlb	1	; select bank1
  4126  0560  1795               	bsf	21,7	;volatile
  4127                           
  4128                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4129  0561  0022               	movlb	2	; select bank2
  4130  0562  019D               	clrf	29	;volatile
  4131  0563  0008               	return
  4132  0564                     __end_of_PIN_MANAGER_Initialize:
  4133                           
  4134                           	psect	text16
  4135  0606                     __ptext16:	
  4136 ;; *************** function _OSCILLATOR_Initialize *****************
  4137 ;; Defined at:
  4138 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      void 
  4145 ;; Registers used:
  4146 ;;		wreg, status,2
  4147 ;; Tracked objects:
  4148 ;;		On entry : B1F/2
  4149 ;;		On exit  : B1F/2
  4150 ;;		Unchanged: B00/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1
  4152 ;;      Params:         0       0       0
  4153 ;;      Locals:         0       0       0
  4154 ;;      Temps:          0       0       0
  4155 ;;      Totals:         0       0       0
  4156 ;;Total ram usage:        0 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    4
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_SYSTEM_Initialize
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function _OSCILLATOR_Initialize
  4168  0606                     _OSCILLATOR_Initialize:
  4169                           
  4170                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4174  0606  306A               	movlw	106
  4175  0607  0021               	movlb	1	; select bank1
  4176  0608  0099               	movwf	25	;volatile
  4177                           
  4178                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4179  0609  0022               	movlb	2	; select bank2
  4180  060A  0196               	clrf	22	;volatile
  4181  060B  0008               	return
  4182  060C                     __end_of_OSCILLATOR_Initialize:
  4183                           
  4184                           	psect	text17
  4185  05E5                     __ptext17:	
  4186 ;; *************** function _ADC_Initialize *****************
  4187 ;; Defined at:
  4188 ;;		line 67 in file "mcc_generated_files/adc.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;		None
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2
  4197 ;; Tracked objects:
  4198 ;;		On entry : B1F/1
  4199 ;;		On exit  : B1F/1
  4200 ;;		Unchanged: B00/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1
  4202 ;;      Params:         0       0       0
  4203 ;;      Locals:         0       0       0
  4204 ;;      Temps:          0       0       0
  4205 ;;      Totals:         0       0       0
  4206 ;;Total ram usage:        0 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    4
  4209 ;; This function calls:
  4210 ;;		Nothing
  4211 ;; This function is called by:
  4212 ;;		_SYSTEM_Initialize
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           
  4217                           ;psect for function _ADC_Initialize
  4218  05E5                     _ADC_Initialize:
  4219                           
  4220                           ;mcc_generated_files/adc.c: 72:     ADCON0 = 0x01;
  4221                           
  4222                           ;incstack = 0
  4223                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4224  05E5  3001               	movlw	1
  4225  05E6  009D               	movwf	29	;volatile
  4226                           
  4227                           ;mcc_generated_files/adc.c: 75:     ADCON1 = 0xC0;
  4228  05E7  30C0               	movlw	192
  4229  05E8  009E               	movwf	30	;volatile
  4230                           
  4231                           ;mcc_generated_files/adc.c: 78:     ADCON2 = 0x00;
  4232  05E9  019F               	clrf	31	;volatile
  4233                           
  4234                           ;mcc_generated_files/adc.c: 81:     ADRESL = 0x00;
  4235  05EA  019B               	clrf	27	;volatile
  4236                           
  4237                           ;mcc_generated_files/adc.c: 84:     ADRESH = 0x00;
  4238  05EB  019C               	clrf	28	;volatile
  4239  05EC  0008               	return
  4240  05ED                     __end_of_ADC_Initialize:
  4241                           
  4242                           	psect	text18
  4243  057C                     __ptext18:	
  4244 ;; *************** function _PWM3_LoadDutyValue *****************
  4245 ;; Defined at:
  4246 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  dutyValue       2    4[COMMON] unsigned short 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, status,2, status,0
  4255 ;; Tracked objects:
  4256 ;;		On entry : 1F/1
  4257 ;;		On exit  : 1F/C
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1
  4260 ;;      Params:         2       0       0
  4261 ;;      Locals:         0       0       0
  4262 ;;      Temps:          2       0       0
  4263 ;;      Totals:         4       0       0
  4264 ;;Total ram usage:        4 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    4
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function _PWM3_LoadDutyValue
  4276  057C                     _PWM3_LoadDutyValue:
  4277                           
  4278                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  4279                           
  4280                           ;incstack = 0
  4281                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  4282  057C  0875               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  4283  057D  00F7               	movwf	??_PWM3_LoadDutyValue+1
  4284  057E  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4285  057F  00F6               	movwf	??_PWM3_LoadDutyValue
  4286  0580  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4287  0581  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4288  0582  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4289  0583  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4290  0584  0876               	movf	??_PWM3_LoadDutyValue,w
  4291  0585  002C               	movlb	12	; select bank12
  4292  0586  0098               	movwf	24	;volatile
  4293                           
  4294                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  4295  0587  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4296  0588  3903               	andlw	3
  4297  0589  00F6               	movwf	??_PWM3_LoadDutyValue
  4298  058A  3005               	movlw	5
  4299  058B                     u1005:
  4300  058B  35F6               	lslf	??_PWM3_LoadDutyValue,f
  4301  058C  3EFF               	addlw	-1
  4302  058D  1D03               	skipz
  4303  058E  2D8B               	goto	u1005
  4304  058F  3576               	lslf	??_PWM3_LoadDutyValue,w
  4305  0590  0097               	movwf	23	;volatile
  4306  0591  0008               	return
  4307  0592                     __end_of_PWM3_LoadDutyValue:
  4308                           
  4309                           	psect	text19
  4310  041C                     __ptext19:	
  4311 ;; *************** function _FLASH_WriteBlock *****************
  4312 ;; Defined at:
  4313 ;;		line 94 in file "mcc_generated_files/memory.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  writeAddr       2    3[COMMON] unsigned short 
  4316 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  4317 ;;		 -> main@wrBlockData(32), 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  blockStartAd    2    9[COMMON] unsigned short 
  4320 ;;  i               1   12[COMMON] unsigned char 
  4321 ;;  GIEBitValue     1   11[COMMON] unsigned char 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      char 
  4324 ;; Registers used:
  4325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 1F/0
  4328 ;;		On exit  : 1C/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMMON   BANK0   BANK1
  4331 ;;      Params:         3       0       0
  4332 ;;      Locals:         4       0       0
  4333 ;;      Temps:          3       0       0
  4334 ;;      Totals:        10       0       0
  4335 ;;Total ram usage:       10 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    5
  4338 ;; This function calls:
  4339 ;;		_FLASH_EraseBlock
  4340 ;; This function is called by:
  4341 ;;		_main
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           
  4346                           ;psect for function _FLASH_WriteBlock
  4347  041C                     _FLASH_WriteBlock:
  4348                           
  4349                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x800 -1) ^ (16 -1)));
  4350                           
  4351                           ;incstack = 0
  4352                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4353  041C  30F0               	movlw	240
  4354  041D  0573               	andwf	FLASH_WriteBlock@writeAddr,w
  4355  041E  00F9               	movwf	FLASH_WriteBlock@blockStartAddr
  4356  041F  3007               	movlw	7
  4357  0420  0574               	andwf	FLASH_WriteBlock@writeAddr+1,w
  4358  0421  00FA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  4359                           
  4360                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  4361  0422  3000               	movlw	0
  4362  0423  1B8B               	btfsc	11,7	;volatile
  4363  0424  3001               	movlw	1
  4364  0425  00FB               	movwf	FLASH_WriteBlock@GIEBitValue
  4365                           
  4366                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  4367  0426  087A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  4368  0427  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  4369  0428  1D03               	skipz
  4370  0429  2C2C               	goto	u1015
  4371  042A  0879               	movf	FLASH_WriteBlock@blockStartAddr,w
  4372  042B  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  4373  042C                     u1015:
  4374  042C  1D03               	btfss	3,2
  4375  042D  0008               	return
  4376                           
  4377                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  4378                           
  4379                           ;mcc_generated_files/memory.c: 104:     }
  4380  042E  138B               	bcf	11,7	;volatile
  4381                           
  4382                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  4383  042F  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  4384  0430  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  4385  0431  0873               	movf	FLASH_WriteBlock@writeAddr,w
  4386  0432  00F0               	movwf	FLASH_EraseBlock@startAddr
  4387  0433  2517               	fcall	_FLASH_EraseBlock
  4388                           
  4389                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  4390  0434  1315               	bcf	21,6	;volatile
  4391                           
  4392                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  4393  0435  1515               	bsf	21,2	;volatile
  4394                           
  4395                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  4396  0436  1695               	bsf	21,5	;volatile
  4397                           
  4398                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<16; i++)
  4399  0437  01FC               	clrf	FLASH_WriteBlock@i
  4400  0438                     l1700:
  4401                           
  4402                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  4403  0438  0873               	movf	FLASH_WriteBlock@writeAddr,w
  4404  0439  0023               	movlb	3	; select bank3
  4405  043A  0091               	movwf	17	;volatile
  4406                           
  4407                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  4408  043B  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  4409  043C  0092               	movwf	18	;volatile
  4410                           
  4411                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  4412  043D  357C               	lslf	FLASH_WriteBlock@i,w
  4413  043E  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  4414  043F  00F6               	movwf	??_FLASH_WriteBlock
  4415  0440  0876               	movf	??_FLASH_WriteBlock,w
  4416  0441  0086               	movwf	6
  4417  0442  0187               	clrf	7
  4418  0443  0801               	movf	1,w
  4419  0444  0093               	movwf	19	;volatile
  4420                           
  4421                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  4422  0445  357C               	lslf	FLASH_WriteBlock@i,w
  4423  0446  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  4424  0447  00F6               	movwf	??_FLASH_WriteBlock
  4425  0448  0876               	movf	??_FLASH_WriteBlock,w
  4426  0449  0086               	movwf	6
  4427  044A  0187               	clrf	7
  4428  044B  3F40               	moviw [0]fsr1
  4429  044C  00F7               	movwf	??_FLASH_WriteBlock+1
  4430  044D  3F41               	moviw [1]fsr1
  4431  044E  00F8               	movwf	??_FLASH_WriteBlock+2
  4432  044F  0878               	movf	??_FLASH_WriteBlock+2,w
  4433  0450  0094               	movwf	20	;volatile
  4434                           
  4435                           ;mcc_generated_files/memory.c: 127:         if(i == (16 -1))
  4436  0451  300F               	movlw	15
  4437  0452  067C               	xorwf	FLASH_WriteBlock@i,w
  4438  0453  1903               	btfsc	3,2
  4439                           
  4440                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  4441  0454  1295               	bcf	21,5	;volatile
  4442                           
  4443                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  4444  0455  3055               	movlw	85
  4445  0456  0096               	movwf	22	;volsfr
  4446                           
  4447                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  4448  0457  30AA               	movlw	170
  4449  0458  0096               	movwf	22	;volsfr
  4450                           
  4451                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  4452  0459  1495               	bsf	21,1	;volatile
  4453                           
  4454                           ;mcc_generated_files/memory.c: 136:         __nop();
  4455  045A  0000               	nop
  4456                           
  4457                           ;mcc_generated_files/memory.c: 137:         __nop();
  4458  045B  0000               	nop
  4459                           
  4460                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  4461  045C  3001               	movlw	1
  4462  045D  07F3               	addwf	FLASH_WriteBlock@writeAddr,f
  4463  045E  3000               	movlw	0
  4464  045F  3DF4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  4465                           
  4466                           ;mcc_generated_files/memory.c: 140:     }
  4467  0460  3001               	movlw	1
  4468  0461  00F6               	movwf	??_FLASH_WriteBlock
  4469  0462  0876               	movf	??_FLASH_WriteBlock,w
  4470  0463  07FC               	addwf	FLASH_WriteBlock@i,f
  4471  0464  3010               	movlw	16
  4472  0465  027C               	subwf	FLASH_WriteBlock@i,w
  4473  0466  1C03               	skipc
  4474  0467  2C38               	goto	l1700
  4475                           
  4476                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  4477  0468  0023               	movlb	3	; select bank3
  4478  0469  1115               	bcf	21,2	;volatile
  4479                           
  4480                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  4481  046A  0C7B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  4482  046B  1C03               	skipc
  4483  046C  138B               	bcf	11,7	;volatile
  4484  046D  1803               	skipnc
  4485  046E  178B               	bsf	11,7	;volatile
  4486  046F  0008               	return
  4487  0470                     __end_of_FLASH_WriteBlock:
  4488                           
  4489                           	psect	text20
  4490  0517                     __ptext20:	
  4491 ;; *************** function _FLASH_EraseBlock *****************
  4492 ;; Defined at:
  4493 ;;		line 148 in file "mcc_generated_files/memory.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  startAddr       2    0[COMMON] unsigned short 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0
  4502 ;; Tracked objects:
  4503 ;;		On entry : 1F/0
  4504 ;;		On exit  : 1F/3
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMMON   BANK0   BANK1
  4507 ;;      Params:         2       0       0
  4508 ;;      Locals:         1       0       0
  4509 ;;      Temps:          0       0       0
  4510 ;;      Totals:         3       0       0
  4511 ;;Total ram usage:        3 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    4
  4514 ;; This function calls:
  4515 ;;		Nothing
  4516 ;; This function is called by:
  4517 ;;		_FLASH_WriteBlock
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           
  4522                           ;psect for function _FLASH_EraseBlock
  4523  0517                     _FLASH_EraseBlock:
  4524                           
  4525                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  4526                           
  4527                           ;incstack = 0
  4528                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  4529  0517  3000               	movlw	0
  4530  0518  1B8B               	btfsc	11,7	;volatile
  4531  0519  3001               	movlw	1
  4532  051A  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  4533                           
  4534                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  4535  051B  138B               	bcf	11,7	;volatile
  4536                           
  4537                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  4538  051C  0870               	movf	FLASH_EraseBlock@startAddr,w
  4539  051D  0023               	movlb	3	; select bank3
  4540  051E  0091               	movwf	17	;volatile
  4541                           
  4542                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  4543  051F  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  4544  0520  0092               	movwf	18	;volatile
  4545                           
  4546                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  4547  0521  1315               	bcf	21,6	;volatile
  4548                           
  4549                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  4550  0522  1615               	bsf	21,4	;volatile
  4551                           
  4552                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  4553  0523  1515               	bsf	21,2	;volatile
  4554                           
  4555                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  4556  0524  3055               	movlw	85
  4557  0525  0096               	movwf	22	;volsfr
  4558                           
  4559                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  4560  0526  30AA               	movlw	170
  4561  0527  0096               	movwf	22	;volsfr
  4562                           
  4563                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  4564  0528  1495               	bsf	21,1	;volatile
  4565                           
  4566                           ;mcc_generated_files/memory.c: 168:     __nop();
  4567  0529  0000               	nop
  4568                           
  4569                           ;mcc_generated_files/memory.c: 169:     __nop();
  4570  052A  0000               	nop
  4571                           
  4572                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  4573  052B  0023               	movlb	3	; select bank3
  4574  052C  1115               	bcf	21,2	;volatile
  4575                           
  4576                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  4577  052D  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  4578  052E  1C03               	skipc
  4579  052F  138B               	bcf	11,7	;volatile
  4580  0530  1803               	skipnc
  4581  0531  178B               	bsf	11,7	;volatile
  4582  0532  0008               	return
  4583  0533                     __end_of_FLASH_EraseBlock:
  4584                           
  4585                           	psect	text21
  4586  0564                     __ptext21:	
  4587 ;; *************** function _ADC_GetConversion *****************
  4588 ;; Defined at:
  4589 ;;		line 96 in file "mcc_generated_files/adc.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;  channel         1    wreg     enum E2336
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  channel         1    3[COMMON] enum E2336
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  2    0[COMMON] unsigned short 
  4596 ;; Registers used:
  4597 ;;		wreg, status,2, status,0
  4598 ;; Tracked objects:
  4599 ;;		On entry : 1F/0
  4600 ;;		On exit  : 1F/1
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMMON   BANK0   BANK1
  4603 ;;      Params:         2       0       0
  4604 ;;      Locals:         1       0       0
  4605 ;;      Temps:          1       0       0
  4606 ;;      Totals:         4       0       0
  4607 ;;Total ram usage:        4 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; Hardware stack levels required when called:    4
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_main
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           
  4618                           ;psect for function _ADC_GetConversion
  4619  0564                     _ADC_GetConversion:
  4620                           
  4621                           ;incstack = 0
  4622                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4623                           ;ADC_GetConversion@channel stored from wreg
  4624  0564  00F3               	movwf	ADC_GetConversion@channel
  4625                           
  4626                           ;mcc_generated_files/adc.c: 96: adc_result_t ADC_GetConversion(adc_channel_t channel);mc
      +                          c_generated_files/adc.c: 97: {;mcc_generated_files/adc.c: 99:     ADCON0bits.CHS = chann
      +                          el;
  4627  0565  0873               	movf	ADC_GetConversion@channel,w
  4628  0566  00F2               	movwf	??_ADC_GetConversion
  4629  0567  0DF2               	rlf	??_ADC_GetConversion,f
  4630  0568  0DF2               	rlf	??_ADC_GetConversion,f
  4631  0569  0021               	movlb	1	; select bank1
  4632  056A  081D               	movf	29,w	;volatile
  4633  056B  0672               	xorwf	??_ADC_GetConversion,w
  4634  056C  3983               	andlw	-125
  4635  056D  0672               	xorwf	??_ADC_GetConversion,w
  4636  056E  009D               	movwf	29	;volatile
  4637                           
  4638                           ;mcc_generated_files/adc.c: 102:     ADCON0bits.ADON = 1;
  4639  056F  141D               	bsf	29,0	;volatile
  4640                           
  4641                           ;mcc_generated_files/adc.c: 105:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4642  0570  3200               	nop2	;2 cycle nop
  4643  0571  3200               	nop2	;2 cycle nop
  4644  0572  0000               	nop
  4645                           
  4646                           ;mcc_generated_files/adc.c: 108:     ADCON0bits.GO_nDONE = 1;
  4647  0573  0021               	movlb	1	; select bank1
  4648  0574  149D               	bsf	29,1	;volatile
  4649  0575                     l22:	
  4650                           ;mcc_generated_files/adc.c: 112:     {;mcc_generated_files/adc.c: 113:     }
  4651                           
  4652                           
  4653                           ;mcc_generated_files/adc.c: 111:     while (ADCON0bits.GO_nDONE)
  4654  0575  189D               	btfsc	29,1	;volatile
  4655  0576  2D75               	goto	l22
  4656                           
  4657                           ;mcc_generated_files/adc.c: 116:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4658  0577  081C               	movf	28,w	;volatile
  4659  0578  00F1               	movwf	?_ADC_GetConversion+1
  4660  0579  081B               	movf	27,w	;volatile
  4661  057A  00F0               	movwf	?_ADC_GetConversion
  4662  057B  0008               	return
  4663  057C                     __end_of_ADC_GetConversion:
  4664                           
  4665                           	psect	intentry
  4666  0004                     __pintentry:	
  4667 ;; *************** function _INTERRUPT_InterruptManager *****************
  4668 ;; Defined at:
  4669 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;		None
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;		None
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      void 
  4676 ;; Registers used:
  4677 ;;		wreg, status,2, status,0, pclath, cstack
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMMON   BANK0   BANK1
  4683 ;;      Params:         0       0       0
  4684 ;;      Locals:         0       0       0
  4685 ;;      Temps:          0       0       0
  4686 ;;      Totals:         0       0       0
  4687 ;;Total ram usage:        0 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    3
  4690 ;; This function calls:
  4691 ;;		_TMR0_ISR
  4692 ;; This function is called by:
  4693 ;;		Interrupt level 1
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697  0004                     _INTERRUPT_InterruptManager:
  4698                           
  4699                           ;incstack = 0
  4700  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4701                           
  4702                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4703  0005  3180               	pagesel	$
  4704                           
  4705                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4706  0006  1A8B               	btfsc	11,5	;volatile
  4707  0007  1D0B               	btfss	11,2	;volatile
  4708  0008  280A               	goto	i1l154
  4709                           
  4710                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4711  0009  25ED               	fcall	_TMR0_ISR
  4712  000A                     i1l154:	
  4713                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4714                           
  4715  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4716  000B  0009               	retfie
  4717  000C                     __end_of_INTERRUPT_InterruptManager:
  4718                           
  4719                           	psect	text23
  4720  05ED                     __ptext23:	
  4721 ;; *************** function _TMR0_ISR *****************
  4722 ;; Defined at:
  4723 ;;		line 92 in file "mcc_generated_files/tmr0.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0, pclath, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMMON   BANK0   BANK1
  4737 ;;      Params:         0       0       0
  4738 ;;      Locals:         0       0       0
  4739 ;;      Temps:          0       0       0
  4740 ;;      Totals:         0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    2
  4744 ;; This function calls:
  4745 ;;		_TMR0_CallBack
  4746 ;; This function is called by:
  4747 ;;		_INTERRUPT_InterruptManager
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _TMR0_ISR
  4753  05ED                     _TMR0_ISR:
  4754                           
  4755                           ;mcc_generated_files/tmr0.c: 96:     INTCONbits.TMR0IF = 0;
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4759  05ED  110B               	bcf	11,2	;volatile
  4760                           
  4761                           ;mcc_generated_files/tmr0.c: 98:     TMR0 = timer0ReloadVal;
  4762  05EE  0021               	movlb	1	; select bank1
  4763  05EF  0822               	movf	_timer0ReloadVal^(0+128),w	;volatile
  4764  05F0  0020               	movlb	0	; select bank0
  4765  05F1  0095               	movwf	21	;volatile
  4766                           
  4767                           ;mcc_generated_files/tmr0.c: 102:     TMR0_CallBack();
  4768  05F2  25B8               	fcall	_TMR0_CallBack
  4769  05F3  0008               	return
  4770  05F4                     __end_of_TMR0_ISR:
  4771                           
  4772                           	psect	text24
  4773  05B8                     __ptext24:	
  4774 ;; *************** function _TMR0_CallBack *****************
  4775 ;; Defined at:
  4776 ;;		line 107 in file "mcc_generated_files/tmr0.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;		None
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;		None
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      void 
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0, pclath, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 1F/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1
  4790 ;;      Params:         0       0       0
  4791 ;;      Locals:         0       0       0
  4792 ;;      Temps:          0       0       0
  4793 ;;      Totals:         0       0       0
  4794 ;;Total ram usage:        0 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    1
  4797 ;; This function calls:
  4798 ;;		Absolute function
  4799 ;;		_TMR0_DefaultInterruptHandler
  4800 ;;		_timer0CallBack
  4801 ;; This function is called by:
  4802 ;;		_TMR0_ISR
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           
  4807                           ;psect for function _TMR0_CallBack
  4808  05B8                     _TMR0_CallBack:
  4809                           
  4810                           ;mcc_generated_files/tmr0.c: 111:     if(TMR0_InterruptHandler)
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4814  05B8  0021               	movlb	1	; select bank1
  4815  05B9  0820               	movf	_TMR0_InterruptHandler^(0+128),w
  4816  05BA  0421               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
  4817  05BB  1903               	btfsc	3,2
  4818  05BC  0008               	return
  4819                           
  4820                           ;mcc_generated_files/tmr0.c: 112:     {;mcc_generated_files/tmr0.c: 113:         TMR0_In
      +                          terruptHandler();
  4821  05BD  0821               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
  4822  05BE  008A               	movwf	10
  4823  05BF  0820               	movf	_TMR0_InterruptHandler^(0+128),w
  4824  05C0  000A               	callw
  4825  05C1  3185               	pagesel	$
  4826  05C2  0008               	return
  4827  05C3                     __end_of_TMR0_CallBack:
  4828                           
  4829                           	psect	text25
  4830  0617                     __ptext25:	
  4831 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4832 ;; Defined at:
  4833 ;;		line 121 in file "mcc_generated_files/tmr0.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;		None
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;		None
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		None
  4842 ;; Tracked objects:
  4843 ;;		On entry : 1F/1
  4844 ;;		On exit  : 1F/1
  4845 ;;		Unchanged: 1F/0
  4846 ;; Data sizes:     COMMON   BANK0   BANK1
  4847 ;;      Params:         0       0       0
  4848 ;;      Locals:         0       0       0
  4849 ;;      Temps:          0       0       0
  4850 ;;      Totals:         0       0       0
  4851 ;;Total ram usage:        0 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_TMR0_Initialize
  4857 ;;		_TMR0_CallBack
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           
  4862                           ;psect for function _TMR0_DefaultInterruptHandler
  4863  0617                     _TMR0_DefaultInterruptHandler:
  4864                           
  4865                           ;incstack = 0
  4866                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  4867  0617  0008               	return
  4868  0618                     __end_of_TMR0_DefaultInterruptHandler:
  4869                           
  4870                           	psect	text26
  4871  05A7                     __ptext26:	
  4872 ;; *************** function _timer0CallBack *****************
  4873 ;; Defined at:
  4874 ;;		line 82 in file "main.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  1    wreg      void 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2
  4883 ;; Tracked objects:
  4884 ;;		On entry : 1F/1
  4885 ;;		On exit  : 1F/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1
  4888 ;;      Params:         0       0       0
  4889 ;;      Locals:         0       0       0
  4890 ;;      Temps:          0       0       0
  4891 ;;      Totals:         0       0       0
  4892 ;;Total ram usage:        0 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; This function calls:
  4895 ;;		Nothing
  4896 ;; This function is called by:
  4897 ;;		_main
  4898 ;;		_TMR0_CallBack
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _timer0CallBack
  4904  05A7                     _timer0CallBack:
  4905                           
  4906                           ;main.c: 84:     msTick++;
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _timer0CallBack: [wreg+status,2]
  4910  05A7  3001               	movlw	1
  4911  05A8  0020               	movlb	0	; select bank0
  4912  05A9  07E0               	addwf	_msTick,f	;volatile
  4913  05AA  3000               	movlw	0
  4914  05AB  3DE1               	addwfc	_msTick+1,f	;volatile
  4915                           
  4916                           ;main.c: 86:     if(msTick > 200)
  4917  05AC  3000               	movlw	0
  4918  05AD  0261               	subwf	_msTick+1,w	;volatile
  4919  05AE  30C9               	movlw	201
  4920  05AF  1903               	skipnz
  4921  05B0  0260               	subwf	_msTick,w	;volatile
  4922  05B1  1C03               	skipc
  4923  05B2  0008               	return
  4924                           
  4925                           ;main.c: 87:     {;main.c: 88:         doToggle = 1;
  4926  05B3  01E4               	clrf	_doToggle
  4927  05B4  0AE4               	incf	_doToggle,f
  4928                           
  4929                           ;main.c: 89:         msTick = 0;
  4930  05B5  01E0               	clrf	_msTick	;volatile
  4931  05B6  01E1               	clrf	_msTick+1	;volatile
  4932  05B7  0008               	return
  4933  05B8                     __end_of_timer0CallBack:
  4934  007E                     btemp	set	126	;btemp
  4935  007E                     int$flags	set	126
  4936  007E                     wtemp0	set	126
  4937                           
  4938                           	psect	config
  4939                           
  4940                           ;Config register CONFIG1 @ 0x8007
  4941                           ;	Oscillator Selection bits
  4942                           ;	FOSC = INTOSC, Internal Oscillator, I/O Function on OSC1
  4943                           ;	Watchdog Timer Enable
  4944                           ;	WDTE = OFF, WDT disabled
  4945                           ;	Power-up Timer Enable
  4946                           ;	PWRTE = OFF, PWRT disabled
  4947                           ;	MCLR Pin Function Select
  4948                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  4949                           ;	Flash Program Memory Code Protection
  4950                           ;	CP = OFF, Program memory code protection is disabled
  4951                           ;	Brown-out Reset Enable
  4952                           ;	BOREN = ON, Brown-out Reset enabled
  4953                           ;	Clock Out Enable
  4954                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  4955  8007                     	org	32775
  4956  8007  3FE4               	dw	16356
  4957                           
  4958                           ;Config register CONFIG2 @ 0x8008
  4959                           ;	Flash Memory Self-Write Protection
  4960                           ;	WRT = OFF, Write protection off
  4961                           ;	Stack Overflow/Underflow Reset Enable
  4962                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  4963                           ;	Brown-out Reset Voltage Selection
  4964                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  4965                           ;	Low-Power Brown Out Reset
  4966                           ;	LPBOR = OFF, Low-Power BOR is disabled
  4967                           ;	Low-Voltage Programming Enable
  4968                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  4969  8008                     	org	32776
  4970  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        10
    BSS         19
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     54      80
    BANK1            32      0       6

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 32
		 -> main@wrBlockData(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _setState->___lldiv
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PWM3_LoadDutyValue->_ADC_GetConversion
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___aldiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0    3573
                                             14 BANK0     40    40      0
                  _ADC_GetConversion
                   _FLASH_WriteBlock
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___aldiv
                             ___lmul
              _setLedsForPositioning
                           _setState
 ---------------------------------------------------------------------------------
 (1) _setState                                             5     5      0    1059
                                              0 BANK0      5     5      0
                     _FLASH_ReadWord
                            ___lldiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     435
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setLedsForPositioning                                4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     452
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     120
                                              4 COMMON     4     2      2
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _FLASH_WriteBlock                                    10     7      3     736
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_EraseBlock                                     3     1      2     144
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _FLASH_WriteBlock
     _FLASH_EraseBlock
   _PWM3_LoadDutyValue
     _ADC_GetConversion (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___aldiv
     ___lmul (ARG)
   ___lmul
   _setLedsForPositioning
   _setState
     _FLASH_ReadWord
     ___lldiv
     ___tmul

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      64       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     36      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       6       8       18.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      64       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Jul 14 14:57:37 2020

                                       _b 00A3                                         _m 0066  
                                      l22 0575                           _timer0ReloadVal 00A2  
          __size_of_setLedsForPositioning 0138             __end_of_setLedsForPositioning 02CC  
                                     l321 013C                                       l403 0236  
                                     l331 016B                                       l315 011E  
                                     l413 0264                                       l333 0175  
                                     l317 0128                                       l423 0285  
                                     l327 0157                                       l319 0132  
                                     l433 02A6                                       l409 0254  
                                     l273 0379                                       l329 0161  
                                     l443 02C7                                       l419 0275  
                                     l363 01AF                                       l276 037C  
                                     l429 0296                                       l373 01D2  
                                     l439 02B7                                       l383 01F4  
                                     l367 01C0                                       l448 02CA  
                                     l393 0215                                       l377 01E3  
                                     l387 0204                                       l299 006E  
                                     l397 0225                                       l583 03AB  
                                     _PR2 001B                                       u905 0506  
                                     u935 0483                                       u955 048F  
                                     u965 04A3                                       u975 04AF  
                                     u895 0500                           _TMR2_Initialize 05D5  
                                     wreg 0009                               main@channel 006A  
          FLASH_WriteBlock@flashWordArray 0075                                      l2024 00AB  
                                    l2026 0188                                      l2028 0388  
                                    l1700 0438                                      l1622 04FF  
                                    l1800 04D4                                      l1650 04B9  
                                    l1618 04F7                                      l1730 02DF  
                                    l1636 0480                                      l1900 007F  
                                    l1646 04AE                                      l1638 048E  
                                    l1910 00B6                                      l1840 0405  
                                    l1760 01C3                                      l1920 0146  
                                    l1912 00B8                                      l1826 03CC  
                                    l1818 03BC                                      l1770 0217  
                                    l1762 01D4                                      l1746 037F  
                                    l1922 0149                                      l1930 0180  
                                    l1844 0413                                      l1836 03FA  
                                    l1828 03DA                                      l1780 0256  
                                    l1772 0228                                      l1764 01E6  
                                    l1748 0393                                      l1916 0110  
                                    l1908 00A3                                      l1790 02A9  
                                    l1782 0267                                      l1774 0238  
                                    l1766 01F6                                      l1758 01B1  
                                    l1792 02B9                                      l1784 0277  
                                    l1768 0207                                      l1864 002E  
                                    l1786 0288                                      l1778 0246  
                                    l1890 006A                                      l1874 0047  
                                    l1796 04CA                                      l1788 0298  
                                    l1884 0063                                      l1876 004E  
                                    l1868 0035                                      l1894 0071  
                                    l1886 0066                                      l1896 0074  
                                    u1005 058B                                      u1015 042C  
                                    u1055 02F4                                      u1065 0324  
                                    u1500 011C                                      u1325 03CF  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u1520 0126  
                                    u1345 03DB                                      u1265 04D5  
                                    u1610 0155                                      u1355 03EF  
                                    u1275 04DC                                      u1540 0130  
                                    u1365 03FB                                      u1630 015F  
                                    u1560 013A                                      u1650 0169  
                                    u1580 0144                                      u1670 0173  
                                    u1690 017D                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                                      _main 0024  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                         ?_FLASH_WriteBlock 0073  
                                    start 000C                        ??_FLASH_WriteBlock 0076  
                 __end_of_TMR0_Initialize 05A7            ??_TMR0_DefaultInterruptHandler 0070  
          __size_of_OSCILLATOR_Initialize 0006             __end_of_OSCILLATOR_Initialize 060C  
                         __end_of___aldiv 041C                                     ?_main 0070  
                         __end_of___lldiv 04C2                                     _T2CON 001C  
                                   i1l154 000A                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
       __size_of_TMR0_SetInterruptHandler 0006                       ___lmul@multiplicand 0074  
               ?_TMR0_SetInterruptHandler 0070                          __end_of_TMR0_ISR 05F4  
                          _WDT_Initialize 0610                   __end_of_PWM3_Initialize 05E5  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 0614  
                         __initialization 000D                              __end_of_main 0194  
                 __end_of_TMR2_Initialize 05DD               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 002E                   __size_of_FLASH_ReadWord 0019  
                  __end_of_WDT_Initialize 0614                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADCON2 009F  
               FLASH_WriteBlock@writeAddr 0073                                    _ADRESH 009C  
                                  _ADRESL 009B                                    _APFCON 011D  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                 __size_of_FLASH_EraseBlock 001C  
                                  _OSCCON 0099                                    _WDTCON 0097  
                                  ___lmul 04C2               __size_of_PWM3_LoadDutyValue 0016  
                               ??___aldiv 007C                                    ___tmul 04F1  
                               ??___lldiv 0078                                    _msTick 0060  
                        ?_TMR0_Initialize 0070                          __end_of_setState 039B  
                 FLASH_ReadWord@flashAddr 0070                           ?_WDT_Initialize 0070  
                ADC_GetConversion@channel 0073                     __end_of_TMR0_CallBack 05C3  
                 __end_of_TMR2_StartTimer 0617  TMR0_SetInterruptHandler@InterruptHandler 0070  
                        ?_PWM3_Initialize 0070                         _SYSTEM_Initialize 05CD  
                 __end_of__initialization 0021                        ?_SYSTEM_Initialize 0070  
                        _fixedPointFactor 060C                            __pcstackCOMMON 0070  
                 __size_of_timer0CallBack 0011                              __pidataBANK0 05C3  
                     ??_SYSTEM_Initialize 0073                                 ?_TMR0_ISR 0070  
                        ?_TMR2_Initialize 0070                            _OPTION_REGbits 0095  
             FLASH_WriteBlock@GIEBitValue 007B                 __end_of_SYSTEM_Initialize 05D5  
                              __pbssBANK0 0056                                __pbssBANK1 00A3  
                              __pmaintext 0024          __end_of_TMR0_SetInterruptHandler 0606  
                                 ?___lmul 0070                                   ?___tmul 0070  
                              ??_TMR0_ISR 0070                                __pintentry 0004  
                          ___lmul@product 0078                 __size_of_FLASH_WriteBlock 0054  
                 __size_of_ADC_Initialize 0008                            _FLASH_ReadWord 0533  
                   _setLedsForPositioning 0194                                   _PWM3DCH 0618  
                                 _PWM3DCL 0617                                   _PWM3CON 0619  
                        ?_TMR2_StartTimer 0070                          _FLASH_EraseBlock 0517  
                    _ADC_InterruptHandler 0062                                 ?_setState 0070  
                                 ___aldiv 039B                           __size_of___lmul 002F  
                         __size_of___tmul 0026                                   ___lldiv 0470  
                  __end_of_FLASH_ReadWord 054C                                   __ptext1 02CC  
                                 __ptext2 04F1                                   __ptext3 0470  
                                 __ptext4 0533                                   __ptext5 0194  
                                 __ptext6 04C2                                   __ptext7 039B  
                                 __ptext8 0614                                   __ptext9 05CD  
                   _OSCILLATOR_Initialize 0606                                 _T2CONbits 001C  
                        ___aldiv@dividend 0024                  ??_PIN_MANAGER_Initialize 0070  
              __size_of_SYSTEM_Initialize 0008                                   clrloop0 05FB  
                    end_of_initialization 0021                                   init_ram 05F4  
                                 initloop 05F5                                _lowerLimit 0056  
                         ___lldiv@divisor 0070                           ___lldiv@counter 007D  
                              ??_setState 0020                            _timer0CallBack 05A7  
                        ___aldiv@quotient 002A                 FLASH_ReadWord@GIEBitValue 0072  
                         ?_FLASH_ReadWord 0070                          ??_WDT_Initialize 0070  
                _TMR0_SetInterruptHandler 0600                                 _PORTAbits 000C  
                  ?_setLedsForPositioning 0070                  __end_of_fixedPointFactor 0610  
                              _upperLimit 006C                    __end_of_timer0CallBack 05B8  
              __end_of_PWM3_LoadDutyValue 0592                         FLASH_WriteBlock@i 007C  
                          __end_of___lmul 04F1                            __end_of___tmul 0517  
                       __size_of_TMR0_ISR 0007                            _ADC_Initialize 05E5  
                        _FLASH_WriteBlock 041C                    ?_OSCILLATOR_Initialize 0070  
                     start_initialization 000D                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0018                           ?_timer0CallBack 0070  
                __size_of_PWM3_Initialize 0008                                  ??___lmul 0078  
                                ??___tmul 0076                    __size_of_TMR0_CallBack 000B  
                  __end_of_ADC_Initialize 05ED                               __pdataBANK0 0066  
             FLASH_EraseBlock@GIEBitValue 0072                  __end_of_FLASH_EraseBlock 0533  
                          ___tmul@product 0076                                 ___latbits 0000  
                           __pcstackBANK0 0020                  __size_of_TMR2_Initialize 0008  
                        setState@newState 0024                              _currentState 006B  
                   _TMR0_InterruptHandler 00A0                                 __pnvBANK1 00A0  
                  _PIN_MANAGER_Initialize 054C                                  ?___aldiv 0020  
                       __size_of_setState 00CF                                  ?___lldiv 0070  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0070  
                           _TMR0_CallBack 05B8                                 _msPressed 005E  
                        _adcValuePosition 005A            FLASH_WriteBlock@blockStartAddr 0079  
                         ___aldiv@divisor 0020                         ??_TMR0_Initialize 0072  
                         ___aldiv@counter 0028                                  _LATBbits 010D  
                                _LATCbits 010E                                 clear_ram0 05FA  
                __size_of_TMR2_StartTimer 0003       __size_of_INTERRUPT_InterruptManager 0008  
              ??_TMR0_SetInterruptHandler 0072                                  _PIR1bits 0011  
               FLASH_EraseBlock@startAddr 0070                          ??_FLASH_ReadWord 0072  
                                _TMR0_ISR 05ED                   ??_setLedsForPositioning 0074  
                       ??_PWM3_Initialize 0070                                _ADCON0bits 009D  
                     ___tmul@multiplicand 0073                            ?_TMR0_CallBack 0070  
                       ___lmul@multiplier 0070                         ??_TMR2_Initialize 0070  
                __end_of_FLASH_WriteBlock 0470             setLedsForPositioning@adcValue 0070  
                       _ADC_GetConversion 0564                   ??_OSCILLATOR_Initialize 0070  
                      ?_ADC_GetConversion 0070                          __size_of___aldiv 0081  
                        __size_of___lldiv 0052                        _PWM3_LoadDutyValue 057C  
                     ??_ADC_GetConversion 0072                                  _doToggle 0064  
                                __ptext10 0610                                  __ptext11 05D5  
                                __ptext20 0517                                  __ptext12 0592  
                                __ptext21 0564                                  __ptext13 0600  
                                __ptext14 05DD                                  __ptext23 05ED  
                                __ptext15 054C                                  __ptext24 05B8  
                                __ptext16 0606                                  __ptext25 0617  
                                __ptext17 05E5                                  __ptext26 05A7  
                                __ptext18 057C                                  __ptext19 041C  
                     ?_PWM3_LoadDutyValue 0074                          ??_timer0CallBack 0070  
                           __size_of_main 0170                           main@wrBlockData 0036  
    __end_of_TMR0_DefaultInterruptHandler 0618     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0617                 __end_of_ADC_GetConversion 057C  
                                _setState 02CC                      ??_PWM3_LoadDutyValue 0076  
                                int$flags 007E                         ??_TMR2_StartTimer 0070  
      __end_of_INTERRUPT_InterruptManager 000C                _INTERRUPT_InterruptManager 0004  
                       ?_FLASH_EraseBlock 0070                        ??_FLASH_EraseBlock 0072  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0070  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                          _doButtonAction 0065                                _PMCON1bits 0195  
                        ___lldiv@dividend 0074                   ?_PIN_MANAGER_Initialize 0070  
                        ??_ADC_Initialize 0070             ?_TMR0_DefaultInterruptHandler 0070  
                       ___tmul@multiplier 0070               PWM3_LoadDutyValue@dutyValue 0074  
                           __pstringtext1 060C                                _OPTION_REG 0095  
                        ___lldiv@quotient 0079                           _TMR0_Initialize 0592  
                            ___aldiv@sign 0029            __end_of_PIN_MANAGER_Initialize 0564  
              __size_of_ADC_GetConversion 0018                           _PWM3_Initialize 05DD  
