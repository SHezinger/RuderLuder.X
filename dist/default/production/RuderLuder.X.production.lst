

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Sep 15 15:07:18 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F1507
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F1507 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0197                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0391                     	;# 
   145  0392                     	;# 
   146  0393                     	;# 
   147  0394                     	;# 
   148  0395                     	;# 
   149  0396                     	;# 
   150  0498                     	;# 
   151  0498                     	;# 
   152  0499                     	;# 
   153  049A                     	;# 
   154  049B                     	;# 
   155  049B                     	;# 
   156  049C                     	;# 
   157  049D                     	;# 
   158  049E                     	;# 
   159  049F                     	;# 
   160  0611                     	;# 
   161  0612                     	;# 
   162  0613                     	;# 
   163  0613                     	;# 
   164  0614                     	;# 
   165  0615                     	;# 
   166  0616                     	;# 
   167  0616                     	;# 
   168  0617                     	;# 
   169  0618                     	;# 
   170  0619                     	;# 
   171  0619                     	;# 
   172  061A                     	;# 
   173  061B                     	;# 
   174  061C                     	;# 
   175  061C                     	;# 
   176  0691                     	;# 
   177  0692                     	;# 
   178  0693                     	;# 
   179  0694                     	;# 
   180  0695                     	;# 
   181  0F0F                     	;# 
   182  0F10                     	;# 
   183  0F11                     	;# 
   184  0F12                     	;# 
   185  0F13                     	;# 
   186  0F14                     	;# 
   187  0F15                     	;# 
   188  0F16                     	;# 
   189  0F17                     	;# 
   190  0F18                     	;# 
   191  0F19                     	;# 
   192  0F1A                     	;# 
   193  0F1B                     	;# 
   194  0F1C                     	;# 
   195  0F1D                     	;# 
   196  0F1E                     	;# 
   197  0F1F                     	;# 
   198  0FE3                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0015                     	;# 
   229  0016                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001C                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0097                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  0116                     	;# 
   258  0117                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0194                     	;# 
   269  0195                     	;# 
   270  0196                     	;# 
   271  0197                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0613                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0616                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  0619                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061C                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0F0F                     	;# 
   312  0F10                     	;# 
   313  0F11                     	;# 
   314  0F12                     	;# 
   315  0F13                     	;# 
   316  0F14                     	;# 
   317  0F15                     	;# 
   318  0F16                     	;# 
   319  0F17                     	;# 
   320  0F18                     	;# 
   321  0F19                     	;# 
   322  0F1A                     	;# 
   323  0F1B                     	;# 
   324  0F1C                     	;# 
   325  0F1D                     	;# 
   326  0F1E                     	;# 
   327  0F1F                     	;# 
   328  0FE3                     	;# 
   329  0FE4                     	;# 
   330  0FE5                     	;# 
   331  0FE6                     	;# 
   332  0FE7                     	;# 
   333  0FE8                     	;# 
   334  0FE9                     	;# 
   335  0FEA                     	;# 
   336  0FEB                     	;# 
   337  0FED                     	;# 
   338  0FEE                     	;# 
   339  0FEF                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  011D                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  020C                     	;# 
   403  020D                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  0394                     	;# 
   408  0395                     	;# 
   409  0396                     	;# 
   410  0498                     	;# 
   411  0498                     	;# 
   412  0499                     	;# 
   413  049A                     	;# 
   414  049B                     	;# 
   415  049B                     	;# 
   416  049C                     	;# 
   417  049D                     	;# 
   418  049E                     	;# 
   419  049F                     	;# 
   420  0611                     	;# 
   421  0612                     	;# 
   422  0613                     	;# 
   423  0613                     	;# 
   424  0614                     	;# 
   425  0615                     	;# 
   426  0616                     	;# 
   427  0616                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0FE3                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0013                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  008C                     	;# 
   498  008D                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0099                     	;# 
   507  009A                     	;# 
   508  009B                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  020C                     	;# 
   533  020D                     	;# 
   534  0391                     	;# 
   535  0392                     	;# 
   536  0393                     	;# 
   537  0394                     	;# 
   538  0395                     	;# 
   539  0396                     	;# 
   540  0498                     	;# 
   541  0498                     	;# 
   542  0499                     	;# 
   543  049A                     	;# 
   544  049B                     	;# 
   545  049B                     	;# 
   546  049C                     	;# 
   547  049D                     	;# 
   548  049E                     	;# 
   549  049F                     	;# 
   550  0611                     	;# 
   551  0612                     	;# 
   552  0613                     	;# 
   553  0613                     	;# 
   554  0614                     	;# 
   555  0615                     	;# 
   556  0616                     	;# 
   557  0616                     	;# 
   558  0617                     	;# 
   559  0618                     	;# 
   560  0619                     	;# 
   561  0619                     	;# 
   562  061A                     	;# 
   563  061B                     	;# 
   564  061C                     	;# 
   565  061C                     	;# 
   566  0691                     	;# 
   567  0692                     	;# 
   568  0693                     	;# 
   569  0694                     	;# 
   570  0695                     	;# 
   571  0F0F                     	;# 
   572  0F10                     	;# 
   573  0F11                     	;# 
   574  0F12                     	;# 
   575  0F13                     	;# 
   576  0F14                     	;# 
   577  0F15                     	;# 
   578  0F16                     	;# 
   579  0F17                     	;# 
   580  0F18                     	;# 
   581  0F19                     	;# 
   582  0F1A                     	;# 
   583  0F1B                     	;# 
   584  0F1C                     	;# 
   585  0F1D                     	;# 
   586  0F1E                     	;# 
   587  0F1F                     	;# 
   588  0FE3                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0013                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  009F                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  020C                     	;# 
   663  020D                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0498                     	;# 
   671  0498                     	;# 
   672  0499                     	;# 
   673  049A                     	;# 
   674  049B                     	;# 
   675  049B                     	;# 
   676  049C                     	;# 
   677  049D                     	;# 
   678  049E                     	;# 
   679  049F                     	;# 
   680  0611                     	;# 
   681  0612                     	;# 
   682  0613                     	;# 
   683  0613                     	;# 
   684  0614                     	;# 
   685  0615                     	;# 
   686  0616                     	;# 
   687  0616                     	;# 
   688  0617                     	;# 
   689  0618                     	;# 
   690  0619                     	;# 
   691  0619                     	;# 
   692  061A                     	;# 
   693  061B                     	;# 
   694  061C                     	;# 
   695  061C                     	;# 
   696  0691                     	;# 
   697  0692                     	;# 
   698  0693                     	;# 
   699  0694                     	;# 
   700  0695                     	;# 
   701  0F0F                     	;# 
   702  0F10                     	;# 
   703  0F11                     	;# 
   704  0F12                     	;# 
   705  0F13                     	;# 
   706  0F14                     	;# 
   707  0F15                     	;# 
   708  0F16                     	;# 
   709  0F17                     	;# 
   710  0F18                     	;# 
   711  0F19                     	;# 
   712  0F1A                     	;# 
   713  0F1B                     	;# 
   714  0F1C                     	;# 
   715  0F1D                     	;# 
   716  0F1E                     	;# 
   717  0F1F                     	;# 
   718  0FE3                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0011                     	;# 
   746  0012                     	;# 
   747  0013                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0093                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  0116                     	;# 
   778  0117                     	;# 
   779  011D                     	;# 
   780  018C                     	;# 
   781  018D                     	;# 
   782  018E                     	;# 
   783  0191                     	;# 
   784  0191                     	;# 
   785  0192                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0197                     	;# 
   792  020C                     	;# 
   793  020D                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0498                     	;# 
   801  0498                     	;# 
   802  0499                     	;# 
   803  049A                     	;# 
   804  049B                     	;# 
   805  049B                     	;# 
   806  049C                     	;# 
   807  049D                     	;# 
   808  049E                     	;# 
   809  049F                     	;# 
   810  0611                     	;# 
   811  0612                     	;# 
   812  0613                     	;# 
   813  0613                     	;# 
   814  0614                     	;# 
   815  0615                     	;# 
   816  0616                     	;# 
   817  0616                     	;# 
   818  0617                     	;# 
   819  0618                     	;# 
   820  0619                     	;# 
   821  0619                     	;# 
   822  061A                     	;# 
   823  061B                     	;# 
   824  061C                     	;# 
   825  061C                     	;# 
   826  0691                     	;# 
   827  0692                     	;# 
   828  0693                     	;# 
   829  0694                     	;# 
   830  0695                     	;# 
   831  0F0F                     	;# 
   832  0F10                     	;# 
   833  0F11                     	;# 
   834  0F12                     	;# 
   835  0F13                     	;# 
   836  0F14                     	;# 
   837  0F15                     	;# 
   838  0F16                     	;# 
   839  0F17                     	;# 
   840  0F18                     	;# 
   841  0F19                     	;# 
   842  0F1A                     	;# 
   843  0F1B                     	;# 
   844  0F1C                     	;# 
   845  0F1D                     	;# 
   846  0F1E                     	;# 
   847  0F1F                     	;# 
   848  0FE3                     	;# 
   849  0FE4                     	;# 
   850  0FE5                     	;# 
   851  0FE6                     	;# 
   852  0FE7                     	;# 
   853  0FE8                     	;# 
   854  0FE9                     	;# 
   855  0FEA                     	;# 
   856  0FEB                     	;# 
   857  0FED                     	;# 
   858  0FEE                     	;# 
   859  0FEF                     	;# 
   860  0000                     	;# 
   861  0001                     	;# 
   862  0002                     	;# 
   863  0003                     	;# 
   864  0004                     	;# 
   865  0005                     	;# 
   866  0006                     	;# 
   867  0007                     	;# 
   868  0008                     	;# 
   869  0009                     	;# 
   870  000A                     	;# 
   871  000B                     	;# 
   872  000C                     	;# 
   873  000D                     	;# 
   874  000E                     	;# 
   875  0011                     	;# 
   876  0012                     	;# 
   877  0013                     	;# 
   878  0015                     	;# 
   879  0016                     	;# 
   880  0016                     	;# 
   881  0017                     	;# 
   882  0018                     	;# 
   883  0019                     	;# 
   884  001A                     	;# 
   885  001B                     	;# 
   886  001C                     	;# 
   887  008C                     	;# 
   888  008D                     	;# 
   889  008E                     	;# 
   890  0091                     	;# 
   891  0092                     	;# 
   892  0093                     	;# 
   893  0095                     	;# 
   894  0096                     	;# 
   895  0097                     	;# 
   896  0099                     	;# 
   897  009A                     	;# 
   898  009B                     	;# 
   899  009B                     	;# 
   900  009C                     	;# 
   901  009D                     	;# 
   902  009E                     	;# 
   903  009F                     	;# 
   904  010C                     	;# 
   905  010D                     	;# 
   906  010E                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  011D                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  0191                     	;# 
   914  0191                     	;# 
   915  0192                     	;# 
   916  0193                     	;# 
   917  0193                     	;# 
   918  0194                     	;# 
   919  0195                     	;# 
   920  0196                     	;# 
   921  0197                     	;# 
   922  020C                     	;# 
   923  020D                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0498                     	;# 
   931  0498                     	;# 
   932  0499                     	;# 
   933  049A                     	;# 
   934  049B                     	;# 
   935  049B                     	;# 
   936  049C                     	;# 
   937  049D                     	;# 
   938  049E                     	;# 
   939  049F                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0613                     	;# 
   944  0614                     	;# 
   945  0615                     	;# 
   946  0616                     	;# 
   947  0616                     	;# 
   948  0617                     	;# 
   949  0618                     	;# 
   950  0619                     	;# 
   951  0619                     	;# 
   952  061A                     	;# 
   953  061B                     	;# 
   954  061C                     	;# 
   955  061C                     	;# 
   956  0691                     	;# 
   957  0692                     	;# 
   958  0693                     	;# 
   959  0694                     	;# 
   960  0695                     	;# 
   961  0F0F                     	;# 
   962  0F10                     	;# 
   963  0F11                     	;# 
   964  0F12                     	;# 
   965  0F13                     	;# 
   966  0F14                     	;# 
   967  0F15                     	;# 
   968  0F16                     	;# 
   969  0F17                     	;# 
   970  0F18                     	;# 
   971  0F19                     	;# 
   972  0F1A                     	;# 
   973  0F1B                     	;# 
   974  0F1C                     	;# 
   975  0F1D                     	;# 
   976  0F1E                     	;# 
   977  0F1F                     	;# 
   978  0FE3                     	;# 
   979  0FE4                     	;# 
   980  0FE5                     	;# 
   981  0FE6                     	;# 
   982  0FE7                     	;# 
   983  0FE8                     	;# 
   984  0FE9                     	;# 
   985  0FEA                     	;# 
   986  0FEB                     	;# 
   987  0FED                     	;# 
   988  0FEE                     	;# 
   989  0FEF                     	;# 
   990  0000                     	;# 
   991  0001                     	;# 
   992  0002                     	;# 
   993  0003                     	;# 
   994  0004                     	;# 
   995  0005                     	;# 
   996  0006                     	;# 
   997  0007                     	;# 
   998  0008                     	;# 
   999  0009                     	;# 
  1000  000A                     	;# 
  1001  000B                     	;# 
  1002  000C                     	;# 
  1003  000D                     	;# 
  1004  000E                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010E                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018E                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0197                     	;# 
  1052  020C                     	;# 
  1053  020D                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0394                     	;# 
  1058  0395                     	;# 
  1059  0396                     	;# 
  1060  0498                     	;# 
  1061  0498                     	;# 
  1062  0499                     	;# 
  1063  049A                     	;# 
  1064  049B                     	;# 
  1065  049B                     	;# 
  1066  049C                     	;# 
  1067  049D                     	;# 
  1068  049E                     	;# 
  1069  049F                     	;# 
  1070  0611                     	;# 
  1071  0612                     	;# 
  1072  0613                     	;# 
  1073  0613                     	;# 
  1074  0614                     	;# 
  1075  0615                     	;# 
  1076  0616                     	;# 
  1077  0616                     	;# 
  1078  0617                     	;# 
  1079  0618                     	;# 
  1080  0619                     	;# 
  1081  0619                     	;# 
  1082  061A                     	;# 
  1083  061B                     	;# 
  1084  061C                     	;# 
  1085  061C                     	;# 
  1086  0691                     	;# 
  1087  0692                     	;# 
  1088  0693                     	;# 
  1089  0694                     	;# 
  1090  0695                     	;# 
  1091  0F0F                     	;# 
  1092  0F10                     	;# 
  1093  0F11                     	;# 
  1094  0F12                     	;# 
  1095  0F13                     	;# 
  1096  0F14                     	;# 
  1097  0F15                     	;# 
  1098  0F16                     	;# 
  1099  0F17                     	;# 
  1100  0F18                     	;# 
  1101  0F19                     	;# 
  1102  0F1A                     	;# 
  1103  0F1B                     	;# 
  1104  0F1C                     	;# 
  1105  0F1D                     	;# 
  1106  0F1E                     	;# 
  1107  0F1F                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0013                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0093                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0099                     	;# 
  1157  009A                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  011D                     	;# 
  1170  018C                     	;# 
  1171  018D                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0194                     	;# 
  1179  0195                     	;# 
  1180  0196                     	;# 
  1181  0197                     	;# 
  1182  020C                     	;# 
  1183  020D                     	;# 
  1184  0391                     	;# 
  1185  0392                     	;# 
  1186  0393                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  0498                     	;# 
  1191  0498                     	;# 
  1192  0499                     	;# 
  1193  049A                     	;# 
  1194  049B                     	;# 
  1195  049B                     	;# 
  1196  049C                     	;# 
  1197  049D                     	;# 
  1198  049E                     	;# 
  1199  049F                     	;# 
  1200  0611                     	;# 
  1201  0612                     	;# 
  1202  0613                     	;# 
  1203  0613                     	;# 
  1204  0614                     	;# 
  1205  0615                     	;# 
  1206  0616                     	;# 
  1207  0616                     	;# 
  1208  0617                     	;# 
  1209  0618                     	;# 
  1210  0619                     	;# 
  1211  0619                     	;# 
  1212  061A                     	;# 
  1213  061B                     	;# 
  1214  061C                     	;# 
  1215  061C                     	;# 
  1216  0691                     	;# 
  1217  0692                     	;# 
  1218  0693                     	;# 
  1219  0694                     	;# 
  1220  0695                     	;# 
  1221  0F0F                     	;# 
  1222  0F10                     	;# 
  1223  0F11                     	;# 
  1224  0F12                     	;# 
  1225  0F13                     	;# 
  1226  0F14                     	;# 
  1227  0F15                     	;# 
  1228  0F16                     	;# 
  1229  0F17                     	;# 
  1230  0F18                     	;# 
  1231  0F19                     	;# 
  1232  0F1A                     	;# 
  1233  0F1B                     	;# 
  1234  0F1C                     	;# 
  1235  0F1D                     	;# 
  1236  0F1E                     	;# 
  1237  0F1F                     	;# 
  1238  0FE3                     	;# 
  1239  0FE4                     	;# 
  1240  0FE5                     	;# 
  1241  0FE6                     	;# 
  1242  0FE7                     	;# 
  1243  0FE8                     	;# 
  1244  0FE9                     	;# 
  1245  0FEA                     	;# 
  1246  0FEB                     	;# 
  1247  0FED                     	;# 
  1248  0FEE                     	;# 
  1249  0FEF                     	;# 
  1250                           
  1251                           	psect	idataBANK0
  1252  05C6                     __pidataBANK0:
  1253                           
  1254                           ;initializer for _m
  1255  05C6  34E8               	retlw	232
  1256  05C7  3403               	retlw	3
  1257  05C8  3400               	retlw	0
  1258  05C9  3400               	retlw	0
  1259                           
  1260                           ;initializer for main@channel
  1261  05CA  340A               	retlw	10
  1262                           
  1263                           ;initializer for _currentState
  1264  05CB  3401               	retlw	1
  1265                           
  1266                           ;initializer for _upperLimit
  1267  05CC  34FF               	retlw	255
  1268  05CD  3403               	retlw	3
  1269  05CE  3400               	retlw	0
  1270  05CF  3400               	retlw	0
  1271                           
  1272                           	psect	stringtext1
  1273  0617                     __pstringtext1:
  1274  0617                     _fixedPointFactor:
  1275  0617  34E8               	retlw	232
  1276  0618  3403               	retlw	3
  1277  0619  3400               	retlw	0
  1278  061A  3400               	retlw	0
  1279  061B                     __end_of_fixedPointFactor:
  1280                           
  1281                           	psect	nvBANK0
  1282  0065                     __pnvBANK0:
  1283  0065                     _TMR0_InterruptHandler:
  1284  0065                     	ds	2
  1285  0067                     _timer0ReloadVal:
  1286  0067                     	ds	1
  1287  000C                     _PORTAbits	set	12
  1288  000B                     _INTCONbits	set	11
  1289  0015                     _TMR0	set	21
  1290  001C                     _T2CONbits	set	28
  1291  001C                     _T2CON	set	28
  1292  0011                     _PIR1bits	set	17
  1293  001A                     _TMR2	set	26
  1294  001B                     _PR2	set	27
  1295  0095                     _OPTION_REG	set	149
  1296  0095                     _OPTION_REGbits	set	149
  1297  008E                     _TRISC	set	142
  1298  008D                     _TRISB	set	141
  1299  008C                     _TRISA	set	140
  1300  0097                     _WDTCON	set	151
  1301  0099                     _OSCCON	set	153
  1302  009D                     _ADCON0bits	set	157
  1303  009D                     _ADCON0	set	157
  1304  009C                     _ADRESH	set	156
  1305  009B                     _ADRESL	set	155
  1306  009F                     _ADCON2	set	159
  1307  009E                     _ADCON1	set	158
  1308  010D                     _LATBbits	set	269
  1309  010E                     _LATCbits	set	270
  1310  011D                     _APFCON	set	285
  1311  010E                     _LATC	set	270
  1312  010D                     _LATB	set	269
  1313  010C                     _LATA	set	268
  1314  0116                     _BORCON	set	278
  1315  0196                     _PMCON2	set	406
  1316  0193                     _PMDATL	set	403
  1317  0194                     _PMDATH	set	404
  1318  0195                     _PMCON1bits	set	405
  1319  0192                     _PMADRH	set	402
  1320  0191                     _PMADRL	set	401
  1321  018C                     _ANSELA	set	396
  1322  018D                     _ANSELB	set	397
  1323  018E                     _ANSELC	set	398
  1324  020C                     _WPUA	set	524
  1325  020D                     _WPUB	set	525
  1326  0617                     _PWM3DCL	set	1559
  1327  0618                     _PWM3DCH	set	1560
  1328  0619                     _PWM3CON	set	1561
  1329                           
  1330                           	psect	cinit
  1331  000D                     start_initialization:	
  1332                           ; #config settings
  1333                           
  1334  000D                     __initialization:
  1335                           
  1336                           ; Initialize objects allocated to BANK0
  1337  000D  30C6               	movlw	low __pidataBANK0
  1338  000E  0084               	movwf	4
  1339  000F  3085               	movlw	(high __pidataBANK0)| (0+128)
  1340  0010  0085               	movwf	5
  1341  0011  305B               	movlw	low __pdataBANK0
  1342  0012  0086               	movwf	6
  1343  0013  3000               	movlw	high __pdataBANK0
  1344  0014  0087               	movwf	7
  1345  0015  300A               	movlw	10
  1346  0016  25FA               	fcall	init_ram
  1347                           
  1348                           ; Clear objects allocated to BANK0
  1349  0017  3048               	movlw	low __pbssBANK0
  1350  0018  0084               	movwf	4
  1351  0019  3000               	movlw	high __pbssBANK0
  1352  001A  0085               	movwf	5
  1353  001B  3013               	movlw	19
  1354  001C  2600               	fcall	clear_ram0
  1355  001D                     end_of_initialization:	
  1356                           ;End of C runtime variable initialization code
  1357                           
  1358  001D                     __end_of__initialization:
  1359  001D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1360  001E  0020               	movlb	0
  1361  001F  2820               	ljmp	_main	;jump to C main() function
  1362                           
  1363                           	psect	bssBANK0
  1364  0048                     __pbssBANK0:
  1365  0048                     _lowerLimit:
  1366  0048                     	ds	4
  1367  004C                     _adcValuePosition:
  1368  004C                     	ds	4
  1369  0050                     _b:
  1370  0050                     	ds	3
  1371  0053                     _msPressed:
  1372  0053                     	ds	2
  1373  0055                     _msTick:
  1374  0055                     	ds	2
  1375  0057                     _ADC_InterruptHandler:
  1376  0057                     	ds	2
  1377  0059                     _doToggle:
  1378  0059                     	ds	1
  1379  005A                     _doButtonAction:
  1380  005A                     	ds	1
  1381                           
  1382                           	psect	dataBANK0
  1383  005B                     __pdataBANK0:
  1384  005B                     _m:
  1385  005B                     	ds	4
  1386  005F                     main@channel:
  1387  005F                     	ds	1
  1388  0060                     _currentState:
  1389  0060                     	ds	1
  1390  0061                     _upperLimit:
  1391  0061                     	ds	4
  1392                           
  1393                           	psect	inittext
  1394  05FA                     init_ram:
  1395  05FA  00FE               	movwf	126
  1396  05FB                     initloop:
  1397  05FB  0012               	moviw fsr0++
  1398  05FC  001E               	movwi fsr1++
  1399  05FD  0BFE               	decfsz	126,f
  1400  05FE  2DFB               	goto	initloop
  1401  05FF  3400               	retlw	0
  1402                           
  1403                           	psect	clrtext
  1404  0600                     clear_ram0:	
  1405                           ;	Called with FSR0 containing the base address, and
  1406                           ;	WREG with the size to clear
  1407                           
  1408  0600  0064               	clrwdt	;clear the watchdog before getting into this loop
  1409  0601                     clrloop0:
  1410  0601  0180               	clrf	0	;clear RAM location pointed to by FSR
  1411  0602  3101               	addfsr 0,1
  1412  0603  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1413  0604  2E01               	goto	clrloop0	;have we reached the end yet?
  1414  0605  3400               	retlw	0	;all done for this memory range, return
  1415                           
  1416                           	psect	cstackCOMMON
  1417  0070                     __pcstackCOMMON:
  1418  0070                     ?_PIN_MANAGER_Initialize:
  1419  0070                     ??_PIN_MANAGER_Initialize:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0070                     ?_OSCILLATOR_Initialize:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0070                     ??_OSCILLATOR_Initialize:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0070                     ?_WDT_Initialize:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0070                     ??_WDT_Initialize:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0070                     ?_PWM3_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0070                     ??_PWM3_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0070                     ?_TMR2_Initialize:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0070                     ??_TMR2_Initialize:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0070                     ?_TMR0_Initialize:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0070                     ?_TMR0_SetInterruptHandler:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0070                     ?_TMR0_DefaultInterruptHandler:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0070                     ??_TMR0_DefaultInterruptHandler:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0070                     ?_TMR0_CallBack:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0070                     ??_TMR0_CallBack:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0070                     ?_FLASH_EraseBlock:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0070                     ?_setLedsForPositioning:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0070                     ?_ADC_Initialize:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0070                     ??_ADC_Initialize:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0070                     ?_SYSTEM_Initialize:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0070                     ?_TMR2_StartTimer:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0070                     ??_TMR2_StartTimer:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0070                     ?_TMR0_ISR:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0070                     ??_TMR0_ISR:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0070                     ?_INTERRUPT_InterruptManager:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0070                     ??_INTERRUPT_InterruptManager:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0070                     ?_readFlash:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0070                     ?_writeFlash:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0070                     ?_timer0CallBack:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ??_timer0CallBack:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ?_setState:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_main:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_ADC_GetConversion:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0070                     ?_FLASH_ReadWord:	
  1519                           ; 2 bytes @ 0x0
  1520                           
  1521  0070                     ?___tmul:	
  1522                           ; 2 bytes @ 0x0
  1523                           
  1524  0070                     ?___lmul:	
  1525                           ; 3 bytes @ 0x0
  1526                           
  1527  0070                     ?___lldiv:	
  1528                           ; 4 bytes @ 0x0
  1529                           
  1530  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1531                           ; 4 bytes @ 0x0
  1532                           
  1533  0070                     FLASH_ReadWord@flashAddr:	
  1534                           ; 2 bytes @ 0x0
  1535                           
  1536  0070                     FLASH_EraseBlock@startAddr:	
  1537                           ; 2 bytes @ 0x0
  1538                           
  1539  0070                     ___tmul@multiplier:	
  1540                           ; 2 bytes @ 0x0
  1541                           
  1542  0070                     setLedsForPositioning@adcValue:	
  1543                           ; 3 bytes @ 0x0
  1544                           
  1545  0070                     ___lmul@multiplier:	
  1546                           ; 4 bytes @ 0x0
  1547                           
  1548  0070                     ___lldiv@divisor:	
  1549                           ; 4 bytes @ 0x0
  1550                           
  1551                           
  1552                           ; 4 bytes @ 0x0
  1553  0070                     	ds	2
  1554  0072                     ??_TMR0_Initialize:
  1555  0072                     ??_TMR0_SetInterruptHandler:	
  1556                           ; 1 bytes @ 0x2
  1557                           
  1558  0072                     ??_FLASH_EraseBlock:	
  1559                           ; 1 bytes @ 0x2
  1560                           
  1561  0072                     ??_ADC_GetConversion:	
  1562                           ; 1 bytes @ 0x2
  1563                           
  1564  0072                     ??_FLASH_ReadWord:	
  1565                           ; 1 bytes @ 0x2
  1566                           
  1567  0072                     FLASH_ReadWord@GIEBitValue:	
  1568                           ; 1 bytes @ 0x2
  1569                           
  1570  0072                     FLASH_EraseBlock@GIEBitValue:	
  1571                           ; 1 bytes @ 0x2
  1572                           
  1573                           
  1574                           ; 1 bytes @ 0x2
  1575  0072                     	ds	1
  1576  0073                     ?_FLASH_WriteBlock:
  1577  0073                     ??_SYSTEM_Initialize:	
  1578                           ; 1 bytes @ 0x3
  1579                           
  1580  0073                     ??_readFlash:	
  1581                           ; 1 bytes @ 0x3
  1582                           
  1583  0073                     ADC_GetConversion@channel:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0073                     FLASH_WriteBlock@writeAddr:	
  1587                           ; 1 bytes @ 0x3
  1588                           
  1589  0073                     ___tmul@multiplicand:	
  1590                           ; 2 bytes @ 0x3
  1591                           
  1592                           
  1593                           ; 3 bytes @ 0x3
  1594  0073                     	ds	1
  1595  0074                     ??_setLedsForPositioning:
  1596  0074                     ?_PWM3_LoadDutyValue:	
  1597                           ; 1 bytes @ 0x4
  1598                           
  1599  0074                     PWM3_LoadDutyValue@dutyValue:	
  1600                           ; 1 bytes @ 0x4
  1601                           
  1602  0074                     ___lmul@multiplicand:	
  1603                           ; 2 bytes @ 0x4
  1604                           
  1605  0074                     ___lldiv@dividend:	
  1606                           ; 4 bytes @ 0x4
  1607                           
  1608                           
  1609                           ; 4 bytes @ 0x4
  1610  0074                     	ds	1
  1611  0075                     FLASH_WriteBlock@flashWordArray:
  1612                           
  1613                           ; 1 bytes @ 0x5
  1614  0075                     	ds	1
  1615  0076                     ??_FLASH_WriteBlock:
  1616  0076                     ??_PWM3_LoadDutyValue:	
  1617                           ; 1 bytes @ 0x6
  1618                           
  1619  0076                     ??___tmul:	
  1620                           ; 1 bytes @ 0x6
  1621                           
  1622  0076                     ___tmul@product:	
  1623                           ; 1 bytes @ 0x6
  1624                           
  1625                           
  1626                           ; 3 bytes @ 0x6
  1627  0076                     	ds	2
  1628  0078                     ??___lmul:
  1629  0078                     ??___lldiv:	
  1630                           ; 1 bytes @ 0x8
  1631                           
  1632  0078                     ___lmul@product:	
  1633                           ; 1 bytes @ 0x8
  1634                           
  1635                           
  1636                           ; 4 bytes @ 0x8
  1637  0078                     	ds	1
  1638  0079                     FLASH_WriteBlock@blockStartAddr:
  1639  0079                     ___lldiv@quotient:	
  1640                           ; 2 bytes @ 0x9
  1641                           
  1642                           
  1643                           ; 4 bytes @ 0x9
  1644  0079                     	ds	2
  1645  007B                     FLASH_WriteBlock@GIEBitValue:
  1646                           
  1647                           ; 1 bytes @ 0xB
  1648  007B                     	ds	1
  1649  007C                     ??___aldiv:
  1650  007C                     FLASH_WriteBlock@i:	
  1651                           ; 1 bytes @ 0xC
  1652                           
  1653                           
  1654                           ; 1 bytes @ 0xC
  1655  007C                     	ds	1
  1656  007D                     ??_writeFlash:
  1657  007D                     ___lldiv@counter:	
  1658                           ; 1 bytes @ 0xD
  1659                           
  1660                           
  1661                           ; 1 bytes @ 0xD
  1662  007D                     	ds	1
  1663                           
  1664                           	psect	cstackBANK0
  1665  0020                     __pcstackBANK0:
  1666  0020                     ??_setState:
  1667  0020                     ?___aldiv:	
  1668                           ; 1 bytes @ 0x0
  1669                           
  1670  0020                     ___aldiv@divisor:	
  1671                           ; 4 bytes @ 0x0
  1672                           
  1673  0020                     writeFlash@wrBlockData:	
  1674                           ; 4 bytes @ 0x0
  1675                           
  1676                           
  1677                           ; 32 bytes @ 0x0
  1678  0020                     	ds	4
  1679  0024                     setState@newState:
  1680  0024                     ___aldiv@dividend:	
  1681                           ; 1 bytes @ 0x4
  1682                           
  1683                           
  1684                           ; 4 bytes @ 0x4
  1685  0024                     	ds	4
  1686  0028                     ___aldiv@counter:
  1687                           
  1688                           ; 1 bytes @ 0x8
  1689  0028                     	ds	1
  1690  0029                     ___aldiv@sign:
  1691                           
  1692                           ; 1 bytes @ 0x9
  1693  0029                     	ds	1
  1694  002A                     ___aldiv@quotient:
  1695                           
  1696                           ; 4 bytes @ 0xA
  1697  002A                     	ds	22
  1698  0040                     ??_main:
  1699                           
  1700                           ; 1 bytes @ 0x20
  1701  0040                     	ds	8
  1702                           
  1703                           	psect	maintext
  1704  0020                     __pmaintext:	
  1705 ;;
  1706 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1707 ;;
  1708 ;; *************** function _main *****************
  1709 ;; Defined at:
  1710 ;;		line 190 in file "main.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : B1F/0
  1721 ;;		On exit  : 1F/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMMON   BANK0   BANK1
  1724 ;;      Params:         0       0       0
  1725 ;;      Locals:         0       0       0
  1726 ;;      Temps:          0       8       0
  1727 ;;      Totals:         0       8       0
  1728 ;;Total ram usage:        8 bytes
  1729 ;; Hardware stack levels required when called:    7
  1730 ;; This function calls:
  1731 ;;		_ADC_GetConversion
  1732 ;;		_PWM3_LoadDutyValue
  1733 ;;		_SYSTEM_Initialize
  1734 ;;		_TMR0_SetInterruptHandler
  1735 ;;		_TMR2_StartTimer
  1736 ;;		___aldiv
  1737 ;;		___lmul
  1738 ;;		_setLedsForPositioning
  1739 ;;		_setState
  1740 ;;		_writeFlash
  1741 ;; This function is called by:
  1742 ;;		Startup code after reset
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           
  1747                           ;psect for function _main
  1748  0020                     _main:
  1749                           
  1750                           ;main.c: 193:     SYSTEM_Initialize();
  1751                           
  1752                           ;incstack = 0
  1753                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1754  0020  25DA               	fcall	_SYSTEM_Initialize
  1755                           
  1756                           ;main.c: 196:     (INTCONbits.GIE = 1);
  1757  0021  178B               	bsf	11,7	;volatile
  1758                           
  1759                           ;main.c: 198:     setState(STATE_NORMAL);
  1760  0022  3001               	movlw	1
  1761  0023  232B               	fcall	_setState
  1762                           
  1763                           ;main.c: 201:     TMR0_SetInterruptHandler(timer0CallBack);
  1764  0024  30B6               	movlw	low _timer0CallBack
  1765  0025  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1766  0026  3005               	movlw	high _timer0CallBack
  1767  0027  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1768  0028  2612               	fcall	_TMR0_SetInterruptHandler
  1769                           
  1770                           ;main.c: 202:     TMR2_StartTimer();
  1771  0029  261F               	fcall	_TMR2_StartTimer
  1772  002A                     l1915:
  1773                           
  1774                           ;main.c: 206:     {;main.c: 207:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 210:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1775  002A  3003               	movlw	3
  1776  002B  0020               	movlb	0	; select bank0
  1777  002C  065F               	xorwf	main@channel,w
  1778  002D  1903               	btfsc	3,2
  1779  002E  2831               	goto	l1919
  1780  002F  3003               	movlw	3
  1781  0030  2832               	goto	L1
  1782  0031                     l1919:
  1783  0031  300A               	movlw	10
  1784  0032                     L1:
  1785  0032  00C0               	movwf	??_main
  1786  0033  0840               	movf	??_main,w
  1787  0034  00DF               	movwf	main@channel
  1788                           
  1789                           ;main.c: 215:         if(channel == channelRudder)
  1790  0035  3003               	movlw	3
  1791  0036  065F               	xorwf	main@channel,w
  1792  0037  1D03               	btfss	3,2
  1793  0038  2843               	goto	l1925
  1794                           
  1795                           ;main.c: 216:         {;main.c: 217:             adcValuePosition = ADC_GetConversion(ch
      +                          annel);
  1796  0039  085F               	movf	main@channel,w
  1797  003A  2574               	fcall	_ADC_GetConversion
  1798  003B  0870               	movf	?_ADC_GetConversion,w
  1799  003C  0020               	movlb	0	; select bank0
  1800  003D  00CC               	movwf	_adcValuePosition
  1801  003E  0871               	movf	?_ADC_GetConversion+1,w
  1802  003F  00CD               	movwf	_adcValuePosition+1
  1803  0040  01CE               	clrf	_adcValuePosition+2
  1804  0041  01CF               	clrf	_adcValuePosition+3
  1805                           
  1806                           ;main.c: 218:         }
  1807  0042  284A               	goto	l1927
  1808  0043                     l1925:
  1809                           
  1810                           ;main.c: 220:         {;main.c: 222:             PWM3_LoadDutyValue(ADC_GetConversion(ch
      +                          annel));
  1811  0043  085F               	movf	main@channel,w
  1812  0044  2574               	fcall	_ADC_GetConversion
  1813  0045  0871               	movf	?_ADC_GetConversion+1,w
  1814  0046  00F5               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1815  0047  0870               	movf	?_ADC_GetConversion,w
  1816  0048  00F4               	movwf	PWM3_LoadDutyValue@dutyValue
  1817  0049  258C               	fcall	_PWM3_LoadDutyValue
  1818  004A                     l1927:
  1819                           
  1820                           ;main.c: 227:         if(!PORTAbits.RA5 && !doButtonAction)
  1821  004A  0020               	movlb	0	; select bank0
  1822  004B  1A8C               	btfsc	12,5	;volatile
  1823  004C  2862               	goto	l1937
  1824  004D  085A               	movf	_doButtonAction,w	;volatile
  1825  004E  1D03               	btfss	3,2
  1826  004F  2862               	goto	l1937
  1827                           
  1828                           ;main.c: 228:         {;main.c: 229:             msPressed++;
  1829  0050  3001               	movlw	1
  1830  0051  07D3               	addwf	_msPressed,f	;volatile
  1831  0052  3000               	movlw	0
  1832  0053  3DD4               	addwfc	_msPressed+1,f	;volatile
  1833                           
  1834                           ;main.c: 231:             if(msPressed > 3000)
  1835  0054  300B               	movlw	11
  1836  0055  0254               	subwf	_msPressed+1,w	;volatile
  1837  0056  30B9               	movlw	185
  1838  0057  1903               	skipnz
  1839  0058  0253               	subwf	_msPressed,w	;volatile
  1840  0059  1C03               	skipc
  1841  005A  285F               	goto	l1935
  1842                           
  1843                           ;main.c: 232:             {;main.c: 233:                 doButtonAction = 1;
  1844  005B  3001               	movlw	1
  1845  005C  00C0               	movwf	??_main
  1846  005D  0840               	movf	??_main,w
  1847  005E  00DA               	movwf	_doButtonAction	;volatile
  1848  005F                     l1935:
  1849  005F  0022               	movlb	2	; select bank2
  1850  0060  168E               	bsf	14,5	;volatile
  1851  0061  2866               	goto	l1941
  1852  0062                     l1937:
  1853                           
  1854                           ;main.c: 238:         {;main.c: 239:             msPressed = 0;
  1855  0062  01D3               	clrf	_msPressed	;volatile
  1856  0063  01D4               	clrf	_msPressed+1	;volatile
  1857  0064  0022               	movlb	2	; select bank2
  1858  0065  128E               	bcf	14,5	;volatile
  1859  0066                     l1941:
  1860                           
  1861                           ;main.c: 245:         if(doButtonAction)
  1862  0066  0020               	movlb	0	; select bank0
  1863  0067  085A               	movf	_doButtonAction,w	;volatile
  1864  0068  1903               	btfsc	3,2
  1865  0069  295E               	goto	l1981
  1866  006A                     l348:	
  1867                           ;main.c: 249:             {;main.c: 251:             }
  1868                           
  1869                           
  1870                           ;main.c: 248:             while(!PORTAbits.RA5)
  1871  006A  1A8C               	btfsc	12,5	;volatile
  1872  006B  2887               	goto	l1959
  1873  006C  286A               	goto	l348
  1874  006D                     l1945:
  1875                           
  1876                           ;main.c: 258:                     setState(STATE_TEACH_LEFT);
  1877  006D  3002               	movlw	2
  1878  006E  232B               	fcall	_setState
  1879                           
  1880                           ;main.c: 259:                     break;
  1881  006F  289A               	goto	l1961
  1882  0070                     l1947:
  1883                           
  1884                           ;main.c: 262:                     lowerLimit = adcValuePosition;
  1885  0070  084F               	movf	_adcValuePosition+3,w
  1886  0071  00CB               	movwf	_lowerLimit+3
  1887  0072  084E               	movf	_adcValuePosition+2,w
  1888  0073  00CA               	movwf	_lowerLimit+2
  1889  0074  084D               	movf	_adcValuePosition+1,w
  1890  0075  00C9               	movwf	_lowerLimit+1
  1891  0076  084C               	movf	_adcValuePosition,w
  1892  0077  00C8               	movwf	_lowerLimit
  1893                           
  1894                           ;main.c: 264:                     setState(STATE_TEACH_RIGHT);
  1895  0078  3003               	movlw	3
  1896  0079  232B               	fcall	_setState
  1897                           
  1898                           ;main.c: 265:                     break;
  1899  007A  289A               	goto	l1961
  1900  007B                     l1951:
  1901                           
  1902                           ;main.c: 268:                 {;main.c: 269:                     upperLimit = adcValuePo
      +                          sition;
  1903  007B  084F               	movf	_adcValuePosition+3,w
  1904  007C  00E4               	movwf	_upperLimit+3
  1905  007D  084E               	movf	_adcValuePosition+2,w
  1906  007E  00E3               	movwf	_upperLimit+2
  1907  007F  084D               	movf	_adcValuePosition+1,w
  1908  0080  00E2               	movwf	_upperLimit+1
  1909  0081  084C               	movf	_adcValuePosition,w
  1910  0082  00E1               	movwf	_upperLimit
  1911                           
  1912                           ;main.c: 271:                     writeFlash();
  1913  0083  24D7               	fcall	_writeFlash
  1914                           
  1915                           ;main.c: 272:                     setState(STATE_NORMAL);
  1916  0084  3001               	movlw	1
  1917  0085  232B               	fcall	_setState
  1918                           
  1919                           ;main.c: 273:                     break;
  1920  0086  289A               	goto	l1961
  1921  0087                     l1959:
  1922  0087  0860               	movf	_currentState,w
  1923  0088  00C0               	movwf	??_main
  1924  0089  01C1               	clrf	??_main+1
  1925                           
  1926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1927                           ; Switch size 1, requested type "simple"
  1928                           ; Number of cases is 1, Range of values is 0 to 0
  1929                           ; switch strategies available:
  1930                           ; Name         Instructions Cycles
  1931                           ; simple_byte            4     3 (average)
  1932                           ; direct_byte            8     6 (fixed)
  1933                           ; jumptable            260     6 (fixed)
  1934                           ;	Chosen strategy is simple_byte
  1935  008A  0841               	movf	??_main+1,w
  1936  008B  3A00               	xorlw	0	; case 0
  1937  008C  1903               	skipnz
  1938  008D  288F               	goto	l2075
  1939  008E  289A               	goto	l1961
  1940  008F                     l2075:
  1941                           
  1942                           ; Switch size 1, requested type "simple"
  1943                           ; Number of cases is 3, Range of values is 1 to 3
  1944                           ; switch strategies available:
  1945                           ; Name         Instructions Cycles
  1946                           ; simple_byte           10     6 (average)
  1947                           ; direct_byte           15     9 (fixed)
  1948                           ; jumptable            263     9 (fixed)
  1949                           ;	Chosen strategy is simple_byte
  1950  008F  0840               	movf	??_main,w
  1951  0090  3A01               	xorlw	1	; case 1
  1952  0091  1903               	skipnz
  1953  0092  286D               	goto	l1945
  1954  0093  3A03               	xorlw	3	; case 2
  1955  0094  1903               	skipnz
  1956  0095  2870               	goto	l1947
  1957  0096  3A01               	xorlw	1	; case 3
  1958  0097  1903               	skipnz
  1959  0098  287B               	goto	l1951
  1960  0099  289A               	goto	l1961
  1961  009A                     l1961:
  1962                           
  1963                           ;main.c: 277:             doButtonAction = 0;
  1964  009A  01DA               	clrf	_doButtonAction	;volatile
  1965  009B  295E               	goto	l1981
  1966  009C                     l1963:
  1967                           
  1968                           ;main.c: 285:                 if(channel == channelBrightness)
  1969  009C  300A               	movlw	10
  1970  009D  065F               	xorwf	main@channel,w
  1971  009E  1D03               	btfss	3,2
  1972  009F  282A               	goto	l1915
  1973                           
  1974                           ;main.c: 286:                 {;main.c: 287:                     adcValuePosition = (adc
      +                          ValuePosition*m-b)/fixedPointFactor;
  1975  00A0  3000               	movlw	0
  1976  00A1  00A3               	movwf	___aldiv@divisor+3
  1977  00A2  3000               	movlw	0
  1978  00A3  00A2               	movwf	___aldiv@divisor+2
  1979  00A4  3003               	movlw	3
  1980  00A5  00A1               	movwf	___aldiv@divisor+1
  1981  00A6  30E8               	movlw	232
  1982  00A7  00A0               	movwf	___aldiv@divisor
  1983  00A8  0850               	movf	_b,w
  1984  00A9  00C0               	movwf	??_main
  1985  00AA  0851               	movf	_b+1,w
  1986  00AB  00C1               	movwf	??_main+1
  1987  00AC  0852               	movf	_b+2,w
  1988  00AD  00C2               	movwf	??_main+2
  1989  00AE  3000               	movlw	0
  1990  00AF  1BC2               	btfsc	??_main+2,7
  1991  00B0  30FF               	movlw	255
  1992  00B1  00C3               	movwf	??_main+3
  1993  00B2  084F               	movf	_adcValuePosition+3,w
  1994  00B3  00F3               	movwf	___lmul@multiplier+3
  1995  00B4  084E               	movf	_adcValuePosition+2,w
  1996  00B5  00F2               	movwf	___lmul@multiplier+2
  1997  00B6  084D               	movf	_adcValuePosition+1,w
  1998  00B7  00F1               	movwf	___lmul@multiplier+1
  1999  00B8  084C               	movf	_adcValuePosition,w
  2000  00B9  00F0               	movwf	___lmul@multiplier
  2001  00BA  085E               	movf	_m+3,w
  2002  00BB  00F7               	movwf	___lmul@multiplicand+3
  2003  00BC  085D               	movf	_m+2,w
  2004  00BD  00F6               	movwf	___lmul@multiplicand+2
  2005  00BE  085C               	movf	_m+1,w
  2006  00BF  00F5               	movwf	___lmul@multiplicand+1
  2007  00C0  085B               	movf	_m,w
  2008  00C1  00F4               	movwf	___lmul@multiplicand
  2009  00C2  24A8               	fcall	___lmul
  2010  00C3  0870               	movf	?___lmul,w
  2011  00C4  00C4               	movwf	??_main+4
  2012  00C5  0871               	movf	?___lmul+1,w
  2013  00C6  00C5               	movwf	??_main+5
  2014  00C7  0872               	movf	?___lmul+2,w
  2015  00C8  00C6               	movwf	??_main+6
  2016  00C9  0873               	movf	?___lmul+3,w
  2017  00CA  00C7               	movwf	??_main+7
  2018  00CB  0840               	movf	??_main,w
  2019  00CC  02C4               	subwf	??_main+4,f
  2020  00CD  0841               	movf	??_main+1,w
  2021  00CE  3BC5               	subwfb	??_main+5,f
  2022  00CF  0842               	movf	??_main+2,w
  2023  00D0  3BC6               	subwfb	??_main+6,f
  2024  00D1  0843               	movf	??_main+3,w
  2025  00D2  3BC7               	subwfb	??_main+7,f
  2026  00D3  0847               	movf	??_main+7,w
  2027  00D4  00A7               	movwf	___aldiv@dividend+3
  2028  00D5  0846               	movf	??_main+6,w
  2029  00D6  00A6               	movwf	___aldiv@dividend+2
  2030  00D7  0845               	movf	??_main+5,w
  2031  00D8  00A5               	movwf	___aldiv@dividend+1
  2032  00D9  0844               	movf	??_main+4,w
  2033  00DA  00A4               	movwf	___aldiv@dividend
  2034  00DB  22AA               	fcall	___aldiv
  2035  00DC  0823               	movf	?___aldiv+3,w
  2036  00DD  00CF               	movwf	_adcValuePosition+3
  2037  00DE  0822               	movf	?___aldiv+2,w
  2038  00DF  00CE               	movwf	_adcValuePosition+2
  2039  00E0  0821               	movf	?___aldiv+1,w
  2040  00E1  00CD               	movwf	_adcValuePosition+1
  2041  00E2  0820               	movf	?___aldiv,w
  2042  00E3  00CC               	movwf	_adcValuePosition
  2043                           
  2044                           ;main.c: 288:                     setLedsForPositioning(adcValuePosition);
  2045  00E4  084F               	movf	_adcValuePosition+3,w
  2046  00E5  00F3               	movwf	setLedsForPositioning@adcValue+3
  2047  00E6  084E               	movf	_adcValuePosition+2,w
  2048  00E7  00F2               	movwf	setLedsForPositioning@adcValue+2
  2049  00E8  084D               	movf	_adcValuePosition+1,w
  2050  00E9  00F1               	movwf	setLedsForPositioning@adcValue+1
  2051  00EA  084C               	movf	_adcValuePosition,w
  2052  00EB  00F0               	movwf	setLedsForPositioning@adcValue
  2053  00EC  2172               	fcall	_setLedsForPositioning
  2054  00ED  282A               	goto	l1915
  2055  00EE                     l1967:
  2056                           
  2057                           ;main.c: 293:                 if(doToggle)
  2058  00EE  0859               	movf	_doToggle,w
  2059  00EF  1903               	btfsc	3,2
  2060  00F0  282A               	goto	l1915
  2061  00F1  1003               	clrc
  2062  00F2  0022               	movlb	2	; select bank2
  2063  00F3  1C0E               	btfss	14,0	;volatile
  2064  00F4  1403               	setc
  2065  00F5  1C03               	btfss	3,0
  2066  00F6  28FA               	goto	u1500
  2067  00F7  0022               	movlb	2	; select bank2
  2068  00F8  140E               	bsf	14,0	;volatile
  2069  00F9  28FC               	goto	l364
  2070  00FA                     u1500:
  2071  00FA  0022               	movlb	2	; select bank2
  2072  00FB  100E               	bcf	14,0	;volatile
  2073  00FC                     l364:	
  2074                           ;main.c: 296:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2075                           
  2076  00FC  1003               	clrc
  2077  00FD  1C8E               	btfss	14,1	;volatile
  2078  00FE  1403               	setc
  2079  00FF  1C03               	btfss	3,0
  2080  0100  2904               	goto	u1520
  2081  0101  0022               	movlb	2	; select bank2
  2082  0102  148E               	bsf	14,1	;volatile
  2083  0103  2906               	goto	l366
  2084  0104                     u1520:
  2085  0104  0022               	movlb	2	; select bank2
  2086  0105  108E               	bcf	14,1	;volatile
  2087  0106                     l366:	
  2088                           ;main.c: 297:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2089                           
  2090  0106  1003               	clrc
  2091  0107  1D0E               	btfss	14,2	;volatile
  2092  0108  1403               	setc
  2093  0109  1C03               	btfss	3,0
  2094  010A  290E               	goto	u1540
  2095  010B  0022               	movlb	2	; select bank2
  2096  010C  150E               	bsf	14,2	;volatile
  2097  010D  2910               	goto	l368
  2098  010E                     u1540:
  2099  010E  0022               	movlb	2	; select bank2
  2100  010F  110E               	bcf	14,2	;volatile
  2101  0110                     l368:	
  2102                           ;main.c: 298:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2103                           
  2104  0110  1003               	clrc
  2105  0111  1D8E               	btfss	14,3	;volatile
  2106  0112  1403               	setc
  2107  0113  1C03               	btfss	3,0
  2108  0114  2918               	goto	u1560
  2109  0115  0022               	movlb	2	; select bank2
  2110  0116  158E               	bsf	14,3	;volatile
  2111  0117  291A               	goto	l370
  2112  0118                     u1560:
  2113  0118  0022               	movlb	2	; select bank2
  2114  0119  118E               	bcf	14,3	;volatile
  2115  011A                     l370:	
  2116                           ;main.c: 299:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2117                           
  2118  011A  1003               	clrc
  2119  011B  1E0E               	btfss	14,4	;volatile
  2120  011C  1403               	setc
  2121  011D  1C03               	btfss	3,0
  2122  011E  2922               	goto	u1580
  2123  011F  0022               	movlb	2	; select bank2
  2124  0120  160E               	bsf	14,4	;volatile
  2125  0121  2924               	goto	l1971
  2126  0122                     u1580:
  2127  0122  0022               	movlb	2	; select bank2
  2128  0123  120E               	bcf	14,4	;volatile
  2129  0124                     l1971:
  2130                           
  2131                           ;main.c: 300:                     doToggle = 0;
  2132  0124  0020               	movlb	0	; select bank0
  2133  0125  01D9               	clrf	_doToggle
  2134  0126  282A               	goto	l1915
  2135  0127                     l1973:
  2136                           
  2137                           ;main.c: 307:                 if(doToggle)
  2138  0127  0859               	movf	_doToggle,w
  2139  0128  1903               	btfsc	3,2
  2140  0129  282A               	goto	l1915
  2141  012A  1003               	clrc
  2142  012B  0022               	movlb	2	; select bank2
  2143  012C  1F0E               	btfss	14,6	;volatile
  2144  012D  1403               	setc
  2145  012E  1C03               	btfss	3,0
  2146  012F  2933               	goto	u1610
  2147  0130  0022               	movlb	2	; select bank2
  2148  0131  170E               	bsf	14,6	;volatile
  2149  0132  2935               	goto	l376
  2150  0133                     u1610:
  2151  0133  0022               	movlb	2	; select bank2
  2152  0134  130E               	bcf	14,6	;volatile
  2153  0135                     l376:	
  2154                           ;main.c: 310:                     do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2155                           
  2156  0135  1003               	clrc
  2157  0136  1F8E               	btfss	14,7	;volatile
  2158  0137  1403               	setc
  2159  0138  1C03               	btfss	3,0
  2160  0139  293D               	goto	u1630
  2161  013A  0022               	movlb	2	; select bank2
  2162  013B  178E               	bsf	14,7	;volatile
  2163  013C  293F               	goto	l378
  2164  013D                     u1630:
  2165  013D  0022               	movlb	2	; select bank2
  2166  013E  138E               	bcf	14,7	;volatile
  2167  013F                     l378:	
  2168                           ;main.c: 311:                     do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  2169                           
  2170  013F  1003               	clrc
  2171  0140  1E8D               	btfss	13,5	;volatile
  2172  0141  1403               	setc
  2173  0142  1C03               	btfss	3,0
  2174  0143  2947               	goto	u1650
  2175  0144  0022               	movlb	2	; select bank2
  2176  0145  168D               	bsf	13,5	;volatile
  2177  0146  2949               	goto	l380
  2178  0147                     u1650:
  2179  0147  0022               	movlb	2	; select bank2
  2180  0148  128D               	bcf	13,5	;volatile
  2181  0149                     l380:	
  2182                           ;main.c: 312:                     do { LATBbits.LATB6 = ~LATBbits.LATB6; } while(0);
  2183                           
  2184  0149  1003               	clrc
  2185  014A  1F0D               	btfss	13,6	;volatile
  2186  014B  1403               	setc
  2187  014C  1C03               	btfss	3,0
  2188  014D  2951               	goto	u1670
  2189  014E  0022               	movlb	2	; select bank2
  2190  014F  170D               	bsf	13,6	;volatile
  2191  0150  2953               	goto	l382
  2192  0151                     u1670:
  2193  0151  0022               	movlb	2	; select bank2
  2194  0152  130D               	bcf	13,6	;volatile
  2195  0153                     l382:	
  2196                           ;main.c: 313:                     do { LATBbits.LATB7 = ~LATBbits.LATB7; } while(0);
  2197                           
  2198  0153  1003               	clrc
  2199  0154  1F8D               	btfss	13,7	;volatile
  2200  0155  1403               	setc
  2201  0156  1C03               	btfss	3,0
  2202  0157  295B               	goto	u1690
  2203  0158  0022               	movlb	2	; select bank2
  2204  0159  178D               	bsf	13,7	;volatile
  2205  015A  2924               	goto	l1971
  2206  015B                     u1690:
  2207  015B  0022               	movlb	2	; select bank2
  2208  015C  138D               	bcf	13,7	;volatile
  2209  015D  2924               	goto	l1971
  2210  015E                     l1981:
  2211  015E  0860               	movf	_currentState,w
  2212  015F  00C0               	movwf	??_main
  2213  0160  01C1               	clrf	??_main+1
  2214                           
  2215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2216                           ; Switch size 1, requested type "simple"
  2217                           ; Number of cases is 1, Range of values is 0 to 0
  2218                           ; switch strategies available:
  2219                           ; Name         Instructions Cycles
  2220                           ; simple_byte            4     3 (average)
  2221                           ; direct_byte            8     6 (fixed)
  2222                           ; jumptable            260     6 (fixed)
  2223                           ;	Chosen strategy is simple_byte
  2224  0161  0841               	movf	??_main+1,w
  2225  0162  3A00               	xorlw	0	; case 0
  2226  0163  1903               	skipnz
  2227  0164  2966               	goto	l2077
  2228  0165  282A               	goto	l1915
  2229  0166                     l2077:
  2230                           
  2231                           ; Switch size 1, requested type "simple"
  2232                           ; Number of cases is 3, Range of values is 1 to 3
  2233                           ; switch strategies available:
  2234                           ; Name         Instructions Cycles
  2235                           ; simple_byte           10     6 (average)
  2236                           ; direct_byte           15     9 (fixed)
  2237                           ; jumptable            263     9 (fixed)
  2238                           ;	Chosen strategy is simple_byte
  2239  0166  0840               	movf	??_main,w
  2240  0167  3A01               	xorlw	1	; case 1
  2241  0168  1903               	skipnz
  2242  0169  289C               	goto	l1963
  2243  016A  3A03               	xorlw	3	; case 2
  2244  016B  1903               	skipnz
  2245  016C  28EE               	goto	l1967
  2246  016D  3A01               	xorlw	1	; case 3
  2247  016E  1903               	skipnz
  2248  016F  2927               	goto	l1973
  2249  0170  282A               	goto	l1915
  2250  0171  280C               	ljmp	start
  2251  0172                     __end_of_main:
  2252                           
  2253                           	psect	text1
  2254  04D7                     __ptext1:	
  2255 ;; *************** function _writeFlash *****************
  2256 ;; Defined at:
  2257 ;;		line 95 in file "main.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;		None
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  wrBlockData    32    0[BANK0 ] unsigned short [16]
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 1F/0
  2268 ;;		On exit  : 1C/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1
  2271 ;;      Params:         0       0       0
  2272 ;;      Locals:         0      32       0
  2273 ;;      Temps:          1       0       0
  2274 ;;      Totals:         1      32       0
  2275 ;;Total ram usage:       33 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    6
  2278 ;; This function calls:
  2279 ;;		_FLASH_WriteBlock
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           
  2286                           ;psect for function _writeFlash
  2287  04D7                     _writeFlash:
  2288                           
  2289                           ;main.c: 100:     uint16_t wrBlockData[16];;main.c: 102:     upperLimit = 0x11223344;
  2290                           
  2291                           ;incstack = 0
  2292                           ; Regs used in _writeFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2293  04D7  3011               	movlw	17
  2294  04D8  00E4               	movwf	_upperLimit+3
  2295  04D9  3022               	movlw	34
  2296  04DA  00E3               	movwf	_upperLimit+2
  2297  04DB  3033               	movlw	51
  2298  04DC  00E2               	movwf	_upperLimit+1
  2299  04DD  3044               	movlw	68
  2300  04DE  00E1               	movwf	_upperLimit
  2301                           
  2302                           ;main.c: 103:     lowerLimit = 0x11DDEEFF;
  2303  04DF  3011               	movlw	17
  2304  04E0  00CB               	movwf	_lowerLimit+3
  2305  04E1  30DD               	movlw	221
  2306  04E2  00CA               	movwf	_lowerLimit+2
  2307  04E3  30EE               	movlw	238
  2308  04E4  00C9               	movwf	_lowerLimit+1
  2309  04E5  30FF               	movlw	255
  2310  04E6  00C8               	movwf	_lowerLimit
  2311                           
  2312                           ;main.c: 106:     wrBlockData[16 -1] = (uint16_t)(upperLimit);
  2313  04E7  0862               	movf	_upperLimit+1,w
  2314  04E8  00BF               	movwf	writeFlash@wrBlockData+31
  2315  04E9  0861               	movf	_upperLimit,w
  2316  04EA  00BE               	movwf	writeFlash@wrBlockData+30
  2317                           
  2318                           ;main.c: 107:     wrBlockData[16 -2] = (uint16_t)(upperLimit >> 16);
  2319  04EB  0864               	movf	_upperLimit+3,w
  2320  04EC  00BD               	movwf	writeFlash@wrBlockData+29
  2321  04ED  0863               	movf	_upperLimit+2,w
  2322  04EE  00BC               	movwf	writeFlash@wrBlockData+28
  2323                           
  2324                           ;main.c: 108:     wrBlockData[16 -3] = (uint16_t)(lowerLimit);
  2325  04EF  0849               	movf	_lowerLimit+1,w
  2326  04F0  00BB               	movwf	writeFlash@wrBlockData+27
  2327  04F1  0848               	movf	_lowerLimit,w
  2328  04F2  00BA               	movwf	writeFlash@wrBlockData+26
  2329                           
  2330                           ;main.c: 109:     wrBlockData[16 -4] = (uint16_t)(lowerLimit >> 16);
  2331  04F3  084B               	movf	_lowerLimit+3,w
  2332  04F4  00B9               	movwf	writeFlash@wrBlockData+25
  2333  04F5  084A               	movf	_lowerLimit+2,w
  2334  04F6  00B8               	movwf	writeFlash@wrBlockData+24
  2335                           
  2336                           ;main.c: 112:     FLASH_WriteBlock((uint16_t)( 0x800 -16), (uint16_t*)wrBlockData);
  2337  04F7  30F0               	movlw	240
  2338  04F8  00F3               	movwf	FLASH_WriteBlock@writeAddr
  2339  04F9  3007               	movlw	7
  2340  04FA  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  2341  04FB  3020               	movlw	(low (writeFlash@wrBlockData| 0))& (0+255)
  2342  04FC  00FD               	movwf	??_writeFlash
  2343  04FD  087D               	movf	??_writeFlash,w
  2344  04FE  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  2345  04FF  2402               	fcall	_FLASH_WriteBlock
  2346  0500  0008               	return
  2347  0501                     __end_of_writeFlash:
  2348                           
  2349                           	psect	text2
  2350  0402                     __ptext2:	
  2351 ;; *************** function _FLASH_WriteBlock *****************
  2352 ;; Defined at:
  2353 ;;		line 94 in file "mcc_generated_files/memory.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;  writeAddr       2    3[COMMON] unsigned short 
  2356 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  2357 ;;		 -> writeFlash@wrBlockData(32), 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  blockStartAd    2    9[COMMON] unsigned short 
  2360 ;;  i               1   12[COMMON] unsigned char 
  2361 ;;  GIEBitValue     1   11[COMMON] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  1    wreg      char 
  2364 ;; Registers used:
  2365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 1F/0
  2368 ;;		On exit  : 1C/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1
  2371 ;;      Params:         3       0       0
  2372 ;;      Locals:         4       0       0
  2373 ;;      Temps:          3       0       0
  2374 ;;      Totals:        10       0       0
  2375 ;;Total ram usage:       10 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    5
  2378 ;; This function calls:
  2379 ;;		_FLASH_EraseBlock
  2380 ;; This function is called by:
  2381 ;;		_writeFlash
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           
  2386                           ;psect for function _FLASH_WriteBlock
  2387  0402                     _FLASH_WriteBlock:
  2388                           
  2389                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x800 -1) ^ (16 -1)));
  2390                           
  2391                           ;incstack = 0
  2392                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2393  0402  30F0               	movlw	240
  2394  0403  0573               	andwf	FLASH_WriteBlock@writeAddr,w
  2395  0404  00F9               	movwf	FLASH_WriteBlock@blockStartAddr
  2396  0405  3007               	movlw	7
  2397  0406  0574               	andwf	FLASH_WriteBlock@writeAddr+1,w
  2398  0407  00FA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  2399                           
  2400                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  2401  0408  3000               	movlw	0
  2402  0409  1B8B               	btfsc	11,7	;volatile
  2403  040A  3001               	movlw	1
  2404  040B  00FB               	movwf	FLASH_WriteBlock@GIEBitValue
  2405                           
  2406                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  2407  040C  087A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  2408  040D  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  2409  040E  1D03               	skipz
  2410  040F  2C12               	goto	u885
  2411  0410  0879               	movf	FLASH_WriteBlock@blockStartAddr,w
  2412  0411  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  2413  0412                     u885:
  2414  0412  1D03               	btfss	3,2
  2415  0413  0008               	return
  2416                           
  2417                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  2418                           
  2419                           ;mcc_generated_files/memory.c: 104:     }
  2420  0414  138B               	bcf	11,7	;volatile
  2421                           
  2422                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  2423  0415  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2424  0416  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2425  0417  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2426  0418  00F0               	movwf	FLASH_EraseBlock@startAddr
  2427  0419  2527               	fcall	_FLASH_EraseBlock
  2428                           
  2429                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  2430  041A  1315               	bcf	21,6	;volatile
  2431                           
  2432                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  2433  041B  1515               	bsf	21,2	;volatile
  2434                           
  2435                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  2436  041C  1695               	bsf	21,5	;volatile
  2437                           
  2438                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<16; i++)
  2439  041D  01FC               	clrf	FLASH_WriteBlock@i
  2440  041E                     l1687:
  2441                           
  2442                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  2443  041E  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2444  041F  0023               	movlb	3	; select bank3
  2445  0420  0091               	movwf	17	;volatile
  2446                           
  2447                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  2448  0421  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2449  0422  0092               	movwf	18	;volatile
  2450                           
  2451                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  2452  0423  357C               	lslf	FLASH_WriteBlock@i,w
  2453  0424  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2454  0425  00F6               	movwf	??_FLASH_WriteBlock
  2455  0426  0876               	movf	??_FLASH_WriteBlock,w
  2456  0427  0086               	movwf	6
  2457  0428  0187               	clrf	7
  2458  0429  0801               	movf	1,w
  2459  042A  0093               	movwf	19	;volatile
  2460                           
  2461                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  2462  042B  357C               	lslf	FLASH_WriteBlock@i,w
  2463  042C  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2464  042D  00F6               	movwf	??_FLASH_WriteBlock
  2465  042E  0876               	movf	??_FLASH_WriteBlock,w
  2466  042F  0086               	movwf	6
  2467  0430  0187               	clrf	7
  2468  0431  3F40               	moviw [0]fsr1
  2469  0432  00F7               	movwf	??_FLASH_WriteBlock+1
  2470  0433  3F41               	moviw [1]fsr1
  2471  0434  00F8               	movwf	??_FLASH_WriteBlock+2
  2472  0435  0878               	movf	??_FLASH_WriteBlock+2,w
  2473  0436  0094               	movwf	20	;volatile
  2474                           
  2475                           ;mcc_generated_files/memory.c: 127:         if(i == (16 -1))
  2476  0437  300F               	movlw	15
  2477  0438  067C               	xorwf	FLASH_WriteBlock@i,w
  2478  0439  1903               	btfsc	3,2
  2479                           
  2480                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  2481  043A  1295               	bcf	21,5	;volatile
  2482                           
  2483                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  2484  043B  3055               	movlw	85
  2485  043C  0096               	movwf	22	;volsfr
  2486                           
  2487                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  2488  043D  30AA               	movlw	170
  2489  043E  0096               	movwf	22	;volsfr
  2490                           
  2491                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  2492  043F  1495               	bsf	21,1	;volatile
  2493                           
  2494                           ;mcc_generated_files/memory.c: 136:         __nop();
  2495  0440  0000               	nop
  2496                           
  2497                           ;mcc_generated_files/memory.c: 137:         __nop();
  2498  0441  0000               	nop
  2499                           
  2500                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  2501  0442  3001               	movlw	1
  2502  0443  07F3               	addwf	FLASH_WriteBlock@writeAddr,f
  2503  0444  3000               	movlw	0
  2504  0445  3DF4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  2505                           
  2506                           ;mcc_generated_files/memory.c: 140:     }
  2507  0446  3001               	movlw	1
  2508  0447  00F6               	movwf	??_FLASH_WriteBlock
  2509  0448  0876               	movf	??_FLASH_WriteBlock,w
  2510  0449  07FC               	addwf	FLASH_WriteBlock@i,f
  2511  044A  3010               	movlw	16
  2512  044B  027C               	subwf	FLASH_WriteBlock@i,w
  2513  044C  1C03               	skipc
  2514  044D  2C1E               	goto	l1687
  2515                           
  2516                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  2517  044E  0023               	movlb	3	; select bank3
  2518  044F  1115               	bcf	21,2	;volatile
  2519                           
  2520                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  2521  0450  0C7B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  2522  0451  1C03               	skipc
  2523  0452  138B               	bcf	11,7	;volatile
  2524  0453  1803               	skipnc
  2525  0454  178B               	bsf	11,7	;volatile
  2526  0455  0008               	return
  2527  0456                     __end_of_FLASH_WriteBlock:
  2528                           
  2529                           	psect	text3
  2530  0527                     __ptext3:	
  2531 ;; *************** function _FLASH_EraseBlock *****************
  2532 ;; Defined at:
  2533 ;;		line 148 in file "mcc_generated_files/memory.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;  startAddr       2    0[COMMON] unsigned short 
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg, status,2, status,0
  2542 ;; Tracked objects:
  2543 ;;		On entry : 1F/0
  2544 ;;		On exit  : 1F/3
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMMON   BANK0   BANK1
  2547 ;;      Params:         2       0       0
  2548 ;;      Locals:         1       0       0
  2549 ;;      Temps:          0       0       0
  2550 ;;      Totals:         3       0       0
  2551 ;;Total ram usage:        3 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    4
  2554 ;; This function calls:
  2555 ;;		Nothing
  2556 ;; This function is called by:
  2557 ;;		_FLASH_WriteBlock
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           
  2562                           ;psect for function _FLASH_EraseBlock
  2563  0527                     _FLASH_EraseBlock:
  2564                           
  2565                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  2569  0527  3000               	movlw	0
  2570  0528  1B8B               	btfsc	11,7	;volatile
  2571  0529  3001               	movlw	1
  2572  052A  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  2573                           
  2574                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  2575  052B  138B               	bcf	11,7	;volatile
  2576                           
  2577                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  2578  052C  0870               	movf	FLASH_EraseBlock@startAddr,w
  2579  052D  0023               	movlb	3	; select bank3
  2580  052E  0091               	movwf	17	;volatile
  2581                           
  2582                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  2583  052F  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  2584  0530  0092               	movwf	18	;volatile
  2585                           
  2586                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  2587  0531  1315               	bcf	21,6	;volatile
  2588                           
  2589                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  2590  0532  1615               	bsf	21,4	;volatile
  2591                           
  2592                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  2593  0533  1515               	bsf	21,2	;volatile
  2594                           
  2595                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  2596  0534  3055               	movlw	85
  2597  0535  0096               	movwf	22	;volsfr
  2598                           
  2599                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  2600  0536  30AA               	movlw	170
  2601  0537  0096               	movwf	22	;volsfr
  2602                           
  2603                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  2604  0538  1495               	bsf	21,1	;volatile
  2605                           
  2606                           ;mcc_generated_files/memory.c: 168:     __nop();
  2607  0539  0000               	nop
  2608                           
  2609                           ;mcc_generated_files/memory.c: 169:     __nop();
  2610  053A  0000               	nop
  2611                           
  2612                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  2613  053B  0023               	movlb	3	; select bank3
  2614  053C  1115               	bcf	21,2	;volatile
  2615                           
  2616                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  2617  053D  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  2618  053E  1C03               	skipc
  2619  053F  138B               	bcf	11,7	;volatile
  2620  0540  1803               	skipnc
  2621  0541  178B               	bsf	11,7	;volatile
  2622  0542  0008               	return
  2623  0543                     __end_of_FLASH_EraseBlock:
  2624                           
  2625                           	psect	text4
  2626  032B                     __ptext4:	
  2627 ;; *************** function _setState *****************
  2628 ;; Defined at:
  2629 ;;		line 134 in file "main.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  newState        1    wreg     enum E2406
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  newState        1    4[BANK0 ] enum E2406
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 1C/0
  2640 ;;		On exit  : 1F/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1
  2643 ;;      Params:         0       0       0
  2644 ;;      Locals:         0       1       0
  2645 ;;      Temps:          0       4       0
  2646 ;;      Totals:         0       5       0
  2647 ;;Total ram usage:        5 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    6
  2650 ;; This function calls:
  2651 ;;		___lldiv
  2652 ;;		___tmul
  2653 ;;		_readFlash
  2654 ;; This function is called by:
  2655 ;;		_main
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function _setState
  2661  032B                     _setState:
  2662                           
  2663                           ;incstack = 0
  2664                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2665                           ;setState@newState stored from wreg
  2666  032B  0020               	movlb	0	; select bank0
  2667  032C  00A4               	movwf	setState@newState
  2668                           
  2669                           ;main.c: 134: void setState(state_t newState);main.c: 135: {;main.c: 136:     if(newStat
      +                          e == currentState)
  2670  032D  0824               	movf	setState@newState,w
  2671  032E  0660               	xorwf	_currentState,w
  2672  032F  1903               	btfsc	3,2
  2673  0330  0008               	return
  2674                           
  2675                           ;main.c: 142:     do { LATCbits.LATC0 = 0; } while(0);
  2676  0331  0022               	movlb	2	; select bank2
  2677  0332  100E               	bcf	14,0	;volatile
  2678                           
  2679                           ;main.c: 143:     do { LATCbits.LATC1 = 0; } while(0);
  2680  0333  108E               	bcf	14,1	;volatile
  2681                           
  2682                           ;main.c: 144:     do { LATCbits.LATC2 = 0; } while(0);
  2683  0334  110E               	bcf	14,2	;volatile
  2684                           
  2685                           ;main.c: 145:     do { LATCbits.LATC3 = 0; } while(0);
  2686  0335  118E               	bcf	14,3	;volatile
  2687                           
  2688                           ;main.c: 146:     do { LATCbits.LATC4 = 0; } while(0);
  2689  0336  120E               	bcf	14,4	;volatile
  2690                           
  2691                           ;main.c: 147:     do { LATCbits.LATC5 = 0; } while(0);
  2692  0337  128E               	bcf	14,5	;volatile
  2693                           
  2694                           ;main.c: 148:     do { LATCbits.LATC6 = 0; } while(0);
  2695  0338  130E               	bcf	14,6	;volatile
  2696                           
  2697                           ;main.c: 149:     do { LATCbits.LATC7 = 0; } while(0);
  2698  0339  138E               	bcf	14,7	;volatile
  2699                           
  2700                           ;main.c: 150:     do { LATBbits.LATB5 = 0; } while(0);
  2701  033A  128D               	bcf	13,5	;volatile
  2702                           
  2703                           ;main.c: 151:     do { LATBbits.LATB6 = 0; } while(0);
  2704  033B  130D               	bcf	13,6	;volatile
  2705                           
  2706                           ;main.c: 152:     do { LATBbits.LATB7 = 0; } while(0);
  2707  033C  138D               	bcf	13,7	;volatile
  2708  033D  2B7E               	goto	l1797
  2709  033E                     l1793:
  2710                           
  2711                           ;main.c: 161:             readFlash();
  2712  033E  239A               	fcall	_readFlash
  2713                           
  2714                           ;main.c: 170:             m = (1023*fixedPointFactor)/(upperLimit - lowerLimit);
  2715  033F  0848               	movf	_lowerLimit,w
  2716  0340  0261               	subwf	_upperLimit,w
  2717  0341  00A0               	movwf	??_setState
  2718  0342  0849               	movf	_lowerLimit+1,w
  2719  0343  3B62               	subwfb	_upperLimit+1,w
  2720  0344  00A1               	movwf	??_setState+1
  2721  0345  084A               	movf	_lowerLimit+2,w
  2722  0346  3B63               	subwfb	_upperLimit+2,w
  2723  0347  00A2               	movwf	??_setState+2
  2724  0348  084B               	movf	_lowerLimit+3,w
  2725  0349  3B64               	subwfb	_upperLimit+3,w
  2726  034A  00A3               	movwf	??_setState+3
  2727  034B  0823               	movf	??_setState+3,w
  2728  034C  00F3               	movwf	___lldiv@divisor+3
  2729  034D  0822               	movf	??_setState+2,w
  2730  034E  00F2               	movwf	___lldiv@divisor+2
  2731  034F  0821               	movf	??_setState+1,w
  2732  0350  00F1               	movwf	___lldiv@divisor+1
  2733  0351  0820               	movf	??_setState,w
  2734  0352  00F0               	movwf	___lldiv@divisor
  2735  0353  3000               	movlw	0
  2736  0354  00F7               	movwf	___lldiv@dividend+3
  2737  0355  300F               	movlw	15
  2738  0356  00F6               	movwf	___lldiv@dividend+2
  2739  0357  309C               	movlw	156
  2740  0358  00F5               	movwf	___lldiv@dividend+1
  2741  0359  3018               	movlw	24
  2742  035A  00F4               	movwf	___lldiv@dividend
  2743  035B  2456               	fcall	___lldiv
  2744  035C  0873               	movf	?___lldiv+3,w
  2745  035D  00DE               	movwf	_m+3
  2746  035E  0872               	movf	?___lldiv+2,w
  2747  035F  00DD               	movwf	_m+2
  2748  0360  0871               	movf	?___lldiv+1,w
  2749  0361  00DC               	movwf	_m+1
  2750  0362  0870               	movf	?___lldiv,w
  2751  0363  00DB               	movwf	_m
  2752                           
  2753                           ;main.c: 171:             b = lowerLimit*m;
  2754  0364  085B               	movf	_m,w
  2755  0365  00F0               	movwf	___tmul@multiplier
  2756  0366  085C               	movf	_m+1,w
  2757  0367  00F1               	movwf	___tmul@multiplier+1
  2758  0368  085D               	movf	_m+2,w
  2759  0369  00F2               	movwf	___tmul@multiplier+2
  2760  036A  0848               	movf	_lowerLimit,w
  2761  036B  00F3               	movwf	___tmul@multiplicand
  2762  036C  0849               	movf	_lowerLimit+1,w
  2763  036D  00F4               	movwf	___tmul@multiplicand+1
  2764  036E  084A               	movf	_lowerLimit+2,w
  2765  036F  00F5               	movwf	___tmul@multiplicand+2
  2766  0370  2501               	fcall	___tmul
  2767  0371  0870               	movf	?___tmul,w
  2768  0372  00D0               	movwf	_b
  2769  0373  0871               	movf	?___tmul+1,w
  2770  0374  00D1               	movwf	_b+1
  2771  0375  0872               	movf	?___tmul+2,w
  2772  0376  00D2               	movwf	_b+2
  2773                           
  2774                           ;main.c: 172:             break;
  2775  0377  2B92               	goto	l1799
  2776  0378                     l322:	
  2777                           ;main.c: 176:             do { LATCbits.LATC0 = 1; } while(0);
  2778                           
  2779  0378  0022               	movlb	2	; select bank2
  2780  0379  140E               	bsf	14,0	;volatile
  2781  037A  2B92               	goto	l1799
  2782  037B                     l325:	
  2783                           ;main.c: 180:             do { LATBbits.LATB7 = 1; } while(0);
  2784                           
  2785  037B  0022               	movlb	2	; select bank2
  2786  037C  178D               	bsf	13,7	;volatile
  2787  037D  2B92               	goto	l1799
  2788  037E                     l1797:
  2789  037E  0020               	movlb	0	; select bank0
  2790  037F  0824               	movf	setState@newState,w
  2791  0380  00A0               	movwf	??_setState
  2792  0381  01A1               	clrf	??_setState+1
  2793                           
  2794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2795                           ; Switch size 1, requested type "simple"
  2796                           ; Number of cases is 1, Range of values is 0 to 0
  2797                           ; switch strategies available:
  2798                           ; Name         Instructions Cycles
  2799                           ; simple_byte            4     3 (average)
  2800                           ; direct_byte            8     6 (fixed)
  2801                           ; jumptable            260     6 (fixed)
  2802                           ;	Chosen strategy is simple_byte
  2803  0382  0821               	movf	??_setState+1,w
  2804  0383  3A00               	xorlw	0	; case 0
  2805  0384  1903               	skipnz
  2806  0385  2B87               	goto	l2079
  2807  0386  2B92               	goto	l1799
  2808  0387                     l2079:
  2809                           
  2810                           ; Switch size 1, requested type "simple"
  2811                           ; Number of cases is 3, Range of values is 1 to 3
  2812                           ; switch strategies available:
  2813                           ; Name         Instructions Cycles
  2814                           ; simple_byte           10     6 (average)
  2815                           ; direct_byte           15     9 (fixed)
  2816                           ; jumptable            263     9 (fixed)
  2817                           ;	Chosen strategy is simple_byte
  2818  0387  0820               	movf	??_setState,w
  2819  0388  3A01               	xorlw	1	; case 1
  2820  0389  1903               	skipnz
  2821  038A  2B3E               	goto	l1793
  2822  038B  3A03               	xorlw	3	; case 2
  2823  038C  1903               	skipnz
  2824  038D  2B78               	goto	l322
  2825  038E  3A01               	xorlw	1	; case 3
  2826  038F  1903               	skipnz
  2827  0390  2B7B               	goto	l325
  2828  0391  2B92               	goto	l1799
  2829  0392                     l1799:
  2830                           
  2831                           ;main.c: 184:     msTick = 0;
  2832  0392  0020               	movlb	0	; select bank0
  2833  0393  01D5               	clrf	_msTick	;volatile
  2834  0394  01D6               	clrf	_msTick+1	;volatile
  2835                           
  2836                           ;main.c: 186:     currentState = newState;
  2837  0395  0824               	movf	setState@newState,w
  2838  0396  00A0               	movwf	??_setState
  2839  0397  0820               	movf	??_setState,w
  2840  0398  00E0               	movwf	_currentState
  2841  0399  0008               	return
  2842  039A                     __end_of_setState:
  2843                           
  2844                           	psect	text5
  2845  039A                     __ptext5:	
  2846 ;; *************** function _readFlash *****************
  2847 ;; Defined at:
  2848 ;;		line 82 in file "main.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;		None
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, pclath, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 1F/0
  2859 ;;		On exit  : 1F/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1
  2862 ;;      Params:         0       0       0
  2863 ;;      Locals:         0       0       0
  2864 ;;      Temps:          4       0       0
  2865 ;;      Totals:         4       0       0
  2866 ;;Total ram usage:        4 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    5
  2869 ;; This function calls:
  2870 ;;		_FLASH_ReadWord
  2871 ;; This function is called by:
  2872 ;;		_setState
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           
  2877                           ;psect for function _readFlash
  2878  039A                     _readFlash:
  2879                           
  2880                           ;main.c: 85:     lowerLimit = 0;
  2881                           
  2882                           ;incstack = 0
  2883                           ; Regs used in _readFlash: [wreg+status,2+status,0+pclath+cstack]
  2884  039A  3000               	movlw	0
  2885  039B  00CB               	movwf	_lowerLimit+3
  2886  039C  3000               	movlw	0
  2887  039D  00CA               	movwf	_lowerLimit+2
  2888  039E  3000               	movlw	0
  2889  039F  00C9               	movwf	_lowerLimit+1
  2890  03A0  3000               	movlw	0
  2891  03A1  00C8               	movwf	_lowerLimit
  2892                           
  2893                           ;main.c: 86:     lowerLimit += (uint32_t)FLASH_ReadWord(0x800 -4) << 16;
  2894  03A2  30FC               	movlw	252
  2895  03A3  00F0               	movwf	FLASH_ReadWord@flashAddr
  2896  03A4  3007               	movlw	7
  2897  03A5  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2898  03A6  2543               	fcall	_FLASH_ReadWord
  2899  03A7  0870               	movf	?_FLASH_ReadWord,w
  2900  03A8  00F3               	movwf	??_readFlash
  2901  03A9  0871               	movf	?_FLASH_ReadWord+1,w
  2902  03AA  00F4               	movwf	??_readFlash+1
  2903  03AB  01F5               	clrf	??_readFlash+2
  2904  03AC  01F6               	clrf	??_readFlash+3
  2905  03AD  3010               	movlw	16
  2906  03AE                     u915:
  2907  03AE  35F3               	lslf	??_readFlash,f
  2908  03AF  0DF4               	rlf	??_readFlash+1,f
  2909  03B0  0DF5               	rlf	??_readFlash+2,f
  2910  03B1  0DF6               	rlf	??_readFlash+3,f
  2911  03B2  0B89               	decfsz	9,f
  2912  03B3  2BAE               	goto	u915
  2913  03B4  0873               	movf	??_readFlash,w
  2914  03B5  0020               	movlb	0	; select bank0
  2915  03B6  07C8               	addwf	_lowerLimit,f
  2916  03B7  0874               	movf	??_readFlash+1,w
  2917  03B8  3DC9               	addwfc	_lowerLimit+1,f
  2918  03B9  0875               	movf	??_readFlash+2,w
  2919  03BA  3DCA               	addwfc	_lowerLimit+2,f
  2920  03BB  0876               	movf	??_readFlash+3,w
  2921  03BC  3DCB               	addwfc	_lowerLimit+3,f
  2922                           
  2923                           ;main.c: 87:     lowerLimit |= (uint32_t)FLASH_ReadWord(0x800 -3);
  2924  03BD  30FD               	movlw	253
  2925  03BE  00F0               	movwf	FLASH_ReadWord@flashAddr
  2926  03BF  3007               	movlw	7
  2927  03C0  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2928  03C1  2543               	fcall	_FLASH_ReadWord
  2929  03C2  0870               	movf	?_FLASH_ReadWord,w
  2930  03C3  00F3               	movwf	??_readFlash
  2931  03C4  0871               	movf	?_FLASH_ReadWord+1,w
  2932  03C5  00F4               	movwf	??_readFlash+1
  2933  03C6  01F5               	clrf	??_readFlash+2
  2934  03C7  01F6               	clrf	??_readFlash+3
  2935  03C8  0873               	movf	??_readFlash,w
  2936  03C9  0020               	movlb	0	; select bank0
  2937  03CA  04C8               	iorwf	_lowerLimit,f
  2938  03CB  0874               	movf	??_readFlash+1,w
  2939  03CC  04C9               	iorwf	_lowerLimit+1,f
  2940  03CD  0875               	movf	??_readFlash+2,w
  2941  03CE  04CA               	iorwf	_lowerLimit+2,f
  2942  03CF  0876               	movf	??_readFlash+3,w
  2943  03D0  04CB               	iorwf	_lowerLimit+3,f
  2944                           
  2945                           ;main.c: 90:     upperLimit = 0;
  2946  03D1  3000               	movlw	0
  2947  03D2  00E4               	movwf	_upperLimit+3
  2948  03D3  3000               	movlw	0
  2949  03D4  00E3               	movwf	_upperLimit+2
  2950  03D5  3000               	movlw	0
  2951  03D6  00E2               	movwf	_upperLimit+1
  2952  03D7  3000               	movlw	0
  2953  03D8  00E1               	movwf	_upperLimit
  2954                           
  2955                           ;main.c: 91:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -2) << 16;
  2956  03D9  30FE               	movlw	254
  2957  03DA  00F0               	movwf	FLASH_ReadWord@flashAddr
  2958  03DB  3007               	movlw	7
  2959  03DC  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2960  03DD  2543               	fcall	_FLASH_ReadWord
  2961  03DE  0870               	movf	?_FLASH_ReadWord,w
  2962  03DF  00F3               	movwf	??_readFlash
  2963  03E0  0871               	movf	?_FLASH_ReadWord+1,w
  2964  03E1  00F4               	movwf	??_readFlash+1
  2965  03E2  01F5               	clrf	??_readFlash+2
  2966  03E3  01F6               	clrf	??_readFlash+3
  2967  03E4  3010               	movlw	16
  2968  03E5                     u925:
  2969  03E5  35F3               	lslf	??_readFlash,f
  2970  03E6  0DF4               	rlf	??_readFlash+1,f
  2971  03E7  0DF5               	rlf	??_readFlash+2,f
  2972  03E8  0DF6               	rlf	??_readFlash+3,f
  2973  03E9  0B89               	decfsz	9,f
  2974  03EA  2BE5               	goto	u925
  2975  03EB  0873               	movf	??_readFlash,w
  2976  03EC  0020               	movlb	0	; select bank0
  2977  03ED  07E1               	addwf	_upperLimit,f
  2978  03EE  0874               	movf	??_readFlash+1,w
  2979  03EF  3DE2               	addwfc	_upperLimit+1,f
  2980  03F0  0875               	movf	??_readFlash+2,w
  2981  03F1  3DE3               	addwfc	_upperLimit+2,f
  2982  03F2  0876               	movf	??_readFlash+3,w
  2983  03F3  3DE4               	addwfc	_upperLimit+3,f
  2984                           
  2985                           ;main.c: 92:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -1) ;
  2986  03F4  30FF               	movlw	255
  2987  03F5  00F0               	movwf	FLASH_ReadWord@flashAddr
  2988  03F6  3007               	movlw	7
  2989  03F7  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2990  03F8  2543               	fcall	_FLASH_ReadWord
  2991  03F9  0870               	movf	?_FLASH_ReadWord,w
  2992  03FA  0020               	movlb	0	; select bank0
  2993  03FB  07E1               	addwf	_upperLimit,f
  2994  03FC  0871               	movf	?_FLASH_ReadWord+1,w
  2995  03FD  3DE2               	addwfc	_upperLimit+1,f
  2996  03FE  3000               	movlw	0
  2997  03FF  3DE3               	addwfc	_upperLimit+2,f
  2998  0400  3DE4               	addwfc	_upperLimit+3,f
  2999  0401  0008               	return
  3000  0402                     __end_of_readFlash:
  3001                           
  3002                           	psect	text6
  3003  0543                     __ptext6:	
  3004 ;; *************** function _FLASH_ReadWord *****************
  3005 ;; Defined at:
  3006 ;;		line 58 in file "mcc_generated_files/memory.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  flashAddr       2    0[COMMON] unsigned short 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  2    0[COMMON] unsigned short 
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, status,0
  3015 ;; Tracked objects:
  3016 ;;		On entry : 1F/0
  3017 ;;		On exit  : 1F/3
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMMON   BANK0   BANK1
  3020 ;;      Params:         2       0       0
  3021 ;;      Locals:         1       0       0
  3022 ;;      Temps:          0       0       0
  3023 ;;      Totals:         3       0       0
  3024 ;;Total ram usage:        3 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    4
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_readFlash
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           
  3035                           ;psect for function _FLASH_ReadWord
  3036  0543                     _FLASH_ReadWord:
  3037                           
  3038                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  3039                           
  3040                           ;incstack = 0
  3041                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3042  0543  3000               	movlw	0
  3043  0544  1B8B               	btfsc	11,7	;volatile
  3044  0545  3001               	movlw	1
  3045  0546  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  3046                           
  3047                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  3048  0547  138B               	bcf	11,7	;volatile
  3049                           
  3050                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  3051  0548  0870               	movf	FLASH_ReadWord@flashAddr,w
  3052  0549  0023               	movlb	3	; select bank3
  3053  054A  0091               	movwf	17	;volatile
  3054                           
  3055                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  3056  054B  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  3057  054C  0092               	movwf	18	;volatile
  3058                           
  3059                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  3060  054D  1315               	bcf	21,6	;volatile
  3061                           
  3062                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  3063  054E  1415               	bsf	21,0	;volatile
  3064                           
  3065                           ;mcc_generated_files/memory.c: 68:     __nop();
  3066  054F  0000               	nop
  3067                           
  3068                           ;mcc_generated_files/memory.c: 69:     __nop();
  3069  0550  0000               	nop
  3070                           
  3071                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  3072  0551  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  3073  0552  1C03               	skipc
  3074  0553  138B               	bcf	11,7	;volatile
  3075  0554  1803               	skipnc
  3076  0555  178B               	bsf	11,7	;volatile
  3077                           
  3078                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  3079  0556  0023               	movlb	3	; select bank3
  3080  0557  0814               	movf	20,w	;volatile
  3081  0558  00F1               	movwf	?_FLASH_ReadWord+1
  3082  0559  0813               	movf	19,w	;volatile
  3083  055A  00F0               	movwf	?_FLASH_ReadWord
  3084  055B  0008               	return
  3085  055C                     __end_of_FLASH_ReadWord:
  3086                           
  3087                           	psect	text7
  3088  0501                     __ptext7:	
  3089 ;; *************** function ___tmul *****************
  3090 ;; Defined at:
  3091 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul24.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;  multiplier      3    0[COMMON] unsigned um
  3094 ;;  multiplicand    3    3[COMMON] unsigned um
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  product         3    6[COMMON] unsigned um
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  3    0[COMMON] unsigned um
  3099 ;; Registers used:
  3100 ;;		wreg, status,2, status,0
  3101 ;; Tracked objects:
  3102 ;;		On entry : 1F/0
  3103 ;;		On exit  : 1F/0
  3104 ;;		Unchanged: 1F/0
  3105 ;; Data sizes:     COMMON   BANK0   BANK1
  3106 ;;      Params:         6       0       0
  3107 ;;      Locals:         3       0       0
  3108 ;;      Temps:          0       0       0
  3109 ;;      Totals:         9       0       0
  3110 ;;Total ram usage:        9 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    4
  3113 ;; This function calls:
  3114 ;;		Nothing
  3115 ;; This function is called by:
  3116 ;;		_setState
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           
  3121                           ;psect for function ___tmul
  3122  0501                     ___tmul:
  3123                           
  3124                           ;incstack = 0
  3125                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  3126  0501  3000               	movlw	0
  3127  0502  00F6               	movwf	___tmul@product
  3128  0503  3000               	movlw	0
  3129  0504  00F7               	movwf	___tmul@product+1
  3130  0505  3000               	movlw	0
  3131  0506  00F8               	movwf	___tmul@product+2
  3132  0507                     l1725:
  3133  0507  1C70               	btfss	___tmul@multiplier,0
  3134  0508  2D0F               	goto	l1729
  3135  0509  0873               	movf	___tmul@multiplicand,w
  3136  050A  07F6               	addwf	___tmul@product,f
  3137  050B  0874               	movf	___tmul@multiplicand+1,w
  3138  050C  3DF7               	addwfc	___tmul@product+1,f
  3139  050D  0875               	movf	___tmul@multiplicand+2,w
  3140  050E  3DF8               	addwfc	___tmul@product+2,f
  3141  050F                     l1729:
  3142  050F  3001               	movlw	1
  3143  0510                     u945:
  3144  0510  35F3               	lslf	___tmul@multiplicand,f
  3145  0511  0DF4               	rlf	___tmul@multiplicand+1,f
  3146  0512  0DF5               	rlf	___tmul@multiplicand+2,f
  3147  0513  0B89               	decfsz	9,f
  3148  0514  2D10               	goto	u945
  3149  0515  3001               	movlw	1
  3150  0516                     u955:
  3151  0516  36F2               	lsrf	___tmul@multiplier+2,f
  3152  0517  0CF1               	rrf	___tmul@multiplier+1,f
  3153  0518  0CF0               	rrf	___tmul@multiplier,f
  3154  0519  0B89               	decfsz	9,f
  3155  051A  2D16               	goto	u955
  3156  051B  0872               	movf	___tmul@multiplier+2,w
  3157  051C  0471               	iorwf	___tmul@multiplier+1,w
  3158  051D  0470               	iorwf	___tmul@multiplier,w
  3159  051E  1D03               	skipz
  3160  051F  2D07               	goto	l1725
  3161  0520  0876               	movf	___tmul@product,w
  3162  0521  00F0               	movwf	?___tmul
  3163  0522  0877               	movf	___tmul@product+1,w
  3164  0523  00F1               	movwf	?___tmul+1
  3165  0524  0878               	movf	___tmul@product+2,w
  3166  0525  00F2               	movwf	?___tmul+2
  3167  0526  0008               	return
  3168  0527                     __end_of___tmul:
  3169                           
  3170                           	psect	text8
  3171  0456                     __ptext8:	
  3172 ;; *************** function ___lldiv *****************
  3173 ;; Defined at:
  3174 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\__lldiv.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  divisor         4    0[COMMON] unsigned long 
  3177 ;;  dividend        4    4[COMMON] unsigned long 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  quotient        4    9[COMMON] unsigned long 
  3180 ;;  counter         1   13[COMMON] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  4    0[COMMON] unsigned long 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0
  3185 ;; Tracked objects:
  3186 ;;		On entry : 1F/0
  3187 ;;		On exit  : 1F/0
  3188 ;;		Unchanged: 1F/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1
  3190 ;;      Params:         8       0       0
  3191 ;;      Locals:         5       0       0
  3192 ;;      Temps:          1       0       0
  3193 ;;      Totals:        14       0       0
  3194 ;;Total ram usage:       14 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    4
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_setState
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function ___lldiv
  3206  0456                     ___lldiv:
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3210  0456  3000               	movlw	0
  3211  0457  00FC               	movwf	___lldiv@quotient+3
  3212  0458  3000               	movlw	0
  3213  0459  00FB               	movwf	___lldiv@quotient+2
  3214  045A  3000               	movlw	0
  3215  045B  00FA               	movwf	___lldiv@quotient+1
  3216  045C  3000               	movlw	0
  3217  045D  00F9               	movwf	___lldiv@quotient
  3218  045E  0873               	movf	___lldiv@divisor+3,w
  3219  045F  0472               	iorwf	___lldiv@divisor+2,w
  3220  0460  0471               	iorwf	___lldiv@divisor+1,w
  3221  0461  0470               	iorwf	___lldiv@divisor,w
  3222  0462  1903               	skipnz
  3223  0463  2C9F               	goto	l1757
  3224  0464  01FD               	clrf	___lldiv@counter
  3225  0465  0AFD               	incf	___lldiv@counter,f
  3226  0466                     l1743:
  3227  0466  1BF3               	btfsc	___lldiv@divisor+3,7
  3228  0467  2C74               	goto	l1745
  3229  0468  3001               	movlw	1
  3230  0469                     u985:
  3231  0469  35F0               	lslf	___lldiv@divisor,f
  3232  046A  0DF1               	rlf	___lldiv@divisor+1,f
  3233  046B  0DF2               	rlf	___lldiv@divisor+2,f
  3234  046C  0DF3               	rlf	___lldiv@divisor+3,f
  3235  046D  0B89               	decfsz	9,f
  3236  046E  2C69               	goto	u985
  3237  046F  3001               	movlw	1
  3238  0470  00F8               	movwf	??___lldiv
  3239  0471  0878               	movf	??___lldiv,w
  3240  0472  07FD               	addwf	___lldiv@counter,f
  3241  0473  2C66               	goto	l1743
  3242  0474                     l1745:
  3243  0474  3001               	movlw	1
  3244  0475                     u1005:
  3245  0475  35F9               	lslf	___lldiv@quotient,f
  3246  0476  0DFA               	rlf	___lldiv@quotient+1,f
  3247  0477  0DFB               	rlf	___lldiv@quotient+2,f
  3248  0478  0DFC               	rlf	___lldiv@quotient+3,f
  3249  0479  0B89               	decfsz	9,f
  3250  047A  2C75               	goto	u1005
  3251  047B  0873               	movf	___lldiv@divisor+3,w
  3252  047C  0277               	subwf	___lldiv@dividend+3,w
  3253  047D  1D03               	skipz
  3254  047E  2C89               	goto	u1015
  3255  047F  0872               	movf	___lldiv@divisor+2,w
  3256  0480  0276               	subwf	___lldiv@dividend+2,w
  3257  0481  1D03               	skipz
  3258  0482  2C89               	goto	u1015
  3259  0483  0871               	movf	___lldiv@divisor+1,w
  3260  0484  0275               	subwf	___lldiv@dividend+1,w
  3261  0485  1D03               	skipz
  3262  0486  2C89               	goto	u1015
  3263  0487  0870               	movf	___lldiv@divisor,w
  3264  0488  0274               	subwf	___lldiv@dividend,w
  3265  0489                     u1015:
  3266  0489  1C03               	skipc
  3267  048A  2C94               	goto	l1753
  3268  048B  0870               	movf	___lldiv@divisor,w
  3269  048C  02F4               	subwf	___lldiv@dividend,f
  3270  048D  0871               	movf	___lldiv@divisor+1,w
  3271  048E  3BF5               	subwfb	___lldiv@dividend+1,f
  3272  048F  0872               	movf	___lldiv@divisor+2,w
  3273  0490  3BF6               	subwfb	___lldiv@dividend+2,f
  3274  0491  0873               	movf	___lldiv@divisor+3,w
  3275  0492  3BF7               	subwfb	___lldiv@dividend+3,f
  3276  0493  1479               	bsf	___lldiv@quotient,0
  3277  0494                     l1753:
  3278  0494  3001               	movlw	1
  3279  0495                     u1025:
  3280  0495  36F3               	lsrf	___lldiv@divisor+3,f
  3281  0496  0CF2               	rrf	___lldiv@divisor+2,f
  3282  0497  0CF1               	rrf	___lldiv@divisor+1,f
  3283  0498  0CF0               	rrf	___lldiv@divisor,f
  3284  0499  0B89               	decfsz	9,f
  3285  049A  2C95               	goto	u1025
  3286  049B  3001               	movlw	1
  3287  049C  02FD               	subwf	___lldiv@counter,f
  3288  049D  1D03               	btfss	3,2
  3289  049E  2C74               	goto	l1745
  3290  049F                     l1757:
  3291  049F  087C               	movf	___lldiv@quotient+3,w
  3292  04A0  00F3               	movwf	?___lldiv+3
  3293  04A1  087B               	movf	___lldiv@quotient+2,w
  3294  04A2  00F2               	movwf	?___lldiv+2
  3295  04A3  087A               	movf	___lldiv@quotient+1,w
  3296  04A4  00F1               	movwf	?___lldiv+1
  3297  04A5  0879               	movf	___lldiv@quotient,w
  3298  04A6  00F0               	movwf	?___lldiv
  3299  04A7  0008               	return
  3300  04A8                     __end_of___lldiv:
  3301                           
  3302                           	psect	text9
  3303  0172                     __ptext9:	
  3304 ;; *************** function _setLedsForPositioning *****************
  3305 ;; Defined at:
  3306 ;;		line 325 in file "main.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  adcValue        4    0[COMMON] long 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;		None
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      void 
  3313 ;; Registers used:
  3314 ;;		wreg, status,2, status,0
  3315 ;; Tracked objects:
  3316 ;;		On entry : 1F/0
  3317 ;;		On exit  : 1F/2
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMMON   BANK0   BANK1
  3320 ;;      Params:         4       0       0
  3321 ;;      Locals:         0       0       0
  3322 ;;      Temps:          0       0       0
  3323 ;;      Totals:         4       0       0
  3324 ;;Total ram usage:        4 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; Hardware stack levels required when called:    4
  3327 ;; This function calls:
  3328 ;;		Nothing
  3329 ;; This function is called by:
  3330 ;;		_main
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           
  3335                           ;psect for function _setLedsForPositioning
  3336  0172                     _setLedsForPositioning:
  3337                           
  3338                           ;incstack = 0
  3339                           ; Regs used in _setLedsForPositioning: [wreg+status,2+status,0]
  3340                           ;main.c: 325: void setLedsForPositioning(int32_t adcValue);main.c: 326: {;main.c: 327:  
      +                             do { LATCbits.LATC0 = 0; } while(0);
  3341  0172  0022               	movlb	2	; select bank2
  3342  0173  100E               	bcf	14,0	;volatile
  3343                           
  3344                           ;main.c: 328:     do { LATCbits.LATC1 = 0; } while(0);
  3345  0174  108E               	bcf	14,1	;volatile
  3346                           
  3347                           ;main.c: 329:     do { LATCbits.LATC2 = 0; } while(0);
  3348  0175  110E               	bcf	14,2	;volatile
  3349                           
  3350                           ;main.c: 330:     do { LATCbits.LATC3 = 0; } while(0);
  3351  0176  118E               	bcf	14,3	;volatile
  3352                           
  3353                           ;main.c: 331:     do { LATCbits.LATC4 = 0; } while(0);
  3354  0177  120E               	bcf	14,4	;volatile
  3355                           
  3356                           ;main.c: 332:     do { LATCbits.LATC5 = 1; } while(0);
  3357  0178  168E               	bsf	14,5	;volatile
  3358                           
  3359                           ;main.c: 333:     do { LATCbits.LATC6 = 0; } while(0);
  3360  0179  130E               	bcf	14,6	;volatile
  3361                           
  3362                           ;main.c: 334:     do { LATCbits.LATC7 = 0; } while(0);
  3363  017A  138E               	bcf	14,7	;volatile
  3364                           
  3365                           ;main.c: 335:     do { LATBbits.LATB5 = 0; } while(0);
  3366  017B  128D               	bcf	13,5	;volatile
  3367                           
  3368                           ;main.c: 336:     do { LATBbits.LATB6 = 0; } while(0);
  3369  017C  130D               	bcf	13,6	;volatile
  3370                           
  3371                           ;main.c: 337:     do { LATBbits.LATB7 = 0; } while(0);
  3372  017D  138D               	bcf	13,7	;volatile
  3373                           
  3374                           ;main.c: 341:     if(adcValue < 54)
  3375  017E  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3376  017F  298D               	goto	l412
  3377  0180  0873               	movf	setLedsForPositioning@adcValue+3,w
  3378  0181  1D03               	btfss	3,2
  3379  0182  298F               	goto	l1809
  3380  0183  0872               	movf	setLedsForPositioning@adcValue+2,w
  3381  0184  1D03               	btfss	3,2
  3382  0185  298F               	goto	l1809
  3383  0186  0871               	movf	setLedsForPositioning@adcValue+1,w
  3384  0187  1D03               	btfss	3,2
  3385  0188  298F               	goto	l1809
  3386  0189  3036               	movlw	54
  3387  018A  0270               	subwf	setLedsForPositioning@adcValue,w
  3388  018B  1803               	btfsc	3,0
  3389  018C  298F               	goto	l1809
  3390  018D                     l412:	
  3391                           ;main.c: 342:     {;main.c: 343:         do { LATCbits.LATC0 = 1; } while(0);
  3392                           
  3393  018D  140E               	bsf	14,0	;volatile
  3394  018E  0008               	return
  3395  018F                     l1809:
  3396  018F  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3397  0190  299E               	goto	l416
  3398  0191  0873               	movf	setLedsForPositioning@adcValue+3,w
  3399  0192  1D03               	btfss	3,2
  3400  0193  29A1               	goto	l1811
  3401  0194  0872               	movf	setLedsForPositioning@adcValue+2,w
  3402  0195  1D03               	btfss	3,2
  3403  0196  29A1               	goto	l1811
  3404  0197  0871               	movf	setLedsForPositioning@adcValue+1,w
  3405  0198  1D03               	btfss	3,2
  3406  0199  29A1               	goto	l1811
  3407  019A  306C               	movlw	108
  3408  019B  0270               	subwf	setLedsForPositioning@adcValue,w
  3409  019C  1803               	btfsc	3,0
  3410  019D  29A1               	goto	l1811
  3411  019E                     l416:	
  3412                           ;main.c: 346:     {;main.c: 347:         do { LATCbits.LATC0 = 1; } while(0);
  3413                           
  3414  019E  140E               	bsf	14,0	;volatile
  3415                           
  3416                           ;main.c: 348:         do { LATCbits.LATC1 = 1; } while(0);
  3417  019F  148E               	bsf	14,1	;volatile
  3418  01A0  0008               	return
  3419  01A1                     l1811:
  3420  01A1  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3421  01A2  29B0               	goto	l422
  3422  01A3  0873               	movf	setLedsForPositioning@adcValue+3,w
  3423  01A4  1D03               	btfss	3,2
  3424  01A5  29B2               	goto	l1813
  3425  01A6  0872               	movf	setLedsForPositioning@adcValue+2,w
  3426  01A7  1D03               	btfss	3,2
  3427  01A8  29B2               	goto	l1813
  3428  01A9  0871               	movf	setLedsForPositioning@adcValue+1,w
  3429  01AA  1D03               	btfss	3,2
  3430  01AB  29B2               	goto	l1813
  3431  01AC  30A2               	movlw	162
  3432  01AD  0270               	subwf	setLedsForPositioning@adcValue,w
  3433  01AE  1803               	btfsc	3,0
  3434  01AF  29B2               	goto	l1813
  3435  01B0                     l422:	
  3436                           ;main.c: 351:     {;main.c: 352:         do { LATCbits.LATC1 = 1; } while(0);
  3437                           
  3438  01B0  148E               	bsf	14,1	;volatile
  3439  01B1  0008               	return
  3440  01B2                     l1813:
  3441  01B2  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3442  01B3  29C1               	goto	l426
  3443  01B4  0873               	movf	setLedsForPositioning@adcValue+3,w
  3444  01B5  1D03               	btfss	3,2
  3445  01B6  29C4               	goto	l1815
  3446  01B7  0872               	movf	setLedsForPositioning@adcValue+2,w
  3447  01B8  1D03               	btfss	3,2
  3448  01B9  29C4               	goto	l1815
  3449  01BA  0871               	movf	setLedsForPositioning@adcValue+1,w
  3450  01BB  1D03               	btfss	3,2
  3451  01BC  29C4               	goto	l1815
  3452  01BD  30D7               	movlw	215
  3453  01BE  0270               	subwf	setLedsForPositioning@adcValue,w
  3454  01BF  1803               	btfsc	3,0
  3455  01C0  29C4               	goto	l1815
  3456  01C1                     l426:	
  3457                           ;main.c: 355:     {;main.c: 356:         do { LATCbits.LATC1 = 1; } while(0);
  3458                           
  3459  01C1  148E               	bsf	14,1	;volatile
  3460                           
  3461                           ;main.c: 357:         do { LATCbits.LATC2 = 1; } while(0);
  3462  01C2  150E               	bsf	14,2	;volatile
  3463  01C3  0008               	return
  3464  01C4                     l1815:
  3465  01C4  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3466  01C5  29D2               	goto	l432
  3467  01C6  0873               	movf	setLedsForPositioning@adcValue+3,w
  3468  01C7  1D03               	btfss	3,2
  3469  01C8  29D4               	goto	l1817
  3470  01C9  0872               	movf	setLedsForPositioning@adcValue+2,w
  3471  01CA  1D03               	btfss	3,2
  3472  01CB  29D4               	goto	l1817
  3473  01CC  300D               	movlw	13
  3474  01CD  0270               	subwf	setLedsForPositioning@adcValue,w
  3475  01CE  3001               	movlw	1
  3476  01CF  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3477  01D0  1803               	btfsc	3,0
  3478  01D1  29D4               	goto	l1817
  3479  01D2                     l432:	
  3480                           ;main.c: 360:     {;main.c: 361:         do { LATCbits.LATC2 = 1; } while(0);
  3481                           
  3482  01D2  150E               	bsf	14,2	;volatile
  3483  01D3  0008               	return
  3484  01D4                     l1817:
  3485  01D4  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3486  01D5  29E2               	goto	l436
  3487  01D6  0873               	movf	setLedsForPositioning@adcValue+3,w
  3488  01D7  1D03               	btfss	3,2
  3489  01D8  29E5               	goto	l1819
  3490  01D9  0872               	movf	setLedsForPositioning@adcValue+2,w
  3491  01DA  1D03               	btfss	3,2
  3492  01DB  29E5               	goto	l1819
  3493  01DC  3043               	movlw	67
  3494  01DD  0270               	subwf	setLedsForPositioning@adcValue,w
  3495  01DE  3001               	movlw	1
  3496  01DF  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3497  01E0  1803               	btfsc	3,0
  3498  01E1  29E5               	goto	l1819
  3499  01E2                     l436:	
  3500                           ;main.c: 364:     {;main.c: 365:         do { LATCbits.LATC2 = 1; } while(0);
  3501                           
  3502  01E2  150E               	bsf	14,2	;volatile
  3503                           
  3504                           ;main.c: 366:         do { LATCbits.LATC3 = 1; } while(0);
  3505  01E3  158E               	bsf	14,3	;volatile
  3506  01E4  0008               	return
  3507  01E5                     l1819:
  3508  01E5  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3509  01E6  29F3               	goto	l442
  3510  01E7  0873               	movf	setLedsForPositioning@adcValue+3,w
  3511  01E8  1D03               	btfss	3,2
  3512  01E9  29F5               	goto	l1821
  3513  01EA  0872               	movf	setLedsForPositioning@adcValue+2,w
  3514  01EB  1D03               	btfss	3,2
  3515  01EC  29F5               	goto	l1821
  3516  01ED  3079               	movlw	121
  3517  01EE  0270               	subwf	setLedsForPositioning@adcValue,w
  3518  01EF  3001               	movlw	1
  3519  01F0  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3520  01F1  1803               	btfsc	3,0
  3521  01F2  29F5               	goto	l1821
  3522  01F3                     l442:	
  3523                           ;main.c: 369:     {;main.c: 370:         do { LATCbits.LATC3 = 1; } while(0);
  3524                           
  3525  01F3  158E               	bsf	14,3	;volatile
  3526  01F4  0008               	return
  3527  01F5                     l1821:
  3528  01F5  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3529  01F6  2A03               	goto	l446
  3530  01F7  0873               	movf	setLedsForPositioning@adcValue+3,w
  3531  01F8  1D03               	btfss	3,2
  3532  01F9  2A06               	goto	l1823
  3533  01FA  0872               	movf	setLedsForPositioning@adcValue+2,w
  3534  01FB  1D03               	btfss	3,2
  3535  01FC  2A06               	goto	l1823
  3536  01FD  30AF               	movlw	175
  3537  01FE  0270               	subwf	setLedsForPositioning@adcValue,w
  3538  01FF  3001               	movlw	1
  3539  0200  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3540  0201  1803               	btfsc	3,0
  3541  0202  2A06               	goto	l1823
  3542  0203                     l446:	
  3543                           ;main.c: 373:     {;main.c: 374:         do { LATCbits.LATC3 = 1; } while(0);
  3544                           
  3545  0203  158E               	bsf	14,3	;volatile
  3546                           
  3547                           ;main.c: 375:         do { LATCbits.LATC4 = 1; } while(0);
  3548  0204  160E               	bsf	14,4	;volatile
  3549  0205  0008               	return
  3550  0206                     l1823:
  3551  0206  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3552  0207  2A14               	goto	l452
  3553  0208  0873               	movf	setLedsForPositioning@adcValue+3,w
  3554  0209  1D03               	btfss	3,2
  3555  020A  2A16               	goto	l1825
  3556  020B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3557  020C  1D03               	btfss	3,2
  3558  020D  2A16               	goto	l1825
  3559  020E  30E5               	movlw	229
  3560  020F  0270               	subwf	setLedsForPositioning@adcValue,w
  3561  0210  3001               	movlw	1
  3562  0211  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3563  0212  1803               	btfsc	3,0
  3564  0213  2A16               	goto	l1825
  3565  0214                     l452:	
  3566                           ;main.c: 378:     {;main.c: 379:         do { LATCbits.LATC4 = 1; } while(0);
  3567                           
  3568  0214  160E               	bsf	14,4	;volatile
  3569  0215  0008               	return
  3570  0216                     l1825:
  3571  0216  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3572  0217  0008               	return
  3573  0218  0873               	movf	setLedsForPositioning@adcValue+3,w
  3574  0219  1D03               	btfss	3,2
  3575  021A  2A24               	goto	l1829
  3576  021B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3577  021C  1D03               	btfss	3,2
  3578  021D  2A24               	goto	l1829
  3579  021E  301A               	movlw	26
  3580  021F  0270               	subwf	setLedsForPositioning@adcValue,w
  3581  0220  3002               	movlw	2
  3582  0221  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3583  0222  1C03               	btfss	3,0
  3584  0223  0008               	return
  3585  0224                     l1829:
  3586  0224  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3587  0225  2A32               	goto	l458
  3588  0226  0873               	movf	setLedsForPositioning@adcValue+3,w
  3589  0227  1D03               	btfss	3,2
  3590  0228  2A34               	goto	l1831
  3591  0229  0872               	movf	setLedsForPositioning@adcValue+2,w
  3592  022A  1D03               	btfss	3,2
  3593  022B  2A34               	goto	l1831
  3594  022C  3050               	movlw	80
  3595  022D  0270               	subwf	setLedsForPositioning@adcValue,w
  3596  022E  3002               	movlw	2
  3597  022F  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3598  0230  1803               	btfsc	3,0
  3599  0231  2A34               	goto	l1831
  3600  0232                     l458:	
  3601                           ;main.c: 386:     {;main.c: 387:         do { LATCbits.LATC6 = 1; } while(0);
  3602                           
  3603  0232  170E               	bsf	14,6	;volatile
  3604  0233  0008               	return
  3605  0234                     l1831:
  3606  0234  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3607  0235  2A42               	goto	l462
  3608  0236  0873               	movf	setLedsForPositioning@adcValue+3,w
  3609  0237  1D03               	btfss	3,2
  3610  0238  2A45               	goto	l1833
  3611  0239  0872               	movf	setLedsForPositioning@adcValue+2,w
  3612  023A  1D03               	btfss	3,2
  3613  023B  2A45               	goto	l1833
  3614  023C  3086               	movlw	134
  3615  023D  0270               	subwf	setLedsForPositioning@adcValue,w
  3616  023E  3002               	movlw	2
  3617  023F  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3618  0240  1803               	btfsc	3,0
  3619  0241  2A45               	goto	l1833
  3620  0242                     l462:	
  3621                           ;main.c: 390:     {;main.c: 391:         do { LATCbits.LATC6 = 1; } while(0);
  3622                           
  3623  0242  170E               	bsf	14,6	;volatile
  3624                           
  3625                           ;main.c: 392:         do { LATCbits.LATC7 = 1; } while(0);
  3626  0243  178E               	bsf	14,7	;volatile
  3627  0244  0008               	return
  3628  0245                     l1833:
  3629  0245  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3630  0246  2A53               	goto	l468
  3631  0247  0873               	movf	setLedsForPositioning@adcValue+3,w
  3632  0248  1D03               	btfss	3,2
  3633  0249  2A55               	goto	l1835
  3634  024A  0872               	movf	setLedsForPositioning@adcValue+2,w
  3635  024B  1D03               	btfss	3,2
  3636  024C  2A55               	goto	l1835
  3637  024D  30BC               	movlw	188
  3638  024E  0270               	subwf	setLedsForPositioning@adcValue,w
  3639  024F  3002               	movlw	2
  3640  0250  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3641  0251  1803               	btfsc	3,0
  3642  0252  2A55               	goto	l1835
  3643  0253                     l468:	
  3644                           ;main.c: 395:     {;main.c: 396:         do { LATCbits.LATC7 = 1; } while(0);
  3645                           
  3646  0253  178E               	bsf	14,7	;volatile
  3647  0254  0008               	return
  3648  0255                     l1835:
  3649  0255  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3650  0256  2A63               	goto	l472
  3651  0257  0873               	movf	setLedsForPositioning@adcValue+3,w
  3652  0258  1D03               	btfss	3,2
  3653  0259  2A66               	goto	l1837
  3654  025A  0872               	movf	setLedsForPositioning@adcValue+2,w
  3655  025B  1D03               	btfss	3,2
  3656  025C  2A66               	goto	l1837
  3657  025D  30F2               	movlw	242
  3658  025E  0270               	subwf	setLedsForPositioning@adcValue,w
  3659  025F  3002               	movlw	2
  3660  0260  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3661  0261  1803               	btfsc	3,0
  3662  0262  2A66               	goto	l1837
  3663  0263                     l472:	
  3664                           ;main.c: 399:     {;main.c: 400:         do { LATCbits.LATC7 = 1; } while(0);
  3665                           
  3666  0263  178E               	bsf	14,7	;volatile
  3667                           
  3668                           ;main.c: 401:         do { LATBbits.LATB5 = 1; } while(0);
  3669  0264  168D               	bsf	13,5	;volatile
  3670  0265  0008               	return
  3671  0266                     l1837:
  3672  0266  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3673  0267  2A74               	goto	l478
  3674  0268  0873               	movf	setLedsForPositioning@adcValue+3,w
  3675  0269  1D03               	btfss	3,2
  3676  026A  2A76               	goto	l1839
  3677  026B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3678  026C  1D03               	btfss	3,2
  3679  026D  2A76               	goto	l1839
  3680  026E  3028               	movlw	40
  3681  026F  0270               	subwf	setLedsForPositioning@adcValue,w
  3682  0270  3003               	movlw	3
  3683  0271  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3684  0272  1803               	btfsc	3,0
  3685  0273  2A76               	goto	l1839
  3686  0274                     l478:	
  3687                           ;main.c: 404:     {;main.c: 405:         do { LATBbits.LATB5 = 1; } while(0);
  3688                           
  3689  0274  168D               	bsf	13,5	;volatile
  3690  0275  0008               	return
  3691  0276                     l1839:
  3692  0276  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3693  0277  2A84               	goto	l482
  3694  0278  0873               	movf	setLedsForPositioning@adcValue+3,w
  3695  0279  1D03               	btfss	3,2
  3696  027A  2A87               	goto	l1841
  3697  027B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3698  027C  1D03               	btfss	3,2
  3699  027D  2A87               	goto	l1841
  3700  027E  305D               	movlw	93
  3701  027F  0270               	subwf	setLedsForPositioning@adcValue,w
  3702  0280  3003               	movlw	3
  3703  0281  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3704  0282  1803               	btfsc	3,0
  3705  0283  2A87               	goto	l1841
  3706  0284                     l482:	
  3707                           ;main.c: 408:     {;main.c: 409:         do { LATBbits.LATB5 = 1; } while(0);
  3708                           
  3709  0284  168D               	bsf	13,5	;volatile
  3710                           
  3711                           ;main.c: 410:         do { LATBbits.LATB6 = 1; } while(0);
  3712  0285  170D               	bsf	13,6	;volatile
  3713  0286  0008               	return
  3714  0287                     l1841:
  3715  0287  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3716  0288  2A95               	goto	l488
  3717  0289  0873               	movf	setLedsForPositioning@adcValue+3,w
  3718  028A  1D03               	btfss	3,2
  3719  028B  2A97               	goto	l1843
  3720  028C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3721  028D  1D03               	btfss	3,2
  3722  028E  2A97               	goto	l1843
  3723  028F  3093               	movlw	147
  3724  0290  0270               	subwf	setLedsForPositioning@adcValue,w
  3725  0291  3003               	movlw	3
  3726  0292  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3727  0293  1803               	btfsc	3,0
  3728  0294  2A97               	goto	l1843
  3729  0295                     l488:	
  3730                           ;main.c: 413:     {;main.c: 414:         do { LATBbits.LATB6 = 1; } while(0);
  3731                           
  3732  0295  170D               	bsf	13,6	;volatile
  3733  0296  0008               	return
  3734  0297                     l1843:
  3735  0297  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3736  0298  2AA5               	goto	l492
  3737  0299  0873               	movf	setLedsForPositioning@adcValue+3,w
  3738  029A  1D03               	btfss	3,2
  3739  029B  2AA8               	goto	l497
  3740  029C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3741  029D  1D03               	btfss	3,2
  3742  029E  2AA8               	goto	l497
  3743  029F  30C9               	movlw	201
  3744  02A0  0270               	subwf	setLedsForPositioning@adcValue,w
  3745  02A1  3003               	movlw	3
  3746  02A2  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3747  02A3  1803               	btfsc	3,0
  3748  02A4  2AA8               	goto	l497
  3749  02A5                     l492:	
  3750                           ;main.c: 417:     {;main.c: 418:         do { LATBbits.LATB6 = 1; } while(0);
  3751                           
  3752  02A5  170D               	bsf	13,6	;volatile
  3753                           
  3754                           ;main.c: 419:         do { LATBbits.LATB7 = 1; } while(0);
  3755  02A6  178D               	bsf	13,7	;volatile
  3756  02A7  0008               	return
  3757  02A8                     l497:	
  3758                           ;main.c: 422:     {;main.c: 423:         do { LATBbits.LATB7 = 1; } while(0);
  3759                           
  3760  02A8  178D               	bsf	13,7	;volatile
  3761  02A9  0008               	return
  3762  02AA                     __end_of_setLedsForPositioning:
  3763                           
  3764                           	psect	text10
  3765  04A8                     __ptext10:	
  3766 ;; *************** function ___lmul *****************
  3767 ;; Defined at:
  3768 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  multiplier      4    0[COMMON] unsigned long 
  3771 ;;  multiplicand    4    4[COMMON] unsigned long 
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;  product         4    8[COMMON] unsigned long 
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  4    0[COMMON] unsigned long 
  3776 ;; Registers used:
  3777 ;;		wreg, status,2, status,0
  3778 ;; Tracked objects:
  3779 ;;		On entry : 1F/0
  3780 ;;		On exit  : 1F/0
  3781 ;;		Unchanged: 1F/0
  3782 ;; Data sizes:     COMMON   BANK0   BANK1
  3783 ;;      Params:         8       0       0
  3784 ;;      Locals:         4       0       0
  3785 ;;      Temps:          0       0       0
  3786 ;;      Totals:        12       0       0
  3787 ;;Total ram usage:       12 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    4
  3790 ;; This function calls:
  3791 ;;		Nothing
  3792 ;; This function is called by:
  3793 ;;		_main
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function ___lmul
  3799  04A8                     ___lmul:
  3800                           
  3801                           ;incstack = 0
  3802                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3803  04A8  3000               	movlw	0
  3804  04A9  00FB               	movwf	___lmul@product+3
  3805  04AA  3000               	movlw	0
  3806  04AB  00FA               	movwf	___lmul@product+2
  3807  04AC  3000               	movlw	0
  3808  04AD  00F9               	movwf	___lmul@product+1
  3809  04AE  3000               	movlw	0
  3810  04AF  00F8               	movwf	___lmul@product
  3811  04B0                     l1847:
  3812  04B0  1C70               	btfss	___lmul@multiplier,0
  3813  04B1  2CBA               	goto	l1851
  3814  04B2  0874               	movf	___lmul@multiplicand,w
  3815  04B3  07F8               	addwf	___lmul@product,f
  3816  04B4  0875               	movf	___lmul@multiplicand+1,w
  3817  04B5  3DF9               	addwfc	___lmul@product+1,f
  3818  04B6  0876               	movf	___lmul@multiplicand+2,w
  3819  04B7  3DFA               	addwfc	___lmul@product+2,f
  3820  04B8  0877               	movf	___lmul@multiplicand+3,w
  3821  04B9  3DFB               	addwfc	___lmul@product+3,f
  3822  04BA                     l1851:
  3823  04BA  3001               	movlw	1
  3824  04BB                     u1265:
  3825  04BB  35F4               	lslf	___lmul@multiplicand,f
  3826  04BC  0DF5               	rlf	___lmul@multiplicand+1,f
  3827  04BD  0DF6               	rlf	___lmul@multiplicand+2,f
  3828  04BE  0DF7               	rlf	___lmul@multiplicand+3,f
  3829  04BF  0B89               	decfsz	9,f
  3830  04C0  2CBB               	goto	u1265
  3831  04C1  3001               	movlw	1
  3832  04C2                     u1275:
  3833  04C2  36F3               	lsrf	___lmul@multiplier+3,f
  3834  04C3  0CF2               	rrf	___lmul@multiplier+2,f
  3835  04C4  0CF1               	rrf	___lmul@multiplier+1,f
  3836  04C5  0CF0               	rrf	___lmul@multiplier,f
  3837  04C6  0B89               	decfsz	9,f
  3838  04C7  2CC2               	goto	u1275
  3839  04C8  0873               	movf	___lmul@multiplier+3,w
  3840  04C9  0472               	iorwf	___lmul@multiplier+2,w
  3841  04CA  0471               	iorwf	___lmul@multiplier+1,w
  3842  04CB  0470               	iorwf	___lmul@multiplier,w
  3843  04CC  1D03               	skipz
  3844  04CD  2CB0               	goto	l1847
  3845  04CE  087B               	movf	___lmul@product+3,w
  3846  04CF  00F3               	movwf	?___lmul+3
  3847  04D0  087A               	movf	___lmul@product+2,w
  3848  04D1  00F2               	movwf	?___lmul+2
  3849  04D2  0879               	movf	___lmul@product+1,w
  3850  04D3  00F1               	movwf	?___lmul+1
  3851  04D4  0878               	movf	___lmul@product,w
  3852  04D5  00F0               	movwf	?___lmul
  3853  04D6  0008               	return
  3854  04D7                     __end_of___lmul:
  3855                           
  3856                           	psect	text11
  3857  02AA                     __ptext11:	
  3858 ;; *************** function ___aldiv *****************
  3859 ;; Defined at:
  3860 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  divisor         4    0[BANK0 ] long 
  3863 ;;  dividend        4    4[BANK0 ] long 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  quotient        4   10[BANK0 ] long 
  3866 ;;  sign            1    9[BANK0 ] unsigned char 
  3867 ;;  counter         1    8[BANK0 ] unsigned char 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  4    0[BANK0 ] long 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2, status,0
  3872 ;; Tracked objects:
  3873 ;;		On entry : 1F/0
  3874 ;;		On exit  : 1F/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1
  3877 ;;      Params:         0       8       0
  3878 ;;      Locals:         0       6       0
  3879 ;;      Temps:          1       0       0
  3880 ;;      Totals:         1      14       0
  3881 ;;Total ram usage:       15 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    4
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_main
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           
  3892                           ;psect for function ___aldiv
  3893  02AA                     ___aldiv:
  3894                           
  3895                           ;incstack = 0
  3896                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3897  02AA  01A9               	clrf	___aldiv@sign
  3898  02AB  1FA3               	btfss	___aldiv@divisor+3,7
  3899  02AC  2ABA               	goto	l632
  3900  02AD  09A0               	comf	___aldiv@divisor,f
  3901  02AE  09A1               	comf	___aldiv@divisor+1,f
  3902  02AF  09A2               	comf	___aldiv@divisor+2,f
  3903  02B0  09A3               	comf	___aldiv@divisor+3,f
  3904  02B1  0AA0               	incf	___aldiv@divisor,f
  3905  02B2  1903               	skipnz
  3906  02B3  0AA1               	incf	___aldiv@divisor+1,f
  3907  02B4  1903               	skipnz
  3908  02B5  0AA2               	incf	___aldiv@divisor+2,f
  3909  02B6  1903               	skipnz
  3910  02B7  0AA3               	incf	___aldiv@divisor+3,f
  3911  02B8  01A9               	clrf	___aldiv@sign
  3912  02B9  0AA9               	incf	___aldiv@sign,f
  3913  02BA                     l632:
  3914  02BA  1FA7               	btfss	___aldiv@dividend+3,7
  3915  02BB  2ACB               	goto	l1869
  3916  02BC  09A4               	comf	___aldiv@dividend,f
  3917  02BD  09A5               	comf	___aldiv@dividend+1,f
  3918  02BE  09A6               	comf	___aldiv@dividend+2,f
  3919  02BF  09A7               	comf	___aldiv@dividend+3,f
  3920  02C0  0AA4               	incf	___aldiv@dividend,f
  3921  02C1  1903               	skipnz
  3922  02C2  0AA5               	incf	___aldiv@dividend+1,f
  3923  02C3  1903               	skipnz
  3924  02C4  0AA6               	incf	___aldiv@dividend+2,f
  3925  02C5  1903               	skipnz
  3926  02C6  0AA7               	incf	___aldiv@dividend+3,f
  3927  02C7  3001               	movlw	1
  3928  02C8  00FC               	movwf	??___aldiv
  3929  02C9  087C               	movf	??___aldiv,w
  3930  02CA  06A9               	xorwf	___aldiv@sign,f
  3931  02CB                     l1869:
  3932  02CB  3000               	movlw	0
  3933  02CC  00AD               	movwf	___aldiv@quotient+3
  3934  02CD  3000               	movlw	0
  3935  02CE  00AC               	movwf	___aldiv@quotient+2
  3936  02CF  3000               	movlw	0
  3937  02D0  00AB               	movwf	___aldiv@quotient+1
  3938  02D1  3000               	movlw	0
  3939  02D2  00AA               	movwf	___aldiv@quotient
  3940  02D3  0823               	movf	___aldiv@divisor+3,w
  3941  02D4  0422               	iorwf	___aldiv@divisor+2,w
  3942  02D5  0421               	iorwf	___aldiv@divisor+1,w
  3943  02D6  0420               	iorwf	___aldiv@divisor,w
  3944  02D7  1903               	skipnz
  3945  02D8  2B14               	goto	l1891
  3946  02D9  01A8               	clrf	___aldiv@counter
  3947  02DA  0AA8               	incf	___aldiv@counter,f
  3948  02DB                     l1877:
  3949  02DB  1BA3               	btfsc	___aldiv@divisor+3,7
  3950  02DC  2AE9               	goto	l1879
  3951  02DD  3001               	movlw	1
  3952  02DE                     u1325:
  3953  02DE  35A0               	lslf	___aldiv@divisor,f
  3954  02DF  0DA1               	rlf	___aldiv@divisor+1,f
  3955  02E0  0DA2               	rlf	___aldiv@divisor+2,f
  3956  02E1  0DA3               	rlf	___aldiv@divisor+3,f
  3957  02E2  0B89               	decfsz	9,f
  3958  02E3  2ADE               	goto	u1325
  3959  02E4  3001               	movlw	1
  3960  02E5  00FC               	movwf	??___aldiv
  3961  02E6  087C               	movf	??___aldiv,w
  3962  02E7  07A8               	addwf	___aldiv@counter,f
  3963  02E8  2ADB               	goto	l1877
  3964  02E9                     l1879:
  3965  02E9  3001               	movlw	1
  3966  02EA                     u1345:
  3967  02EA  35AA               	lslf	___aldiv@quotient,f
  3968  02EB  0DAB               	rlf	___aldiv@quotient+1,f
  3969  02EC  0DAC               	rlf	___aldiv@quotient+2,f
  3970  02ED  0DAD               	rlf	___aldiv@quotient+3,f
  3971  02EE  0B89               	decfsz	9,f
  3972  02EF  2AEA               	goto	u1345
  3973  02F0  0823               	movf	___aldiv@divisor+3,w
  3974  02F1  0227               	subwf	___aldiv@dividend+3,w
  3975  02F2  1D03               	skipz
  3976  02F3  2AFE               	goto	u1355
  3977  02F4  0822               	movf	___aldiv@divisor+2,w
  3978  02F5  0226               	subwf	___aldiv@dividend+2,w
  3979  02F6  1D03               	skipz
  3980  02F7  2AFE               	goto	u1355
  3981  02F8  0821               	movf	___aldiv@divisor+1,w
  3982  02F9  0225               	subwf	___aldiv@dividend+1,w
  3983  02FA  1D03               	skipz
  3984  02FB  2AFE               	goto	u1355
  3985  02FC  0820               	movf	___aldiv@divisor,w
  3986  02FD  0224               	subwf	___aldiv@dividend,w
  3987  02FE                     u1355:
  3988  02FE  1C03               	skipc
  3989  02FF  2B09               	goto	l1887
  3990  0300  0820               	movf	___aldiv@divisor,w
  3991  0301  02A4               	subwf	___aldiv@dividend,f
  3992  0302  0821               	movf	___aldiv@divisor+1,w
  3993  0303  3BA5               	subwfb	___aldiv@dividend+1,f
  3994  0304  0822               	movf	___aldiv@divisor+2,w
  3995  0305  3BA6               	subwfb	___aldiv@dividend+2,f
  3996  0306  0823               	movf	___aldiv@divisor+3,w
  3997  0307  3BA7               	subwfb	___aldiv@dividend+3,f
  3998  0308  142A               	bsf	___aldiv@quotient,0
  3999  0309                     l1887:
  4000  0309  3001               	movlw	1
  4001  030A                     u1365:
  4002  030A  36A3               	lsrf	___aldiv@divisor+3,f
  4003  030B  0CA2               	rrf	___aldiv@divisor+2,f
  4004  030C  0CA1               	rrf	___aldiv@divisor+1,f
  4005  030D  0CA0               	rrf	___aldiv@divisor,f
  4006  030E  0B89               	decfsz	9,f
  4007  030F  2B0A               	goto	u1365
  4008  0310  3001               	movlw	1
  4009  0311  02A8               	subwf	___aldiv@counter,f
  4010  0312  1D03               	btfss	3,2
  4011  0313  2AE9               	goto	l1879
  4012  0314                     l1891:
  4013  0314  0829               	movf	___aldiv@sign,w
  4014  0315  1903               	btfsc	3,2
  4015  0316  2B22               	goto	l1895
  4016  0317  09AA               	comf	___aldiv@quotient,f
  4017  0318  09AB               	comf	___aldiv@quotient+1,f
  4018  0319  09AC               	comf	___aldiv@quotient+2,f
  4019  031A  09AD               	comf	___aldiv@quotient+3,f
  4020  031B  0AAA               	incf	___aldiv@quotient,f
  4021  031C  1903               	skipnz
  4022  031D  0AAB               	incf	___aldiv@quotient+1,f
  4023  031E  1903               	skipnz
  4024  031F  0AAC               	incf	___aldiv@quotient+2,f
  4025  0320  1903               	skipnz
  4026  0321  0AAD               	incf	___aldiv@quotient+3,f
  4027  0322                     l1895:
  4028  0322  082D               	movf	___aldiv@quotient+3,w
  4029  0323  00A3               	movwf	?___aldiv+3
  4030  0324  082C               	movf	___aldiv@quotient+2,w
  4031  0325  00A2               	movwf	?___aldiv+2
  4032  0326  082B               	movf	___aldiv@quotient+1,w
  4033  0327  00A1               	movwf	?___aldiv+1
  4034  0328  082A               	movf	___aldiv@quotient,w
  4035  0329  00A0               	movwf	?___aldiv
  4036  032A  0008               	return
  4037  032B                     __end_of___aldiv:
  4038                           
  4039                           	psect	text12
  4040  061F                     __ptext12:	
  4041 ;; *************** function _TMR2_StartTimer *****************
  4042 ;; Defined at:
  4043 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;		None
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;		None
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  1    wreg      void 
  4050 ;; Registers used:
  4051 ;;		None
  4052 ;; Tracked objects:
  4053 ;;		On entry : 1F/0
  4054 ;;		On exit  : 1F/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMMON   BANK0   BANK1
  4057 ;;      Params:         0       0       0
  4058 ;;      Locals:         0       0       0
  4059 ;;      Temps:          0       0       0
  4060 ;;      Totals:         0       0       0
  4061 ;;Total ram usage:        0 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    4
  4064 ;; This function calls:
  4065 ;;		Nothing
  4066 ;; This function is called by:
  4067 ;;		_main
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           
  4072                           ;psect for function _TMR2_StartTimer
  4073  061F                     _TMR2_StartTimer:
  4074                           
  4075                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  4076                           
  4077                           ;incstack = 0
  4078                           ; Regs used in _TMR2_StartTimer: []
  4079  061F  151C               	bsf	28,2	;volatile
  4080  0620  0008               	return
  4081  0621                     __end_of_TMR2_StartTimer:
  4082                           
  4083                           	psect	text13
  4084  05DA                     __ptext13:	
  4085 ;; *************** function _SYSTEM_Initialize *****************
  4086 ;; Defined at:
  4087 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;		None
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  1    wreg      void 
  4094 ;; Registers used:
  4095 ;;		wreg, status,2, status,0, pclath, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : B1F/0
  4098 ;;		On exit  : 1F/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMMON   BANK0   BANK1
  4101 ;;      Params:         0       0       0
  4102 ;;      Locals:         0       0       0
  4103 ;;      Temps:          0       0       0
  4104 ;;      Totals:         0       0       0
  4105 ;;Total ram usage:        0 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    6
  4108 ;; This function calls:
  4109 ;;		_ADC_Initialize
  4110 ;;		_OSCILLATOR_Initialize
  4111 ;;		_PIN_MANAGER_Initialize
  4112 ;;		_PWM3_Initialize
  4113 ;;		_TMR0_Initialize
  4114 ;;		_TMR2_Initialize
  4115 ;;		_WDT_Initialize
  4116 ;; This function is called by:
  4117 ;;		_main
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           
  4122                           ;psect for function _SYSTEM_Initialize
  4123  05DA                     _SYSTEM_Initialize:
  4124                           
  4125                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4126                           
  4127                           ;incstack = 0
  4128                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4129  05DA  255C               	fcall	_PIN_MANAGER_Initialize
  4130                           
  4131                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4132  05DB  2606               	fcall	_OSCILLATOR_Initialize
  4133                           
  4134                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4135  05DC  261B               	fcall	_WDT_Initialize
  4136                           
  4137                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  4138  05DD  25F2               	fcall	_ADC_Initialize
  4139                           
  4140                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  4141  05DE  25EA               	fcall	_PWM3_Initialize
  4142                           
  4143                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  4144  05DF  25E2               	fcall	_TMR2_Initialize
  4145                           
  4146                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  4147  05E0  25A2               	fcall	_TMR0_Initialize
  4148  05E1  0008               	return
  4149  05E2                     __end_of_SYSTEM_Initialize:
  4150                           
  4151                           	psect	text14
  4152  061B                     __ptext14:	
  4153 ;; *************** function _WDT_Initialize *****************
  4154 ;; Defined at:
  4155 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg
  4164 ;; Tracked objects:
  4165 ;;		On entry : B1F/2
  4166 ;;		On exit  : B1F/1
  4167 ;;		Unchanged: B00/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1
  4169 ;;      Params:         0       0       0
  4170 ;;      Locals:         0       0       0
  4171 ;;      Temps:          0       0       0
  4172 ;;      Totals:         0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    4
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_SYSTEM_Initialize
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           
  4184                           ;psect for function _WDT_Initialize
  4185  061B                     _WDT_Initialize:
  4186                           
  4187                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _WDT_Initialize: [wreg]
  4191  061B  3016               	movlw	22
  4192  061C  0021               	movlb	1	; select bank1
  4193  061D  0097               	movwf	23	;volatile
  4194  061E  0008               	return
  4195  061F                     __end_of_WDT_Initialize:
  4196                           
  4197                           	psect	text15
  4198  05E2                     __ptext15:	
  4199 ;; *************** function _TMR2_Initialize *****************
  4200 ;; Defined at:
  4201 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;		None
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;		None
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  1    wreg      void 
  4208 ;; Registers used:
  4209 ;;		wreg, status,2
  4210 ;; Tracked objects:
  4211 ;;		On entry : B1F/C
  4212 ;;		On exit  : B1F/0
  4213 ;;		Unchanged: B00/0
  4214 ;; Data sizes:     COMMON   BANK0   BANK1
  4215 ;;      Params:         0       0       0
  4216 ;;      Locals:         0       0       0
  4217 ;;      Temps:          0       0       0
  4218 ;;      Totals:         0       0       0
  4219 ;;Total ram usage:        0 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; Hardware stack levels required when called:    4
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_SYSTEM_Initialize
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           
  4230                           ;psect for function _TMR2_Initialize
  4231  05E2                     _TMR2_Initialize:
  4232                           
  4233                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4234                           
  4235                           ;incstack = 0
  4236                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4237  05E2  30FF               	movlw	255
  4238  05E3  0020               	movlb	0	; select bank0
  4239  05E4  009B               	movwf	27	;volatile
  4240                           
  4241                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4242  05E5  019A               	clrf	26	;volatile
  4243                           
  4244                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4245  05E6  1091               	bcf	17,1	;volatile
  4246                           
  4247                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  4248  05E7  301C               	movlw	28
  4249  05E8  009C               	movwf	28	;volatile
  4250  05E9  0008               	return
  4251  05EA                     __end_of_TMR2_Initialize:
  4252                           
  4253                           	psect	text16
  4254  05A2                     __ptext16:	
  4255 ;; *************** function _TMR0_Initialize *****************
  4256 ;; Defined at:
  4257 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;		None
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;		None
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  1    wreg      void 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0, pclath, cstack
  4266 ;; Tracked objects:
  4267 ;;		On entry : B1F/0
  4268 ;;		On exit  : 1F/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMMON   BANK0   BANK1
  4271 ;;      Params:         0       0       0
  4272 ;;      Locals:         0       0       0
  4273 ;;      Temps:          1       0       0
  4274 ;;      Totals:         1       0       0
  4275 ;;Total ram usage:        1 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    5
  4278 ;; This function calls:
  4279 ;;		_TMR0_SetInterruptHandler
  4280 ;; This function is called by:
  4281 ;;		_SYSTEM_Initialize
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           
  4286                           ;psect for function _TMR0_Initialize
  4287  05A2                     _TMR0_Initialize:
  4288                           
  4289                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  4290                           
  4291                           ;incstack = 0
  4292                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4293  05A2  0021               	movlb	1	; select bank1
  4294  05A3  0815               	movf	21,w	;volatile
  4295  05A4  39C0               	andlw	192
  4296  05A5  3811               	iorlw	17
  4297  05A6  0095               	movwf	21	;volatile
  4298                           
  4299                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  4300  05A7  3006               	movlw	6
  4301  05A8  0020               	movlb	0	; select bank0
  4302  05A9  0095               	movwf	21	;volatile
  4303                           
  4304                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  4305  05AA  3006               	movlw	6
  4306  05AB  00F2               	movwf	??_TMR0_Initialize
  4307  05AC  0872               	movf	??_TMR0_Initialize,w
  4308  05AD  00E7               	movwf	_timer0ReloadVal	;volatile
  4309                           
  4310                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  4311  05AE  110B               	bcf	11,2	;volatile
  4312                           
  4313                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  4314  05AF  168B               	bsf	11,5	;volatile
  4315                           
  4316                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  4317  05B0  3021               	movlw	low _TMR0_DefaultInterruptHandler
  4318  05B1  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4319  05B2  3006               	movlw	high _TMR0_DefaultInterruptHandler
  4320  05B3  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4321  05B4  2612               	fcall	_TMR0_SetInterruptHandler
  4322  05B5  0008               	return
  4323  05B6                     __end_of_TMR0_Initialize:
  4324                           
  4325                           	psect	text17
  4326  0612                     __ptext17:	
  4327 ;; *************** function _TMR0_SetInterruptHandler *****************
  4328 ;; Defined at:
  4329 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4332 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;		None
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      void 
  4337 ;; Registers used:
  4338 ;;		wreg
  4339 ;; Tracked objects:
  4340 ;;		On entry : 1F/0
  4341 ;;		On exit  : 1F/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMMON   BANK0   BANK1
  4344 ;;      Params:         2       0       0
  4345 ;;      Locals:         0       0       0
  4346 ;;      Temps:          0       0       0
  4347 ;;      Totals:         2       0       0
  4348 ;;Total ram usage:        2 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    4
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_TMR0_Initialize
  4355 ;;		_main
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function _TMR0_SetInterruptHandler
  4361  0612                     _TMR0_SetInterruptHandler:
  4362                           
  4363                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  4364                           
  4365                           ;incstack = 0
  4366                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4367  0612  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4368  0613  00E6               	movwf	_TMR0_InterruptHandler+1
  4369  0614  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4370  0615  00E5               	movwf	_TMR0_InterruptHandler
  4371  0616  0008               	return
  4372  0617                     __end_of_TMR0_SetInterruptHandler:
  4373                           
  4374                           	psect	text18
  4375  05EA                     __ptext18:	
  4376 ;; *************** function _PWM3_Initialize *****************
  4377 ;; Defined at:
  4378 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      void 
  4385 ;; Registers used:
  4386 ;;		wreg
  4387 ;; Tracked objects:
  4388 ;;		On entry : B1F/1
  4389 ;;		On exit  : B1F/C
  4390 ;;		Unchanged: B00/0
  4391 ;; Data sizes:     COMMON   BANK0   BANK1
  4392 ;;      Params:         0       0       0
  4393 ;;      Locals:         0       0       0
  4394 ;;      Temps:          0       0       0
  4395 ;;      Totals:         0       0       0
  4396 ;;Total ram usage:        0 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    4
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_SYSTEM_Initialize
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           
  4407                           ;psect for function _PWM3_Initialize
  4408  05EA                     _PWM3_Initialize:
  4409                           
  4410                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  4411                           
  4412                           ;incstack = 0
  4413                           ; Regs used in _PWM3_Initialize: [wreg]
  4414  05EA  30D0               	movlw	208
  4415  05EB  002C               	movlb	12	; select bank12
  4416  05EC  0099               	movwf	25	;volatile
  4417                           
  4418                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  4419  05ED  30FF               	movlw	255
  4420  05EE  0098               	movwf	24	;volatile
  4421                           
  4422                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  4423  05EF  30C0               	movlw	192
  4424  05F0  0097               	movwf	23	;volatile
  4425  05F1  0008               	return
  4426  05F2                     __end_of_PWM3_Initialize:
  4427                           
  4428                           	psect	text19
  4429  055C                     __ptext19:	
  4430 ;; *************** function _PIN_MANAGER_Initialize *****************
  4431 ;; Defined at:
  4432 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;		None
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;		None
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  1    wreg      void 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2
  4441 ;; Tracked objects:
  4442 ;;		On entry : B1F/0
  4443 ;;		On exit  : B1F/2
  4444 ;;		Unchanged: B00/0
  4445 ;; Data sizes:     COMMON   BANK0   BANK1
  4446 ;;      Params:         0       0       0
  4447 ;;      Locals:         0       0       0
  4448 ;;      Temps:          0       0       0
  4449 ;;      Totals:         0       0       0
  4450 ;;Total ram usage:        0 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    4
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_SYSTEM_Initialize
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           
  4461                           ;psect for function _PIN_MANAGER_Initialize
  4462  055C                     _PIN_MANAGER_Initialize:
  4463                           
  4464                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4465                           
  4466                           ;incstack = 0
  4467                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4468  055C  0022               	movlb	2	; select bank2
  4469  055D  018C               	clrf	12	;volatile
  4470                           
  4471                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4472  055E  018D               	clrf	13	;volatile
  4473                           
  4474                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4475  055F  018E               	clrf	14	;volatile
  4476                           
  4477                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  4478  0560  303B               	movlw	59
  4479  0561  0021               	movlb	1	; select bank1
  4480  0562  008C               	movwf	12	;volatile
  4481                           
  4482                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  4483  0563  3010               	movlw	16
  4484  0564  008D               	movwf	13	;volatile
  4485                           
  4486                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  4487  0565  018E               	clrf	14	;volatile
  4488                           
  4489                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4490  0566  0023               	movlb	3	; select bank3
  4491  0567  018E               	clrf	14	;volatile
  4492                           
  4493                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  4494  0568  3030               	movlw	48
  4495  0569  008D               	movwf	13	;volatile
  4496                           
  4497                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  4498  056A  3013               	movlw	19
  4499  056B  008C               	movwf	12	;volatile
  4500                           
  4501                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4502  056C  0024               	movlb	4	; select bank4
  4503  056D  018D               	clrf	13	;volatile
  4504                           
  4505                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4506  056E  018C               	clrf	12	;volatile
  4507                           
  4508                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4509  056F  0021               	movlb	1	; select bank1
  4510  0570  1795               	bsf	21,7	;volatile
  4511                           
  4512                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4513  0571  0022               	movlb	2	; select bank2
  4514  0572  019D               	clrf	29	;volatile
  4515  0573  0008               	return
  4516  0574                     __end_of_PIN_MANAGER_Initialize:
  4517                           
  4518                           	psect	text20
  4519  0606                     __ptext20:	
  4520 ;; *************** function _OSCILLATOR_Initialize *****************
  4521 ;; Defined at:
  4522 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2
  4531 ;; Tracked objects:
  4532 ;;		On entry : B1F/2
  4533 ;;		On exit  : B1F/2
  4534 ;;		Unchanged: B00/0
  4535 ;; Data sizes:     COMMON   BANK0   BANK1
  4536 ;;      Params:         0       0       0
  4537 ;;      Locals:         0       0       0
  4538 ;;      Temps:          0       0       0
  4539 ;;      Totals:         0       0       0
  4540 ;;Total ram usage:        0 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    4
  4543 ;; This function calls:
  4544 ;;		Nothing
  4545 ;; This function is called by:
  4546 ;;		_SYSTEM_Initialize
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           
  4551                           ;psect for function _OSCILLATOR_Initialize
  4552  0606                     _OSCILLATOR_Initialize:
  4553                           
  4554                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  4555                           
  4556                           ;incstack = 0
  4557                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4558  0606  306A               	movlw	106
  4559  0607  0021               	movlb	1	; select bank1
  4560  0608  0099               	movwf	25	;volatile
  4561                           
  4562                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4563  0609  0022               	movlb	2	; select bank2
  4564  060A  0196               	clrf	22	;volatile
  4565  060B  0008               	return
  4566  060C                     __end_of_OSCILLATOR_Initialize:
  4567                           
  4568                           	psect	text21
  4569  05F2                     __ptext21:	
  4570 ;; *************** function _ADC_Initialize *****************
  4571 ;; Defined at:
  4572 ;;		line 67 in file "mcc_generated_files/adc.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;		None
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;		None
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      void 
  4579 ;; Registers used:
  4580 ;;		wreg, status,2
  4581 ;; Tracked objects:
  4582 ;;		On entry : B1F/1
  4583 ;;		On exit  : B1F/1
  4584 ;;		Unchanged: B00/0
  4585 ;; Data sizes:     COMMON   BANK0   BANK1
  4586 ;;      Params:         0       0       0
  4587 ;;      Locals:         0       0       0
  4588 ;;      Temps:          0       0       0
  4589 ;;      Totals:         0       0       0
  4590 ;;Total ram usage:        0 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    4
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_SYSTEM_Initialize
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           
  4601                           ;psect for function _ADC_Initialize
  4602  05F2                     _ADC_Initialize:
  4603                           
  4604                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xC0;
  4605                           
  4606                           ;incstack = 0
  4607                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4608  05F2  30C0               	movlw	192
  4609  05F3  009E               	movwf	30	;volatile
  4610                           
  4611                           ;mcc_generated_files/adc.c: 75:     ADCON2 = 0x00;
  4612  05F4  019F               	clrf	31	;volatile
  4613                           
  4614                           ;mcc_generated_files/adc.c: 78:     ADRESL = 0x00;
  4615  05F5  019B               	clrf	27	;volatile
  4616                           
  4617                           ;mcc_generated_files/adc.c: 81:     ADRESH = 0x00;
  4618  05F6  019C               	clrf	28	;volatile
  4619                           
  4620                           ;mcc_generated_files/adc.c: 84:     ADCON0 = 0x01;
  4621  05F7  3001               	movlw	1
  4622  05F8  009D               	movwf	29	;volatile
  4623  05F9  0008               	return
  4624  05FA                     __end_of_ADC_Initialize:
  4625                           
  4626                           	psect	text22
  4627  058C                     __ptext22:	
  4628 ;; *************** function _PWM3_LoadDutyValue *****************
  4629 ;; Defined at:
  4630 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  dutyValue       2    4[COMMON] unsigned short 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, status,2, status,0
  4639 ;; Tracked objects:
  4640 ;;		On entry : 1F/1
  4641 ;;		On exit  : 1F/C
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMMON   BANK0   BANK1
  4644 ;;      Params:         2       0       0
  4645 ;;      Locals:         0       0       0
  4646 ;;      Temps:          2       0       0
  4647 ;;      Totals:         4       0       0
  4648 ;;Total ram usage:        4 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    4
  4651 ;; This function calls:
  4652 ;;		Nothing
  4653 ;; This function is called by:
  4654 ;;		_main
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           
  4659                           ;psect for function _PWM3_LoadDutyValue
  4660  058C                     _PWM3_LoadDutyValue:
  4661                           
  4662                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  4663                           
  4664                           ;incstack = 0
  4665                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  4666  058C  0875               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  4667  058D  00F7               	movwf	??_PWM3_LoadDutyValue+1
  4668  058E  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4669  058F  00F6               	movwf	??_PWM3_LoadDutyValue
  4670  0590  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4671  0591  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4672  0592  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4673  0593  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4674  0594  0876               	movf	??_PWM3_LoadDutyValue,w
  4675  0595  002C               	movlb	12	; select bank12
  4676  0596  0098               	movwf	24	;volatile
  4677                           
  4678                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  4679  0597  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4680  0598  3903               	andlw	3
  4681  0599  00F6               	movwf	??_PWM3_LoadDutyValue
  4682  059A  3005               	movlw	5
  4683  059B                     u1055:
  4684  059B  35F6               	lslf	??_PWM3_LoadDutyValue,f
  4685  059C  3EFF               	addlw	-1
  4686  059D  1D03               	skipz
  4687  059E  2D9B               	goto	u1055
  4688  059F  3576               	lslf	??_PWM3_LoadDutyValue,w
  4689  05A0  0097               	movwf	23	;volatile
  4690  05A1  0008               	return
  4691  05A2                     __end_of_PWM3_LoadDutyValue:
  4692                           
  4693                           	psect	text23
  4694  0574                     __ptext23:	
  4695 ;; *************** function _ADC_GetConversion *****************
  4696 ;; Defined at:
  4697 ;;		line 115 in file "mcc_generated_files/adc.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  channel         1    wreg     enum E2336
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;  channel         1    3[COMMON] enum E2336
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  2    0[COMMON] unsigned short 
  4704 ;; Registers used:
  4705 ;;		wreg, status,2, status,0
  4706 ;; Tracked objects:
  4707 ;;		On entry : 1F/0
  4708 ;;		On exit  : 1F/1
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMMON   BANK0   BANK1
  4711 ;;      Params:         2       0       0
  4712 ;;      Locals:         1       0       0
  4713 ;;      Temps:          1       0       0
  4714 ;;      Totals:         4       0       0
  4715 ;;Total ram usage:        4 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    4
  4718 ;; This function calls:
  4719 ;;		Nothing
  4720 ;; This function is called by:
  4721 ;;		_main
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           
  4726                           ;psect for function _ADC_GetConversion
  4727  0574                     _ADC_GetConversion:
  4728                           
  4729                           ;incstack = 0
  4730                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4731                           ;ADC_GetConversion@channel stored from wreg
  4732  0574  00F3               	movwf	ADC_GetConversion@channel
  4733                           
  4734                           ;mcc_generated_files/adc.c: 115: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 116: {;mcc_generated_files/adc.c: 118:     ADCON0bits.CHS = ch
      +                          annel;
  4735  0575  0873               	movf	ADC_GetConversion@channel,w
  4736  0576  00F2               	movwf	??_ADC_GetConversion
  4737  0577  0DF2               	rlf	??_ADC_GetConversion,f
  4738  0578  0DF2               	rlf	??_ADC_GetConversion,f
  4739  0579  0021               	movlb	1	; select bank1
  4740  057A  081D               	movf	29,w	;volatile
  4741  057B  0672               	xorwf	??_ADC_GetConversion,w
  4742  057C  3983               	andlw	-125
  4743  057D  0672               	xorwf	??_ADC_GetConversion,w
  4744  057E  009D               	movwf	29	;volatile
  4745                           
  4746                           ;mcc_generated_files/adc.c: 121:     ADCON0bits.ADON = 1;
  4747  057F  141D               	bsf	29,0	;volatile
  4748                           
  4749                           ;mcc_generated_files/adc.c: 124:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4750  0580  3200               	nop2	;2 cycle nop
  4751  0581  3200               	nop2	;2 cycle nop
  4752  0582  0000               	nop
  4753                           
  4754                           ;mcc_generated_files/adc.c: 127:     ADCON0bits.GO_nDONE = 1;
  4755  0583  0021               	movlb	1	; select bank1
  4756  0584  149D               	bsf	29,1	;volatile
  4757  0585                     l34:	
  4758                           ;mcc_generated_files/adc.c: 131:     {;mcc_generated_files/adc.c: 132:     }
  4759                           
  4760                           
  4761                           ;mcc_generated_files/adc.c: 130:     while (ADCON0bits.GO_nDONE)
  4762  0585  189D               	btfsc	29,1	;volatile
  4763  0586  2D85               	goto	l34
  4764                           
  4765                           ;mcc_generated_files/adc.c: 135:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4766  0587  081C               	movf	28,w	;volatile
  4767  0588  00F1               	movwf	?_ADC_GetConversion+1
  4768  0589  081B               	movf	27,w	;volatile
  4769  058A  00F0               	movwf	?_ADC_GetConversion
  4770  058B  0008               	return
  4771  058C                     __end_of_ADC_GetConversion:
  4772                           
  4773                           	psect	intentry
  4774  0004                     __pintentry:	
  4775 ;; *************** function _INTERRUPT_InterruptManager *****************
  4776 ;; Defined at:
  4777 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;		None
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;		None
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  1    wreg      void 
  4784 ;; Registers used:
  4785 ;;		wreg, status,2, status,0, pclath, cstack
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMMON   BANK0   BANK1
  4791 ;;      Params:         0       0       0
  4792 ;;      Locals:         0       0       0
  4793 ;;      Temps:          0       0       0
  4794 ;;      Totals:         0       0       0
  4795 ;;Total ram usage:        0 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    3
  4798 ;; This function calls:
  4799 ;;		_TMR0_ISR
  4800 ;; This function is called by:
  4801 ;;		Interrupt level 1
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805  0004                     _INTERRUPT_InterruptManager:
  4806                           
  4807                           ;incstack = 0
  4808  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4809                           
  4810                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4811  0005  3180               	pagesel	$
  4812                           
  4813                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4814  0006  1A8B               	btfsc	11,5	;volatile
  4815  0007  1D0B               	btfss	11,2	;volatile
  4816  0008  280A               	goto	i1l197
  4817                           
  4818                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4819  0009  260C               	fcall	_TMR0_ISR
  4820  000A                     i1l197:	
  4821                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4822                           
  4823  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4824  000B  0009               	retfie
  4825  000C                     __end_of_INTERRUPT_InterruptManager:
  4826                           
  4827                           	psect	text25
  4828  060C                     __ptext25:	
  4829 ;; *************** function _TMR0_ISR *****************
  4830 ;; Defined at:
  4831 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      void 
  4838 ;; Registers used:
  4839 ;;		wreg, status,2, status,0, pclath, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMMON   BANK0   BANK1
  4845 ;;      Params:         0       0       0
  4846 ;;      Locals:         0       0       0
  4847 ;;      Temps:          0       0       0
  4848 ;;      Totals:         0       0       0
  4849 ;;Total ram usage:        0 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    2
  4852 ;; This function calls:
  4853 ;;		_TMR0_CallBack
  4854 ;; This function is called by:
  4855 ;;		_INTERRUPT_InterruptManager
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           
  4860                           ;psect for function _TMR0_ISR
  4861  060C                     _TMR0_ISR:
  4862                           
  4863                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  4864                           
  4865                           ;incstack = 0
  4866                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4867  060C  110B               	bcf	11,2	;volatile
  4868                           
  4869                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  4870  060D  0020               	movlb	0	; select bank0
  4871  060E  0867               	movf	_timer0ReloadVal,w	;volatile
  4872  060F  0095               	movwf	21	;volatile
  4873                           
  4874                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
  4875  0610  25D0               	fcall	_TMR0_CallBack
  4876  0611  0008               	return
  4877  0612                     __end_of_TMR0_ISR:
  4878                           
  4879                           	psect	text26
  4880  05D0                     __ptext26:	
  4881 ;; *************** function _TMR0_CallBack *****************
  4882 ;; Defined at:
  4883 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;		None
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0, pclath, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 1F/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMMON   BANK0   BANK1
  4897 ;;      Params:         0       0       0
  4898 ;;      Locals:         0       0       0
  4899 ;;      Temps:          0       0       0
  4900 ;;      Totals:         0       0       0
  4901 ;;Total ram usage:        0 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    1
  4904 ;; This function calls:
  4905 ;;		Absolute function
  4906 ;;		_TMR0_DefaultInterruptHandler
  4907 ;;		_timer0CallBack
  4908 ;; This function is called by:
  4909 ;;		_TMR0_ISR
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           
  4914                           ;psect for function _TMR0_CallBack
  4915  05D0                     _TMR0_CallBack:
  4916                           
  4917                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
  4918                           
  4919                           ;incstack = 0
  4920                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4921  05D0  0865               	movf	_TMR0_InterruptHandler,w
  4922  05D1  0466               	iorwf	_TMR0_InterruptHandler+1,w
  4923  05D2  1903               	btfsc	3,2
  4924  05D3  0008               	return
  4925                           
  4926                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
  4927  05D4  0866               	movf	_TMR0_InterruptHandler+1,w
  4928  05D5  008A               	movwf	10
  4929  05D6  0865               	movf	_TMR0_InterruptHandler,w
  4930  05D7  000A               	callw
  4931  05D8  3185               	pagesel	$
  4932  05D9  0008               	return
  4933  05DA                     __end_of_TMR0_CallBack:
  4934                           
  4935                           	psect	text27
  4936  0621                     __ptext27:	
  4937 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4938 ;; Defined at:
  4939 ;;		line 137 in file "mcc_generated_files/tmr0.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		None
  4948 ;; Tracked objects:
  4949 ;;		On entry : 1F/0
  4950 ;;		On exit  : 1F/0
  4951 ;;		Unchanged: 1F/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1
  4953 ;;      Params:         0       0       0
  4954 ;;      Locals:         0       0       0
  4955 ;;      Temps:          0       0       0
  4956 ;;      Totals:         0       0       0
  4957 ;;Total ram usage:        0 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; This function calls:
  4960 ;;		Nothing
  4961 ;; This function is called by:
  4962 ;;		_TMR0_Initialize
  4963 ;;		_TMR0_CallBack
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function _TMR0_DefaultInterruptHandler
  4969  0621                     _TMR0_DefaultInterruptHandler:
  4970                           
  4971                           ;incstack = 0
  4972                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  4973  0621  0008               	return
  4974  0622                     __end_of_TMR0_DefaultInterruptHandler:
  4975                           
  4976                           	psect	text28
  4977  05B6                     __ptext28:	
  4978 ;; *************** function _timer0CallBack *****************
  4979 ;; Defined at:
  4980 ;;		line 119 in file "main.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2
  4989 ;; Tracked objects:
  4990 ;;		On entry : 1F/0
  4991 ;;		On exit  : 1F/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1
  4994 ;;      Params:         0       0       0
  4995 ;;      Locals:         0       0       0
  4996 ;;      Temps:          0       0       0
  4997 ;;      Totals:         0       0       0
  4998 ;;Total ram usage:        0 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_main
  5004 ;;		_TMR0_CallBack
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _timer0CallBack
  5010  05B6                     _timer0CallBack:
  5011                           
  5012                           ;main.c: 121:     msTick++;
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _timer0CallBack: [wreg+status,2]
  5016  05B6  3001               	movlw	1
  5017  05B7  07D5               	addwf	_msTick,f	;volatile
  5018  05B8  3000               	movlw	0
  5019  05B9  3DD6               	addwfc	_msTick+1,f	;volatile
  5020                           
  5021                           ;main.c: 123:     if(msTick > 200)
  5022  05BA  3000               	movlw	0
  5023  05BB  0256               	subwf	_msTick+1,w	;volatile
  5024  05BC  30C9               	movlw	201
  5025  05BD  1903               	skipnz
  5026  05BE  0255               	subwf	_msTick,w	;volatile
  5027  05BF  1C03               	skipc
  5028  05C0  0008               	return
  5029                           
  5030                           ;main.c: 124:     {;main.c: 125:         doToggle = 1;
  5031  05C1  01D9               	clrf	_doToggle
  5032  05C2  0AD9               	incf	_doToggle,f
  5033                           
  5034                           ;main.c: 126:         msTick = 0;
  5035  05C3  01D5               	clrf	_msTick	;volatile
  5036  05C4  01D6               	clrf	_msTick+1	;volatile
  5037  05C5  0008               	return
  5038  05C6                     __end_of_timer0CallBack:
  5039  007E                     btemp	set	126	;btemp
  5040  007E                     int$flags	set	126
  5041  007E                     wtemp0	set	126
  5042                           
  5043                           	psect	config
  5044                           
  5045                           ;Config register CONFIG1 @ 0x8007
  5046                           ;	Oscillator Selection bits
  5047                           ;	FOSC = INTOSC, Internal Oscillator, I/O Function on OSC1
  5048                           ;	Watchdog Timer Enable
  5049                           ;	WDTE = OFF, WDT disabled
  5050                           ;	Power-up Timer Enable
  5051                           ;	PWRTE = OFF, PWRT disabled
  5052                           ;	MCLR Pin Function Select
  5053                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  5054                           ;	Flash Program Memory Code Protection
  5055                           ;	CP = OFF, Program memory code protection is disabled
  5056                           ;	Brown-out Reset Enable
  5057                           ;	BOREN = ON, Brown-out Reset enabled
  5058                           ;	Clock Out Enable
  5059                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5060  8007                     	org	32775
  5061  8007  3FE4               	dw	16356
  5062                           
  5063                           ;Config register CONFIG2 @ 0x8008
  5064                           ;	Flash Memory Self-Write Protection
  5065                           ;	WRT = OFF, Write protection off
  5066                           ;	Stack Overflow/Underflow Reset Enable
  5067                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5068                           ;	Brown-out Reset Voltage Selection
  5069                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5070                           ;	Low-Power Brown Out Reset
  5071                           ;	LPBOR = OFF, Low-Power BOR is disabled
  5072                           ;	Low-Voltage Programming Enable
  5073                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  5074  8008                     	org	32776
  5075  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        10
    BSS         19
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      72
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 32
		 -> writeFlash@wrBlockData(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_writeFlash
    _writeFlash->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setState->___lldiv
    _readFlash->_FLASH_ReadWord
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PWM3_LoadDutyValue->_ADC_GetConversion

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_writeFlash

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    3573
                                             32 BANK0      8     8      0
                  _ADC_GetConversion
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___aldiv
                             ___lmul
              _setLedsForPositioning
                           _setState
                         _writeFlash
 ---------------------------------------------------------------------------------
 (1) _writeFlash                                          33    33      0     856
                                             13 COMMON     1     1      0
                                              0 BANK0     32    32      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                    10     7      3     736
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     144
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setState                                             5     5      0    1059
                                              0 BANK0      5     5      0
                            ___lldiv
                             ___tmul
                          _readFlash
 ---------------------------------------------------------------------------------
 (2) _readFlash                                            4     4      0     435
                                              3 COMMON     4     4      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     435
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _setLedsForPositioning                                4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     452
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     120
                                              4 COMMON     4     2      2
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _PWM3_LoadDutyValue
     _ADC_GetConversion (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___aldiv
     ___lmul (ARG)
   ___lmul
   _setLedsForPositioning
   _setState
     ___lldiv
     ___tmul
     _readFlash
       _FLASH_ReadWord
   _writeFlash
     _FLASH_WriteBlock
       _FLASH_EraseBlock

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      56       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      56       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Sep 15 15:07:18 2020

                                       _b 0050                                         _m 005B  
                                      l34 0585                           _timer0ReloadVal 0067  
          __size_of_setLedsForPositioning 0138             __end_of_setLedsForPositioning 02AA  
                                     l322 0378                                       l412 018D  
                                     l325 037B                                       l422 01B0  
                                     l432 01D2                                       l416 019E  
                                     l442 01F3                                       l426 01C1  
                                     l370 011A                                       l452 0214  
                                     l436 01E2                                       l380 0149  
                                     l364 00FC                                       l348 006A  
                                     l462 0242                                       l446 0203  
                                     l382 0153                                       l366 0106  
                                     l632 02BA                                       l472 0263  
                                     l376 0135                                       l368 0110  
                                     l482 0284                                       l458 0232  
                                     l378 013F                                       l492 02A5  
                                     l468 0253                                       l478 0274  
                                     l488 0295                                       l497 02A8  
                                     _PR2 001B                                       u915 03AE  
                                     u925 03E5                                       u945 0510  
                                     u955 0516                                       u885 0412  
                                     u985 0469                           _TMR2_Initialize 05E2  
                                     wreg 0009                               main@channel 005F  
          FLASH_WriteBlock@flashWordArray 0075                                      l2075 008F  
                                    l2077 0166                                      l2079 0387  
                                    l1811 01A1                                      l1821 01F5  
                                    l1813 01B2                                      l1725 0507  
                                    l1831 0234                                      l1823 0206  
                                    l1815 01C4                                      l1743 0466  
                                    l1841 0287                                      l1833 0245  
                                    l1825 0216                                      l1817 01D4  
                                    l1809 018F                                      l1753 0494  
                                    l1745 0474                                      l1729 050F  
                                    l1851 04BA                                      l1843 0297  
                                    l1835 0255                                      l1819 01E5  
                                    l1915 002A                                      l1837 0266  
                                    l1829 0224                                      l1757 049F  
                                    l1941 0066                                      l1925 0043  
                                    l1847 04B0                                      l1839 0276  
                                    l1687 041E                                      l1951 007B  
                                    l1935 005F                                      l1927 004A  
                                    l1919 0031                                      l1793 033E  
                                    l1961 009A                                      l1945 006D  
                                    l1937 0062                                      l1891 0314  
                                    l1971 0124                                      l1963 009C  
                                    l1947 0070                                      l1877 02DB  
                                    l1869 02CB                                      l1797 037E  
                                    l1973 0127                                      l1981 015E  
                                    l1895 0322                                      l1887 0309  
                                    l1879 02E9                                      l1799 0392  
                                    l1967 00EE                                      l1959 0087  
                                    u1005 0475                                      u1015 0489  
                                    u1025 0495                                      u1055 059B  
                                    u1500 00FA                                      u1325 02DE  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u1520 0104  
                                    u1345 02EA                                      u1265 04BB  
                                    u1610 0133                                      u1355 02FE  
                                    u1275 04C2                                      u1540 010E  
                                    u1365 030A                                      u1630 013D  
                                    u1560 0118                                      u1650 0147  
                                    u1580 0122                                      u1670 0151  
                                    u1690 015B                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                                      _main 0020  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                         ?_FLASH_WriteBlock 0073  
                                    start 000C                        ??_FLASH_WriteBlock 0076  
                 __end_of_TMR0_Initialize 05B6            ??_TMR0_DefaultInterruptHandler 0070  
          __size_of_OSCILLATOR_Initialize 0006             __end_of_OSCILLATOR_Initialize 060C  
                         __end_of___aldiv 032B                                     ?_main 0070  
                         __end_of___lldiv 04A8                                     _T2CON 001C  
                                   i1l197 000A                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
       __size_of_TMR0_SetInterruptHandler 0005                       ___lmul@multiplicand 0074  
               ?_TMR0_SetInterruptHandler 0070                          __end_of_TMR0_ISR 0612  
                          _WDT_Initialize 061B                   __end_of_PWM3_Initialize 05F2  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 061F  
                         __initialization 000D                              __end_of_main 0172  
                 __end_of_TMR2_Initialize 05EA               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 0040                     writeFlash@wrBlockData 0020  
                 __size_of_FLASH_ReadWord 0019                    __end_of_WDT_Initialize 061F  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADCON2 009F                 FLASH_WriteBlock@writeAddr 0073  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                                  _BORCON 0116                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
               __size_of_FLASH_EraseBlock 001C                                    _OSCCON 0099  
                                  _WDTCON 0097                                    ___lmul 04A8  
             __size_of_PWM3_LoadDutyValue 0016                                 ??___aldiv 007C  
                                  ___tmul 0501                                 ??___lldiv 0078  
                                  _msTick 0055                          ?_TMR0_Initialize 0070  
                        __end_of_setState 039A                   FLASH_ReadWord@flashAddr 0070  
                         ?_WDT_Initialize 0070                  ADC_GetConversion@channel 0073  
                   __end_of_TMR0_CallBack 05DA                   __end_of_TMR2_StartTimer 0621  
TMR0_SetInterruptHandler@InterruptHandler 0070                          ?_PWM3_Initialize 0070  
                       _SYSTEM_Initialize 05DA                   __end_of__initialization 001D  
                      ?_SYSTEM_Initialize 0070                          _fixedPointFactor 0617  
                          __pcstackCOMMON 0070                   __size_of_timer0CallBack 0010  
                            __pidataBANK0 05C6                       ??_SYSTEM_Initialize 0073  
                               ?_TMR0_ISR 0070                          ?_TMR2_Initialize 0070  
                          _OPTION_REGbits 0095               FLASH_WriteBlock@GIEBitValue 007B  
               __end_of_SYSTEM_Initialize 05E2                                __pbssBANK0 0048  
                      __size_of_readFlash 0068                                __pmaintext 0020  
        __end_of_TMR0_SetInterruptHandler 0617                                   ?___lmul 0070  
                                 ?___tmul 0070                                ??_TMR0_ISR 0070  
                              __pintentry 0004                            ___lmul@product 0078  
               __size_of_FLASH_WriteBlock 0054                   __size_of_ADC_Initialize 0008  
                          _FLASH_ReadWord 0543                     _setLedsForPositioning 0172  
                                 _PWM3DCH 0618                                   _PWM3DCL 0617  
                                 _PWM3CON 0619                          ?_TMR2_StartTimer 0070  
                        _FLASH_EraseBlock 0527                      _ADC_InterruptHandler 0057  
                               ?_setState 0070                                   ___aldiv 02AA  
                         __size_of___lmul 002F                           __size_of___tmul 0026  
                                 ___lldiv 0456                    __end_of_FLASH_ReadWord 055C  
                                 __ptext1 04D7                                   __ptext2 0402  
                                 __ptext3 0527                                   __ptext4 032B  
                                 __ptext5 039A                                   __ptext6 0543  
                                 __ptext7 0501                                   __ptext8 0456  
                                 __ptext9 0172                         __end_of_readFlash 0402  
                   _OSCILLATOR_Initialize 0606                                 _T2CONbits 001C  
                        ___aldiv@dividend 0024                  ??_PIN_MANAGER_Initialize 0070  
              __size_of_SYSTEM_Initialize 0008                                   clrloop0 0601  
                    end_of_initialization 001D                                   init_ram 05FA  
                                 initloop 05FB                                _lowerLimit 0048  
                         ___lldiv@divisor 0070                           ___lldiv@counter 007D  
                              ??_setState 0020                            _timer0CallBack 05B6  
                        ___aldiv@quotient 002A                 FLASH_ReadWord@GIEBitValue 0072  
                         ?_FLASH_ReadWord 0070                          ??_WDT_Initialize 0070  
                _TMR0_SetInterruptHandler 0612                                 _PORTAbits 000C  
                  ?_setLedsForPositioning 0070                  __end_of_fixedPointFactor 061B  
                              _upperLimit 0061                    __end_of_timer0CallBack 05C6  
              __end_of_PWM3_LoadDutyValue 05A2                         FLASH_WriteBlock@i 007C  
                              _writeFlash 04D7                            __end_of___lmul 04D7  
                          __end_of___tmul 0527                         __size_of_TMR0_ISR 0006  
                          _ADC_Initialize 05F2                          _FLASH_WriteBlock 0402  
                  ?_OSCILLATOR_Initialize 0070                       start_initialization 000D  
                __size_of_TMR0_Initialize 0014           __size_of_PIN_MANAGER_Initialize 0018  
                         ?_timer0CallBack 0070                  __size_of_PWM3_Initialize 0008  
                                ??___lmul 0078                                  ??___tmul 0076  
                  __size_of_TMR0_CallBack 000A                    __end_of_ADC_Initialize 05FA  
                             __pdataBANK0 005B               FLASH_EraseBlock@GIEBitValue 0072  
                __end_of_FLASH_EraseBlock 0543                            ___tmul@product 0076  
                               ___latbits 0000                             __pcstackBANK0 0020  
                __size_of_TMR2_Initialize 0008                          setState@newState 0024  
                            _currentState 0060                     _TMR0_InterruptHandler 0065  
                               __pnvBANK0 0065                    _PIN_MANAGER_Initialize 055C  
                                ?___aldiv 0020                         __size_of_setState 006F  
                                ?___lldiv 0070                               ?_writeFlash 0070  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0070  
                               _readFlash 039A                             _TMR0_CallBack 05D0  
                               _msPressed 0053                          _adcValuePosition 004C  
          FLASH_WriteBlock@blockStartAddr 0079                           ___aldiv@divisor 0020  
                       ??_TMR0_Initialize 0072                           ___aldiv@counter 0028  
                                _LATBbits 010D                                  _LATCbits 010E  
                               clear_ram0 0600                  __size_of_TMR2_StartTimer 0002  
     __size_of_INTERRUPT_InterruptManager 0008                ??_TMR0_SetInterruptHandler 0072  
                                _PIR1bits 0011                 FLASH_EraseBlock@startAddr 0070  
                        ??_FLASH_ReadWord 0072                                  _TMR0_ISR 060C  
                 ??_setLedsForPositioning 0074                         ??_PWM3_Initialize 0070  
                              _ADCON0bits 009D                       ___tmul@multiplicand 0073  
                              ?_readFlash 0070                            ?_TMR0_CallBack 0070  
                       ___lmul@multiplier 0070                       __size_of_writeFlash 002A  
                       ??_TMR2_Initialize 0070                  __end_of_FLASH_WriteBlock 0456  
           setLedsForPositioning@adcValue 0070                         _ADC_GetConversion 0574  
                 ??_OSCILLATOR_Initialize 0070                        ?_ADC_GetConversion 0070  
                        __size_of___aldiv 0081                          __size_of___lldiv 0052  
                      _PWM3_LoadDutyValue 058C                       ??_ADC_GetConversion 0072  
                                _doToggle 0059                                  __ptext10 04A8  
                                __ptext11 02AA                                  __ptext20 0606  
                                __ptext12 061F                                  __ptext21 05F2  
                                __ptext13 05DA                                  __ptext22 058C  
                                __ptext14 061B                                  __ptext23 0574  
                                __ptext15 05E2                                  __ptext16 05A2  
                                __ptext25 060C                                  __ptext17 0612  
                                __ptext26 05D0                                  __ptext18 05EA  
                                __ptext27 0621                                  __ptext19 055C  
                                __ptext28 05B6                       ?_PWM3_LoadDutyValue 0074  
                        ??_timer0CallBack 0070                             __size_of_main 0152  
    __end_of_TMR0_DefaultInterruptHandler 0622     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0621                 __end_of_ADC_GetConversion 058C  
                                _setState 032B                      ??_PWM3_LoadDutyValue 0076  
                                int$flags 007E                         ??_TMR2_StartTimer 0070  
      __end_of_INTERRUPT_InterruptManager 000C                _INTERRUPT_InterruptManager 0004  
                       ?_FLASH_EraseBlock 0070                        ??_FLASH_EraseBlock 0072  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0070  
                             ??_readFlash 0073                   __size_of_WDT_Initialize 0004  
                                intlevel1 0000                            _doButtonAction 005A  
                              _PMCON1bits 0195                          ___lldiv@dividend 0074  
                 ?_PIN_MANAGER_Initialize 0070                          ??_ADC_Initialize 0070  
           ?_TMR0_DefaultInterruptHandler 0070                              ??_writeFlash 007D  
                       ___tmul@multiplier 0070               PWM3_LoadDutyValue@dutyValue 0074  
                           __pstringtext1 0617                                _OPTION_REG 0095  
                        ___lldiv@quotient 0079                           _TMR0_Initialize 05A2  
                            ___aldiv@sign 0029            __end_of_PIN_MANAGER_Initialize 0574  
                      __end_of_writeFlash 0501                __size_of_ADC_GetConversion 0018  
                         _PWM3_Initialize 05EA  
