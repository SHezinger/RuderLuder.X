

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Sep 16 14:05:11 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F1507
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F1507 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0197                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0391                     	;# 
   145  0392                     	;# 
   146  0393                     	;# 
   147  0394                     	;# 
   148  0395                     	;# 
   149  0396                     	;# 
   150  0498                     	;# 
   151  0498                     	;# 
   152  0499                     	;# 
   153  049A                     	;# 
   154  049B                     	;# 
   155  049B                     	;# 
   156  049C                     	;# 
   157  049D                     	;# 
   158  049E                     	;# 
   159  049F                     	;# 
   160  0611                     	;# 
   161  0612                     	;# 
   162  0613                     	;# 
   163  0613                     	;# 
   164  0614                     	;# 
   165  0615                     	;# 
   166  0616                     	;# 
   167  0616                     	;# 
   168  0617                     	;# 
   169  0618                     	;# 
   170  0619                     	;# 
   171  0619                     	;# 
   172  061A                     	;# 
   173  061B                     	;# 
   174  061C                     	;# 
   175  061C                     	;# 
   176  0691                     	;# 
   177  0692                     	;# 
   178  0693                     	;# 
   179  0694                     	;# 
   180  0695                     	;# 
   181  0F0F                     	;# 
   182  0F10                     	;# 
   183  0F11                     	;# 
   184  0F12                     	;# 
   185  0F13                     	;# 
   186  0F14                     	;# 
   187  0F15                     	;# 
   188  0F16                     	;# 
   189  0F17                     	;# 
   190  0F18                     	;# 
   191  0F19                     	;# 
   192  0F1A                     	;# 
   193  0F1B                     	;# 
   194  0F1C                     	;# 
   195  0F1D                     	;# 
   196  0F1E                     	;# 
   197  0F1F                     	;# 
   198  0FE3                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0015                     	;# 
   229  0016                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001C                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0097                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  0116                     	;# 
   258  0117                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0194                     	;# 
   269  0195                     	;# 
   270  0196                     	;# 
   271  0197                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0613                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0616                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  0619                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061C                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0F0F                     	;# 
   312  0F10                     	;# 
   313  0F11                     	;# 
   314  0F12                     	;# 
   315  0F13                     	;# 
   316  0F14                     	;# 
   317  0F15                     	;# 
   318  0F16                     	;# 
   319  0F17                     	;# 
   320  0F18                     	;# 
   321  0F19                     	;# 
   322  0F1A                     	;# 
   323  0F1B                     	;# 
   324  0F1C                     	;# 
   325  0F1D                     	;# 
   326  0F1E                     	;# 
   327  0F1F                     	;# 
   328  0FE3                     	;# 
   329  0FE4                     	;# 
   330  0FE5                     	;# 
   331  0FE6                     	;# 
   332  0FE7                     	;# 
   333  0FE8                     	;# 
   334  0FE9                     	;# 
   335  0FEA                     	;# 
   336  0FEB                     	;# 
   337  0FED                     	;# 
   338  0FEE                     	;# 
   339  0FEF                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  011D                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  020C                     	;# 
   403  020D                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  0394                     	;# 
   408  0395                     	;# 
   409  0396                     	;# 
   410  0498                     	;# 
   411  0498                     	;# 
   412  0499                     	;# 
   413  049A                     	;# 
   414  049B                     	;# 
   415  049B                     	;# 
   416  049C                     	;# 
   417  049D                     	;# 
   418  049E                     	;# 
   419  049F                     	;# 
   420  0611                     	;# 
   421  0612                     	;# 
   422  0613                     	;# 
   423  0613                     	;# 
   424  0614                     	;# 
   425  0615                     	;# 
   426  0616                     	;# 
   427  0616                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0FE3                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0013                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  008C                     	;# 
   498  008D                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0099                     	;# 
   507  009A                     	;# 
   508  009B                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  020C                     	;# 
   533  020D                     	;# 
   534  0391                     	;# 
   535  0392                     	;# 
   536  0393                     	;# 
   537  0394                     	;# 
   538  0395                     	;# 
   539  0396                     	;# 
   540  0498                     	;# 
   541  0498                     	;# 
   542  0499                     	;# 
   543  049A                     	;# 
   544  049B                     	;# 
   545  049B                     	;# 
   546  049C                     	;# 
   547  049D                     	;# 
   548  049E                     	;# 
   549  049F                     	;# 
   550  0611                     	;# 
   551  0612                     	;# 
   552  0613                     	;# 
   553  0613                     	;# 
   554  0614                     	;# 
   555  0615                     	;# 
   556  0616                     	;# 
   557  0616                     	;# 
   558  0617                     	;# 
   559  0618                     	;# 
   560  0619                     	;# 
   561  0619                     	;# 
   562  061A                     	;# 
   563  061B                     	;# 
   564  061C                     	;# 
   565  061C                     	;# 
   566  0691                     	;# 
   567  0692                     	;# 
   568  0693                     	;# 
   569  0694                     	;# 
   570  0695                     	;# 
   571  0F0F                     	;# 
   572  0F10                     	;# 
   573  0F11                     	;# 
   574  0F12                     	;# 
   575  0F13                     	;# 
   576  0F14                     	;# 
   577  0F15                     	;# 
   578  0F16                     	;# 
   579  0F17                     	;# 
   580  0F18                     	;# 
   581  0F19                     	;# 
   582  0F1A                     	;# 
   583  0F1B                     	;# 
   584  0F1C                     	;# 
   585  0F1D                     	;# 
   586  0F1E                     	;# 
   587  0F1F                     	;# 
   588  0FE3                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0013                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  009F                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  020C                     	;# 
   663  020D                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0498                     	;# 
   671  0498                     	;# 
   672  0499                     	;# 
   673  049A                     	;# 
   674  049B                     	;# 
   675  049B                     	;# 
   676  049C                     	;# 
   677  049D                     	;# 
   678  049E                     	;# 
   679  049F                     	;# 
   680  0611                     	;# 
   681  0612                     	;# 
   682  0613                     	;# 
   683  0613                     	;# 
   684  0614                     	;# 
   685  0615                     	;# 
   686  0616                     	;# 
   687  0616                     	;# 
   688  0617                     	;# 
   689  0618                     	;# 
   690  0619                     	;# 
   691  0619                     	;# 
   692  061A                     	;# 
   693  061B                     	;# 
   694  061C                     	;# 
   695  061C                     	;# 
   696  0691                     	;# 
   697  0692                     	;# 
   698  0693                     	;# 
   699  0694                     	;# 
   700  0695                     	;# 
   701  0F0F                     	;# 
   702  0F10                     	;# 
   703  0F11                     	;# 
   704  0F12                     	;# 
   705  0F13                     	;# 
   706  0F14                     	;# 
   707  0F15                     	;# 
   708  0F16                     	;# 
   709  0F17                     	;# 
   710  0F18                     	;# 
   711  0F19                     	;# 
   712  0F1A                     	;# 
   713  0F1B                     	;# 
   714  0F1C                     	;# 
   715  0F1D                     	;# 
   716  0F1E                     	;# 
   717  0F1F                     	;# 
   718  0FE3                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0011                     	;# 
   746  0012                     	;# 
   747  0013                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0093                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  0116                     	;# 
   778  0117                     	;# 
   779  011D                     	;# 
   780  018C                     	;# 
   781  018D                     	;# 
   782  018E                     	;# 
   783  0191                     	;# 
   784  0191                     	;# 
   785  0192                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0197                     	;# 
   792  020C                     	;# 
   793  020D                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0498                     	;# 
   801  0498                     	;# 
   802  0499                     	;# 
   803  049A                     	;# 
   804  049B                     	;# 
   805  049B                     	;# 
   806  049C                     	;# 
   807  049D                     	;# 
   808  049E                     	;# 
   809  049F                     	;# 
   810  0611                     	;# 
   811  0612                     	;# 
   812  0613                     	;# 
   813  0613                     	;# 
   814  0614                     	;# 
   815  0615                     	;# 
   816  0616                     	;# 
   817  0616                     	;# 
   818  0617                     	;# 
   819  0618                     	;# 
   820  0619                     	;# 
   821  0619                     	;# 
   822  061A                     	;# 
   823  061B                     	;# 
   824  061C                     	;# 
   825  061C                     	;# 
   826  0691                     	;# 
   827  0692                     	;# 
   828  0693                     	;# 
   829  0694                     	;# 
   830  0695                     	;# 
   831  0F0F                     	;# 
   832  0F10                     	;# 
   833  0F11                     	;# 
   834  0F12                     	;# 
   835  0F13                     	;# 
   836  0F14                     	;# 
   837  0F15                     	;# 
   838  0F16                     	;# 
   839  0F17                     	;# 
   840  0F18                     	;# 
   841  0F19                     	;# 
   842  0F1A                     	;# 
   843  0F1B                     	;# 
   844  0F1C                     	;# 
   845  0F1D                     	;# 
   846  0F1E                     	;# 
   847  0F1F                     	;# 
   848  0FE3                     	;# 
   849  0FE4                     	;# 
   850  0FE5                     	;# 
   851  0FE6                     	;# 
   852  0FE7                     	;# 
   853  0FE8                     	;# 
   854  0FE9                     	;# 
   855  0FEA                     	;# 
   856  0FEB                     	;# 
   857  0FED                     	;# 
   858  0FEE                     	;# 
   859  0FEF                     	;# 
   860  0000                     	;# 
   861  0001                     	;# 
   862  0002                     	;# 
   863  0003                     	;# 
   864  0004                     	;# 
   865  0005                     	;# 
   866  0006                     	;# 
   867  0007                     	;# 
   868  0008                     	;# 
   869  0009                     	;# 
   870  000A                     	;# 
   871  000B                     	;# 
   872  000C                     	;# 
   873  000D                     	;# 
   874  000E                     	;# 
   875  0011                     	;# 
   876  0012                     	;# 
   877  0013                     	;# 
   878  0015                     	;# 
   879  0016                     	;# 
   880  0016                     	;# 
   881  0017                     	;# 
   882  0018                     	;# 
   883  0019                     	;# 
   884  001A                     	;# 
   885  001B                     	;# 
   886  001C                     	;# 
   887  008C                     	;# 
   888  008D                     	;# 
   889  008E                     	;# 
   890  0091                     	;# 
   891  0092                     	;# 
   892  0093                     	;# 
   893  0095                     	;# 
   894  0096                     	;# 
   895  0097                     	;# 
   896  0099                     	;# 
   897  009A                     	;# 
   898  009B                     	;# 
   899  009B                     	;# 
   900  009C                     	;# 
   901  009D                     	;# 
   902  009E                     	;# 
   903  009F                     	;# 
   904  010C                     	;# 
   905  010D                     	;# 
   906  010E                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  011D                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  0191                     	;# 
   914  0191                     	;# 
   915  0192                     	;# 
   916  0193                     	;# 
   917  0193                     	;# 
   918  0194                     	;# 
   919  0195                     	;# 
   920  0196                     	;# 
   921  0197                     	;# 
   922  020C                     	;# 
   923  020D                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0498                     	;# 
   931  0498                     	;# 
   932  0499                     	;# 
   933  049A                     	;# 
   934  049B                     	;# 
   935  049B                     	;# 
   936  049C                     	;# 
   937  049D                     	;# 
   938  049E                     	;# 
   939  049F                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0613                     	;# 
   944  0614                     	;# 
   945  0615                     	;# 
   946  0616                     	;# 
   947  0616                     	;# 
   948  0617                     	;# 
   949  0618                     	;# 
   950  0619                     	;# 
   951  0619                     	;# 
   952  061A                     	;# 
   953  061B                     	;# 
   954  061C                     	;# 
   955  061C                     	;# 
   956  0691                     	;# 
   957  0692                     	;# 
   958  0693                     	;# 
   959  0694                     	;# 
   960  0695                     	;# 
   961  0F0F                     	;# 
   962  0F10                     	;# 
   963  0F11                     	;# 
   964  0F12                     	;# 
   965  0F13                     	;# 
   966  0F14                     	;# 
   967  0F15                     	;# 
   968  0F16                     	;# 
   969  0F17                     	;# 
   970  0F18                     	;# 
   971  0F19                     	;# 
   972  0F1A                     	;# 
   973  0F1B                     	;# 
   974  0F1C                     	;# 
   975  0F1D                     	;# 
   976  0F1E                     	;# 
   977  0F1F                     	;# 
   978  0FE3                     	;# 
   979  0FE4                     	;# 
   980  0FE5                     	;# 
   981  0FE6                     	;# 
   982  0FE7                     	;# 
   983  0FE8                     	;# 
   984  0FE9                     	;# 
   985  0FEA                     	;# 
   986  0FEB                     	;# 
   987  0FED                     	;# 
   988  0FEE                     	;# 
   989  0FEF                     	;# 
   990  0000                     	;# 
   991  0001                     	;# 
   992  0002                     	;# 
   993  0003                     	;# 
   994  0004                     	;# 
   995  0005                     	;# 
   996  0006                     	;# 
   997  0007                     	;# 
   998  0008                     	;# 
   999  0009                     	;# 
  1000  000A                     	;# 
  1001  000B                     	;# 
  1002  000C                     	;# 
  1003  000D                     	;# 
  1004  000E                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010E                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018E                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0197                     	;# 
  1052  020C                     	;# 
  1053  020D                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0394                     	;# 
  1058  0395                     	;# 
  1059  0396                     	;# 
  1060  0498                     	;# 
  1061  0498                     	;# 
  1062  0499                     	;# 
  1063  049A                     	;# 
  1064  049B                     	;# 
  1065  049B                     	;# 
  1066  049C                     	;# 
  1067  049D                     	;# 
  1068  049E                     	;# 
  1069  049F                     	;# 
  1070  0611                     	;# 
  1071  0612                     	;# 
  1072  0613                     	;# 
  1073  0613                     	;# 
  1074  0614                     	;# 
  1075  0615                     	;# 
  1076  0616                     	;# 
  1077  0616                     	;# 
  1078  0617                     	;# 
  1079  0618                     	;# 
  1080  0619                     	;# 
  1081  0619                     	;# 
  1082  061A                     	;# 
  1083  061B                     	;# 
  1084  061C                     	;# 
  1085  061C                     	;# 
  1086  0691                     	;# 
  1087  0692                     	;# 
  1088  0693                     	;# 
  1089  0694                     	;# 
  1090  0695                     	;# 
  1091  0F0F                     	;# 
  1092  0F10                     	;# 
  1093  0F11                     	;# 
  1094  0F12                     	;# 
  1095  0F13                     	;# 
  1096  0F14                     	;# 
  1097  0F15                     	;# 
  1098  0F16                     	;# 
  1099  0F17                     	;# 
  1100  0F18                     	;# 
  1101  0F19                     	;# 
  1102  0F1A                     	;# 
  1103  0F1B                     	;# 
  1104  0F1C                     	;# 
  1105  0F1D                     	;# 
  1106  0F1E                     	;# 
  1107  0F1F                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0013                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0093                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0099                     	;# 
  1157  009A                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  011D                     	;# 
  1170  018C                     	;# 
  1171  018D                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0194                     	;# 
  1179  0195                     	;# 
  1180  0196                     	;# 
  1181  0197                     	;# 
  1182  020C                     	;# 
  1183  020D                     	;# 
  1184  0391                     	;# 
  1185  0392                     	;# 
  1186  0393                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  0498                     	;# 
  1191  0498                     	;# 
  1192  0499                     	;# 
  1193  049A                     	;# 
  1194  049B                     	;# 
  1195  049B                     	;# 
  1196  049C                     	;# 
  1197  049D                     	;# 
  1198  049E                     	;# 
  1199  049F                     	;# 
  1200  0611                     	;# 
  1201  0612                     	;# 
  1202  0613                     	;# 
  1203  0613                     	;# 
  1204  0614                     	;# 
  1205  0615                     	;# 
  1206  0616                     	;# 
  1207  0616                     	;# 
  1208  0617                     	;# 
  1209  0618                     	;# 
  1210  0619                     	;# 
  1211  0619                     	;# 
  1212  061A                     	;# 
  1213  061B                     	;# 
  1214  061C                     	;# 
  1215  061C                     	;# 
  1216  0691                     	;# 
  1217  0692                     	;# 
  1218  0693                     	;# 
  1219  0694                     	;# 
  1220  0695                     	;# 
  1221  0F0F                     	;# 
  1222  0F10                     	;# 
  1223  0F11                     	;# 
  1224  0F12                     	;# 
  1225  0F13                     	;# 
  1226  0F14                     	;# 
  1227  0F15                     	;# 
  1228  0F16                     	;# 
  1229  0F17                     	;# 
  1230  0F18                     	;# 
  1231  0F19                     	;# 
  1232  0F1A                     	;# 
  1233  0F1B                     	;# 
  1234  0F1C                     	;# 
  1235  0F1D                     	;# 
  1236  0F1E                     	;# 
  1237  0F1F                     	;# 
  1238  0FE3                     	;# 
  1239  0FE4                     	;# 
  1240  0FE5                     	;# 
  1241  0FE6                     	;# 
  1242  0FE7                     	;# 
  1243  0FE8                     	;# 
  1244  0FE9                     	;# 
  1245  0FEA                     	;# 
  1246  0FEB                     	;# 
  1247  0FED                     	;# 
  1248  0FEE                     	;# 
  1249  0FEF                     	;# 
  1250                           
  1251                           	psect	idataBANK0
  1252  0618                     __pidataBANK0:
  1253                           
  1254                           ;initializer for _m
  1255  0618  34E8               	retlw	232
  1256  0619  3403               	retlw	3
  1257  061A  3400               	retlw	0
  1258  061B  3400               	retlw	0
  1259                           
  1260                           ;initializer for main@channel
  1261  061C  340A               	retlw	10
  1262                           
  1263                           ;initializer for _upperLimit
  1264  061D  34FF               	retlw	255
  1265  061E  3403               	retlw	3
  1266  061F  3400               	retlw	0
  1267  0620  3400               	retlw	0
  1268                           
  1269                           	psect	stringtext1
  1270  065E                     __pstringtext1:
  1271  065E                     _fixedPointFactor:
  1272  065E  34E8               	retlw	232
  1273  065F  3403               	retlw	3
  1274  0660  3400               	retlw	0
  1275  0661  3400               	retlw	0
  1276  0662                     __end_of_fixedPointFactor:
  1277                           
  1278                           	psect	nvBANK0
  1279  0067                     __pnvBANK0:
  1280  0067                     _TMR0_InterruptHandler:
  1281  0067                     	ds	2
  1282  0069                     _timer0ReloadVal:
  1283  0069                     	ds	1
  1284  000C                     _PORTAbits	set	12
  1285  000B                     _INTCONbits	set	11
  1286  0015                     _TMR0	set	21
  1287  001C                     _T2CONbits	set	28
  1288  001C                     _T2CON	set	28
  1289  0011                     _PIR1bits	set	17
  1290  001A                     _TMR2	set	26
  1291  001B                     _PR2	set	27
  1292  0095                     _OPTION_REG	set	149
  1293  0095                     _OPTION_REGbits	set	149
  1294  008E                     _TRISC	set	142
  1295  008D                     _TRISB	set	141
  1296  008C                     _TRISA	set	140
  1297  0097                     _WDTCON	set	151
  1298  0099                     _OSCCON	set	153
  1299  009D                     _ADCON0bits	set	157
  1300  009D                     _ADCON0	set	157
  1301  009C                     _ADRESH	set	156
  1302  009B                     _ADRESL	set	155
  1303  009F                     _ADCON2	set	159
  1304  009E                     _ADCON1	set	158
  1305  010D                     _LATBbits	set	269
  1306  010E                     _LATCbits	set	270
  1307  011D                     _APFCON	set	285
  1308  010E                     _LATC	set	270
  1309  010D                     _LATB	set	269
  1310  010C                     _LATA	set	268
  1311  0116                     _BORCON	set	278
  1312  0196                     _PMCON2	set	406
  1313  0193                     _PMDATL	set	403
  1314  0194                     _PMDATH	set	404
  1315  0195                     _PMCON1bits	set	405
  1316  0192                     _PMADRH	set	402
  1317  0191                     _PMADRL	set	401
  1318  018C                     _ANSELA	set	396
  1319  018D                     _ANSELB	set	397
  1320  018E                     _ANSELC	set	398
  1321  020C                     _WPUA	set	524
  1322  020D                     _WPUB	set	525
  1323  0617                     _PWM3DCL	set	1559
  1324  0618                     _PWM3DCH	set	1560
  1325  0619                     _PWM3CON	set	1561
  1326                           
  1327                           	psect	cinit
  1328  000D                     start_initialization:	
  1329                           ; #config settings
  1330                           
  1331  000D                     __initialization:
  1332                           
  1333                           ; Initialize objects allocated to BANK0
  1334  000D  3018               	movlw	low __pidataBANK0
  1335  000E  0084               	movwf	4
  1336  000F  3086               	movlw	(high __pidataBANK0)| (0+128)
  1337  0010  0085               	movwf	5
  1338  0011  305E               	movlw	low __pdataBANK0
  1339  0012  0086               	movwf	6
  1340  0013  3000               	movlw	high __pdataBANK0
  1341  0014  0087               	movwf	7
  1342  0015  3009               	movlw	9
  1343  0016  2641               	fcall	init_ram
  1344                           
  1345                           ; Clear objects allocated to BANK0
  1346  0017  304A               	movlw	low __pbssBANK0
  1347  0018  0084               	movwf	4
  1348  0019  3000               	movlw	high __pbssBANK0
  1349  001A  0085               	movwf	5
  1350  001B  3014               	movlw	20
  1351  001C  2647               	fcall	clear_ram0
  1352  001D                     end_of_initialization:	
  1353                           ;End of C runtime variable initialization code
  1354                           
  1355  001D                     __end_of__initialization:
  1356  001D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1357  001E  0020               	movlb	0
  1358  001F  2820               	ljmp	_main	;jump to C main() function
  1359                           
  1360                           	psect	bssBANK0
  1361  004A                     __pbssBANK0:
  1362  004A                     _lowerLimit:
  1363  004A                     	ds	4
  1364  004E                     _adcValuePosition:
  1365  004E                     	ds	4
  1366  0052                     _b:
  1367  0052                     	ds	3
  1368  0055                     _msPressed:
  1369  0055                     	ds	2
  1370  0057                     _msTick:
  1371  0057                     	ds	2
  1372  0059                     _ADC_InterruptHandler:
  1373  0059                     	ds	2
  1374  005B                     _currentState:
  1375  005B                     	ds	1
  1376  005C                     _doToggle:
  1377  005C                     	ds	1
  1378  005D                     _doButtonAction:
  1379  005D                     	ds	1
  1380                           
  1381                           	psect	dataBANK0
  1382  005E                     __pdataBANK0:
  1383  005E                     _m:
  1384  005E                     	ds	4
  1385  0062                     main@channel:
  1386  0062                     	ds	1
  1387  0063                     _upperLimit:
  1388  0063                     	ds	4
  1389                           
  1390                           	psect	inittext
  1391  0641                     init_ram:
  1392  0641  00FE               	movwf	126
  1393  0642                     initloop:
  1394  0642  0012               	moviw fsr0++
  1395  0643  001E               	movwi fsr1++
  1396  0644  0BFE               	decfsz	126,f
  1397  0645  2E42               	goto	initloop
  1398  0646  3400               	retlw	0
  1399                           
  1400                           	psect	clrtext
  1401  0647                     clear_ram0:	
  1402                           ;	Called with FSR0 containing the base address, and
  1403                           ;	WREG with the size to clear
  1404                           
  1405  0647  0064               	clrwdt	;clear the watchdog before getting into this loop
  1406  0648                     clrloop0:
  1407  0648  0180               	clrf	0	;clear RAM location pointed to by FSR
  1408  0649  3101               	addfsr 0,1
  1409  064A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1410  064B  2E48               	goto	clrloop0	;have we reached the end yet?
  1411  064C  3400               	retlw	0	;all done for this memory range, return
  1412                           
  1413                           	psect	cstackCOMMON
  1414  0070                     __pcstackCOMMON:
  1415  0070                     ?_PIN_MANAGER_Initialize:
  1416  0070                     ??_PIN_MANAGER_Initialize:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0070                     ?_OSCILLATOR_Initialize:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0070                     ??_OSCILLATOR_Initialize:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0070                     ?_WDT_Initialize:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0070                     ??_WDT_Initialize:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0070                     ?_PWM3_Initialize:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0070                     ??_PWM3_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0070                     ?_TMR2_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0070                     ??_TMR2_Initialize:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0070                     ?_TMR0_Initialize:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0070                     ?_TMR0_SetInterruptHandler:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0070                     ?_TMR0_DefaultInterruptHandler:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0070                     ??_TMR0_DefaultInterruptHandler:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0070                     ?_TMR0_CallBack:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0070                     ??_TMR0_CallBack:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0070                     ?_FLASH_EraseBlock:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0070                     ?_setLedsForPositioning:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0070                     ?_ADC_Initialize:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0070                     ??_ADC_Initialize:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0070                     ?_SYSTEM_Initialize:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0070                     ?_PWM3_LoadDutyValue:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0070                     ?_TMR2_StartTimer:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0070                     ??_TMR2_StartTimer:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0070                     ?_TMR0_ISR:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0070                     ??_TMR0_ISR:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0070                     ?_INTERRUPT_InterruptManager:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0070                     ??_INTERRUPT_InterruptManager:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0070                     ?_readFlash:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0070                     ?_writeFlash:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0070                     ?_timer0CallBack:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ??_timer0CallBack:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ?_setState:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_main:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_ADC_GetConversion:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0070                     ?_FLASH_ReadWord:	
  1519                           ; 2 bytes @ 0x0
  1520                           
  1521  0070                     ?___tmul:	
  1522                           ; 2 bytes @ 0x0
  1523                           
  1524  0070                     ?___lmul:	
  1525                           ; 3 bytes @ 0x0
  1526                           
  1527  0070                     ?___lldiv:	
  1528                           ; 4 bytes @ 0x0
  1529                           
  1530  0070                     PWM3_LoadDutyValue@dutyValue:	
  1531                           ; 4 bytes @ 0x0
  1532                           
  1533  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1534                           ; 2 bytes @ 0x0
  1535                           
  1536  0070                     FLASH_ReadWord@flashAddr:	
  1537                           ; 2 bytes @ 0x0
  1538                           
  1539  0070                     FLASH_EraseBlock@startAddr:	
  1540                           ; 2 bytes @ 0x0
  1541                           
  1542  0070                     ___tmul@multiplier:	
  1543                           ; 2 bytes @ 0x0
  1544                           
  1545  0070                     setLedsForPositioning@adcValue:	
  1546                           ; 3 bytes @ 0x0
  1547                           
  1548  0070                     ___lmul@multiplier:	
  1549                           ; 4 bytes @ 0x0
  1550                           
  1551  0070                     ___lldiv@divisor:	
  1552                           ; 4 bytes @ 0x0
  1553                           
  1554                           
  1555                           ; 4 bytes @ 0x0
  1556  0070                     	ds	2
  1557  0072                     ??_TMR0_Initialize:
  1558  0072                     ??_TMR0_SetInterruptHandler:	
  1559                           ; 1 bytes @ 0x2
  1560                           
  1561  0072                     ??_FLASH_EraseBlock:	
  1562                           ; 1 bytes @ 0x2
  1563                           
  1564  0072                     ??_ADC_GetConversion:	
  1565                           ; 1 bytes @ 0x2
  1566                           
  1567  0072                     ??_PWM3_LoadDutyValue:	
  1568                           ; 1 bytes @ 0x2
  1569                           
  1570  0072                     ??_FLASH_ReadWord:	
  1571                           ; 1 bytes @ 0x2
  1572                           
  1573  0072                     FLASH_ReadWord@GIEBitValue:	
  1574                           ; 1 bytes @ 0x2
  1575                           
  1576  0072                     FLASH_EraseBlock@GIEBitValue:	
  1577                           ; 1 bytes @ 0x2
  1578                           
  1579                           
  1580                           ; 1 bytes @ 0x2
  1581  0072                     	ds	1
  1582  0073                     ?_FLASH_WriteBlock:
  1583  0073                     ??_SYSTEM_Initialize:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0073                     ??_readFlash:	
  1587                           ; 1 bytes @ 0x3
  1588                           
  1589  0073                     ADC_GetConversion@channel:	
  1590                           ; 1 bytes @ 0x3
  1591                           
  1592  0073                     FLASH_WriteBlock@writeAddr:	
  1593                           ; 1 bytes @ 0x3
  1594                           
  1595  0073                     ___tmul@multiplicand:	
  1596                           ; 2 bytes @ 0x3
  1597                           
  1598                           
  1599                           ; 3 bytes @ 0x3
  1600  0073                     	ds	1
  1601  0074                     ??_setLedsForPositioning:
  1602  0074                     ___lmul@multiplicand:	
  1603                           ; 1 bytes @ 0x4
  1604                           
  1605  0074                     ___lldiv@dividend:	
  1606                           ; 4 bytes @ 0x4
  1607                           
  1608                           
  1609                           ; 4 bytes @ 0x4
  1610  0074                     	ds	1
  1611  0075                     FLASH_WriteBlock@flashWordArray:
  1612                           
  1613                           ; 1 bytes @ 0x5
  1614  0075                     	ds	1
  1615  0076                     ??_FLASH_WriteBlock:
  1616  0076                     ??___tmul:	
  1617                           ; 1 bytes @ 0x6
  1618                           
  1619  0076                     ___tmul@product:	
  1620                           ; 1 bytes @ 0x6
  1621                           
  1622                           
  1623                           ; 3 bytes @ 0x6
  1624  0076                     	ds	2
  1625  0078                     ??___lmul:
  1626  0078                     ??___lldiv:	
  1627                           ; 1 bytes @ 0x8
  1628                           
  1629  0078                     ___lmul@product:	
  1630                           ; 1 bytes @ 0x8
  1631                           
  1632                           
  1633                           ; 4 bytes @ 0x8
  1634  0078                     	ds	1
  1635  0079                     FLASH_WriteBlock@blockStartAddr:
  1636  0079                     ___lldiv@quotient:	
  1637                           ; 2 bytes @ 0x9
  1638                           
  1639                           
  1640                           ; 4 bytes @ 0x9
  1641  0079                     	ds	2
  1642  007B                     FLASH_WriteBlock@GIEBitValue:
  1643                           
  1644                           ; 1 bytes @ 0xB
  1645  007B                     	ds	1
  1646  007C                     ??___aldiv:
  1647  007C                     FLASH_WriteBlock@i:	
  1648                           ; 1 bytes @ 0xC
  1649                           
  1650                           
  1651                           ; 1 bytes @ 0xC
  1652  007C                     	ds	1
  1653  007D                     ??_writeFlash:
  1654  007D                     ___lldiv@counter:	
  1655                           ; 1 bytes @ 0xD
  1656                           
  1657                           
  1658                           ; 1 bytes @ 0xD
  1659  007D                     	ds	1
  1660                           
  1661                           	psect	cstackBANK0
  1662  0020                     __pcstackBANK0:
  1663  0020                     ??_setState:
  1664  0020                     ?___aldiv:	
  1665                           ; 1 bytes @ 0x0
  1666                           
  1667  0020                     ___aldiv@divisor:	
  1668                           ; 4 bytes @ 0x0
  1669                           
  1670  0020                     writeFlash@wrBlockData:	
  1671                           ; 4 bytes @ 0x0
  1672                           
  1673                           
  1674                           ; 32 bytes @ 0x0
  1675  0020                     	ds	4
  1676  0024                     setState@newState:
  1677  0024                     ___aldiv@dividend:	
  1678                           ; 1 bytes @ 0x4
  1679                           
  1680                           
  1681                           ; 4 bytes @ 0x4
  1682  0024                     	ds	4
  1683  0028                     ___aldiv@counter:
  1684                           
  1685                           ; 1 bytes @ 0x8
  1686  0028                     	ds	1
  1687  0029                     ___aldiv@sign:
  1688                           
  1689                           ; 1 bytes @ 0x9
  1690  0029                     	ds	1
  1691  002A                     ___aldiv@quotient:
  1692                           
  1693                           ; 4 bytes @ 0xA
  1694  002A                     	ds	22
  1695  0040                     ??_main:
  1696                           
  1697                           ; 1 bytes @ 0x20
  1698  0040                     	ds	8
  1699  0048                     main@dimming:
  1700                           
  1701                           ; 2 bytes @ 0x28
  1702  0048                     	ds	2
  1703                           
  1704                           	psect	maintext
  1705  0020                     __pmaintext:	
  1706 ;;
  1707 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1708 ;;
  1709 ;; *************** function _main *****************
  1710 ;; Defined at:
  1711 ;;		line 187 in file "main.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;		None
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  dimming         2   40[BANK0 ] short 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : B1F/0
  1722 ;;		On exit  : 1F/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMMON   BANK0   BANK1
  1725 ;;      Params:         0       0       0
  1726 ;;      Locals:         0       2       0
  1727 ;;      Temps:          0       8       0
  1728 ;;      Totals:         0      10       0
  1729 ;;Total ram usage:       10 bytes
  1730 ;; Hardware stack levels required when called:    7
  1731 ;; This function calls:
  1732 ;;		_ADC_GetConversion
  1733 ;;		_PWM3_LoadDutyValue
  1734 ;;		_SYSTEM_Initialize
  1735 ;;		_TMR0_SetInterruptHandler
  1736 ;;		_TMR2_StartTimer
  1737 ;;		___aldiv
  1738 ;;		___lmul
  1739 ;;		_setLedsForPositioning
  1740 ;;		_setState
  1741 ;;		_writeFlash
  1742 ;; This function is called by:
  1743 ;;		Startup code after reset
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           
  1748                           ;psect for function _main
  1749  0020                     _main:
  1750                           
  1751                           ;main.c: 190:     SYSTEM_Initialize();
  1752                           
  1753                           ;incstack = 0
  1754                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1755  0020  2621               	fcall	_SYSTEM_Initialize
  1756                           
  1757                           ;main.c: 193:     (INTCONbits.GIE = 1);
  1758  0021  178B               	bsf	11,7	;volatile
  1759                           
  1760                           ;main.c: 195:     setState(STATE_NORMAL);
  1761  0022  3001               	movlw	1
  1762  0023  22D2               	fcall	_setState
  1763                           
  1764                           ;main.c: 198:     TMR0_SetInterruptHandler(timer0CallBack);
  1765  0024  30FE               	movlw	low _timer0CallBack
  1766  0025  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1767  0026  3005               	movlw	high _timer0CallBack
  1768  0027  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1769  0028  2659               	fcall	_TMR0_SetInterruptHandler
  1770                           
  1771                           ;main.c: 199:     TMR2_StartTimer();
  1772  0029  2666               	fcall	_TMR2_StartTimer
  1773  002A                     l1975:
  1774                           
  1775                           ;main.c: 203:     {;main.c: 204:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 207:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1776  002A  3003               	movlw	3
  1777  002B  0020               	movlb	0	; select bank0
  1778  002C  0662               	xorwf	main@channel,w
  1779  002D  1903               	btfsc	3,2
  1780  002E  2831               	goto	l1979
  1781  002F  3003               	movlw	3
  1782  0030  2832               	goto	L1
  1783  0031                     l1979:
  1784  0031  300A               	movlw	10
  1785  0032                     L1:
  1786  0032  00C0               	movwf	??_main
  1787  0033  0840               	movf	??_main,w
  1788  0034  00E2               	movwf	main@channel
  1789                           
  1790                           ;main.c: 212:         if(channel == channelRudder)
  1791  0035  3003               	movlw	3
  1792  0036  0662               	xorwf	main@channel,w
  1793  0037  1D03               	btfss	3,2
  1794  0038  2843               	goto	l1985
  1795                           
  1796                           ;main.c: 213:         {;main.c: 214:             adcValuePosition = ADC_GetConversion(ch
      +                          annel);
  1797  0039  0862               	movf	main@channel,w
  1798  003A  25BC               	fcall	_ADC_GetConversion
  1799  003B  0870               	movf	?_ADC_GetConversion,w
  1800  003C  0020               	movlb	0	; select bank0
  1801  003D  00CE               	movwf	_adcValuePosition
  1802  003E  0871               	movf	?_ADC_GetConversion+1,w
  1803  003F  00CF               	movwf	_adcValuePosition+1
  1804  0040  01D0               	clrf	_adcValuePosition+2
  1805  0041  01D1               	clrf	_adcValuePosition+3
  1806                           
  1807                           ;main.c: 215:         }
  1808  0042  2871               	goto	l1997
  1809  0043                     l1985:
  1810                           
  1811                           ;main.c: 217:         {;main.c: 219:             int16_t dimming = (int16_t)ADC_GetConve
      +                          rsion(channel);
  1812  0043  0862               	movf	main@channel,w
  1813  0044  25BC               	fcall	_ADC_GetConversion
  1814  0045  0871               	movf	?_ADC_GetConversion+1,w
  1815  0046  0020               	movlb	0	; select bank0
  1816  0047  00C9               	movwf	main@dimming+1
  1817  0048  0870               	movf	?_ADC_GetConversion,w
  1818  0049  00C8               	movwf	main@dimming
  1819                           
  1820                           ;main.c: 221:             dimming = (dimming << 1) +24 ;
  1821  004A  0849               	movf	main@dimming+1,w
  1822  004B  00C1               	movwf	??_main+1
  1823  004C  0848               	movf	main@dimming,w
  1824  004D  00C0               	movwf	??_main
  1825  004E  35C0               	lslf	??_main,f
  1826  004F  0DC1               	rlf	??_main+1,f
  1827  0050  0840               	movf	??_main,w
  1828  0051  3E18               	addlw	24
  1829  0052  00C8               	movwf	main@dimming
  1830  0053  3000               	movlw	0
  1831  0054  3D41               	addwfc	??_main+1,w
  1832  0055  00C9               	movwf	main@dimming+1
  1833                           
  1834                           ;main.c: 224:             if(dimming > 1000)
  1835  0056  0849               	movf	main@dimming+1,w
  1836  0057  3A80               	xorlw	128
  1837  0058  00C0               	movwf	??_main
  1838  0059  3083               	movlw	131
  1839  005A  0240               	subwf	??_main,w
  1840  005B  1D03               	skipz
  1841  005C  285F               	goto	u1495
  1842  005D  30E9               	movlw	233
  1843  005E  0248               	subwf	main@dimming,w
  1844  005F                     u1495:
  1845  005F  1C03               	skipc
  1846  0060  2867               	goto	l350
  1847                           
  1848                           ;main.c: 225:             {;main.c: 226:                 dimming = 1000;
  1849  0061  30E8               	movlw	232
  1850  0062  0020               	movlb	0	; select bank0
  1851  0063  00C8               	movwf	main@dimming
  1852  0064  3003               	movlw	3
  1853  0065  00C9               	movwf	main@dimming+1
  1854                           
  1855                           ;main.c: 227:             }
  1856  0066  286C               	goto	l1995
  1857  0067                     l350:	
  1858                           ;main.c: 228:             else if(dimming < (0))
  1859                           
  1860  0067  0020               	movlb	0	; select bank0
  1861  0068  1FC9               	btfss	main@dimming+1,7
  1862  0069  286C               	goto	l1995
  1863                           
  1864                           ;main.c: 229:             {;main.c: 230:                 dimming = (0);
  1865  006A  01C8               	clrf	main@dimming
  1866  006B  01C9               	clrf	main@dimming+1
  1867  006C                     l1995:
  1868                           
  1869                           ;main.c: 233:             PWM3_LoadDutyValue(dimming);
  1870  006C  0849               	movf	main@dimming+1,w
  1871  006D  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1872  006E  0848               	movf	main@dimming,w
  1873  006F  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  1874  0070  25D4               	fcall	_PWM3_LoadDutyValue
  1875  0071                     l1997:
  1876                           
  1877                           ;main.c: 238:         if(!PORTAbits.RA5 && !doButtonAction)
  1878  0071  0020               	movlb	0	; select bank0
  1879  0072  1A8C               	btfsc	12,5	;volatile
  1880  0073  288C               	goto	l2007
  1881  0074  085D               	movf	_doButtonAction,w	;volatile
  1882  0075  1D03               	btfss	3,2
  1883  0076  288C               	goto	l2007
  1884                           
  1885                           ;main.c: 239:         {;main.c: 240:             msPressed++;
  1886  0077  3001               	movlw	1
  1887  0078  07D5               	addwf	_msPressed,f	;volatile
  1888  0079  3000               	movlw	0
  1889  007A  3DD6               	addwfc	_msPressed+1,f	;volatile
  1890                           
  1891                           ;main.c: 242:             if(msPressed > 3000)
  1892  007B  300B               	movlw	11
  1893  007C  0256               	subwf	_msPressed+1,w	;volatile
  1894  007D  30B9               	movlw	185
  1895  007E  1903               	skipnz
  1896  007F  0255               	subwf	_msPressed,w	;volatile
  1897  0080  1C03               	skipc
  1898  0081  2889               	goto	l358
  1899                           
  1900                           ;main.c: 243:             {;main.c: 244:                 doButtonAction = 1;
  1901  0082  3001               	movlw	1
  1902  0083  00C0               	movwf	??_main
  1903  0084  0840               	movf	??_main,w
  1904  0085  00DD               	movwf	_doButtonAction	;volatile
  1905  0086  0022               	movlb	2	; select bank2
  1906  0087  128E               	bcf	14,5	;volatile
  1907  0088  288E               	goto	l2009
  1908  0089                     l358:	
  1909                           ;main.c: 248:             {;main.c: 249:                 do { LATCbits.LATC5 = 1; } whil
      +                          e(0);
  1910                           
  1911  0089  0022               	movlb	2	; select bank2
  1912  008A  168E               	bsf	14,5	;volatile
  1913  008B  288E               	goto	l2009
  1914  008C                     l2007:
  1915                           
  1916                           ;main.c: 253:         {;main.c: 254:             msPressed = 0;
  1917  008C  01D5               	clrf	_msPressed	;volatile
  1918  008D  01D6               	clrf	_msPressed+1	;volatile
  1919  008E                     l2009:
  1920                           
  1921                           ;main.c: 260:         if(doButtonAction)
  1922  008E  0020               	movlb	0	; select bank0
  1923  008F  085D               	movf	_doButtonAction,w	;volatile
  1924  0090  1903               	btfsc	3,2
  1925  0091  2986               	goto	l2049
  1926  0092                     l362:	
  1927                           ;main.c: 264:             {;main.c: 266:             }
  1928                           
  1929                           
  1930                           ;main.c: 263:             while(!PORTAbits.RA5)
  1931  0092  1A8C               	btfsc	12,5	;volatile
  1932  0093  28AF               	goto	l2027
  1933  0094  2892               	goto	l362
  1934  0095                     l2013:
  1935                           
  1936                           ;main.c: 273:                     setState(STATE_TEACH_LEFT);
  1937  0095  3002               	movlw	2
  1938  0096  22D2               	fcall	_setState
  1939                           
  1940                           ;main.c: 274:                     break;
  1941  0097  28C2               	goto	l2029
  1942  0098                     l2015:
  1943                           
  1944                           ;main.c: 277:                     lowerLimit = adcValuePosition;
  1945  0098  0851               	movf	_adcValuePosition+3,w
  1946  0099  00CD               	movwf	_lowerLimit+3
  1947  009A  0850               	movf	_adcValuePosition+2,w
  1948  009B  00CC               	movwf	_lowerLimit+2
  1949  009C  084F               	movf	_adcValuePosition+1,w
  1950  009D  00CB               	movwf	_lowerLimit+1
  1951  009E  084E               	movf	_adcValuePosition,w
  1952  009F  00CA               	movwf	_lowerLimit
  1953                           
  1954                           ;main.c: 279:                     setState(STATE_TEACH_RIGHT);
  1955  00A0  3003               	movlw	3
  1956  00A1  22D2               	fcall	_setState
  1957                           
  1958                           ;main.c: 280:                     break;
  1959  00A2  28C2               	goto	l2029
  1960  00A3                     l2019:
  1961                           
  1962                           ;main.c: 283:                 {;main.c: 284:                     upperLimit = adcValuePo
      +                          sition;
  1963  00A3  0851               	movf	_adcValuePosition+3,w
  1964  00A4  00E6               	movwf	_upperLimit+3
  1965  00A5  0850               	movf	_adcValuePosition+2,w
  1966  00A6  00E5               	movwf	_upperLimit+2
  1967  00A7  084F               	movf	_adcValuePosition+1,w
  1968  00A8  00E4               	movwf	_upperLimit+1
  1969  00A9  084E               	movf	_adcValuePosition,w
  1970  00AA  00E3               	movwf	_upperLimit
  1971                           
  1972                           ;main.c: 286:                     writeFlash();
  1973  00AB  254F               	fcall	_writeFlash
  1974                           
  1975                           ;main.c: 287:                     setState(STATE_NORMAL);
  1976  00AC  3001               	movlw	1
  1977  00AD  22D2               	fcall	_setState
  1978                           
  1979                           ;main.c: 288:                     break;
  1980  00AE  28C2               	goto	l2029
  1981  00AF                     l2027:
  1982  00AF  085B               	movf	_currentState,w
  1983  00B0  00C0               	movwf	??_main
  1984  00B1  01C1               	clrf	??_main+1
  1985                           
  1986                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1987                           ; Switch size 1, requested type "simple"
  1988                           ; Number of cases is 1, Range of values is 0 to 0
  1989                           ; switch strategies available:
  1990                           ; Name         Instructions Cycles
  1991                           ; simple_byte            4     3 (average)
  1992                           ; direct_byte            8     6 (fixed)
  1993                           ; jumptable            260     6 (fixed)
  1994                           ;	Chosen strategy is simple_byte
  1995  00B2  0841               	movf	??_main+1,w
  1996  00B3  3A00               	xorlw	0	; case 0
  1997  00B4  1903               	skipnz
  1998  00B5  28B7               	goto	l2143
  1999  00B6  28C2               	goto	l2029
  2000  00B7                     l2143:
  2001                           
  2002                           ; Switch size 1, requested type "simple"
  2003                           ; Number of cases is 3, Range of values is 1 to 3
  2004                           ; switch strategies available:
  2005                           ; Name         Instructions Cycles
  2006                           ; simple_byte           10     6 (average)
  2007                           ; direct_byte           15     9 (fixed)
  2008                           ; jumptable            263     9 (fixed)
  2009                           ;	Chosen strategy is simple_byte
  2010  00B7  0840               	movf	??_main,w
  2011  00B8  3A01               	xorlw	1	; case 1
  2012  00B9  1903               	skipnz
  2013  00BA  2895               	goto	l2013
  2014  00BB  3A03               	xorlw	3	; case 2
  2015  00BC  1903               	skipnz
  2016  00BD  2898               	goto	l2015
  2017  00BE  3A01               	xorlw	1	; case 3
  2018  00BF  1903               	skipnz
  2019  00C0  28A3               	goto	l2019
  2020  00C1  28C2               	goto	l2029
  2021  00C2                     l2029:
  2022                           
  2023                           ;main.c: 292:             doButtonAction = 0;
  2024  00C2  01DD               	clrf	_doButtonAction	;volatile
  2025  00C3  2986               	goto	l2049
  2026  00C4                     l2031:
  2027                           
  2028                           ;main.c: 300:                 if(channel == channelBrightness)
  2029  00C4  300A               	movlw	10
  2030  00C5  0662               	xorwf	main@channel,w
  2031  00C6  1D03               	btfss	3,2
  2032  00C7  282A               	goto	l1975
  2033                           
  2034                           ;main.c: 301:                 {;main.c: 302:                     adcValuePosition = (adc
      +                          ValuePosition*m-b)/fixedPointFactor;
  2035  00C8  3000               	movlw	0
  2036  00C9  00A3               	movwf	___aldiv@divisor+3
  2037  00CA  3000               	movlw	0
  2038  00CB  00A2               	movwf	___aldiv@divisor+2
  2039  00CC  3003               	movlw	3
  2040  00CD  00A1               	movwf	___aldiv@divisor+1
  2041  00CE  30E8               	movlw	232
  2042  00CF  00A0               	movwf	___aldiv@divisor
  2043  00D0  0852               	movf	_b,w
  2044  00D1  00C0               	movwf	??_main
  2045  00D2  0853               	movf	_b+1,w
  2046  00D3  00C1               	movwf	??_main+1
  2047  00D4  0854               	movf	_b+2,w
  2048  00D5  00C2               	movwf	??_main+2
  2049  00D6  3000               	movlw	0
  2050  00D7  1BC2               	btfsc	??_main+2,7
  2051  00D8  30FF               	movlw	255
  2052  00D9  00C3               	movwf	??_main+3
  2053  00DA  0851               	movf	_adcValuePosition+3,w
  2054  00DB  00F3               	movwf	___lmul@multiplier+3
  2055  00DC  0850               	movf	_adcValuePosition+2,w
  2056  00DD  00F2               	movwf	___lmul@multiplier+2
  2057  00DE  084F               	movf	_adcValuePosition+1,w
  2058  00DF  00F1               	movwf	___lmul@multiplier+1
  2059  00E0  084E               	movf	_adcValuePosition,w
  2060  00E1  00F0               	movwf	___lmul@multiplier
  2061  00E2  0861               	movf	_m+3,w
  2062  00E3  00F7               	movwf	___lmul@multiplicand+3
  2063  00E4  0860               	movf	_m+2,w
  2064  00E5  00F6               	movwf	___lmul@multiplicand+2
  2065  00E6  085F               	movf	_m+1,w
  2066  00E7  00F5               	movwf	___lmul@multiplicand+1
  2067  00E8  085E               	movf	_m,w
  2068  00E9  00F4               	movwf	___lmul@multiplicand
  2069  00EA  24FA               	fcall	___lmul
  2070  00EB  0870               	movf	?___lmul,w
  2071  00EC  00C4               	movwf	??_main+4
  2072  00ED  0871               	movf	?___lmul+1,w
  2073  00EE  00C5               	movwf	??_main+5
  2074  00EF  0872               	movf	?___lmul+2,w
  2075  00F0  00C6               	movwf	??_main+6
  2076  00F1  0873               	movf	?___lmul+3,w
  2077  00F2  00C7               	movwf	??_main+7
  2078  00F3  0840               	movf	??_main,w
  2079  00F4  02C4               	subwf	??_main+4,f
  2080  00F5  0841               	movf	??_main+1,w
  2081  00F6  3BC5               	subwfb	??_main+5,f
  2082  00F7  0842               	movf	??_main+2,w
  2083  00F8  3BC6               	subwfb	??_main+6,f
  2084  00F9  0843               	movf	??_main+3,w
  2085  00FA  3BC7               	subwfb	??_main+7,f
  2086  00FB  0847               	movf	??_main+7,w
  2087  00FC  00A7               	movwf	___aldiv@dividend+3
  2088  00FD  0846               	movf	??_main+6,w
  2089  00FE  00A6               	movwf	___aldiv@dividend+2
  2090  00FF  0845               	movf	??_main+5,w
  2091  0100  00A5               	movwf	___aldiv@dividend+1
  2092  0101  0844               	movf	??_main+4,w
  2093  0102  00A4               	movwf	___aldiv@dividend
  2094  0103  236B               	fcall	___aldiv
  2095  0104  0823               	movf	?___aldiv+3,w
  2096  0105  00D1               	movwf	_adcValuePosition+3
  2097  0106  0822               	movf	?___aldiv+2,w
  2098  0107  00D0               	movwf	_adcValuePosition+2
  2099  0108  0821               	movf	?___aldiv+1,w
  2100  0109  00CF               	movwf	_adcValuePosition+1
  2101  010A  0820               	movf	?___aldiv,w
  2102  010B  00CE               	movwf	_adcValuePosition
  2103                           
  2104                           ;main.c: 303:                     setLedsForPositioning(adcValuePosition);
  2105  010C  0851               	movf	_adcValuePosition+3,w
  2106  010D  00F3               	movwf	setLedsForPositioning@adcValue+3
  2107  010E  0850               	movf	_adcValuePosition+2,w
  2108  010F  00F2               	movwf	setLedsForPositioning@adcValue+2
  2109  0110  084F               	movf	_adcValuePosition+1,w
  2110  0111  00F1               	movwf	setLedsForPositioning@adcValue+1
  2111  0112  084E               	movf	_adcValuePosition,w
  2112  0113  00F0               	movwf	setLedsForPositioning@adcValue
  2113  0114  219A               	fcall	_setLedsForPositioning
  2114  0115  282A               	goto	l1975
  2115  0116                     l2035:
  2116                           
  2117                           ;main.c: 308:                 if(doToggle)
  2118  0116  085C               	movf	_doToggle,w
  2119  0117  1903               	btfsc	3,2
  2120  0118  282A               	goto	l1975
  2121  0119  1003               	clrc
  2122  011A  0022               	movlb	2	; select bank2
  2123  011B  1C0E               	btfss	14,0	;volatile
  2124  011C  1403               	setc
  2125  011D  1C03               	btfss	3,0
  2126  011E  2922               	goto	u1580
  2127  011F  0022               	movlb	2	; select bank2
  2128  0120  140E               	bsf	14,0	;volatile
  2129  0121  2924               	goto	l378
  2130  0122                     u1580:
  2131  0122  0022               	movlb	2	; select bank2
  2132  0123  100E               	bcf	14,0	;volatile
  2133  0124                     l378:	
  2134                           ;main.c: 311:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2135                           
  2136  0124  1003               	clrc
  2137  0125  1C8E               	btfss	14,1	;volatile
  2138  0126  1403               	setc
  2139  0127  1C03               	btfss	3,0
  2140  0128  292C               	goto	u1600
  2141  0129  0022               	movlb	2	; select bank2
  2142  012A  148E               	bsf	14,1	;volatile
  2143  012B  292E               	goto	l380
  2144  012C                     u1600:
  2145  012C  0022               	movlb	2	; select bank2
  2146  012D  108E               	bcf	14,1	;volatile
  2147  012E                     l380:	
  2148                           ;main.c: 312:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2149                           
  2150  012E  1003               	clrc
  2151  012F  1D0E               	btfss	14,2	;volatile
  2152  0130  1403               	setc
  2153  0131  1C03               	btfss	3,0
  2154  0132  2936               	goto	u1620
  2155  0133  0022               	movlb	2	; select bank2
  2156  0134  150E               	bsf	14,2	;volatile
  2157  0135  2938               	goto	l382
  2158  0136                     u1620:
  2159  0136  0022               	movlb	2	; select bank2
  2160  0137  110E               	bcf	14,2	;volatile
  2161  0138                     l382:	
  2162                           ;main.c: 313:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2163                           
  2164  0138  1003               	clrc
  2165  0139  1D8E               	btfss	14,3	;volatile
  2166  013A  1403               	setc
  2167  013B  1C03               	btfss	3,0
  2168  013C  2940               	goto	u1640
  2169  013D  0022               	movlb	2	; select bank2
  2170  013E  158E               	bsf	14,3	;volatile
  2171  013F  2942               	goto	l384
  2172  0140                     u1640:
  2173  0140  0022               	movlb	2	; select bank2
  2174  0141  118E               	bcf	14,3	;volatile
  2175  0142                     l384:	
  2176                           ;main.c: 314:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2177                           
  2178  0142  1003               	clrc
  2179  0143  1E0E               	btfss	14,4	;volatile
  2180  0144  1403               	setc
  2181  0145  1C03               	btfss	3,0
  2182  0146  294A               	goto	u1660
  2183  0147  0022               	movlb	2	; select bank2
  2184  0148  160E               	bsf	14,4	;volatile
  2185  0149  294C               	goto	l2039
  2186  014A                     u1660:
  2187  014A  0022               	movlb	2	; select bank2
  2188  014B  120E               	bcf	14,4	;volatile
  2189  014C                     l2039:
  2190                           
  2191                           ;main.c: 315:                     doToggle = 0;
  2192  014C  0020               	movlb	0	; select bank0
  2193  014D  01DC               	clrf	_doToggle
  2194  014E  282A               	goto	l1975
  2195  014F                     l2041:
  2196                           
  2197                           ;main.c: 322:                 if(doToggle)
  2198  014F  085C               	movf	_doToggle,w
  2199  0150  1903               	btfsc	3,2
  2200  0151  282A               	goto	l1975
  2201  0152  1003               	clrc
  2202  0153  0022               	movlb	2	; select bank2
  2203  0154  1F0E               	btfss	14,6	;volatile
  2204  0155  1403               	setc
  2205  0156  1C03               	btfss	3,0
  2206  0157  295B               	goto	u1690
  2207  0158  0022               	movlb	2	; select bank2
  2208  0159  170E               	bsf	14,6	;volatile
  2209  015A  295D               	goto	l390
  2210  015B                     u1690:
  2211  015B  0022               	movlb	2	; select bank2
  2212  015C  130E               	bcf	14,6	;volatile
  2213  015D                     l390:	
  2214                           ;main.c: 325:                     do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2215                           
  2216  015D  1003               	clrc
  2217  015E  1F8E               	btfss	14,7	;volatile
  2218  015F  1403               	setc
  2219  0160  1C03               	btfss	3,0
  2220  0161  2965               	goto	u1710
  2221  0162  0022               	movlb	2	; select bank2
  2222  0163  178E               	bsf	14,7	;volatile
  2223  0164  2967               	goto	l392
  2224  0165                     u1710:
  2225  0165  0022               	movlb	2	; select bank2
  2226  0166  138E               	bcf	14,7	;volatile
  2227  0167                     l392:	
  2228                           ;main.c: 326:                     do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  2229                           
  2230  0167  1003               	clrc
  2231  0168  1E8D               	btfss	13,5	;volatile
  2232  0169  1403               	setc
  2233  016A  1C03               	btfss	3,0
  2234  016B  296F               	goto	u1730
  2235  016C  0022               	movlb	2	; select bank2
  2236  016D  168D               	bsf	13,5	;volatile
  2237  016E  2971               	goto	l394
  2238  016F                     u1730:
  2239  016F  0022               	movlb	2	; select bank2
  2240  0170  128D               	bcf	13,5	;volatile
  2241  0171                     l394:	
  2242                           ;main.c: 327:                     do { LATBbits.LATB6 = ~LATBbits.LATB6; } while(0);
  2243                           
  2244  0171  1003               	clrc
  2245  0172  1F0D               	btfss	13,6	;volatile
  2246  0173  1403               	setc
  2247  0174  1C03               	btfss	3,0
  2248  0175  2979               	goto	u1750
  2249  0176  0022               	movlb	2	; select bank2
  2250  0177  170D               	bsf	13,6	;volatile
  2251  0178  297B               	goto	l396
  2252  0179                     u1750:
  2253  0179  0022               	movlb	2	; select bank2
  2254  017A  130D               	bcf	13,6	;volatile
  2255  017B                     l396:	
  2256                           ;main.c: 328:                     do { LATBbits.LATB7 = ~LATBbits.LATB7; } while(0);
  2257                           
  2258  017B  1003               	clrc
  2259  017C  1F8D               	btfss	13,7	;volatile
  2260  017D  1403               	setc
  2261  017E  1C03               	btfss	3,0
  2262  017F  2983               	goto	u1770
  2263  0180  0022               	movlb	2	; select bank2
  2264  0181  178D               	bsf	13,7	;volatile
  2265  0182  294C               	goto	l2039
  2266  0183                     u1770:
  2267  0183  0022               	movlb	2	; select bank2
  2268  0184  138D               	bcf	13,7	;volatile
  2269  0185  294C               	goto	l2039
  2270  0186                     l2049:
  2271  0186  085B               	movf	_currentState,w
  2272  0187  00C0               	movwf	??_main
  2273  0188  01C1               	clrf	??_main+1
  2274                           
  2275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2276                           ; Switch size 1, requested type "simple"
  2277                           ; Number of cases is 1, Range of values is 0 to 0
  2278                           ; switch strategies available:
  2279                           ; Name         Instructions Cycles
  2280                           ; simple_byte            4     3 (average)
  2281                           ; direct_byte            8     6 (fixed)
  2282                           ; jumptable            260     6 (fixed)
  2283                           ;	Chosen strategy is simple_byte
  2284  0189  0841               	movf	??_main+1,w
  2285  018A  3A00               	xorlw	0	; case 0
  2286  018B  1903               	skipnz
  2287  018C  298E               	goto	l2145
  2288  018D  282A               	goto	l1975
  2289  018E                     l2145:
  2290                           
  2291                           ; Switch size 1, requested type "simple"
  2292                           ; Number of cases is 3, Range of values is 1 to 3
  2293                           ; switch strategies available:
  2294                           ; Name         Instructions Cycles
  2295                           ; simple_byte           10     6 (average)
  2296                           ; direct_byte           15     9 (fixed)
  2297                           ; jumptable            263     9 (fixed)
  2298                           ;	Chosen strategy is simple_byte
  2299  018E  0840               	movf	??_main,w
  2300  018F  3A01               	xorlw	1	; case 1
  2301  0190  1903               	skipnz
  2302  0191  28C4               	goto	l2031
  2303  0192  3A03               	xorlw	3	; case 2
  2304  0193  1903               	skipnz
  2305  0194  2916               	goto	l2035
  2306  0195  3A01               	xorlw	1	; case 3
  2307  0196  1903               	skipnz
  2308  0197  294F               	goto	l2041
  2309  0198  282A               	goto	l1975
  2310  0199  280C               	ljmp	start
  2311  019A                     __end_of_main:
  2312                           
  2313                           	psect	text1
  2314  054F                     __ptext1:	
  2315 ;; *************** function _writeFlash *****************
  2316 ;; Defined at:
  2317 ;;		line 95 in file "main.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  wrBlockData    32    0[BANK0 ] unsigned short [16]
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 1F/0
  2328 ;;		On exit  : 1C/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1
  2331 ;;      Params:         0       0       0
  2332 ;;      Locals:         0      32       0
  2333 ;;      Temps:          1       0       0
  2334 ;;      Totals:         1      32       0
  2335 ;;Total ram usage:       33 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    6
  2338 ;; This function calls:
  2339 ;;		_FLASH_EraseBlock
  2340 ;;		_FLASH_WriteBlock
  2341 ;; This function is called by:
  2342 ;;		_main
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           
  2347                           ;psect for function _writeFlash
  2348  054F                     _writeFlash:
  2349                           
  2350                           ;main.c: 100:     FLASH_EraseBlock((uint16_t)( 0x800 -16));
  2351                           
  2352                           ;incstack = 0
  2353                           ; Regs used in _writeFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2354  054F  30F0               	movlw	240
  2355  0550  00F0               	movwf	FLASH_EraseBlock@startAddr
  2356  0551  3007               	movlw	7
  2357  0552  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2358  0553  256F               	fcall	_FLASH_EraseBlock
  2359                           
  2360                           ;main.c: 102:     uint16_t wrBlockData[16];;main.c: 104:     wrBlockData[16 -1] = (uint1
      +                          6_t)(upperLimit);
  2361  0554  0020               	movlb	0	; select bank0
  2362  0555  0864               	movf	_upperLimit+1,w
  2363  0556  00BF               	movwf	writeFlash@wrBlockData+31
  2364  0557  0863               	movf	_upperLimit,w
  2365  0558  00BE               	movwf	writeFlash@wrBlockData+30
  2366                           
  2367                           ;main.c: 105:     wrBlockData[16 -2] = (uint16_t)(upperLimit >> 16);
  2368  0559  0866               	movf	_upperLimit+3,w
  2369  055A  00BD               	movwf	writeFlash@wrBlockData+29
  2370  055B  0865               	movf	_upperLimit+2,w
  2371  055C  00BC               	movwf	writeFlash@wrBlockData+28
  2372                           
  2373                           ;main.c: 106:     wrBlockData[16 -3] = (uint16_t)(lowerLimit);
  2374  055D  084B               	movf	_lowerLimit+1,w
  2375  055E  00BB               	movwf	writeFlash@wrBlockData+27
  2376  055F  084A               	movf	_lowerLimit,w
  2377  0560  00BA               	movwf	writeFlash@wrBlockData+26
  2378                           
  2379                           ;main.c: 107:     wrBlockData[16 -4] = (uint16_t)(lowerLimit >> 16);
  2380  0561  084D               	movf	_lowerLimit+3,w
  2381  0562  00B9               	movwf	writeFlash@wrBlockData+25
  2382  0563  084C               	movf	_lowerLimit+2,w
  2383  0564  00B8               	movwf	writeFlash@wrBlockData+24
  2384                           
  2385                           ;main.c: 110:     FLASH_WriteBlock((uint16_t)( 0x800 -16), (uint16_t*)wrBlockData);
  2386  0565  30F0               	movlw	240
  2387  0566  00F3               	movwf	FLASH_WriteBlock@writeAddr
  2388  0567  3007               	movlw	7
  2389  0568  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  2390  0569  3020               	movlw	(low (writeFlash@wrBlockData| 0))& (0+255)
  2391  056A  00FD               	movwf	??_writeFlash
  2392  056B  087D               	movf	??_writeFlash,w
  2393  056C  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  2394  056D  2454               	fcall	_FLASH_WriteBlock
  2395  056E  0008               	return
  2396  056F                     __end_of_writeFlash:
  2397                           
  2398                           	psect	text2
  2399  0454                     __ptext2:	
  2400 ;; *************** function _FLASH_WriteBlock *****************
  2401 ;; Defined at:
  2402 ;;		line 94 in file "mcc_generated_files/memory.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  writeAddr       2    3[COMMON] unsigned short 
  2405 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  2406 ;;		 -> writeFlash@wrBlockData(32), 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  blockStartAd    2    9[COMMON] unsigned short 
  2409 ;;  i               1   12[COMMON] unsigned char 
  2410 ;;  GIEBitValue     1   11[COMMON] unsigned char 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      char 
  2413 ;; Registers used:
  2414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 1F/0
  2417 ;;		On exit  : 1C/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1
  2420 ;;      Params:         3       0       0
  2421 ;;      Locals:         4       0       0
  2422 ;;      Temps:          3       0       0
  2423 ;;      Totals:        10       0       0
  2424 ;;Total ram usage:       10 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    5
  2427 ;; This function calls:
  2428 ;;		_FLASH_EraseBlock
  2429 ;; This function is called by:
  2430 ;;		_writeFlash
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _FLASH_WriteBlock
  2436  0454                     _FLASH_WriteBlock:
  2437                           
  2438                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x800 -1) ^ (16 -1)));
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2442  0454  30F0               	movlw	240
  2443  0455  0573               	andwf	FLASH_WriteBlock@writeAddr,w
  2444  0456  00F9               	movwf	FLASH_WriteBlock@blockStartAddr
  2445  0457  3007               	movlw	7
  2446  0458  0574               	andwf	FLASH_WriteBlock@writeAddr+1,w
  2447  0459  00FA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  2448                           
  2449                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  2450  045A  3000               	movlw	0
  2451  045B  1B8B               	btfsc	11,7	;volatile
  2452  045C  3001               	movlw	1
  2453  045D  00FB               	movwf	FLASH_WriteBlock@GIEBitValue
  2454                           
  2455                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  2456  045E  087A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  2457  045F  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  2458  0460  1D03               	skipz
  2459  0461  2C64               	goto	u925
  2460  0462  0879               	movf	FLASH_WriteBlock@blockStartAddr,w
  2461  0463  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  2462  0464                     u925:
  2463  0464  1D03               	btfss	3,2
  2464  0465  0008               	return
  2465                           
  2466                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  2467                           
  2468                           ;mcc_generated_files/memory.c: 104:     }
  2469  0466  138B               	bcf	11,7	;volatile
  2470                           
  2471                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  2472  0467  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2473  0468  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2474  0469  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2475  046A  00F0               	movwf	FLASH_EraseBlock@startAddr
  2476  046B  256F               	fcall	_FLASH_EraseBlock
  2477                           
  2478                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  2479  046C  1315               	bcf	21,6	;volatile
  2480                           
  2481                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  2482  046D  1515               	bsf	21,2	;volatile
  2483                           
  2484                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  2485  046E  1695               	bsf	21,5	;volatile
  2486                           
  2487                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<16; i++)
  2488  046F  01FC               	clrf	FLASH_WriteBlock@i
  2489  0470                     l1725:
  2490                           
  2491                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  2492  0470  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2493  0471  0023               	movlb	3	; select bank3
  2494  0472  0091               	movwf	17	;volatile
  2495                           
  2496                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  2497  0473  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2498  0474  0092               	movwf	18	;volatile
  2499                           
  2500                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  2501  0475  357C               	lslf	FLASH_WriteBlock@i,w
  2502  0476  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2503  0477  00F6               	movwf	??_FLASH_WriteBlock
  2504  0478  0876               	movf	??_FLASH_WriteBlock,w
  2505  0479  0086               	movwf	6
  2506  047A  0187               	clrf	7
  2507  047B  0801               	movf	1,w
  2508  047C  0093               	movwf	19	;volatile
  2509                           
  2510                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  2511  047D  357C               	lslf	FLASH_WriteBlock@i,w
  2512  047E  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2513  047F  00F6               	movwf	??_FLASH_WriteBlock
  2514  0480  0876               	movf	??_FLASH_WriteBlock,w
  2515  0481  0086               	movwf	6
  2516  0482  0187               	clrf	7
  2517  0483  3F40               	moviw [0]fsr1
  2518  0484  00F7               	movwf	??_FLASH_WriteBlock+1
  2519  0485  3F41               	moviw [1]fsr1
  2520  0486  00F8               	movwf	??_FLASH_WriteBlock+2
  2521  0487  0878               	movf	??_FLASH_WriteBlock+2,w
  2522  0488  0094               	movwf	20	;volatile
  2523                           
  2524                           ;mcc_generated_files/memory.c: 127:         if(i == (16 -1))
  2525  0489  300F               	movlw	15
  2526  048A  067C               	xorwf	FLASH_WriteBlock@i,w
  2527  048B  1903               	btfsc	3,2
  2528                           
  2529                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  2530  048C  1295               	bcf	21,5	;volatile
  2531                           
  2532                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  2533  048D  3055               	movlw	85
  2534  048E  0096               	movwf	22	;volsfr
  2535                           
  2536                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  2537  048F  30AA               	movlw	170
  2538  0490  0096               	movwf	22	;volsfr
  2539                           
  2540                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  2541  0491  1495               	bsf	21,1	;volatile
  2542                           
  2543                           ;mcc_generated_files/memory.c: 136:         __nop();
  2544  0492  0000               	nop
  2545                           
  2546                           ;mcc_generated_files/memory.c: 137:         __nop();
  2547  0493  0000               	nop
  2548                           
  2549                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  2550  0494  3001               	movlw	1
  2551  0495  07F3               	addwf	FLASH_WriteBlock@writeAddr,f
  2552  0496  3000               	movlw	0
  2553  0497  3DF4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  2554                           
  2555                           ;mcc_generated_files/memory.c: 140:     }
  2556  0498  3001               	movlw	1
  2557  0499  00F6               	movwf	??_FLASH_WriteBlock
  2558  049A  0876               	movf	??_FLASH_WriteBlock,w
  2559  049B  07FC               	addwf	FLASH_WriteBlock@i,f
  2560  049C  3010               	movlw	16
  2561  049D  027C               	subwf	FLASH_WriteBlock@i,w
  2562  049E  1C03               	skipc
  2563  049F  2C70               	goto	l1725
  2564                           
  2565                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  2566  04A0  0023               	movlb	3	; select bank3
  2567  04A1  1115               	bcf	21,2	;volatile
  2568                           
  2569                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  2570  04A2  0C7B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  2571  04A3  1C03               	skipc
  2572  04A4  138B               	bcf	11,7	;volatile
  2573  04A5  1803               	skipnc
  2574  04A6  178B               	bsf	11,7	;volatile
  2575  04A7  0008               	return
  2576  04A8                     __end_of_FLASH_WriteBlock:
  2577                           
  2578                           	psect	text3
  2579  056F                     __ptext3:	
  2580 ;; *************** function _FLASH_EraseBlock *****************
  2581 ;; Defined at:
  2582 ;;		line 148 in file "mcc_generated_files/memory.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  startAddr       2    0[COMMON] unsigned short 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0
  2591 ;; Tracked objects:
  2592 ;;		On entry : 1F/0
  2593 ;;		On exit  : 1F/3
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMMON   BANK0   BANK1
  2596 ;;      Params:         2       0       0
  2597 ;;      Locals:         1       0       0
  2598 ;;      Temps:          0       0       0
  2599 ;;      Totals:         3       0       0
  2600 ;;Total ram usage:        3 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    4
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_FLASH_WriteBlock
  2607 ;;		_writeFlash
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function _FLASH_EraseBlock
  2613  056F                     _FLASH_EraseBlock:
  2614                           
  2615                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  2619  056F  3000               	movlw	0
  2620  0570  1B8B               	btfsc	11,7	;volatile
  2621  0571  3001               	movlw	1
  2622  0572  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  2623                           
  2624                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  2625  0573  138B               	bcf	11,7	;volatile
  2626                           
  2627                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  2628  0574  0870               	movf	FLASH_EraseBlock@startAddr,w
  2629  0575  0023               	movlb	3	; select bank3
  2630  0576  0091               	movwf	17	;volatile
  2631                           
  2632                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  2633  0577  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  2634  0578  0092               	movwf	18	;volatile
  2635                           
  2636                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  2637  0579  1315               	bcf	21,6	;volatile
  2638                           
  2639                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  2640  057A  1615               	bsf	21,4	;volatile
  2641                           
  2642                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  2643  057B  1515               	bsf	21,2	;volatile
  2644                           
  2645                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  2646  057C  3055               	movlw	85
  2647  057D  0096               	movwf	22	;volsfr
  2648                           
  2649                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  2650  057E  30AA               	movlw	170
  2651  057F  0096               	movwf	22	;volsfr
  2652                           
  2653                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  2654  0580  1495               	bsf	21,1	;volatile
  2655                           
  2656                           ;mcc_generated_files/memory.c: 168:     __nop();
  2657  0581  0000               	nop
  2658                           
  2659                           ;mcc_generated_files/memory.c: 169:     __nop();
  2660  0582  0000               	nop
  2661                           
  2662                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  2663  0583  0023               	movlb	3	; select bank3
  2664  0584  1115               	bcf	21,2	;volatile
  2665                           
  2666                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  2667  0585  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  2668  0586  1C03               	skipc
  2669  0587  138B               	bcf	11,7	;volatile
  2670  0588  1803               	skipnc
  2671  0589  178B               	bsf	11,7	;volatile
  2672  058A  0008               	return
  2673  058B                     __end_of_FLASH_EraseBlock:
  2674                           
  2675                           	psect	text4
  2676  02D2                     __ptext4:	
  2677 ;; *************** function _setState *****************
  2678 ;; Defined at:
  2679 ;;		line 132 in file "main.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  newState        1    wreg     enum E2406
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  newState        1    4[BANK0 ] enum E2406
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 1C/0
  2690 ;;		On exit  : 1F/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1
  2693 ;;      Params:         0       0       0
  2694 ;;      Locals:         0       1       0
  2695 ;;      Temps:          0       4       0
  2696 ;;      Totals:         0       5       0
  2697 ;;Total ram usage:        5 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    6
  2700 ;; This function calls:
  2701 ;;		___lldiv
  2702 ;;		___tmul
  2703 ;;		_readFlash
  2704 ;; This function is called by:
  2705 ;;		_main
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           
  2710                           ;psect for function _setState
  2711  02D2                     _setState:
  2712                           
  2713                           ;incstack = 0
  2714                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2715                           ;setState@newState stored from wreg
  2716  02D2  0020               	movlb	0	; select bank0
  2717  02D3  00A4               	movwf	setState@newState
  2718                           
  2719                           ;main.c: 132: void setState(state_t newState);main.c: 133: {;main.c: 134:     if(newStat
      +                          e == currentState)
  2720  02D4  0824               	movf	setState@newState,w
  2721  02D5  065B               	xorwf	_currentState,w
  2722  02D6  1903               	btfsc	3,2
  2723  02D7  0008               	return
  2724                           
  2725                           ;main.c: 140:     do { LATCbits.LATC0 = 0; } while(0);
  2726  02D8  0022               	movlb	2	; select bank2
  2727  02D9  100E               	bcf	14,0	;volatile
  2728                           
  2729                           ;main.c: 141:     do { LATCbits.LATC1 = 0; } while(0);
  2730  02DA  108E               	bcf	14,1	;volatile
  2731                           
  2732                           ;main.c: 142:     do { LATCbits.LATC2 = 0; } while(0);
  2733  02DB  110E               	bcf	14,2	;volatile
  2734                           
  2735                           ;main.c: 143:     do { LATCbits.LATC3 = 0; } while(0);
  2736  02DC  118E               	bcf	14,3	;volatile
  2737                           
  2738                           ;main.c: 144:     do { LATCbits.LATC4 = 0; } while(0);
  2739  02DD  120E               	bcf	14,4	;volatile
  2740                           
  2741                           ;main.c: 145:     do { LATCbits.LATC5 = 0; } while(0);
  2742  02DE  128E               	bcf	14,5	;volatile
  2743                           
  2744                           ;main.c: 146:     do { LATCbits.LATC6 = 0; } while(0);
  2745  02DF  130E               	bcf	14,6	;volatile
  2746                           
  2747                           ;main.c: 147:     do { LATCbits.LATC7 = 0; } while(0);
  2748  02E0  138E               	bcf	14,7	;volatile
  2749                           
  2750                           ;main.c: 148:     do { LATBbits.LATB5 = 0; } while(0);
  2751  02E1  128D               	bcf	13,5	;volatile
  2752                           
  2753                           ;main.c: 149:     do { LATBbits.LATB6 = 0; } while(0);
  2754  02E2  130D               	bcf	13,6	;volatile
  2755                           
  2756                           ;main.c: 150:     do { LATBbits.LATB7 = 0; } while(0);
  2757  02E3  138D               	bcf	13,7	;volatile
  2758  02E4  2B4F               	goto	l1857
  2759  02E5                     l1839:
  2760                           
  2761                           ;main.c: 159:             readFlash();
  2762  02E5  23EC               	fcall	_readFlash
  2763                           
  2764                           ;main.c: 162:             upperLimit = (upperLimit > (1023)) ? (1023) : upperLimit;
  2765  02E6  0866               	movf	_upperLimit+3,w
  2766  02E7  1D03               	btfss	3,2
  2767  02E8  2AF0               	goto	l1845
  2768  02E9  0865               	movf	_upperLimit+2,w
  2769  02EA  1D03               	btfss	3,2
  2770  02EB  2AF0               	goto	l1845
  2771  02EC  3004               	movlw	4
  2772  02ED  0264               	subwf	_upperLimit+1,w
  2773  02EE  1C03               	btfss	3,0
  2774  02EF  2AF8               	goto	l325
  2775  02F0                     l1845:
  2776  02F0  3000               	movlw	0
  2777  02F1  00E6               	movwf	_upperLimit+3
  2778  02F2  3000               	movlw	0
  2779  02F3  00E5               	movwf	_upperLimit+2
  2780  02F4  3003               	movlw	3
  2781  02F5  00E4               	movwf	_upperLimit+1
  2782  02F6  30FF               	movlw	255
  2783  02F7  00E3               	movwf	_upperLimit
  2784  02F8                     l325:
  2785                           
  2786                           ;main.c: 164:             lowerLimit = (lowerLimit < (0)) || (lowerLimit > upperLimit) ?
      +                           (0) : lowerLimit;
  2787  02F8  084D               	movf	_lowerLimit+3,w
  2788  02F9  0266               	subwf	_upperLimit+3,w
  2789  02FA  1D03               	skipz
  2790  02FB  2B06               	goto	u1125
  2791  02FC  084C               	movf	_lowerLimit+2,w
  2792  02FD  0265               	subwf	_upperLimit+2,w
  2793  02FE  1D03               	skipz
  2794  02FF  2B06               	goto	u1125
  2795  0300  084B               	movf	_lowerLimit+1,w
  2796  0301  0264               	subwf	_upperLimit+1,w
  2797  0302  1D03               	skipz
  2798  0303  2B06               	goto	u1125
  2799  0304  084A               	movf	_lowerLimit,w
  2800  0305  0263               	subwf	_upperLimit,w
  2801  0306                     u1125:
  2802  0306  1803               	btfsc	3,0
  2803  0307  2B10               	goto	l1851
  2804  0308  3000               	movlw	0
  2805  0309  00CD               	movwf	_lowerLimit+3
  2806  030A  3000               	movlw	0
  2807  030B  00CC               	movwf	_lowerLimit+2
  2808  030C  3000               	movlw	0
  2809  030D  00CB               	movwf	_lowerLimit+1
  2810  030E  3000               	movlw	0
  2811  030F  00CA               	movwf	_lowerLimit
  2812  0310                     l1851:
  2813                           
  2814                           ;main.c: 167:             m = (1023*fixedPointFactor)/(upperLimit - lowerLimit);
  2815  0310  084A               	movf	_lowerLimit,w
  2816  0311  0263               	subwf	_upperLimit,w
  2817  0312  00A0               	movwf	??_setState
  2818  0313  084B               	movf	_lowerLimit+1,w
  2819  0314  3B64               	subwfb	_upperLimit+1,w
  2820  0315  00A1               	movwf	??_setState+1
  2821  0316  084C               	movf	_lowerLimit+2,w
  2822  0317  3B65               	subwfb	_upperLimit+2,w
  2823  0318  00A2               	movwf	??_setState+2
  2824  0319  084D               	movf	_lowerLimit+3,w
  2825  031A  3B66               	subwfb	_upperLimit+3,w
  2826  031B  00A3               	movwf	??_setState+3
  2827  031C  0823               	movf	??_setState+3,w
  2828  031D  00F3               	movwf	___lldiv@divisor+3
  2829  031E  0822               	movf	??_setState+2,w
  2830  031F  00F2               	movwf	___lldiv@divisor+2
  2831  0320  0821               	movf	??_setState+1,w
  2832  0321  00F1               	movwf	___lldiv@divisor+1
  2833  0322  0820               	movf	??_setState,w
  2834  0323  00F0               	movwf	___lldiv@divisor
  2835  0324  3000               	movlw	0
  2836  0325  00F7               	movwf	___lldiv@dividend+3
  2837  0326  300F               	movlw	15
  2838  0327  00F6               	movwf	___lldiv@dividend+2
  2839  0328  309C               	movlw	156
  2840  0329  00F5               	movwf	___lldiv@dividend+1
  2841  032A  3018               	movlw	24
  2842  032B  00F4               	movwf	___lldiv@dividend
  2843  032C  24A8               	fcall	___lldiv
  2844  032D  0873               	movf	?___lldiv+3,w
  2845  032E  00E1               	movwf	_m+3
  2846  032F  0872               	movf	?___lldiv+2,w
  2847  0330  00E0               	movwf	_m+2
  2848  0331  0871               	movf	?___lldiv+1,w
  2849  0332  00DF               	movwf	_m+1
  2850  0333  0870               	movf	?___lldiv,w
  2851  0334  00DE               	movwf	_m
  2852                           
  2853                           ;main.c: 168:             b = lowerLimit*m;
  2854  0335  085E               	movf	_m,w
  2855  0336  00F0               	movwf	___tmul@multiplier
  2856  0337  085F               	movf	_m+1,w
  2857  0338  00F1               	movwf	___tmul@multiplier+1
  2858  0339  0860               	movf	_m+2,w
  2859  033A  00F2               	movwf	___tmul@multiplier+2
  2860  033B  084A               	movf	_lowerLimit,w
  2861  033C  00F3               	movwf	___tmul@multiplicand
  2862  033D  084B               	movf	_lowerLimit+1,w
  2863  033E  00F4               	movwf	___tmul@multiplicand+1
  2864  033F  084C               	movf	_lowerLimit+2,w
  2865  0340  00F5               	movwf	___tmul@multiplicand+2
  2866  0341  2529               	fcall	___tmul
  2867  0342  0870               	movf	?___tmul,w
  2868  0343  00D2               	movwf	_b
  2869  0344  0871               	movf	?___tmul+1,w
  2870  0345  00D3               	movwf	_b+1
  2871  0346  0872               	movf	?___tmul+2,w
  2872  0347  00D4               	movwf	_b+2
  2873                           
  2874                           ;main.c: 169:             break;
  2875  0348  2B63               	goto	l1859
  2876  0349                     l332:	
  2877                           ;main.c: 173:             do { LATCbits.LATC0 = 1; } while(0);
  2878                           
  2879  0349  0022               	movlb	2	; select bank2
  2880  034A  140E               	bsf	14,0	;volatile
  2881  034B  2B63               	goto	l1859
  2882  034C                     l335:	
  2883                           ;main.c: 177:             do { LATBbits.LATB7 = 1; } while(0);
  2884                           
  2885  034C  0022               	movlb	2	; select bank2
  2886  034D  178D               	bsf	13,7	;volatile
  2887  034E  2B63               	goto	l1859
  2888  034F                     l1857:
  2889  034F  0020               	movlb	0	; select bank0
  2890  0350  0824               	movf	setState@newState,w
  2891  0351  00A0               	movwf	??_setState
  2892  0352  01A1               	clrf	??_setState+1
  2893                           
  2894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2895                           ; Switch size 1, requested type "simple"
  2896                           ; Number of cases is 1, Range of values is 0 to 0
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte            4     3 (average)
  2900                           ; direct_byte            8     6 (fixed)
  2901                           ; jumptable            260     6 (fixed)
  2902                           ;	Chosen strategy is simple_byte
  2903  0353  0821               	movf	??_setState+1,w
  2904  0354  3A00               	xorlw	0	; case 0
  2905  0355  1903               	skipnz
  2906  0356  2B58               	goto	l2147
  2907  0357  2B63               	goto	l1859
  2908  0358                     l2147:
  2909                           
  2910                           ; Switch size 1, requested type "simple"
  2911                           ; Number of cases is 3, Range of values is 1 to 3
  2912                           ; switch strategies available:
  2913                           ; Name         Instructions Cycles
  2914                           ; simple_byte           10     6 (average)
  2915                           ; direct_byte           15     9 (fixed)
  2916                           ; jumptable            263     9 (fixed)
  2917                           ;	Chosen strategy is simple_byte
  2918  0358  0820               	movf	??_setState,w
  2919  0359  3A01               	xorlw	1	; case 1
  2920  035A  1903               	skipnz
  2921  035B  2AE5               	goto	l1839
  2922  035C  3A03               	xorlw	3	; case 2
  2923  035D  1903               	skipnz
  2924  035E  2B49               	goto	l332
  2925  035F  3A01               	xorlw	1	; case 3
  2926  0360  1903               	skipnz
  2927  0361  2B4C               	goto	l335
  2928  0362  2B63               	goto	l1859
  2929  0363                     l1859:
  2930                           
  2931                           ;main.c: 181:     msTick = 0;
  2932  0363  0020               	movlb	0	; select bank0
  2933  0364  01D7               	clrf	_msTick	;volatile
  2934  0365  01D8               	clrf	_msTick+1	;volatile
  2935                           
  2936                           ;main.c: 183:     currentState = newState;
  2937  0366  0824               	movf	setState@newState,w
  2938  0367  00A0               	movwf	??_setState
  2939  0368  0820               	movf	??_setState,w
  2940  0369  00DB               	movwf	_currentState
  2941  036A  0008               	return
  2942  036B                     __end_of_setState:
  2943                           
  2944                           	psect	text5
  2945  03EC                     __ptext5:	
  2946 ;; *************** function _readFlash *****************
  2947 ;; Defined at:
  2948 ;;		line 82 in file "main.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, pclath, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 1F/0
  2959 ;;		On exit  : 1F/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1
  2962 ;;      Params:         0       0       0
  2963 ;;      Locals:         0       0       0
  2964 ;;      Temps:          4       0       0
  2965 ;;      Totals:         4       0       0
  2966 ;;Total ram usage:        4 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    5
  2969 ;; This function calls:
  2970 ;;		_FLASH_ReadWord
  2971 ;; This function is called by:
  2972 ;;		_setState
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _readFlash
  2978  03EC                     _readFlash:
  2979                           
  2980                           ;main.c: 85:     lowerLimit = 0;
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _readFlash: [wreg+status,2+status,0+pclath+cstack]
  2984  03EC  3000               	movlw	0
  2985  03ED  00CD               	movwf	_lowerLimit+3
  2986  03EE  3000               	movlw	0
  2987  03EF  00CC               	movwf	_lowerLimit+2
  2988  03F0  3000               	movlw	0
  2989  03F1  00CB               	movwf	_lowerLimit+1
  2990  03F2  3000               	movlw	0
  2991  03F3  00CA               	movwf	_lowerLimit
  2992                           
  2993                           ;main.c: 86:     lowerLimit += (uint32_t)FLASH_ReadWord(0x800 -4) << 16;
  2994  03F4  30FC               	movlw	252
  2995  03F5  00F0               	movwf	FLASH_ReadWord@flashAddr
  2996  03F6  3007               	movlw	7
  2997  03F7  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2998  03F8  258B               	fcall	_FLASH_ReadWord
  2999  03F9  0870               	movf	?_FLASH_ReadWord,w
  3000  03FA  00F3               	movwf	??_readFlash
  3001  03FB  0871               	movf	?_FLASH_ReadWord+1,w
  3002  03FC  00F4               	movwf	??_readFlash+1
  3003  03FD  01F5               	clrf	??_readFlash+2
  3004  03FE  01F6               	clrf	??_readFlash+3
  3005  03FF  3010               	movlw	16
  3006  0400                     u955:
  3007  0400  35F3               	lslf	??_readFlash,f
  3008  0401  0DF4               	rlf	??_readFlash+1,f
  3009  0402  0DF5               	rlf	??_readFlash+2,f
  3010  0403  0DF6               	rlf	??_readFlash+3,f
  3011  0404  0B89               	decfsz	9,f
  3012  0405  2C00               	goto	u955
  3013  0406  0873               	movf	??_readFlash,w
  3014  0407  0020               	movlb	0	; select bank0
  3015  0408  07CA               	addwf	_lowerLimit,f
  3016  0409  0874               	movf	??_readFlash+1,w
  3017  040A  3DCB               	addwfc	_lowerLimit+1,f
  3018  040B  0875               	movf	??_readFlash+2,w
  3019  040C  3DCC               	addwfc	_lowerLimit+2,f
  3020  040D  0876               	movf	??_readFlash+3,w
  3021  040E  3DCD               	addwfc	_lowerLimit+3,f
  3022                           
  3023                           ;main.c: 87:     lowerLimit |= (uint32_t)FLASH_ReadWord(0x800 -3);
  3024  040F  30FD               	movlw	253
  3025  0410  00F0               	movwf	FLASH_ReadWord@flashAddr
  3026  0411  3007               	movlw	7
  3027  0412  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3028  0413  258B               	fcall	_FLASH_ReadWord
  3029  0414  0870               	movf	?_FLASH_ReadWord,w
  3030  0415  00F3               	movwf	??_readFlash
  3031  0416  0871               	movf	?_FLASH_ReadWord+1,w
  3032  0417  00F4               	movwf	??_readFlash+1
  3033  0418  01F5               	clrf	??_readFlash+2
  3034  0419  01F6               	clrf	??_readFlash+3
  3035  041A  0873               	movf	??_readFlash,w
  3036  041B  0020               	movlb	0	; select bank0
  3037  041C  04CA               	iorwf	_lowerLimit,f
  3038  041D  0874               	movf	??_readFlash+1,w
  3039  041E  04CB               	iorwf	_lowerLimit+1,f
  3040  041F  0875               	movf	??_readFlash+2,w
  3041  0420  04CC               	iorwf	_lowerLimit+2,f
  3042  0421  0876               	movf	??_readFlash+3,w
  3043  0422  04CD               	iorwf	_lowerLimit+3,f
  3044                           
  3045                           ;main.c: 90:     upperLimit = 0;
  3046  0423  3000               	movlw	0
  3047  0424  00E6               	movwf	_upperLimit+3
  3048  0425  3000               	movlw	0
  3049  0426  00E5               	movwf	_upperLimit+2
  3050  0427  3000               	movlw	0
  3051  0428  00E4               	movwf	_upperLimit+1
  3052  0429  3000               	movlw	0
  3053  042A  00E3               	movwf	_upperLimit
  3054                           
  3055                           ;main.c: 91:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -2) << 16;
  3056  042B  30FE               	movlw	254
  3057  042C  00F0               	movwf	FLASH_ReadWord@flashAddr
  3058  042D  3007               	movlw	7
  3059  042E  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3060  042F  258B               	fcall	_FLASH_ReadWord
  3061  0430  0870               	movf	?_FLASH_ReadWord,w
  3062  0431  00F3               	movwf	??_readFlash
  3063  0432  0871               	movf	?_FLASH_ReadWord+1,w
  3064  0433  00F4               	movwf	??_readFlash+1
  3065  0434  01F5               	clrf	??_readFlash+2
  3066  0435  01F6               	clrf	??_readFlash+3
  3067  0436  3010               	movlw	16
  3068  0437                     u965:
  3069  0437  35F3               	lslf	??_readFlash,f
  3070  0438  0DF4               	rlf	??_readFlash+1,f
  3071  0439  0DF5               	rlf	??_readFlash+2,f
  3072  043A  0DF6               	rlf	??_readFlash+3,f
  3073  043B  0B89               	decfsz	9,f
  3074  043C  2C37               	goto	u965
  3075  043D  0873               	movf	??_readFlash,w
  3076  043E  0020               	movlb	0	; select bank0
  3077  043F  07E3               	addwf	_upperLimit,f
  3078  0440  0874               	movf	??_readFlash+1,w
  3079  0441  3DE4               	addwfc	_upperLimit+1,f
  3080  0442  0875               	movf	??_readFlash+2,w
  3081  0443  3DE5               	addwfc	_upperLimit+2,f
  3082  0444  0876               	movf	??_readFlash+3,w
  3083  0445  3DE6               	addwfc	_upperLimit+3,f
  3084                           
  3085                           ;main.c: 92:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -1) ;
  3086  0446  30FF               	movlw	255
  3087  0447  00F0               	movwf	FLASH_ReadWord@flashAddr
  3088  0448  3007               	movlw	7
  3089  0449  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3090  044A  258B               	fcall	_FLASH_ReadWord
  3091  044B  0870               	movf	?_FLASH_ReadWord,w
  3092  044C  0020               	movlb	0	; select bank0
  3093  044D  07E3               	addwf	_upperLimit,f
  3094  044E  0871               	movf	?_FLASH_ReadWord+1,w
  3095  044F  3DE4               	addwfc	_upperLimit+1,f
  3096  0450  3000               	movlw	0
  3097  0451  3DE5               	addwfc	_upperLimit+2,f
  3098  0452  3DE6               	addwfc	_upperLimit+3,f
  3099  0453  0008               	return
  3100  0454                     __end_of_readFlash:
  3101                           
  3102                           	psect	text6
  3103  058B                     __ptext6:	
  3104 ;; *************** function _FLASH_ReadWord *****************
  3105 ;; Defined at:
  3106 ;;		line 58 in file "mcc_generated_files/memory.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;  flashAddr       2    0[COMMON] unsigned short 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  2    0[COMMON] unsigned short 
  3113 ;; Registers used:
  3114 ;;		wreg, status,2, status,0
  3115 ;; Tracked objects:
  3116 ;;		On entry : 1F/0
  3117 ;;		On exit  : 1F/3
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1
  3120 ;;      Params:         2       0       0
  3121 ;;      Locals:         1       0       0
  3122 ;;      Temps:          0       0       0
  3123 ;;      Totals:         3       0       0
  3124 ;;Total ram usage:        3 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    4
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_readFlash
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _FLASH_ReadWord
  3136  058B                     _FLASH_ReadWord:
  3137                           
  3138                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3142  058B  3000               	movlw	0
  3143  058C  1B8B               	btfsc	11,7	;volatile
  3144  058D  3001               	movlw	1
  3145  058E  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  3146                           
  3147                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  3148  058F  138B               	bcf	11,7	;volatile
  3149                           
  3150                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  3151  0590  0870               	movf	FLASH_ReadWord@flashAddr,w
  3152  0591  0023               	movlb	3	; select bank3
  3153  0592  0091               	movwf	17	;volatile
  3154                           
  3155                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  3156  0593  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  3157  0594  0092               	movwf	18	;volatile
  3158                           
  3159                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  3160  0595  1315               	bcf	21,6	;volatile
  3161                           
  3162                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  3163  0596  1415               	bsf	21,0	;volatile
  3164                           
  3165                           ;mcc_generated_files/memory.c: 68:     __nop();
  3166  0597  0000               	nop
  3167                           
  3168                           ;mcc_generated_files/memory.c: 69:     __nop();
  3169  0598  0000               	nop
  3170                           
  3171                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  3172  0599  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  3173  059A  1C03               	skipc
  3174  059B  138B               	bcf	11,7	;volatile
  3175  059C  1803               	skipnc
  3176  059D  178B               	bsf	11,7	;volatile
  3177                           
  3178                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  3179  059E  0023               	movlb	3	; select bank3
  3180  059F  0814               	movf	20,w	;volatile
  3181  05A0  00F1               	movwf	?_FLASH_ReadWord+1
  3182  05A1  0813               	movf	19,w	;volatile
  3183  05A2  00F0               	movwf	?_FLASH_ReadWord
  3184  05A3  0008               	return
  3185  05A4                     __end_of_FLASH_ReadWord:
  3186                           
  3187                           	psect	text7
  3188  0529                     __ptext7:	
  3189 ;; *************** function ___tmul *****************
  3190 ;; Defined at:
  3191 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul24.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  multiplier      3    0[COMMON] unsigned um
  3194 ;;  multiplicand    3    3[COMMON] unsigned um
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  product         3    6[COMMON] unsigned um
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  3    0[COMMON] unsigned um
  3199 ;; Registers used:
  3200 ;;		wreg, status,2, status,0
  3201 ;; Tracked objects:
  3202 ;;		On entry : 1F/0
  3203 ;;		On exit  : 1F/0
  3204 ;;		Unchanged: 1F/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1
  3206 ;;      Params:         6       0       0
  3207 ;;      Locals:         3       0       0
  3208 ;;      Temps:          0       0       0
  3209 ;;      Totals:         9       0       0
  3210 ;;Total ram usage:        9 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    4
  3213 ;; This function calls:
  3214 ;;		Nothing
  3215 ;; This function is called by:
  3216 ;;		_setState
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           
  3221                           ;psect for function ___tmul
  3222  0529                     ___tmul:
  3223                           
  3224                           ;incstack = 0
  3225                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  3226  0529  3000               	movlw	0
  3227  052A  00F6               	movwf	___tmul@product
  3228  052B  3000               	movlw	0
  3229  052C  00F7               	movwf	___tmul@product+1
  3230  052D  3000               	movlw	0
  3231  052E  00F8               	movwf	___tmul@product+2
  3232  052F                     l1763:
  3233  052F  1C70               	btfss	___tmul@multiplier,0
  3234  0530  2D37               	goto	l1767
  3235  0531  0873               	movf	___tmul@multiplicand,w
  3236  0532  07F6               	addwf	___tmul@product,f
  3237  0533  0874               	movf	___tmul@multiplicand+1,w
  3238  0534  3DF7               	addwfc	___tmul@product+1,f
  3239  0535  0875               	movf	___tmul@multiplicand+2,w
  3240  0536  3DF8               	addwfc	___tmul@product+2,f
  3241  0537                     l1767:
  3242  0537  3001               	movlw	1
  3243  0538                     u985:
  3244  0538  35F3               	lslf	___tmul@multiplicand,f
  3245  0539  0DF4               	rlf	___tmul@multiplicand+1,f
  3246  053A  0DF5               	rlf	___tmul@multiplicand+2,f
  3247  053B  0B89               	decfsz	9,f
  3248  053C  2D38               	goto	u985
  3249  053D  3001               	movlw	1
  3250  053E                     u995:
  3251  053E  36F2               	lsrf	___tmul@multiplier+2,f
  3252  053F  0CF1               	rrf	___tmul@multiplier+1,f
  3253  0540  0CF0               	rrf	___tmul@multiplier,f
  3254  0541  0B89               	decfsz	9,f
  3255  0542  2D3E               	goto	u995
  3256  0543  0872               	movf	___tmul@multiplier+2,w
  3257  0544  0471               	iorwf	___tmul@multiplier+1,w
  3258  0545  0470               	iorwf	___tmul@multiplier,w
  3259  0546  1D03               	skipz
  3260  0547  2D2F               	goto	l1763
  3261  0548  0876               	movf	___tmul@product,w
  3262  0549  00F0               	movwf	?___tmul
  3263  054A  0877               	movf	___tmul@product+1,w
  3264  054B  00F1               	movwf	?___tmul+1
  3265  054C  0878               	movf	___tmul@product+2,w
  3266  054D  00F2               	movwf	?___tmul+2
  3267  054E  0008               	return
  3268  054F                     __end_of___tmul:
  3269                           
  3270                           	psect	text8
  3271  04A8                     __ptext8:	
  3272 ;; *************** function ___lldiv *****************
  3273 ;; Defined at:
  3274 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\__lldiv.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  divisor         4    0[COMMON] unsigned long 
  3277 ;;  dividend        4    4[COMMON] unsigned long 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;  quotient        4    9[COMMON] unsigned long 
  3280 ;;  counter         1   13[COMMON] unsigned char 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  4    0[COMMON] unsigned long 
  3283 ;; Registers used:
  3284 ;;		wreg, status,2, status,0
  3285 ;; Tracked objects:
  3286 ;;		On entry : 1F/0
  3287 ;;		On exit  : 1F/0
  3288 ;;		Unchanged: 1F/0
  3289 ;; Data sizes:     COMMON   BANK0   BANK1
  3290 ;;      Params:         8       0       0
  3291 ;;      Locals:         5       0       0
  3292 ;;      Temps:          1       0       0
  3293 ;;      Totals:        14       0       0
  3294 ;;Total ram usage:       14 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    4
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_setState
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           
  3305                           ;psect for function ___lldiv
  3306  04A8                     ___lldiv:
  3307                           
  3308                           ;incstack = 0
  3309                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3310  04A8  3000               	movlw	0
  3311  04A9  00FC               	movwf	___lldiv@quotient+3
  3312  04AA  3000               	movlw	0
  3313  04AB  00FB               	movwf	___lldiv@quotient+2
  3314  04AC  3000               	movlw	0
  3315  04AD  00FA               	movwf	___lldiv@quotient+1
  3316  04AE  3000               	movlw	0
  3317  04AF  00F9               	movwf	___lldiv@quotient
  3318  04B0  0873               	movf	___lldiv@divisor+3,w
  3319  04B1  0472               	iorwf	___lldiv@divisor+2,w
  3320  04B2  0471               	iorwf	___lldiv@divisor+1,w
  3321  04B3  0470               	iorwf	___lldiv@divisor,w
  3322  04B4  1903               	skipnz
  3323  04B5  2CF1               	goto	l1795
  3324  04B6  01FD               	clrf	___lldiv@counter
  3325  04B7  0AFD               	incf	___lldiv@counter,f
  3326  04B8                     l1781:
  3327  04B8  1BF3               	btfsc	___lldiv@divisor+3,7
  3328  04B9  2CC6               	goto	l1783
  3329  04BA  3001               	movlw	1
  3330  04BB                     u1025:
  3331  04BB  35F0               	lslf	___lldiv@divisor,f
  3332  04BC  0DF1               	rlf	___lldiv@divisor+1,f
  3333  04BD  0DF2               	rlf	___lldiv@divisor+2,f
  3334  04BE  0DF3               	rlf	___lldiv@divisor+3,f
  3335  04BF  0B89               	decfsz	9,f
  3336  04C0  2CBB               	goto	u1025
  3337  04C1  3001               	movlw	1
  3338  04C2  00F8               	movwf	??___lldiv
  3339  04C3  0878               	movf	??___lldiv,w
  3340  04C4  07FD               	addwf	___lldiv@counter,f
  3341  04C5  2CB8               	goto	l1781
  3342  04C6                     l1783:
  3343  04C6  3001               	movlw	1
  3344  04C7                     u1045:
  3345  04C7  35F9               	lslf	___lldiv@quotient,f
  3346  04C8  0DFA               	rlf	___lldiv@quotient+1,f
  3347  04C9  0DFB               	rlf	___lldiv@quotient+2,f
  3348  04CA  0DFC               	rlf	___lldiv@quotient+3,f
  3349  04CB  0B89               	decfsz	9,f
  3350  04CC  2CC7               	goto	u1045
  3351  04CD  0873               	movf	___lldiv@divisor+3,w
  3352  04CE  0277               	subwf	___lldiv@dividend+3,w
  3353  04CF  1D03               	skipz
  3354  04D0  2CDB               	goto	u1055
  3355  04D1  0872               	movf	___lldiv@divisor+2,w
  3356  04D2  0276               	subwf	___lldiv@dividend+2,w
  3357  04D3  1D03               	skipz
  3358  04D4  2CDB               	goto	u1055
  3359  04D5  0871               	movf	___lldiv@divisor+1,w
  3360  04D6  0275               	subwf	___lldiv@dividend+1,w
  3361  04D7  1D03               	skipz
  3362  04D8  2CDB               	goto	u1055
  3363  04D9  0870               	movf	___lldiv@divisor,w
  3364  04DA  0274               	subwf	___lldiv@dividend,w
  3365  04DB                     u1055:
  3366  04DB  1C03               	skipc
  3367  04DC  2CE6               	goto	l1791
  3368  04DD  0870               	movf	___lldiv@divisor,w
  3369  04DE  02F4               	subwf	___lldiv@dividend,f
  3370  04DF  0871               	movf	___lldiv@divisor+1,w
  3371  04E0  3BF5               	subwfb	___lldiv@dividend+1,f
  3372  04E1  0872               	movf	___lldiv@divisor+2,w
  3373  04E2  3BF6               	subwfb	___lldiv@dividend+2,f
  3374  04E3  0873               	movf	___lldiv@divisor+3,w
  3375  04E4  3BF7               	subwfb	___lldiv@dividend+3,f
  3376  04E5  1479               	bsf	___lldiv@quotient,0
  3377  04E6                     l1791:
  3378  04E6  3001               	movlw	1
  3379  04E7                     u1065:
  3380  04E7  36F3               	lsrf	___lldiv@divisor+3,f
  3381  04E8  0CF2               	rrf	___lldiv@divisor+2,f
  3382  04E9  0CF1               	rrf	___lldiv@divisor+1,f
  3383  04EA  0CF0               	rrf	___lldiv@divisor,f
  3384  04EB  0B89               	decfsz	9,f
  3385  04EC  2CE7               	goto	u1065
  3386  04ED  3001               	movlw	1
  3387  04EE  02FD               	subwf	___lldiv@counter,f
  3388  04EF  1D03               	btfss	3,2
  3389  04F0  2CC6               	goto	l1783
  3390  04F1                     l1795:
  3391  04F1  087C               	movf	___lldiv@quotient+3,w
  3392  04F2  00F3               	movwf	?___lldiv+3
  3393  04F3  087B               	movf	___lldiv@quotient+2,w
  3394  04F4  00F2               	movwf	?___lldiv+2
  3395  04F5  087A               	movf	___lldiv@quotient+1,w
  3396  04F6  00F1               	movwf	?___lldiv+1
  3397  04F7  0879               	movf	___lldiv@quotient,w
  3398  04F8  00F0               	movwf	?___lldiv
  3399  04F9  0008               	return
  3400  04FA                     __end_of___lldiv:
  3401                           
  3402                           	psect	text9
  3403  019A                     __ptext9:	
  3404 ;; *************** function _setLedsForPositioning *****************
  3405 ;; Defined at:
  3406 ;;		line 340 in file "main.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  adcValue        4    0[COMMON] long 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 1F/0
  3417 ;;		On exit  : 1F/2
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1
  3420 ;;      Params:         4       0       0
  3421 ;;      Locals:         0       0       0
  3422 ;;      Temps:          0       0       0
  3423 ;;      Totals:         4       0       0
  3424 ;;Total ram usage:        4 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    4
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_main
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function _setLedsForPositioning
  3436  019A                     _setLedsForPositioning:
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _setLedsForPositioning: [wreg+status,2+status,0]
  3440                           ;main.c: 340: void setLedsForPositioning(int32_t adcValue);main.c: 341: {;main.c: 342:  
      +                             do { LATCbits.LATC0 = 0; } while(0);
  3441  019A  0022               	movlb	2	; select bank2
  3442  019B  100E               	bcf	14,0	;volatile
  3443                           
  3444                           ;main.c: 343:     do { LATCbits.LATC1 = 0; } while(0);
  3445  019C  108E               	bcf	14,1	;volatile
  3446                           
  3447                           ;main.c: 344:     do { LATCbits.LATC2 = 0; } while(0);
  3448  019D  110E               	bcf	14,2	;volatile
  3449                           
  3450                           ;main.c: 345:     do { LATCbits.LATC3 = 0; } while(0);
  3451  019E  118E               	bcf	14,3	;volatile
  3452                           
  3453                           ;main.c: 346:     do { LATCbits.LATC4 = 0; } while(0);
  3454  019F  120E               	bcf	14,4	;volatile
  3455                           
  3456                           ;main.c: 347:     do { LATCbits.LATC5 = 1; } while(0);
  3457  01A0  168E               	bsf	14,5	;volatile
  3458                           
  3459                           ;main.c: 348:     do { LATCbits.LATC6 = 0; } while(0);
  3460  01A1  130E               	bcf	14,6	;volatile
  3461                           
  3462                           ;main.c: 349:     do { LATCbits.LATC7 = 0; } while(0);
  3463  01A2  138E               	bcf	14,7	;volatile
  3464                           
  3465                           ;main.c: 350:     do { LATBbits.LATB5 = 0; } while(0);
  3466  01A3  128D               	bcf	13,5	;volatile
  3467                           
  3468                           ;main.c: 351:     do { LATBbits.LATB6 = 0; } while(0);
  3469  01A4  130D               	bcf	13,6	;volatile
  3470                           
  3471                           ;main.c: 352:     do { LATBbits.LATB7 = 0; } while(0);
  3472  01A5  138D               	bcf	13,7	;volatile
  3473                           
  3474                           ;main.c: 356:     if(adcValue < 54)
  3475  01A6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3476  01A7  29B5               	goto	l426
  3477  01A8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3478  01A9  1D03               	btfss	3,2
  3479  01AA  29B7               	goto	l1869
  3480  01AB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3481  01AC  1D03               	btfss	3,2
  3482  01AD  29B7               	goto	l1869
  3483  01AE  0871               	movf	setLedsForPositioning@adcValue+1,w
  3484  01AF  1D03               	btfss	3,2
  3485  01B0  29B7               	goto	l1869
  3486  01B1  3036               	movlw	54
  3487  01B2  0270               	subwf	setLedsForPositioning@adcValue,w
  3488  01B3  1803               	btfsc	3,0
  3489  01B4  29B7               	goto	l1869
  3490  01B5                     l426:	
  3491                           ;main.c: 357:     {;main.c: 358:         do { LATCbits.LATC0 = 1; } while(0);
  3492                           
  3493  01B5  140E               	bsf	14,0	;volatile
  3494  01B6  0008               	return
  3495  01B7                     l1869:
  3496  01B7  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3497  01B8  29C6               	goto	l430
  3498  01B9  0873               	movf	setLedsForPositioning@adcValue+3,w
  3499  01BA  1D03               	btfss	3,2
  3500  01BB  29C9               	goto	l1871
  3501  01BC  0872               	movf	setLedsForPositioning@adcValue+2,w
  3502  01BD  1D03               	btfss	3,2
  3503  01BE  29C9               	goto	l1871
  3504  01BF  0871               	movf	setLedsForPositioning@adcValue+1,w
  3505  01C0  1D03               	btfss	3,2
  3506  01C1  29C9               	goto	l1871
  3507  01C2  306C               	movlw	108
  3508  01C3  0270               	subwf	setLedsForPositioning@adcValue,w
  3509  01C4  1803               	btfsc	3,0
  3510  01C5  29C9               	goto	l1871
  3511  01C6                     l430:	
  3512                           ;main.c: 361:     {;main.c: 362:         do { LATCbits.LATC0 = 1; } while(0);
  3513                           
  3514  01C6  140E               	bsf	14,0	;volatile
  3515                           
  3516                           ;main.c: 363:         do { LATCbits.LATC1 = 1; } while(0);
  3517  01C7  148E               	bsf	14,1	;volatile
  3518  01C8  0008               	return
  3519  01C9                     l1871:
  3520  01C9  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3521  01CA  29D8               	goto	l436
  3522  01CB  0873               	movf	setLedsForPositioning@adcValue+3,w
  3523  01CC  1D03               	btfss	3,2
  3524  01CD  29DA               	goto	l1873
  3525  01CE  0872               	movf	setLedsForPositioning@adcValue+2,w
  3526  01CF  1D03               	btfss	3,2
  3527  01D0  29DA               	goto	l1873
  3528  01D1  0871               	movf	setLedsForPositioning@adcValue+1,w
  3529  01D2  1D03               	btfss	3,2
  3530  01D3  29DA               	goto	l1873
  3531  01D4  30A2               	movlw	162
  3532  01D5  0270               	subwf	setLedsForPositioning@adcValue,w
  3533  01D6  1803               	btfsc	3,0
  3534  01D7  29DA               	goto	l1873
  3535  01D8                     l436:	
  3536                           ;main.c: 366:     {;main.c: 367:         do { LATCbits.LATC1 = 1; } while(0);
  3537                           
  3538  01D8  148E               	bsf	14,1	;volatile
  3539  01D9  0008               	return
  3540  01DA                     l1873:
  3541  01DA  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3542  01DB  29E9               	goto	l440
  3543  01DC  0873               	movf	setLedsForPositioning@adcValue+3,w
  3544  01DD  1D03               	btfss	3,2
  3545  01DE  29EC               	goto	l1875
  3546  01DF  0872               	movf	setLedsForPositioning@adcValue+2,w
  3547  01E0  1D03               	btfss	3,2
  3548  01E1  29EC               	goto	l1875
  3549  01E2  0871               	movf	setLedsForPositioning@adcValue+1,w
  3550  01E3  1D03               	btfss	3,2
  3551  01E4  29EC               	goto	l1875
  3552  01E5  30D7               	movlw	215
  3553  01E6  0270               	subwf	setLedsForPositioning@adcValue,w
  3554  01E7  1803               	btfsc	3,0
  3555  01E8  29EC               	goto	l1875
  3556  01E9                     l440:	
  3557                           ;main.c: 370:     {;main.c: 371:         do { LATCbits.LATC1 = 1; } while(0);
  3558                           
  3559  01E9  148E               	bsf	14,1	;volatile
  3560                           
  3561                           ;main.c: 372:         do { LATCbits.LATC2 = 1; } while(0);
  3562  01EA  150E               	bsf	14,2	;volatile
  3563  01EB  0008               	return
  3564  01EC                     l1875:
  3565  01EC  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3566  01ED  29FA               	goto	l446
  3567  01EE  0873               	movf	setLedsForPositioning@adcValue+3,w
  3568  01EF  1D03               	btfss	3,2
  3569  01F0  29FC               	goto	l1877
  3570  01F1  0872               	movf	setLedsForPositioning@adcValue+2,w
  3571  01F2  1D03               	btfss	3,2
  3572  01F3  29FC               	goto	l1877
  3573  01F4  300D               	movlw	13
  3574  01F5  0270               	subwf	setLedsForPositioning@adcValue,w
  3575  01F6  3001               	movlw	1
  3576  01F7  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3577  01F8  1803               	btfsc	3,0
  3578  01F9  29FC               	goto	l1877
  3579  01FA                     l446:	
  3580                           ;main.c: 375:     {;main.c: 376:         do { LATCbits.LATC2 = 1; } while(0);
  3581                           
  3582  01FA  150E               	bsf	14,2	;volatile
  3583  01FB  0008               	return
  3584  01FC                     l1877:
  3585  01FC  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3586  01FD  2A0A               	goto	l450
  3587  01FE  0873               	movf	setLedsForPositioning@adcValue+3,w
  3588  01FF  1D03               	btfss	3,2
  3589  0200  2A0D               	goto	l1879
  3590  0201  0872               	movf	setLedsForPositioning@adcValue+2,w
  3591  0202  1D03               	btfss	3,2
  3592  0203  2A0D               	goto	l1879
  3593  0204  3043               	movlw	67
  3594  0205  0270               	subwf	setLedsForPositioning@adcValue,w
  3595  0206  3001               	movlw	1
  3596  0207  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3597  0208  1803               	btfsc	3,0
  3598  0209  2A0D               	goto	l1879
  3599  020A                     l450:	
  3600                           ;main.c: 379:     {;main.c: 380:         do { LATCbits.LATC2 = 1; } while(0);
  3601                           
  3602  020A  150E               	bsf	14,2	;volatile
  3603                           
  3604                           ;main.c: 381:         do { LATCbits.LATC3 = 1; } while(0);
  3605  020B  158E               	bsf	14,3	;volatile
  3606  020C  0008               	return
  3607  020D                     l1879:
  3608  020D  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3609  020E  2A1B               	goto	l456
  3610  020F  0873               	movf	setLedsForPositioning@adcValue+3,w
  3611  0210  1D03               	btfss	3,2
  3612  0211  2A1D               	goto	l1881
  3613  0212  0872               	movf	setLedsForPositioning@adcValue+2,w
  3614  0213  1D03               	btfss	3,2
  3615  0214  2A1D               	goto	l1881
  3616  0215  3079               	movlw	121
  3617  0216  0270               	subwf	setLedsForPositioning@adcValue,w
  3618  0217  3001               	movlw	1
  3619  0218  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3620  0219  1803               	btfsc	3,0
  3621  021A  2A1D               	goto	l1881
  3622  021B                     l456:	
  3623                           ;main.c: 384:     {;main.c: 385:         do { LATCbits.LATC3 = 1; } while(0);
  3624                           
  3625  021B  158E               	bsf	14,3	;volatile
  3626  021C  0008               	return
  3627  021D                     l1881:
  3628  021D  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3629  021E  2A2B               	goto	l460
  3630  021F  0873               	movf	setLedsForPositioning@adcValue+3,w
  3631  0220  1D03               	btfss	3,2
  3632  0221  2A2E               	goto	l1883
  3633  0222  0872               	movf	setLedsForPositioning@adcValue+2,w
  3634  0223  1D03               	btfss	3,2
  3635  0224  2A2E               	goto	l1883
  3636  0225  30AF               	movlw	175
  3637  0226  0270               	subwf	setLedsForPositioning@adcValue,w
  3638  0227  3001               	movlw	1
  3639  0228  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3640  0229  1803               	btfsc	3,0
  3641  022A  2A2E               	goto	l1883
  3642  022B                     l460:	
  3643                           ;main.c: 388:     {;main.c: 389:         do { LATCbits.LATC3 = 1; } while(0);
  3644                           
  3645  022B  158E               	bsf	14,3	;volatile
  3646                           
  3647                           ;main.c: 390:         do { LATCbits.LATC4 = 1; } while(0);
  3648  022C  160E               	bsf	14,4	;volatile
  3649  022D  0008               	return
  3650  022E                     l1883:
  3651  022E  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3652  022F  2A3C               	goto	l466
  3653  0230  0873               	movf	setLedsForPositioning@adcValue+3,w
  3654  0231  1D03               	btfss	3,2
  3655  0232  2A3E               	goto	l1885
  3656  0233  0872               	movf	setLedsForPositioning@adcValue+2,w
  3657  0234  1D03               	btfss	3,2
  3658  0235  2A3E               	goto	l1885
  3659  0236  30E5               	movlw	229
  3660  0237  0270               	subwf	setLedsForPositioning@adcValue,w
  3661  0238  3001               	movlw	1
  3662  0239  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3663  023A  1803               	btfsc	3,0
  3664  023B  2A3E               	goto	l1885
  3665  023C                     l466:	
  3666                           ;main.c: 393:     {;main.c: 394:         do { LATCbits.LATC4 = 1; } while(0);
  3667                           
  3668  023C  160E               	bsf	14,4	;volatile
  3669  023D  0008               	return
  3670  023E                     l1885:
  3671  023E  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3672  023F  0008               	return
  3673  0240  0873               	movf	setLedsForPositioning@adcValue+3,w
  3674  0241  1D03               	btfss	3,2
  3675  0242  2A4C               	goto	l1889
  3676  0243  0872               	movf	setLedsForPositioning@adcValue+2,w
  3677  0244  1D03               	btfss	3,2
  3678  0245  2A4C               	goto	l1889
  3679  0246  301A               	movlw	26
  3680  0247  0270               	subwf	setLedsForPositioning@adcValue,w
  3681  0248  3002               	movlw	2
  3682  0249  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3683  024A  1C03               	btfss	3,0
  3684  024B  0008               	return
  3685  024C                     l1889:
  3686  024C  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3687  024D  2A5A               	goto	l472
  3688  024E  0873               	movf	setLedsForPositioning@adcValue+3,w
  3689  024F  1D03               	btfss	3,2
  3690  0250  2A5C               	goto	l1891
  3691  0251  0872               	movf	setLedsForPositioning@adcValue+2,w
  3692  0252  1D03               	btfss	3,2
  3693  0253  2A5C               	goto	l1891
  3694  0254  3050               	movlw	80
  3695  0255  0270               	subwf	setLedsForPositioning@adcValue,w
  3696  0256  3002               	movlw	2
  3697  0257  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3698  0258  1803               	btfsc	3,0
  3699  0259  2A5C               	goto	l1891
  3700  025A                     l472:	
  3701                           ;main.c: 401:     {;main.c: 402:         do { LATCbits.LATC6 = 1; } while(0);
  3702                           
  3703  025A  170E               	bsf	14,6	;volatile
  3704  025B  0008               	return
  3705  025C                     l1891:
  3706  025C  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3707  025D  2A6A               	goto	l476
  3708  025E  0873               	movf	setLedsForPositioning@adcValue+3,w
  3709  025F  1D03               	btfss	3,2
  3710  0260  2A6D               	goto	l1893
  3711  0261  0872               	movf	setLedsForPositioning@adcValue+2,w
  3712  0262  1D03               	btfss	3,2
  3713  0263  2A6D               	goto	l1893
  3714  0264  3086               	movlw	134
  3715  0265  0270               	subwf	setLedsForPositioning@adcValue,w
  3716  0266  3002               	movlw	2
  3717  0267  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3718  0268  1803               	btfsc	3,0
  3719  0269  2A6D               	goto	l1893
  3720  026A                     l476:	
  3721                           ;main.c: 405:     {;main.c: 406:         do { LATCbits.LATC6 = 1; } while(0);
  3722                           
  3723  026A  170E               	bsf	14,6	;volatile
  3724                           
  3725                           ;main.c: 407:         do { LATCbits.LATC7 = 1; } while(0);
  3726  026B  178E               	bsf	14,7	;volatile
  3727  026C  0008               	return
  3728  026D                     l1893:
  3729  026D  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3730  026E  2A7B               	goto	l482
  3731  026F  0873               	movf	setLedsForPositioning@adcValue+3,w
  3732  0270  1D03               	btfss	3,2
  3733  0271  2A7D               	goto	l1895
  3734  0272  0872               	movf	setLedsForPositioning@adcValue+2,w
  3735  0273  1D03               	btfss	3,2
  3736  0274  2A7D               	goto	l1895
  3737  0275  30BC               	movlw	188
  3738  0276  0270               	subwf	setLedsForPositioning@adcValue,w
  3739  0277  3002               	movlw	2
  3740  0278  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3741  0279  1803               	btfsc	3,0
  3742  027A  2A7D               	goto	l1895
  3743  027B                     l482:	
  3744                           ;main.c: 410:     {;main.c: 411:         do { LATCbits.LATC7 = 1; } while(0);
  3745                           
  3746  027B  178E               	bsf	14,7	;volatile
  3747  027C  0008               	return
  3748  027D                     l1895:
  3749  027D  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3750  027E  2A8B               	goto	l486
  3751  027F  0873               	movf	setLedsForPositioning@adcValue+3,w
  3752  0280  1D03               	btfss	3,2
  3753  0281  2A8E               	goto	l1897
  3754  0282  0872               	movf	setLedsForPositioning@adcValue+2,w
  3755  0283  1D03               	btfss	3,2
  3756  0284  2A8E               	goto	l1897
  3757  0285  30F2               	movlw	242
  3758  0286  0270               	subwf	setLedsForPositioning@adcValue,w
  3759  0287  3002               	movlw	2
  3760  0288  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3761  0289  1803               	btfsc	3,0
  3762  028A  2A8E               	goto	l1897
  3763  028B                     l486:	
  3764                           ;main.c: 414:     {;main.c: 415:         do { LATCbits.LATC7 = 1; } while(0);
  3765                           
  3766  028B  178E               	bsf	14,7	;volatile
  3767                           
  3768                           ;main.c: 416:         do { LATBbits.LATB5 = 1; } while(0);
  3769  028C  168D               	bsf	13,5	;volatile
  3770  028D  0008               	return
  3771  028E                     l1897:
  3772  028E  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3773  028F  2A9C               	goto	l492
  3774  0290  0873               	movf	setLedsForPositioning@adcValue+3,w
  3775  0291  1D03               	btfss	3,2
  3776  0292  2A9E               	goto	l1899
  3777  0293  0872               	movf	setLedsForPositioning@adcValue+2,w
  3778  0294  1D03               	btfss	3,2
  3779  0295  2A9E               	goto	l1899
  3780  0296  3028               	movlw	40
  3781  0297  0270               	subwf	setLedsForPositioning@adcValue,w
  3782  0298  3003               	movlw	3
  3783  0299  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3784  029A  1803               	btfsc	3,0
  3785  029B  2A9E               	goto	l1899
  3786  029C                     l492:	
  3787                           ;main.c: 419:     {;main.c: 420:         do { LATBbits.LATB5 = 1; } while(0);
  3788                           
  3789  029C  168D               	bsf	13,5	;volatile
  3790  029D  0008               	return
  3791  029E                     l1899:
  3792  029E  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3793  029F  2AAC               	goto	l496
  3794  02A0  0873               	movf	setLedsForPositioning@adcValue+3,w
  3795  02A1  1D03               	btfss	3,2
  3796  02A2  2AAF               	goto	l1901
  3797  02A3  0872               	movf	setLedsForPositioning@adcValue+2,w
  3798  02A4  1D03               	btfss	3,2
  3799  02A5  2AAF               	goto	l1901
  3800  02A6  305D               	movlw	93
  3801  02A7  0270               	subwf	setLedsForPositioning@adcValue,w
  3802  02A8  3003               	movlw	3
  3803  02A9  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3804  02AA  1803               	btfsc	3,0
  3805  02AB  2AAF               	goto	l1901
  3806  02AC                     l496:	
  3807                           ;main.c: 423:     {;main.c: 424:         do { LATBbits.LATB5 = 1; } while(0);
  3808                           
  3809  02AC  168D               	bsf	13,5	;volatile
  3810                           
  3811                           ;main.c: 425:         do { LATBbits.LATB6 = 1; } while(0);
  3812  02AD  170D               	bsf	13,6	;volatile
  3813  02AE  0008               	return
  3814  02AF                     l1901:
  3815  02AF  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3816  02B0  2ABD               	goto	l502
  3817  02B1  0873               	movf	setLedsForPositioning@adcValue+3,w
  3818  02B2  1D03               	btfss	3,2
  3819  02B3  2ABF               	goto	l1903
  3820  02B4  0872               	movf	setLedsForPositioning@adcValue+2,w
  3821  02B5  1D03               	btfss	3,2
  3822  02B6  2ABF               	goto	l1903
  3823  02B7  3093               	movlw	147
  3824  02B8  0270               	subwf	setLedsForPositioning@adcValue,w
  3825  02B9  3003               	movlw	3
  3826  02BA  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3827  02BB  1803               	btfsc	3,0
  3828  02BC  2ABF               	goto	l1903
  3829  02BD                     l502:	
  3830                           ;main.c: 428:     {;main.c: 429:         do { LATBbits.LATB6 = 1; } while(0);
  3831                           
  3832  02BD  170D               	bsf	13,6	;volatile
  3833  02BE  0008               	return
  3834  02BF                     l1903:
  3835  02BF  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3836  02C0  2ACD               	goto	l506
  3837  02C1  0873               	movf	setLedsForPositioning@adcValue+3,w
  3838  02C2  1D03               	btfss	3,2
  3839  02C3  2AD0               	goto	l511
  3840  02C4  0872               	movf	setLedsForPositioning@adcValue+2,w
  3841  02C5  1D03               	btfss	3,2
  3842  02C6  2AD0               	goto	l511
  3843  02C7  30C9               	movlw	201
  3844  02C8  0270               	subwf	setLedsForPositioning@adcValue,w
  3845  02C9  3003               	movlw	3
  3846  02CA  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3847  02CB  1803               	btfsc	3,0
  3848  02CC  2AD0               	goto	l511
  3849  02CD                     l506:	
  3850                           ;main.c: 432:     {;main.c: 433:         do { LATBbits.LATB6 = 1; } while(0);
  3851                           
  3852  02CD  170D               	bsf	13,6	;volatile
  3853                           
  3854                           ;main.c: 434:         do { LATBbits.LATB7 = 1; } while(0);
  3855  02CE  178D               	bsf	13,7	;volatile
  3856  02CF  0008               	return
  3857  02D0                     l511:	
  3858                           ;main.c: 437:     {;main.c: 438:         do { LATBbits.LATB7 = 1; } while(0);
  3859                           
  3860  02D0  178D               	bsf	13,7	;volatile
  3861  02D1  0008               	return
  3862  02D2                     __end_of_setLedsForPositioning:
  3863                           
  3864                           	psect	text10
  3865  04FA                     __ptext10:	
  3866 ;; *************** function ___lmul *****************
  3867 ;; Defined at:
  3868 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  multiplier      4    0[COMMON] unsigned long 
  3871 ;;  multiplicand    4    4[COMMON] unsigned long 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  product         4    8[COMMON] unsigned long 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  4    0[COMMON] unsigned long 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0
  3878 ;; Tracked objects:
  3879 ;;		On entry : 1F/0
  3880 ;;		On exit  : 1F/0
  3881 ;;		Unchanged: 1F/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1
  3883 ;;      Params:         8       0       0
  3884 ;;      Locals:         4       0       0
  3885 ;;      Temps:          0       0       0
  3886 ;;      Totals:        12       0       0
  3887 ;;Total ram usage:       12 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    4
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_main
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function ___lmul
  3899  04FA                     ___lmul:
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3903  04FA  3000               	movlw	0
  3904  04FB  00FB               	movwf	___lmul@product+3
  3905  04FC  3000               	movlw	0
  3906  04FD  00FA               	movwf	___lmul@product+2
  3907  04FE  3000               	movlw	0
  3908  04FF  00F9               	movwf	___lmul@product+1
  3909  0500  3000               	movlw	0
  3910  0501  00F8               	movwf	___lmul@product
  3911  0502                     l1907:
  3912  0502  1C70               	btfss	___lmul@multiplier,0
  3913  0503  2D0C               	goto	l1911
  3914  0504  0874               	movf	___lmul@multiplicand,w
  3915  0505  07F8               	addwf	___lmul@product,f
  3916  0506  0875               	movf	___lmul@multiplicand+1,w
  3917  0507  3DF9               	addwfc	___lmul@product+1,f
  3918  0508  0876               	movf	___lmul@multiplicand+2,w
  3919  0509  3DFA               	addwfc	___lmul@product+2,f
  3920  050A  0877               	movf	___lmul@multiplicand+3,w
  3921  050B  3DFB               	addwfc	___lmul@product+3,f
  3922  050C                     l1911:
  3923  050C  3001               	movlw	1
  3924  050D                     u1325:
  3925  050D  35F4               	lslf	___lmul@multiplicand,f
  3926  050E  0DF5               	rlf	___lmul@multiplicand+1,f
  3927  050F  0DF6               	rlf	___lmul@multiplicand+2,f
  3928  0510  0DF7               	rlf	___lmul@multiplicand+3,f
  3929  0511  0B89               	decfsz	9,f
  3930  0512  2D0D               	goto	u1325
  3931  0513  3001               	movlw	1
  3932  0514                     u1335:
  3933  0514  36F3               	lsrf	___lmul@multiplier+3,f
  3934  0515  0CF2               	rrf	___lmul@multiplier+2,f
  3935  0516  0CF1               	rrf	___lmul@multiplier+1,f
  3936  0517  0CF0               	rrf	___lmul@multiplier,f
  3937  0518  0B89               	decfsz	9,f
  3938  0519  2D14               	goto	u1335
  3939  051A  0873               	movf	___lmul@multiplier+3,w
  3940  051B  0472               	iorwf	___lmul@multiplier+2,w
  3941  051C  0471               	iorwf	___lmul@multiplier+1,w
  3942  051D  0470               	iorwf	___lmul@multiplier,w
  3943  051E  1D03               	skipz
  3944  051F  2D02               	goto	l1907
  3945  0520  087B               	movf	___lmul@product+3,w
  3946  0521  00F3               	movwf	?___lmul+3
  3947  0522  087A               	movf	___lmul@product+2,w
  3948  0523  00F2               	movwf	?___lmul+2
  3949  0524  0879               	movf	___lmul@product+1,w
  3950  0525  00F1               	movwf	?___lmul+1
  3951  0526  0878               	movf	___lmul@product,w
  3952  0527  00F0               	movwf	?___lmul
  3953  0528  0008               	return
  3954  0529                     __end_of___lmul:
  3955                           
  3956                           	psect	text11
  3957  036B                     __ptext11:	
  3958 ;; *************** function ___aldiv *****************
  3959 ;; Defined at:
  3960 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;  divisor         4    0[BANK0 ] long 
  3963 ;;  dividend        4    4[BANK0 ] long 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  quotient        4   10[BANK0 ] long 
  3966 ;;  sign            1    9[BANK0 ] unsigned char 
  3967 ;;  counter         1    8[BANK0 ] unsigned char 
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  4    0[BANK0 ] long 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, status,0
  3972 ;; Tracked objects:
  3973 ;;		On entry : 1F/0
  3974 ;;		On exit  : 1F/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMMON   BANK0   BANK1
  3977 ;;      Params:         0       8       0
  3978 ;;      Locals:         0       6       0
  3979 ;;      Temps:          1       0       0
  3980 ;;      Totals:         1      14       0
  3981 ;;Total ram usage:       15 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    4
  3984 ;; This function calls:
  3985 ;;		Nothing
  3986 ;; This function is called by:
  3987 ;;		_main
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           
  3992                           ;psect for function ___aldiv
  3993  036B                     ___aldiv:
  3994                           
  3995                           ;incstack = 0
  3996                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3997  036B  01A9               	clrf	___aldiv@sign
  3998  036C  1FA3               	btfss	___aldiv@divisor+3,7
  3999  036D  2B7B               	goto	l646
  4000  036E  09A0               	comf	___aldiv@divisor,f
  4001  036F  09A1               	comf	___aldiv@divisor+1,f
  4002  0370  09A2               	comf	___aldiv@divisor+2,f
  4003  0371  09A3               	comf	___aldiv@divisor+3,f
  4004  0372  0AA0               	incf	___aldiv@divisor,f
  4005  0373  1903               	skipnz
  4006  0374  0AA1               	incf	___aldiv@divisor+1,f
  4007  0375  1903               	skipnz
  4008  0376  0AA2               	incf	___aldiv@divisor+2,f
  4009  0377  1903               	skipnz
  4010  0378  0AA3               	incf	___aldiv@divisor+3,f
  4011  0379  01A9               	clrf	___aldiv@sign
  4012  037A  0AA9               	incf	___aldiv@sign,f
  4013  037B                     l646:
  4014  037B  1FA7               	btfss	___aldiv@dividend+3,7
  4015  037C  2B8C               	goto	l1929
  4016  037D  09A4               	comf	___aldiv@dividend,f
  4017  037E  09A5               	comf	___aldiv@dividend+1,f
  4018  037F  09A6               	comf	___aldiv@dividend+2,f
  4019  0380  09A7               	comf	___aldiv@dividend+3,f
  4020  0381  0AA4               	incf	___aldiv@dividend,f
  4021  0382  1903               	skipnz
  4022  0383  0AA5               	incf	___aldiv@dividend+1,f
  4023  0384  1903               	skipnz
  4024  0385  0AA6               	incf	___aldiv@dividend+2,f
  4025  0386  1903               	skipnz
  4026  0387  0AA7               	incf	___aldiv@dividend+3,f
  4027  0388  3001               	movlw	1
  4028  0389  00FC               	movwf	??___aldiv
  4029  038A  087C               	movf	??___aldiv,w
  4030  038B  06A9               	xorwf	___aldiv@sign,f
  4031  038C                     l1929:
  4032  038C  3000               	movlw	0
  4033  038D  00AD               	movwf	___aldiv@quotient+3
  4034  038E  3000               	movlw	0
  4035  038F  00AC               	movwf	___aldiv@quotient+2
  4036  0390  3000               	movlw	0
  4037  0391  00AB               	movwf	___aldiv@quotient+1
  4038  0392  3000               	movlw	0
  4039  0393  00AA               	movwf	___aldiv@quotient
  4040  0394  0823               	movf	___aldiv@divisor+3,w
  4041  0395  0422               	iorwf	___aldiv@divisor+2,w
  4042  0396  0421               	iorwf	___aldiv@divisor+1,w
  4043  0397  0420               	iorwf	___aldiv@divisor,w
  4044  0398  1903               	skipnz
  4045  0399  2BD5               	goto	l1951
  4046  039A  01A8               	clrf	___aldiv@counter
  4047  039B  0AA8               	incf	___aldiv@counter,f
  4048  039C                     l1937:
  4049  039C  1BA3               	btfsc	___aldiv@divisor+3,7
  4050  039D  2BAA               	goto	l1939
  4051  039E  3001               	movlw	1
  4052  039F                     u1385:
  4053  039F  35A0               	lslf	___aldiv@divisor,f
  4054  03A0  0DA1               	rlf	___aldiv@divisor+1,f
  4055  03A1  0DA2               	rlf	___aldiv@divisor+2,f
  4056  03A2  0DA3               	rlf	___aldiv@divisor+3,f
  4057  03A3  0B89               	decfsz	9,f
  4058  03A4  2B9F               	goto	u1385
  4059  03A5  3001               	movlw	1
  4060  03A6  00FC               	movwf	??___aldiv
  4061  03A7  087C               	movf	??___aldiv,w
  4062  03A8  07A8               	addwf	___aldiv@counter,f
  4063  03A9  2B9C               	goto	l1937
  4064  03AA                     l1939:
  4065  03AA  3001               	movlw	1
  4066  03AB                     u1405:
  4067  03AB  35AA               	lslf	___aldiv@quotient,f
  4068  03AC  0DAB               	rlf	___aldiv@quotient+1,f
  4069  03AD  0DAC               	rlf	___aldiv@quotient+2,f
  4070  03AE  0DAD               	rlf	___aldiv@quotient+3,f
  4071  03AF  0B89               	decfsz	9,f
  4072  03B0  2BAB               	goto	u1405
  4073  03B1  0823               	movf	___aldiv@divisor+3,w
  4074  03B2  0227               	subwf	___aldiv@dividend+3,w
  4075  03B3  1D03               	skipz
  4076  03B4  2BBF               	goto	u1415
  4077  03B5  0822               	movf	___aldiv@divisor+2,w
  4078  03B6  0226               	subwf	___aldiv@dividend+2,w
  4079  03B7  1D03               	skipz
  4080  03B8  2BBF               	goto	u1415
  4081  03B9  0821               	movf	___aldiv@divisor+1,w
  4082  03BA  0225               	subwf	___aldiv@dividend+1,w
  4083  03BB  1D03               	skipz
  4084  03BC  2BBF               	goto	u1415
  4085  03BD  0820               	movf	___aldiv@divisor,w
  4086  03BE  0224               	subwf	___aldiv@dividend,w
  4087  03BF                     u1415:
  4088  03BF  1C03               	skipc
  4089  03C0  2BCA               	goto	l1947
  4090  03C1  0820               	movf	___aldiv@divisor,w
  4091  03C2  02A4               	subwf	___aldiv@dividend,f
  4092  03C3  0821               	movf	___aldiv@divisor+1,w
  4093  03C4  3BA5               	subwfb	___aldiv@dividend+1,f
  4094  03C5  0822               	movf	___aldiv@divisor+2,w
  4095  03C6  3BA6               	subwfb	___aldiv@dividend+2,f
  4096  03C7  0823               	movf	___aldiv@divisor+3,w
  4097  03C8  3BA7               	subwfb	___aldiv@dividend+3,f
  4098  03C9  142A               	bsf	___aldiv@quotient,0
  4099  03CA                     l1947:
  4100  03CA  3001               	movlw	1
  4101  03CB                     u1425:
  4102  03CB  36A3               	lsrf	___aldiv@divisor+3,f
  4103  03CC  0CA2               	rrf	___aldiv@divisor+2,f
  4104  03CD  0CA1               	rrf	___aldiv@divisor+1,f
  4105  03CE  0CA0               	rrf	___aldiv@divisor,f
  4106  03CF  0B89               	decfsz	9,f
  4107  03D0  2BCB               	goto	u1425
  4108  03D1  3001               	movlw	1
  4109  03D2  02A8               	subwf	___aldiv@counter,f
  4110  03D3  1D03               	btfss	3,2
  4111  03D4  2BAA               	goto	l1939
  4112  03D5                     l1951:
  4113  03D5  0829               	movf	___aldiv@sign,w
  4114  03D6  1903               	btfsc	3,2
  4115  03D7  2BE3               	goto	l1955
  4116  03D8  09AA               	comf	___aldiv@quotient,f
  4117  03D9  09AB               	comf	___aldiv@quotient+1,f
  4118  03DA  09AC               	comf	___aldiv@quotient+2,f
  4119  03DB  09AD               	comf	___aldiv@quotient+3,f
  4120  03DC  0AAA               	incf	___aldiv@quotient,f
  4121  03DD  1903               	skipnz
  4122  03DE  0AAB               	incf	___aldiv@quotient+1,f
  4123  03DF  1903               	skipnz
  4124  03E0  0AAC               	incf	___aldiv@quotient+2,f
  4125  03E1  1903               	skipnz
  4126  03E2  0AAD               	incf	___aldiv@quotient+3,f
  4127  03E3                     l1955:
  4128  03E3  082D               	movf	___aldiv@quotient+3,w
  4129  03E4  00A3               	movwf	?___aldiv+3
  4130  03E5  082C               	movf	___aldiv@quotient+2,w
  4131  03E6  00A2               	movwf	?___aldiv+2
  4132  03E7  082B               	movf	___aldiv@quotient+1,w
  4133  03E8  00A1               	movwf	?___aldiv+1
  4134  03E9  082A               	movf	___aldiv@quotient,w
  4135  03EA  00A0               	movwf	?___aldiv
  4136  03EB  0008               	return
  4137  03EC                     __end_of___aldiv:
  4138                           
  4139                           	psect	text12
  4140  0666                     __ptext12:	
  4141 ;; *************** function _TMR2_StartTimer *****************
  4142 ;; Defined at:
  4143 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      void 
  4150 ;; Registers used:
  4151 ;;		None
  4152 ;; Tracked objects:
  4153 ;;		On entry : 1F/0
  4154 ;;		On exit  : 1F/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1
  4157 ;;      Params:         0       0       0
  4158 ;;      Locals:         0       0       0
  4159 ;;      Temps:          0       0       0
  4160 ;;      Totals:         0       0       0
  4161 ;;Total ram usage:        0 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    4
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_main
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _TMR2_StartTimer
  4173  0666                     _TMR2_StartTimer:
  4174                           
  4175                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  4176                           
  4177                           ;incstack = 0
  4178                           ; Regs used in _TMR2_StartTimer: []
  4179  0666  151C               	bsf	28,2	;volatile
  4180  0667  0008               	return
  4181  0668                     __end_of_TMR2_StartTimer:
  4182                           
  4183                           	psect	text13
  4184  0621                     __ptext13:	
  4185 ;; *************** function _SYSTEM_Initialize *****************
  4186 ;; Defined at:
  4187 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : B1F/0
  4198 ;;		On exit  : 1F/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1
  4201 ;;      Params:         0       0       0
  4202 ;;      Locals:         0       0       0
  4203 ;;      Temps:          0       0       0
  4204 ;;      Totals:         0       0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    6
  4208 ;; This function calls:
  4209 ;;		_ADC_Initialize
  4210 ;;		_OSCILLATOR_Initialize
  4211 ;;		_PIN_MANAGER_Initialize
  4212 ;;		_PWM3_Initialize
  4213 ;;		_TMR0_Initialize
  4214 ;;		_TMR2_Initialize
  4215 ;;		_WDT_Initialize
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _SYSTEM_Initialize
  4223  0621                     _SYSTEM_Initialize:
  4224                           
  4225                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4229  0621  25A4               	fcall	_PIN_MANAGER_Initialize
  4230                           
  4231                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4232  0622  264D               	fcall	_OSCILLATOR_Initialize
  4233                           
  4234                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4235  0623  2662               	fcall	_WDT_Initialize
  4236                           
  4237                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  4238  0624  2639               	fcall	_ADC_Initialize
  4239                           
  4240                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  4241  0625  2631               	fcall	_PWM3_Initialize
  4242                           
  4243                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  4244  0626  2629               	fcall	_TMR2_Initialize
  4245                           
  4246                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  4247  0627  25EA               	fcall	_TMR0_Initialize
  4248  0628  0008               	return
  4249  0629                     __end_of_SYSTEM_Initialize:
  4250                           
  4251                           	psect	text14
  4252  0662                     __ptext14:	
  4253 ;; *************** function _WDT_Initialize *****************
  4254 ;; Defined at:
  4255 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg
  4264 ;; Tracked objects:
  4265 ;;		On entry : B1F/2
  4266 ;;		On exit  : B1F/1
  4267 ;;		Unchanged: B00/0
  4268 ;; Data sizes:     COMMON   BANK0   BANK1
  4269 ;;      Params:         0       0       0
  4270 ;;      Locals:         0       0       0
  4271 ;;      Temps:          0       0       0
  4272 ;;      Totals:         0       0       0
  4273 ;;Total ram usage:        0 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    4
  4276 ;; This function calls:
  4277 ;;		Nothing
  4278 ;; This function is called by:
  4279 ;;		_SYSTEM_Initialize
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           
  4284                           ;psect for function _WDT_Initialize
  4285  0662                     _WDT_Initialize:
  4286                           
  4287                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4288                           
  4289                           ;incstack = 0
  4290                           ; Regs used in _WDT_Initialize: [wreg]
  4291  0662  3016               	movlw	22
  4292  0663  0021               	movlb	1	; select bank1
  4293  0664  0097               	movwf	23	;volatile
  4294  0665  0008               	return
  4295  0666                     __end_of_WDT_Initialize:
  4296                           
  4297                           	psect	text15
  4298  0629                     __ptext15:	
  4299 ;; *************** function _TMR2_Initialize *****************
  4300 ;; Defined at:
  4301 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2
  4310 ;; Tracked objects:
  4311 ;;		On entry : B1F/C
  4312 ;;		On exit  : B1F/0
  4313 ;;		Unchanged: B00/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1
  4315 ;;      Params:         0       0       0
  4316 ;;      Locals:         0       0       0
  4317 ;;      Temps:          0       0       0
  4318 ;;      Totals:         0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    4
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_SYSTEM_Initialize
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _TMR2_Initialize
  4331  0629                     _TMR2_Initialize:
  4332                           
  4333                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4337  0629  30FF               	movlw	255
  4338  062A  0020               	movlb	0	; select bank0
  4339  062B  009B               	movwf	27	;volatile
  4340                           
  4341                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4342  062C  019A               	clrf	26	;volatile
  4343                           
  4344                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4345  062D  1091               	bcf	17,1	;volatile
  4346                           
  4347                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  4348  062E  301C               	movlw	28
  4349  062F  009C               	movwf	28	;volatile
  4350  0630  0008               	return
  4351  0631                     __end_of_TMR2_Initialize:
  4352                           
  4353                           	psect	text16
  4354  05EA                     __ptext16:	
  4355 ;; *************** function _TMR0_Initialize *****************
  4356 ;; Defined at:
  4357 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;		None
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      void 
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : B1F/0
  4368 ;;		On exit  : 1F/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1
  4371 ;;      Params:         0       0       0
  4372 ;;      Locals:         0       0       0
  4373 ;;      Temps:          1       0       0
  4374 ;;      Totals:         1       0       0
  4375 ;;Total ram usage:        1 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    5
  4378 ;; This function calls:
  4379 ;;		_TMR0_SetInterruptHandler
  4380 ;; This function is called by:
  4381 ;;		_SYSTEM_Initialize
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _TMR0_Initialize
  4387  05EA                     _TMR0_Initialize:
  4388                           
  4389                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4393  05EA  0021               	movlb	1	; select bank1
  4394  05EB  0815               	movf	21,w	;volatile
  4395  05EC  39C0               	andlw	192
  4396  05ED  3811               	iorlw	17
  4397  05EE  0095               	movwf	21	;volatile
  4398                           
  4399                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  4400  05EF  3006               	movlw	6
  4401  05F0  0020               	movlb	0	; select bank0
  4402  05F1  0095               	movwf	21	;volatile
  4403                           
  4404                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  4405  05F2  3006               	movlw	6
  4406  05F3  00F2               	movwf	??_TMR0_Initialize
  4407  05F4  0872               	movf	??_TMR0_Initialize,w
  4408  05F5  00E9               	movwf	_timer0ReloadVal	;volatile
  4409                           
  4410                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  4411  05F6  110B               	bcf	11,2	;volatile
  4412                           
  4413                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  4414  05F7  168B               	bsf	11,5	;volatile
  4415                           
  4416                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  4417  05F8  3068               	movlw	low _TMR0_DefaultInterruptHandler
  4418  05F9  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4419  05FA  3006               	movlw	high _TMR0_DefaultInterruptHandler
  4420  05FB  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4421  05FC  2659               	fcall	_TMR0_SetInterruptHandler
  4422  05FD  0008               	return
  4423  05FE                     __end_of_TMR0_Initialize:
  4424                           
  4425                           	psect	text17
  4426  0659                     __ptext17:	
  4427 ;; *************** function _TMR0_SetInterruptHandler *****************
  4428 ;; Defined at:
  4429 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4432 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;		None
  4435 ;; Return value:  Size  Location     Type
  4436 ;;                  1    wreg      void 
  4437 ;; Registers used:
  4438 ;;		wreg
  4439 ;; Tracked objects:
  4440 ;;		On entry : 1F/0
  4441 ;;		On exit  : 1F/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMMON   BANK0   BANK1
  4444 ;;      Params:         2       0       0
  4445 ;;      Locals:         0       0       0
  4446 ;;      Temps:          0       0       0
  4447 ;;      Totals:         2       0       0
  4448 ;;Total ram usage:        2 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    4
  4451 ;; This function calls:
  4452 ;;		Nothing
  4453 ;; This function is called by:
  4454 ;;		_TMR0_Initialize
  4455 ;;		_main
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           
  4460                           ;psect for function _TMR0_SetInterruptHandler
  4461  0659                     _TMR0_SetInterruptHandler:
  4462                           
  4463                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  4464                           
  4465                           ;incstack = 0
  4466                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4467  0659  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4468  065A  00E8               	movwf	_TMR0_InterruptHandler+1
  4469  065B  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4470  065C  00E7               	movwf	_TMR0_InterruptHandler
  4471  065D  0008               	return
  4472  065E                     __end_of_TMR0_SetInterruptHandler:
  4473                           
  4474                           	psect	text18
  4475  0631                     __ptext18:	
  4476 ;; *************** function _PWM3_Initialize *****************
  4477 ;; Defined at:
  4478 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;		None
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;		None
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  1    wreg      void 
  4485 ;; Registers used:
  4486 ;;		wreg
  4487 ;; Tracked objects:
  4488 ;;		On entry : B1F/1
  4489 ;;		On exit  : B1F/C
  4490 ;;		Unchanged: B00/0
  4491 ;; Data sizes:     COMMON   BANK0   BANK1
  4492 ;;      Params:         0       0       0
  4493 ;;      Locals:         0       0       0
  4494 ;;      Temps:          0       0       0
  4495 ;;      Totals:         0       0       0
  4496 ;;Total ram usage:        0 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    4
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_SYSTEM_Initialize
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           
  4507                           ;psect for function _PWM3_Initialize
  4508  0631                     _PWM3_Initialize:
  4509                           
  4510                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  4511                           
  4512                           ;incstack = 0
  4513                           ; Regs used in _PWM3_Initialize: [wreg]
  4514  0631  30D0               	movlw	208
  4515  0632  002C               	movlb	12	; select bank12
  4516  0633  0099               	movwf	25	;volatile
  4517                           
  4518                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  4519  0634  30FF               	movlw	255
  4520  0635  0098               	movwf	24	;volatile
  4521                           
  4522                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  4523  0636  30C0               	movlw	192
  4524  0637  0097               	movwf	23	;volatile
  4525  0638  0008               	return
  4526  0639                     __end_of_PWM3_Initialize:
  4527                           
  4528                           	psect	text19
  4529  05A4                     __ptext19:	
  4530 ;; *************** function _PIN_MANAGER_Initialize *****************
  4531 ;; Defined at:
  4532 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;		None
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;		None
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2
  4541 ;; Tracked objects:
  4542 ;;		On entry : B1F/0
  4543 ;;		On exit  : B1F/2
  4544 ;;		Unchanged: B00/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1
  4546 ;;      Params:         0       0       0
  4547 ;;      Locals:         0       0       0
  4548 ;;      Temps:          0       0       0
  4549 ;;      Totals:         0       0       0
  4550 ;;Total ram usage:        0 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    4
  4553 ;; This function calls:
  4554 ;;		Nothing
  4555 ;; This function is called by:
  4556 ;;		_SYSTEM_Initialize
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           
  4561                           ;psect for function _PIN_MANAGER_Initialize
  4562  05A4                     _PIN_MANAGER_Initialize:
  4563                           
  4564                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4565                           
  4566                           ;incstack = 0
  4567                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4568  05A4  0022               	movlb	2	; select bank2
  4569  05A5  018C               	clrf	12	;volatile
  4570                           
  4571                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4572  05A6  018D               	clrf	13	;volatile
  4573                           
  4574                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4575  05A7  018E               	clrf	14	;volatile
  4576                           
  4577                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  4578  05A8  303B               	movlw	59
  4579  05A9  0021               	movlb	1	; select bank1
  4580  05AA  008C               	movwf	12	;volatile
  4581                           
  4582                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  4583  05AB  3010               	movlw	16
  4584  05AC  008D               	movwf	13	;volatile
  4585                           
  4586                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  4587  05AD  018E               	clrf	14	;volatile
  4588                           
  4589                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4590  05AE  0023               	movlb	3	; select bank3
  4591  05AF  018E               	clrf	14	;volatile
  4592                           
  4593                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  4594  05B0  3030               	movlw	48
  4595  05B1  008D               	movwf	13	;volatile
  4596                           
  4597                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  4598  05B2  3013               	movlw	19
  4599  05B3  008C               	movwf	12	;volatile
  4600                           
  4601                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4602  05B4  0024               	movlb	4	; select bank4
  4603  05B5  018D               	clrf	13	;volatile
  4604                           
  4605                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4606  05B6  018C               	clrf	12	;volatile
  4607                           
  4608                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4609  05B7  0021               	movlb	1	; select bank1
  4610  05B8  1795               	bsf	21,7	;volatile
  4611                           
  4612                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4613  05B9  0022               	movlb	2	; select bank2
  4614  05BA  019D               	clrf	29	;volatile
  4615  05BB  0008               	return
  4616  05BC                     __end_of_PIN_MANAGER_Initialize:
  4617                           
  4618                           	psect	text20
  4619  064D                     __ptext20:	
  4620 ;; *************** function _OSCILLATOR_Initialize *****************
  4621 ;; Defined at:
  4622 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  1    wreg      void 
  4629 ;; Registers used:
  4630 ;;		wreg, status,2
  4631 ;; Tracked objects:
  4632 ;;		On entry : B1F/2
  4633 ;;		On exit  : B1F/2
  4634 ;;		Unchanged: B00/0
  4635 ;; Data sizes:     COMMON   BANK0   BANK1
  4636 ;;      Params:         0       0       0
  4637 ;;      Locals:         0       0       0
  4638 ;;      Temps:          0       0       0
  4639 ;;      Totals:         0       0       0
  4640 ;;Total ram usage:        0 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    4
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		_SYSTEM_Initialize
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           
  4651                           ;psect for function _OSCILLATOR_Initialize
  4652  064D                     _OSCILLATOR_Initialize:
  4653                           
  4654                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  4655                           
  4656                           ;incstack = 0
  4657                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4658  064D  306A               	movlw	106
  4659  064E  0021               	movlb	1	; select bank1
  4660  064F  0099               	movwf	25	;volatile
  4661                           
  4662                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4663  0650  0022               	movlb	2	; select bank2
  4664  0651  0196               	clrf	22	;volatile
  4665  0652  0008               	return
  4666  0653                     __end_of_OSCILLATOR_Initialize:
  4667                           
  4668                           	psect	text21
  4669  0639                     __ptext21:	
  4670 ;; *************** function _ADC_Initialize *****************
  4671 ;; Defined at:
  4672 ;;		line 67 in file "mcc_generated_files/adc.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;		None
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;		None
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  1    wreg      void 
  4679 ;; Registers used:
  4680 ;;		wreg, status,2
  4681 ;; Tracked objects:
  4682 ;;		On entry : B1F/1
  4683 ;;		On exit  : B1F/1
  4684 ;;		Unchanged: B00/0
  4685 ;; Data sizes:     COMMON   BANK0   BANK1
  4686 ;;      Params:         0       0       0
  4687 ;;      Locals:         0       0       0
  4688 ;;      Temps:          0       0       0
  4689 ;;      Totals:         0       0       0
  4690 ;;Total ram usage:        0 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    4
  4693 ;; This function calls:
  4694 ;;		Nothing
  4695 ;; This function is called by:
  4696 ;;		_SYSTEM_Initialize
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           
  4701                           ;psect for function _ADC_Initialize
  4702  0639                     _ADC_Initialize:
  4703                           
  4704                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xC0;
  4705                           
  4706                           ;incstack = 0
  4707                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4708  0639  30C0               	movlw	192
  4709  063A  009E               	movwf	30	;volatile
  4710                           
  4711                           ;mcc_generated_files/adc.c: 75:     ADCON2 = 0x00;
  4712  063B  019F               	clrf	31	;volatile
  4713                           
  4714                           ;mcc_generated_files/adc.c: 78:     ADRESL = 0x00;
  4715  063C  019B               	clrf	27	;volatile
  4716                           
  4717                           ;mcc_generated_files/adc.c: 81:     ADRESH = 0x00;
  4718  063D  019C               	clrf	28	;volatile
  4719                           
  4720                           ;mcc_generated_files/adc.c: 84:     ADCON0 = 0x01;
  4721  063E  3001               	movlw	1
  4722  063F  009D               	movwf	29	;volatile
  4723  0640  0008               	return
  4724  0641                     __end_of_ADC_Initialize:
  4725                           
  4726                           	psect	text22
  4727  05D4                     __ptext22:	
  4728 ;; *************** function _PWM3_LoadDutyValue *****************
  4729 ;; Defined at:
  4730 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  dutyValue       2    0[COMMON] unsigned short 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;		None
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0
  4739 ;; Tracked objects:
  4740 ;;		On entry : 1F/0
  4741 ;;		On exit  : 1F/C
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1
  4744 ;;      Params:         2       0       0
  4745 ;;      Locals:         0       0       0
  4746 ;;      Temps:          2       0       0
  4747 ;;      Totals:         4       0       0
  4748 ;;Total ram usage:        4 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    4
  4751 ;; This function calls:
  4752 ;;		Nothing
  4753 ;; This function is called by:
  4754 ;;		_main
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           
  4759                           ;psect for function _PWM3_LoadDutyValue
  4760  05D4                     _PWM3_LoadDutyValue:
  4761                           
  4762                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  4763                           
  4764                           ;incstack = 0
  4765                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  4766  05D4  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  4767  05D5  00F3               	movwf	??_PWM3_LoadDutyValue+1
  4768  05D6  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  4769  05D7  00F2               	movwf	??_PWM3_LoadDutyValue
  4770  05D8  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  4771  05D9  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  4772  05DA  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  4773  05DB  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  4774  05DC  0872               	movf	??_PWM3_LoadDutyValue,w
  4775  05DD  002C               	movlb	12	; select bank12
  4776  05DE  0098               	movwf	24	;volatile
  4777                           
  4778                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  4779  05DF  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  4780  05E0  3903               	andlw	3
  4781  05E1  00F2               	movwf	??_PWM3_LoadDutyValue
  4782  05E2  3005               	movlw	5
  4783  05E3                     u1095:
  4784  05E3  35F2               	lslf	??_PWM3_LoadDutyValue,f
  4785  05E4  3EFF               	addlw	-1
  4786  05E5  1D03               	skipz
  4787  05E6  2DE3               	goto	u1095
  4788  05E7  3572               	lslf	??_PWM3_LoadDutyValue,w
  4789  05E8  0097               	movwf	23	;volatile
  4790  05E9  0008               	return
  4791  05EA                     __end_of_PWM3_LoadDutyValue:
  4792                           
  4793                           	psect	text23
  4794  05BC                     __ptext23:	
  4795 ;; *************** function _ADC_GetConversion *****************
  4796 ;; Defined at:
  4797 ;;		line 115 in file "mcc_generated_files/adc.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  channel         1    wreg     enum E2336
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  channel         1    3[COMMON] enum E2336
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  2    0[COMMON] unsigned short 
  4804 ;; Registers used:
  4805 ;;		wreg, status,2, status,0
  4806 ;; Tracked objects:
  4807 ;;		On entry : 1F/0
  4808 ;;		On exit  : 1F/1
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMMON   BANK0   BANK1
  4811 ;;      Params:         2       0       0
  4812 ;;      Locals:         1       0       0
  4813 ;;      Temps:          1       0       0
  4814 ;;      Totals:         4       0       0
  4815 ;;Total ram usage:        4 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    4
  4818 ;; This function calls:
  4819 ;;		Nothing
  4820 ;; This function is called by:
  4821 ;;		_main
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           
  4826                           ;psect for function _ADC_GetConversion
  4827  05BC                     _ADC_GetConversion:
  4828                           
  4829                           ;incstack = 0
  4830                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4831                           ;ADC_GetConversion@channel stored from wreg
  4832  05BC  00F3               	movwf	ADC_GetConversion@channel
  4833                           
  4834                           ;mcc_generated_files/adc.c: 115: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 116: {;mcc_generated_files/adc.c: 118:     ADCON0bits.CHS = ch
      +                          annel;
  4835  05BD  0873               	movf	ADC_GetConversion@channel,w
  4836  05BE  00F2               	movwf	??_ADC_GetConversion
  4837  05BF  0DF2               	rlf	??_ADC_GetConversion,f
  4838  05C0  0DF2               	rlf	??_ADC_GetConversion,f
  4839  05C1  0021               	movlb	1	; select bank1
  4840  05C2  081D               	movf	29,w	;volatile
  4841  05C3  0672               	xorwf	??_ADC_GetConversion,w
  4842  05C4  3983               	andlw	-125
  4843  05C5  0672               	xorwf	??_ADC_GetConversion,w
  4844  05C6  009D               	movwf	29	;volatile
  4845                           
  4846                           ;mcc_generated_files/adc.c: 121:     ADCON0bits.ADON = 1;
  4847  05C7  141D               	bsf	29,0	;volatile
  4848                           
  4849                           ;mcc_generated_files/adc.c: 124:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4850  05C8  3200               	nop2	;2 cycle nop
  4851  05C9  3200               	nop2	;2 cycle nop
  4852  05CA  0000               	nop
  4853                           
  4854                           ;mcc_generated_files/adc.c: 127:     ADCON0bits.GO_nDONE = 1;
  4855  05CB  0021               	movlb	1	; select bank1
  4856  05CC  149D               	bsf	29,1	;volatile
  4857  05CD                     l34:	
  4858                           ;mcc_generated_files/adc.c: 131:     {;mcc_generated_files/adc.c: 132:     }
  4859                           
  4860                           
  4861                           ;mcc_generated_files/adc.c: 130:     while (ADCON0bits.GO_nDONE)
  4862  05CD  189D               	btfsc	29,1	;volatile
  4863  05CE  2DCD               	goto	l34
  4864                           
  4865                           ;mcc_generated_files/adc.c: 135:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4866  05CF  081C               	movf	28,w	;volatile
  4867  05D0  00F1               	movwf	?_ADC_GetConversion+1
  4868  05D1  081B               	movf	27,w	;volatile
  4869  05D2  00F0               	movwf	?_ADC_GetConversion
  4870  05D3  0008               	return
  4871  05D4                     __end_of_ADC_GetConversion:
  4872                           
  4873                           	psect	intentry
  4874  0004                     __pintentry:	
  4875 ;; *************** function _INTERRUPT_InterruptManager *****************
  4876 ;; Defined at:
  4877 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;		None
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;		None
  4882 ;; Return value:  Size  Location     Type
  4883 ;;                  1    wreg      void 
  4884 ;; Registers used:
  4885 ;;		wreg, status,2, status,0, pclath, cstack
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMMON   BANK0   BANK1
  4891 ;;      Params:         0       0       0
  4892 ;;      Locals:         0       0       0
  4893 ;;      Temps:          0       0       0
  4894 ;;      Totals:         0       0       0
  4895 ;;Total ram usage:        0 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:    3
  4898 ;; This function calls:
  4899 ;;		_TMR0_ISR
  4900 ;; This function is called by:
  4901 ;;		Interrupt level 1
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905  0004                     _INTERRUPT_InterruptManager:
  4906                           
  4907                           ;incstack = 0
  4908  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4909                           
  4910                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4911  0005  3180               	pagesel	$
  4912                           
  4913                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4914  0006  1A8B               	btfsc	11,5	;volatile
  4915  0007  1D0B               	btfss	11,2	;volatile
  4916  0008  280A               	goto	i1l197
  4917                           
  4918                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4919  0009  2653               	fcall	_TMR0_ISR
  4920  000A                     i1l197:	
  4921                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4922                           
  4923  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4924  000B  0009               	retfie
  4925  000C                     __end_of_INTERRUPT_InterruptManager:
  4926                           
  4927                           	psect	text25
  4928  0653                     __ptext25:	
  4929 ;; *************** function _TMR0_ISR *****************
  4930 ;; Defined at:
  4931 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;		None
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;		None
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1    wreg      void 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0, pclath, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMMON   BANK0   BANK1
  4945 ;;      Params:         0       0       0
  4946 ;;      Locals:         0       0       0
  4947 ;;      Temps:          0       0       0
  4948 ;;      Totals:         0       0       0
  4949 ;;Total ram usage:        0 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    2
  4952 ;; This function calls:
  4953 ;;		_TMR0_CallBack
  4954 ;; This function is called by:
  4955 ;;		_INTERRUPT_InterruptManager
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           
  4960                           ;psect for function _TMR0_ISR
  4961  0653                     _TMR0_ISR:
  4962                           
  4963                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  4964                           
  4965                           ;incstack = 0
  4966                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4967  0653  110B               	bcf	11,2	;volatile
  4968                           
  4969                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  4970  0654  0020               	movlb	0	; select bank0
  4971  0655  0869               	movf	_timer0ReloadVal,w	;volatile
  4972  0656  0095               	movwf	21	;volatile
  4973                           
  4974                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
  4975  0657  260E               	fcall	_TMR0_CallBack
  4976  0658  0008               	return
  4977  0659                     __end_of_TMR0_ISR:
  4978                           
  4979                           	psect	text26
  4980  060E                     __ptext26:	
  4981 ;; *************** function _TMR0_CallBack *****************
  4982 ;; Defined at:
  4983 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;		None
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      void 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0, pclath, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 1F/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1
  4997 ;;      Params:         0       0       0
  4998 ;;      Locals:         0       0       0
  4999 ;;      Temps:          0       0       0
  5000 ;;      Totals:         0       0       0
  5001 ;;Total ram usage:        0 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    1
  5004 ;; This function calls:
  5005 ;;		Absolute function
  5006 ;;		_TMR0_DefaultInterruptHandler
  5007 ;;		_timer0CallBack
  5008 ;; This function is called by:
  5009 ;;		_TMR0_ISR
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           
  5014                           ;psect for function _TMR0_CallBack
  5015  060E                     _TMR0_CallBack:
  5016                           
  5017                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
  5018                           
  5019                           ;incstack = 0
  5020                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  5021  060E  0867               	movf	_TMR0_InterruptHandler,w
  5022  060F  0468               	iorwf	_TMR0_InterruptHandler+1,w
  5023  0610  1903               	btfsc	3,2
  5024  0611  0008               	return
  5025                           
  5026                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
  5027  0612  0868               	movf	_TMR0_InterruptHandler+1,w
  5028  0613  008A               	movwf	10
  5029  0614  0867               	movf	_TMR0_InterruptHandler,w
  5030  0615  000A               	callw
  5031  0616  3186               	pagesel	$
  5032  0617  0008               	return
  5033  0618                     __end_of_TMR0_CallBack:
  5034                           
  5035                           	psect	text27
  5036  0668                     __ptext27:	
  5037 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5038 ;; Defined at:
  5039 ;;		line 137 in file "mcc_generated_files/tmr0.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;		None
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;		None
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  1    wreg      void 
  5046 ;; Registers used:
  5047 ;;		None
  5048 ;; Tracked objects:
  5049 ;;		On entry : 1F/0
  5050 ;;		On exit  : 1F/0
  5051 ;;		Unchanged: 1F/0
  5052 ;; Data sizes:     COMMON   BANK0   BANK1
  5053 ;;      Params:         0       0       0
  5054 ;;      Locals:         0       0       0
  5055 ;;      Temps:          0       0       0
  5056 ;;      Totals:         0       0       0
  5057 ;;Total ram usage:        0 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; This function calls:
  5060 ;;		Nothing
  5061 ;; This function is called by:
  5062 ;;		_TMR0_Initialize
  5063 ;;		_TMR0_CallBack
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function _TMR0_DefaultInterruptHandler
  5069  0668                     _TMR0_DefaultInterruptHandler:
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5073  0668  0008               	return
  5074  0669                     __end_of_TMR0_DefaultInterruptHandler:
  5075                           
  5076                           	psect	text28
  5077  05FE                     __ptext28:	
  5078 ;; *************** function _timer0CallBack *****************
  5079 ;; Defined at:
  5080 ;;		line 117 in file "main.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;		None
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      void 
  5087 ;; Registers used:
  5088 ;;		wreg, status,2
  5089 ;; Tracked objects:
  5090 ;;		On entry : 1F/0
  5091 ;;		On exit  : 1F/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMMON   BANK0   BANK1
  5094 ;;      Params:         0       0       0
  5095 ;;      Locals:         0       0       0
  5096 ;;      Temps:          0       0       0
  5097 ;;      Totals:         0       0       0
  5098 ;;Total ram usage:        0 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; This function calls:
  5101 ;;		Nothing
  5102 ;; This function is called by:
  5103 ;;		_main
  5104 ;;		_TMR0_CallBack
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           
  5109                           ;psect for function _timer0CallBack
  5110  05FE                     _timer0CallBack:
  5111                           
  5112                           ;main.c: 119:     msTick++;
  5113                           
  5114                           ;incstack = 0
  5115                           ; Regs used in _timer0CallBack: [wreg+status,2]
  5116  05FE  3001               	movlw	1
  5117  05FF  07D7               	addwf	_msTick,f	;volatile
  5118  0600  3000               	movlw	0
  5119  0601  3DD8               	addwfc	_msTick+1,f	;volatile
  5120                           
  5121                           ;main.c: 121:     if(msTick > 200)
  5122  0602  3000               	movlw	0
  5123  0603  0258               	subwf	_msTick+1,w	;volatile
  5124  0604  30C9               	movlw	201
  5125  0605  1903               	skipnz
  5126  0606  0257               	subwf	_msTick,w	;volatile
  5127  0607  1C03               	skipc
  5128  0608  0008               	return
  5129                           
  5130                           ;main.c: 122:     {;main.c: 123:         doToggle = 1;
  5131  0609  01DC               	clrf	_doToggle
  5132  060A  0ADC               	incf	_doToggle,f
  5133                           
  5134                           ;main.c: 124:         msTick = 0;
  5135  060B  01D7               	clrf	_msTick	;volatile
  5136  060C  01D8               	clrf	_msTick+1	;volatile
  5137  060D  0008               	return
  5138  060E                     __end_of_timer0CallBack:
  5139  007E                     btemp	set	126	;btemp
  5140  007E                     int$flags	set	126
  5141  007E                     wtemp0	set	126
  5142                           
  5143                           	psect	config
  5144                           
  5145                           ;Config register CONFIG1 @ 0x8007
  5146                           ;	Oscillator Selection bits
  5147                           ;	FOSC = INTOSC, Internal Oscillator, I/O Function on OSC1
  5148                           ;	Watchdog Timer Enable
  5149                           ;	WDTE = OFF, WDT disabled
  5150                           ;	Power-up Timer Enable
  5151                           ;	PWRTE = OFF, PWRT disabled
  5152                           ;	MCLR Pin Function Select
  5153                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  5154                           ;	Flash Program Memory Code Protection
  5155                           ;	CP = OFF, Program memory code protection is disabled
  5156                           ;	Brown-out Reset Enable
  5157                           ;	BOREN = ON, Brown-out Reset enabled
  5158                           ;	Clock Out Enable
  5159                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5160  8007                     	org	32775
  5161  8007  3FE4               	dw	16356
  5162                           
  5163                           ;Config register CONFIG2 @ 0x8008
  5164                           ;	Flash Memory Self-Write Protection
  5165                           ;	WRT = OFF, Write protection off
  5166                           ;	Stack Overflow/Underflow Reset Enable
  5167                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5168                           ;	Brown-out Reset Voltage Selection
  5169                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5170                           ;	Low-Power Brown Out Reset
  5171                           ;	LPBOR = OFF, Low-Power BOR is disabled
  5172                           ;	Low-Voltage Programming Enable
  5173                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  5174  8008                     	org	32776
  5175  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        9
    BSS         20
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      74
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 32
		 -> writeFlash@wrBlockData(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_writeFlash
    _writeFlash->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setState->___lldiv
    _readFlash->_FLASH_ReadWord
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_writeFlash

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    3961
                                             32 BANK0     10    10      0
                  _ADC_GetConversion
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___aldiv
                             ___lmul
              _setLedsForPositioning
                           _setState
                         _writeFlash
 ---------------------------------------------------------------------------------
 (1) _writeFlash                                          33    33      0    1152
                                             13 COMMON     1     1      0
                                              0 BANK0     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                    10     7      3     812
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     220
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setState                                             5     5      0    1059
                                              0 BANK0      5     5      0
                            ___lldiv
                             ___tmul
                          _readFlash
 ---------------------------------------------------------------------------------
 (2) _readFlash                                            4     4      0     435
                                              3 COMMON     4     4      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     435
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _setLedsForPositioning                                4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     452
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _PWM3_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___aldiv
     ___lmul (ARG)
   ___lmul
   _setLedsForPositioning
   _setState
     ___lldiv
     ___tmul
     _readFlash
       _FLASH_ReadWord
   _writeFlash
     _FLASH_EraseBlock
     _FLASH_WriteBlock
       _FLASH_EraseBlock

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      58       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2A      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      58       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Sep 16 14:05:11 2020

                                       _b 0052                                         _m 005E  
                                      l34 05CD                           _timer0ReloadVal 0069  
          __size_of_setLedsForPositioning 0138             __end_of_setLedsForPositioning 02D2  
                                     l332 0349                                       l325 02F8  
                                     l502 02BD                                       l430 01C6  
                                     l350 0067                                       l511 02D0  
                                     l335 034C                                       l440 01E9  
                                     l506 02CD                                       l450 020A  
                                     l426 01B5                                       l362 0092  
                                     l460 022B                                       l436 01D8  
                                     l380 012E                                       l446 01FA  
                                     l390 015D                                       l382 0138  
                                     l358 0089                                       l472 025A  
                                     l456 021B                                       l392 0167  
                                     l384 0142                                       l482 027B  
                                     l466 023C                                       l394 0171  
                                     l378 0124                                       l492 029C  
                                     l476 026A                                       l396 017B  
                                     l646 037B                                       l486 028B  
                                     l496 02AC                                       _PR2 001B  
                                     u925 0464                                       u955 0400  
                                     u965 0437                                       u985 0538  
                                     u995 053E                           _TMR2_Initialize 0629  
                                     wreg 0009                               main@channel 0062  
          FLASH_WriteBlock@flashWordArray 0075                               main@dimming 0048  
                                    l2013 0095                                      l2031 00C4  
                                    l2015 0098                                      l2007 008C  
                                    l2041 014F                                      l2009 008E  
                                    l2035 0116                                      l2019 00A3  
                                    l2027 00AF                                      l2029 00C2  
                                    l2039 014C                                      l2143 00B7  
                                    l2145 018E                                      l2049 0186  
                                    l2147 0358                                      l1901 02AF  
                                    l1725 0470                                      l1911 050C  
                                    l1903 02BF                                      l1907 0502  
                                    l1763 052F                                      l1851 0310  
                                    l1781 04B8                                      l1845 02F0  
                                    l1951 03D5                                      l1871 01C9  
                                    l1791 04E6                                      l1783 04C6  
                                    l1767 0537                                      l1839 02E5  
                                    l1937 039C                                      l1929 038C  
                                    l1881 021D                                      l1873 01DA  
                                    l1857 034F                                      l1955 03E3  
                                    l1947 03CA                                      l1939 03AA  
                                    l1891 025C                                      l1883 022E  
                                    l1875 01EC                                      l1795 04F1  
                                    l1859 0363                                      l1893 026D  
                                    l1885 023E                                      l1877 01FC  
                                    l1869 01B7                                      l1895 027D  
                                    l1879 020D                                      l1975 002A  
                                    l1897 028E                                      l1889 024C  
                                    l1985 0043                                      l1899 029E  
                                    l1995 006C                                      l1979 0031  
                                    l1997 0071                                      u1025 04BB  
                                    u1045 04C7                                      u1125 0306  
                                    u1055 04DB                                      u1065 04E7  
                                    u1405 03AB                                      u1325 050D  
                                    _LATA 010C                                      _LATB 010D  
                                    u1095 05E3                                      u1415 03BF  
                                    u1335 0514                                      _LATC 010E  
                                    u1600 012C                                      u1425 03CB  
                                    u1620 0136                                      u1710 0165  
                                    u1640 0140                                      u1385 039F  
                                    u1730 016F                                      u1660 014A  
                                    u1580 0122                                      u1750 0179  
                                    u1495 005F                                      u1770 0183  
                                    u1690 015B                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                                      _main 0020  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                         ?_FLASH_WriteBlock 0073  
                                    start 000C                        ??_FLASH_WriteBlock 0076  
                 __end_of_TMR0_Initialize 05FE            ??_TMR0_DefaultInterruptHandler 0070  
          __size_of_OSCILLATOR_Initialize 0006             __end_of_OSCILLATOR_Initialize 0653  
                         __end_of___aldiv 03EC                                     ?_main 0070  
                         __end_of___lldiv 04FA                                     _T2CON 001C  
                                   i1l197 000A                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
       __size_of_TMR0_SetInterruptHandler 0005                       ___lmul@multiplicand 0074  
               ?_TMR0_SetInterruptHandler 0070                          __end_of_TMR0_ISR 0659  
                          _WDT_Initialize 0662                   __end_of_PWM3_Initialize 0639  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 0666  
                         __initialization 000D                              __end_of_main 019A  
                 __end_of_TMR2_Initialize 0631               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 0040                     writeFlash@wrBlockData 0020  
                 __size_of_FLASH_ReadWord 0019                    __end_of_WDT_Initialize 0666  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADCON2 009F                 FLASH_WriteBlock@writeAddr 0073  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                                  _BORCON 0116                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
               __size_of_FLASH_EraseBlock 001C                                    _OSCCON 0099  
                                  _WDTCON 0097                                    ___lmul 04FA  
             __size_of_PWM3_LoadDutyValue 0016                                 ??___aldiv 007C  
                                  ___tmul 0529                                 ??___lldiv 0078  
                                  _msTick 0057                          ?_TMR0_Initialize 0070  
                        __end_of_setState 036B                   FLASH_ReadWord@flashAddr 0070  
                         ?_WDT_Initialize 0070                  ADC_GetConversion@channel 0073  
                   __end_of_TMR0_CallBack 0618                   __end_of_TMR2_StartTimer 0668  
TMR0_SetInterruptHandler@InterruptHandler 0070                          ?_PWM3_Initialize 0070  
                       _SYSTEM_Initialize 0621                   __end_of__initialization 001D  
                      ?_SYSTEM_Initialize 0070                          _fixedPointFactor 065E  
                          __pcstackCOMMON 0070                   __size_of_timer0CallBack 0010  
                            __pidataBANK0 0618                       ??_SYSTEM_Initialize 0073  
                               ?_TMR0_ISR 0070                          ?_TMR2_Initialize 0070  
                          _OPTION_REGbits 0095               FLASH_WriteBlock@GIEBitValue 007B  
               __end_of_SYSTEM_Initialize 0629                                __pbssBANK0 004A  
                      __size_of_readFlash 0068                                __pmaintext 0020  
        __end_of_TMR0_SetInterruptHandler 065E                                   ?___lmul 0070  
                                 ?___tmul 0070                                ??_TMR0_ISR 0070  
                              __pintentry 0004                            ___lmul@product 0078  
               __size_of_FLASH_WriteBlock 0054                   __size_of_ADC_Initialize 0008  
                          _FLASH_ReadWord 058B                     _setLedsForPositioning 019A  
                                 _PWM3DCH 0618                                   _PWM3DCL 0617  
                                 _PWM3CON 0619                          ?_TMR2_StartTimer 0070  
                        _FLASH_EraseBlock 056F                      _ADC_InterruptHandler 0059  
                               ?_setState 0070                                   ___aldiv 036B  
                         __size_of___lmul 002F                           __size_of___tmul 0026  
                                 ___lldiv 04A8                    __end_of_FLASH_ReadWord 05A4  
                                 __ptext1 054F                                   __ptext2 0454  
                                 __ptext3 056F                                   __ptext4 02D2  
                                 __ptext5 03EC                                   __ptext6 058B  
                                 __ptext7 0529                                   __ptext8 04A8  
                                 __ptext9 019A                         __end_of_readFlash 0454  
                   _OSCILLATOR_Initialize 064D                                 _T2CONbits 001C  
                        ___aldiv@dividend 0024                  ??_PIN_MANAGER_Initialize 0070  
              __size_of_SYSTEM_Initialize 0008                                   clrloop0 0648  
                    end_of_initialization 001D                                   init_ram 0641  
                                 initloop 0642                                _lowerLimit 004A  
                         ___lldiv@divisor 0070                           ___lldiv@counter 007D  
                              ??_setState 0020                            _timer0CallBack 05FE  
                        ___aldiv@quotient 002A                 FLASH_ReadWord@GIEBitValue 0072  
                         ?_FLASH_ReadWord 0070                          ??_WDT_Initialize 0070  
                _TMR0_SetInterruptHandler 0659                                 _PORTAbits 000C  
                  ?_setLedsForPositioning 0070                  __end_of_fixedPointFactor 0662  
                              _upperLimit 0063                    __end_of_timer0CallBack 060E  
              __end_of_PWM3_LoadDutyValue 05EA                         FLASH_WriteBlock@i 007C  
                              _writeFlash 054F                            __end_of___lmul 0529  
                          __end_of___tmul 054F                         __size_of_TMR0_ISR 0006  
                          _ADC_Initialize 0639                          _FLASH_WriteBlock 0454  
                  ?_OSCILLATOR_Initialize 0070                       start_initialization 000D  
                __size_of_TMR0_Initialize 0014           __size_of_PIN_MANAGER_Initialize 0018  
                         ?_timer0CallBack 0070                  __size_of_PWM3_Initialize 0008  
                                ??___lmul 0078                                  ??___tmul 0076  
                  __size_of_TMR0_CallBack 000A                    __end_of_ADC_Initialize 0641  
                             __pdataBANK0 005E               FLASH_EraseBlock@GIEBitValue 0072  
                __end_of_FLASH_EraseBlock 058B                            ___tmul@product 0076  
                               ___latbits 0000                             __pcstackBANK0 0020  
                __size_of_TMR2_Initialize 0008                          setState@newState 0024  
                            _currentState 005B                     _TMR0_InterruptHandler 0067  
                               __pnvBANK0 0067                    _PIN_MANAGER_Initialize 05A4  
                                ?___aldiv 0020                         __size_of_setState 0099  
                                ?___lldiv 0070                               ?_writeFlash 0070  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0070  
                               _readFlash 03EC                             _TMR0_CallBack 060E  
                               _msPressed 0055                          _adcValuePosition 004E  
          FLASH_WriteBlock@blockStartAddr 0079                           ___aldiv@divisor 0020  
                       ??_TMR0_Initialize 0072                           ___aldiv@counter 0028  
                                _LATBbits 010D                                  _LATCbits 010E  
                               clear_ram0 0647                  __size_of_TMR2_StartTimer 0002  
     __size_of_INTERRUPT_InterruptManager 0008                ??_TMR0_SetInterruptHandler 0072  
                                _PIR1bits 0011                 FLASH_EraseBlock@startAddr 0070  
                        ??_FLASH_ReadWord 0072                                  _TMR0_ISR 0653  
                 ??_setLedsForPositioning 0074                         ??_PWM3_Initialize 0070  
                              _ADCON0bits 009D                       ___tmul@multiplicand 0073  
                              ?_readFlash 0070                            ?_TMR0_CallBack 0070  
                       ___lmul@multiplier 0070                       __size_of_writeFlash 0020  
                       ??_TMR2_Initialize 0070                  __end_of_FLASH_WriteBlock 04A8  
           setLedsForPositioning@adcValue 0070                         _ADC_GetConversion 05BC  
                 ??_OSCILLATOR_Initialize 0070                        ?_ADC_GetConversion 0070  
                        __size_of___aldiv 0081                          __size_of___lldiv 0052  
                      _PWM3_LoadDutyValue 05D4                       ??_ADC_GetConversion 0072  
                                _doToggle 005C                                  __ptext10 04FA  
                                __ptext11 036B                                  __ptext20 064D  
                                __ptext12 0666                                  __ptext21 0639  
                                __ptext13 0621                                  __ptext22 05D4  
                                __ptext14 0662                                  __ptext23 05BC  
                                __ptext15 0629                                  __ptext16 05EA  
                                __ptext25 0653                                  __ptext17 0659  
                                __ptext26 060E                                  __ptext18 0631  
                                __ptext27 0668                                  __ptext19 05A4  
                                __ptext28 05FE                       ?_PWM3_LoadDutyValue 0070  
                        ??_timer0CallBack 0070                             __size_of_main 017A  
    __end_of_TMR0_DefaultInterruptHandler 0669     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0668                 __end_of_ADC_GetConversion 05D4  
                                _setState 02D2                      ??_PWM3_LoadDutyValue 0072  
                                int$flags 007E                         ??_TMR2_StartTimer 0070  
      __end_of_INTERRUPT_InterruptManager 000C                _INTERRUPT_InterruptManager 0004  
                       ?_FLASH_EraseBlock 0070                        ??_FLASH_EraseBlock 0072  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0070  
                             ??_readFlash 0073                   __size_of_WDT_Initialize 0004  
                                intlevel1 0000                            _doButtonAction 005D  
                              _PMCON1bits 0195                          ___lldiv@dividend 0074  
                 ?_PIN_MANAGER_Initialize 0070                          ??_ADC_Initialize 0070  
           ?_TMR0_DefaultInterruptHandler 0070                              ??_writeFlash 007D  
                       ___tmul@multiplier 0070               PWM3_LoadDutyValue@dutyValue 0070  
                           __pstringtext1 065E                                _OPTION_REG 0095  
                        ___lldiv@quotient 0079                           _TMR0_Initialize 05EA  
                            ___aldiv@sign 0029            __end_of_PIN_MANAGER_Initialize 05BC  
                      __end_of_writeFlash 056F                __size_of_ADC_GetConversion 0018  
                         _PWM3_Initialize 0631  
