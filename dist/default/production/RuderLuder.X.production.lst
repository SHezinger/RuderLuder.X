

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Sep 15 14:47:18 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F1507
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F1507 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0197                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0391                     	;# 
   145  0392                     	;# 
   146  0393                     	;# 
   147  0394                     	;# 
   148  0395                     	;# 
   149  0396                     	;# 
   150  0498                     	;# 
   151  0498                     	;# 
   152  0499                     	;# 
   153  049A                     	;# 
   154  049B                     	;# 
   155  049B                     	;# 
   156  049C                     	;# 
   157  049D                     	;# 
   158  049E                     	;# 
   159  049F                     	;# 
   160  0611                     	;# 
   161  0612                     	;# 
   162  0613                     	;# 
   163  0613                     	;# 
   164  0614                     	;# 
   165  0615                     	;# 
   166  0616                     	;# 
   167  0616                     	;# 
   168  0617                     	;# 
   169  0618                     	;# 
   170  0619                     	;# 
   171  0619                     	;# 
   172  061A                     	;# 
   173  061B                     	;# 
   174  061C                     	;# 
   175  061C                     	;# 
   176  0691                     	;# 
   177  0692                     	;# 
   178  0693                     	;# 
   179  0694                     	;# 
   180  0695                     	;# 
   181  0F0F                     	;# 
   182  0F10                     	;# 
   183  0F11                     	;# 
   184  0F12                     	;# 
   185  0F13                     	;# 
   186  0F14                     	;# 
   187  0F15                     	;# 
   188  0F16                     	;# 
   189  0F17                     	;# 
   190  0F18                     	;# 
   191  0F19                     	;# 
   192  0F1A                     	;# 
   193  0F1B                     	;# 
   194  0F1C                     	;# 
   195  0F1D                     	;# 
   196  0F1E                     	;# 
   197  0F1F                     	;# 
   198  0FE3                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0015                     	;# 
   229  0016                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001C                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0097                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  0116                     	;# 
   258  0117                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0194                     	;# 
   269  0195                     	;# 
   270  0196                     	;# 
   271  0197                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0613                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0616                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  0619                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061C                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0F0F                     	;# 
   312  0F10                     	;# 
   313  0F11                     	;# 
   314  0F12                     	;# 
   315  0F13                     	;# 
   316  0F14                     	;# 
   317  0F15                     	;# 
   318  0F16                     	;# 
   319  0F17                     	;# 
   320  0F18                     	;# 
   321  0F19                     	;# 
   322  0F1A                     	;# 
   323  0F1B                     	;# 
   324  0F1C                     	;# 
   325  0F1D                     	;# 
   326  0F1E                     	;# 
   327  0F1F                     	;# 
   328  0FE3                     	;# 
   329  0FE4                     	;# 
   330  0FE5                     	;# 
   331  0FE6                     	;# 
   332  0FE7                     	;# 
   333  0FE8                     	;# 
   334  0FE9                     	;# 
   335  0FEA                     	;# 
   336  0FEB                     	;# 
   337  0FED                     	;# 
   338  0FEE                     	;# 
   339  0FEF                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  011D                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  020C                     	;# 
   403  020D                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  0394                     	;# 
   408  0395                     	;# 
   409  0396                     	;# 
   410  0498                     	;# 
   411  0498                     	;# 
   412  0499                     	;# 
   413  049A                     	;# 
   414  049B                     	;# 
   415  049B                     	;# 
   416  049C                     	;# 
   417  049D                     	;# 
   418  049E                     	;# 
   419  049F                     	;# 
   420  0611                     	;# 
   421  0612                     	;# 
   422  0613                     	;# 
   423  0613                     	;# 
   424  0614                     	;# 
   425  0615                     	;# 
   426  0616                     	;# 
   427  0616                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0FE3                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0013                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  008C                     	;# 
   498  008D                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0099                     	;# 
   507  009A                     	;# 
   508  009B                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  020C                     	;# 
   533  020D                     	;# 
   534  0391                     	;# 
   535  0392                     	;# 
   536  0393                     	;# 
   537  0394                     	;# 
   538  0395                     	;# 
   539  0396                     	;# 
   540  0498                     	;# 
   541  0498                     	;# 
   542  0499                     	;# 
   543  049A                     	;# 
   544  049B                     	;# 
   545  049B                     	;# 
   546  049C                     	;# 
   547  049D                     	;# 
   548  049E                     	;# 
   549  049F                     	;# 
   550  0611                     	;# 
   551  0612                     	;# 
   552  0613                     	;# 
   553  0613                     	;# 
   554  0614                     	;# 
   555  0615                     	;# 
   556  0616                     	;# 
   557  0616                     	;# 
   558  0617                     	;# 
   559  0618                     	;# 
   560  0619                     	;# 
   561  0619                     	;# 
   562  061A                     	;# 
   563  061B                     	;# 
   564  061C                     	;# 
   565  061C                     	;# 
   566  0691                     	;# 
   567  0692                     	;# 
   568  0693                     	;# 
   569  0694                     	;# 
   570  0695                     	;# 
   571  0F0F                     	;# 
   572  0F10                     	;# 
   573  0F11                     	;# 
   574  0F12                     	;# 
   575  0F13                     	;# 
   576  0F14                     	;# 
   577  0F15                     	;# 
   578  0F16                     	;# 
   579  0F17                     	;# 
   580  0F18                     	;# 
   581  0F19                     	;# 
   582  0F1A                     	;# 
   583  0F1B                     	;# 
   584  0F1C                     	;# 
   585  0F1D                     	;# 
   586  0F1E                     	;# 
   587  0F1F                     	;# 
   588  0FE3                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0013                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  009F                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  020C                     	;# 
   663  020D                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0498                     	;# 
   671  0498                     	;# 
   672  0499                     	;# 
   673  049A                     	;# 
   674  049B                     	;# 
   675  049B                     	;# 
   676  049C                     	;# 
   677  049D                     	;# 
   678  049E                     	;# 
   679  049F                     	;# 
   680  0611                     	;# 
   681  0612                     	;# 
   682  0613                     	;# 
   683  0613                     	;# 
   684  0614                     	;# 
   685  0615                     	;# 
   686  0616                     	;# 
   687  0616                     	;# 
   688  0617                     	;# 
   689  0618                     	;# 
   690  0619                     	;# 
   691  0619                     	;# 
   692  061A                     	;# 
   693  061B                     	;# 
   694  061C                     	;# 
   695  061C                     	;# 
   696  0691                     	;# 
   697  0692                     	;# 
   698  0693                     	;# 
   699  0694                     	;# 
   700  0695                     	;# 
   701  0F0F                     	;# 
   702  0F10                     	;# 
   703  0F11                     	;# 
   704  0F12                     	;# 
   705  0F13                     	;# 
   706  0F14                     	;# 
   707  0F15                     	;# 
   708  0F16                     	;# 
   709  0F17                     	;# 
   710  0F18                     	;# 
   711  0F19                     	;# 
   712  0F1A                     	;# 
   713  0F1B                     	;# 
   714  0F1C                     	;# 
   715  0F1D                     	;# 
   716  0F1E                     	;# 
   717  0F1F                     	;# 
   718  0FE3                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0011                     	;# 
   746  0012                     	;# 
   747  0013                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0093                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  0116                     	;# 
   778  0117                     	;# 
   779  011D                     	;# 
   780  018C                     	;# 
   781  018D                     	;# 
   782  018E                     	;# 
   783  0191                     	;# 
   784  0191                     	;# 
   785  0192                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0197                     	;# 
   792  020C                     	;# 
   793  020D                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0498                     	;# 
   801  0498                     	;# 
   802  0499                     	;# 
   803  049A                     	;# 
   804  049B                     	;# 
   805  049B                     	;# 
   806  049C                     	;# 
   807  049D                     	;# 
   808  049E                     	;# 
   809  049F                     	;# 
   810  0611                     	;# 
   811  0612                     	;# 
   812  0613                     	;# 
   813  0613                     	;# 
   814  0614                     	;# 
   815  0615                     	;# 
   816  0616                     	;# 
   817  0616                     	;# 
   818  0617                     	;# 
   819  0618                     	;# 
   820  0619                     	;# 
   821  0619                     	;# 
   822  061A                     	;# 
   823  061B                     	;# 
   824  061C                     	;# 
   825  061C                     	;# 
   826  0691                     	;# 
   827  0692                     	;# 
   828  0693                     	;# 
   829  0694                     	;# 
   830  0695                     	;# 
   831  0F0F                     	;# 
   832  0F10                     	;# 
   833  0F11                     	;# 
   834  0F12                     	;# 
   835  0F13                     	;# 
   836  0F14                     	;# 
   837  0F15                     	;# 
   838  0F16                     	;# 
   839  0F17                     	;# 
   840  0F18                     	;# 
   841  0F19                     	;# 
   842  0F1A                     	;# 
   843  0F1B                     	;# 
   844  0F1C                     	;# 
   845  0F1D                     	;# 
   846  0F1E                     	;# 
   847  0F1F                     	;# 
   848  0FE3                     	;# 
   849  0FE4                     	;# 
   850  0FE5                     	;# 
   851  0FE6                     	;# 
   852  0FE7                     	;# 
   853  0FE8                     	;# 
   854  0FE9                     	;# 
   855  0FEA                     	;# 
   856  0FEB                     	;# 
   857  0FED                     	;# 
   858  0FEE                     	;# 
   859  0FEF                     	;# 
   860  0000                     	;# 
   861  0001                     	;# 
   862  0002                     	;# 
   863  0003                     	;# 
   864  0004                     	;# 
   865  0005                     	;# 
   866  0006                     	;# 
   867  0007                     	;# 
   868  0008                     	;# 
   869  0009                     	;# 
   870  000A                     	;# 
   871  000B                     	;# 
   872  000C                     	;# 
   873  000D                     	;# 
   874  000E                     	;# 
   875  0011                     	;# 
   876  0012                     	;# 
   877  0013                     	;# 
   878  0015                     	;# 
   879  0016                     	;# 
   880  0016                     	;# 
   881  0017                     	;# 
   882  0018                     	;# 
   883  0019                     	;# 
   884  001A                     	;# 
   885  001B                     	;# 
   886  001C                     	;# 
   887  008C                     	;# 
   888  008D                     	;# 
   889  008E                     	;# 
   890  0091                     	;# 
   891  0092                     	;# 
   892  0093                     	;# 
   893  0095                     	;# 
   894  0096                     	;# 
   895  0097                     	;# 
   896  0099                     	;# 
   897  009A                     	;# 
   898  009B                     	;# 
   899  009B                     	;# 
   900  009C                     	;# 
   901  009D                     	;# 
   902  009E                     	;# 
   903  009F                     	;# 
   904  010C                     	;# 
   905  010D                     	;# 
   906  010E                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  011D                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  0191                     	;# 
   914  0191                     	;# 
   915  0192                     	;# 
   916  0193                     	;# 
   917  0193                     	;# 
   918  0194                     	;# 
   919  0195                     	;# 
   920  0196                     	;# 
   921  0197                     	;# 
   922  020C                     	;# 
   923  020D                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0498                     	;# 
   931  0498                     	;# 
   932  0499                     	;# 
   933  049A                     	;# 
   934  049B                     	;# 
   935  049B                     	;# 
   936  049C                     	;# 
   937  049D                     	;# 
   938  049E                     	;# 
   939  049F                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0613                     	;# 
   944  0614                     	;# 
   945  0615                     	;# 
   946  0616                     	;# 
   947  0616                     	;# 
   948  0617                     	;# 
   949  0618                     	;# 
   950  0619                     	;# 
   951  0619                     	;# 
   952  061A                     	;# 
   953  061B                     	;# 
   954  061C                     	;# 
   955  061C                     	;# 
   956  0691                     	;# 
   957  0692                     	;# 
   958  0693                     	;# 
   959  0694                     	;# 
   960  0695                     	;# 
   961  0F0F                     	;# 
   962  0F10                     	;# 
   963  0F11                     	;# 
   964  0F12                     	;# 
   965  0F13                     	;# 
   966  0F14                     	;# 
   967  0F15                     	;# 
   968  0F16                     	;# 
   969  0F17                     	;# 
   970  0F18                     	;# 
   971  0F19                     	;# 
   972  0F1A                     	;# 
   973  0F1B                     	;# 
   974  0F1C                     	;# 
   975  0F1D                     	;# 
   976  0F1E                     	;# 
   977  0F1F                     	;# 
   978  0FE3                     	;# 
   979  0FE4                     	;# 
   980  0FE5                     	;# 
   981  0FE6                     	;# 
   982  0FE7                     	;# 
   983  0FE8                     	;# 
   984  0FE9                     	;# 
   985  0FEA                     	;# 
   986  0FEB                     	;# 
   987  0FED                     	;# 
   988  0FEE                     	;# 
   989  0FEF                     	;# 
   990  0000                     	;# 
   991  0001                     	;# 
   992  0002                     	;# 
   993  0003                     	;# 
   994  0004                     	;# 
   995  0005                     	;# 
   996  0006                     	;# 
   997  0007                     	;# 
   998  0008                     	;# 
   999  0009                     	;# 
  1000  000A                     	;# 
  1001  000B                     	;# 
  1002  000C                     	;# 
  1003  000D                     	;# 
  1004  000E                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010E                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018E                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0197                     	;# 
  1052  020C                     	;# 
  1053  020D                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0394                     	;# 
  1058  0395                     	;# 
  1059  0396                     	;# 
  1060  0498                     	;# 
  1061  0498                     	;# 
  1062  0499                     	;# 
  1063  049A                     	;# 
  1064  049B                     	;# 
  1065  049B                     	;# 
  1066  049C                     	;# 
  1067  049D                     	;# 
  1068  049E                     	;# 
  1069  049F                     	;# 
  1070  0611                     	;# 
  1071  0612                     	;# 
  1072  0613                     	;# 
  1073  0613                     	;# 
  1074  0614                     	;# 
  1075  0615                     	;# 
  1076  0616                     	;# 
  1077  0616                     	;# 
  1078  0617                     	;# 
  1079  0618                     	;# 
  1080  0619                     	;# 
  1081  0619                     	;# 
  1082  061A                     	;# 
  1083  061B                     	;# 
  1084  061C                     	;# 
  1085  061C                     	;# 
  1086  0691                     	;# 
  1087  0692                     	;# 
  1088  0693                     	;# 
  1089  0694                     	;# 
  1090  0695                     	;# 
  1091  0F0F                     	;# 
  1092  0F10                     	;# 
  1093  0F11                     	;# 
  1094  0F12                     	;# 
  1095  0F13                     	;# 
  1096  0F14                     	;# 
  1097  0F15                     	;# 
  1098  0F16                     	;# 
  1099  0F17                     	;# 
  1100  0F18                     	;# 
  1101  0F19                     	;# 
  1102  0F1A                     	;# 
  1103  0F1B                     	;# 
  1104  0F1C                     	;# 
  1105  0F1D                     	;# 
  1106  0F1E                     	;# 
  1107  0F1F                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0013                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0093                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0099                     	;# 
  1157  009A                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  011D                     	;# 
  1170  018C                     	;# 
  1171  018D                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0194                     	;# 
  1179  0195                     	;# 
  1180  0196                     	;# 
  1181  0197                     	;# 
  1182  020C                     	;# 
  1183  020D                     	;# 
  1184  0391                     	;# 
  1185  0392                     	;# 
  1186  0393                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  0498                     	;# 
  1191  0498                     	;# 
  1192  0499                     	;# 
  1193  049A                     	;# 
  1194  049B                     	;# 
  1195  049B                     	;# 
  1196  049C                     	;# 
  1197  049D                     	;# 
  1198  049E                     	;# 
  1199  049F                     	;# 
  1200  0611                     	;# 
  1201  0612                     	;# 
  1202  0613                     	;# 
  1203  0613                     	;# 
  1204  0614                     	;# 
  1205  0615                     	;# 
  1206  0616                     	;# 
  1207  0616                     	;# 
  1208  0617                     	;# 
  1209  0618                     	;# 
  1210  0619                     	;# 
  1211  0619                     	;# 
  1212  061A                     	;# 
  1213  061B                     	;# 
  1214  061C                     	;# 
  1215  061C                     	;# 
  1216  0691                     	;# 
  1217  0692                     	;# 
  1218  0693                     	;# 
  1219  0694                     	;# 
  1220  0695                     	;# 
  1221  0F0F                     	;# 
  1222  0F10                     	;# 
  1223  0F11                     	;# 
  1224  0F12                     	;# 
  1225  0F13                     	;# 
  1226  0F14                     	;# 
  1227  0F15                     	;# 
  1228  0F16                     	;# 
  1229  0F17                     	;# 
  1230  0F18                     	;# 
  1231  0F19                     	;# 
  1232  0F1A                     	;# 
  1233  0F1B                     	;# 
  1234  0F1C                     	;# 
  1235  0F1D                     	;# 
  1236  0F1E                     	;# 
  1237  0F1F                     	;# 
  1238  0FE3                     	;# 
  1239  0FE4                     	;# 
  1240  0FE5                     	;# 
  1241  0FE6                     	;# 
  1242  0FE7                     	;# 
  1243  0FE8                     	;# 
  1244  0FE9                     	;# 
  1245  0FEA                     	;# 
  1246  0FEB                     	;# 
  1247  0FED                     	;# 
  1248  0FEE                     	;# 
  1249  0FEF                     	;# 
  1250                           
  1251                           	psect	idataBANK0
  1252  05C9                     __pidataBANK0:
  1253                           
  1254                           ;initializer for _m
  1255  05C9  34E8               	retlw	232
  1256  05CA  3403               	retlw	3
  1257  05CB  3400               	retlw	0
  1258  05CC  3400               	retlw	0
  1259                           
  1260                           ;initializer for main@channel
  1261  05CD  340A               	retlw	10
  1262                           
  1263                           ;initializer for _currentState
  1264  05CE  3401               	retlw	1
  1265                           
  1266                           ;initializer for _upperLimit
  1267  05CF  34FF               	retlw	255
  1268  05D0  3403               	retlw	3
  1269  05D1  3400               	retlw	0
  1270  05D2  3400               	retlw	0
  1271                           
  1272                           	psect	stringtext1
  1273  061A                     __pstringtext1:
  1274  061A                     _fixedPointFactor:
  1275  061A  34E8               	retlw	232
  1276  061B  3403               	retlw	3
  1277  061C  3400               	retlw	0
  1278  061D  3400               	retlw	0
  1279  061E                     __end_of_fixedPointFactor:
  1280                           
  1281                           	psect	nvBANK0
  1282  0065                     __pnvBANK0:
  1283  0065                     _TMR0_InterruptHandler:
  1284  0065                     	ds	2
  1285  0067                     _timer0ReloadVal:
  1286  0067                     	ds	1
  1287  000C                     _PORTAbits	set	12
  1288  000B                     _INTCONbits	set	11
  1289  0015                     _TMR0	set	21
  1290  001C                     _T2CONbits	set	28
  1291  001C                     _T2CON	set	28
  1292  0011                     _PIR1bits	set	17
  1293  001A                     _TMR2	set	26
  1294  001B                     _PR2	set	27
  1295  0095                     _OPTION_REG	set	149
  1296  0095                     _OPTION_REGbits	set	149
  1297  008E                     _TRISC	set	142
  1298  008D                     _TRISB	set	141
  1299  008C                     _TRISA	set	140
  1300  0097                     _WDTCON	set	151
  1301  0099                     _OSCCON	set	153
  1302  009D                     _ADCON0bits	set	157
  1303  009D                     _ADCON0	set	157
  1304  009C                     _ADRESH	set	156
  1305  009B                     _ADRESL	set	155
  1306  009F                     _ADCON2	set	159
  1307  009E                     _ADCON1	set	158
  1308  010D                     _LATBbits	set	269
  1309  010E                     _LATCbits	set	270
  1310  011D                     _APFCON	set	285
  1311  010E                     _LATC	set	270
  1312  010D                     _LATB	set	269
  1313  010C                     _LATA	set	268
  1314  0116                     _BORCON	set	278
  1315  0196                     _PMCON2	set	406
  1316  0193                     _PMDATL	set	403
  1317  0194                     _PMDATH	set	404
  1318  0195                     _PMCON1bits	set	405
  1319  0192                     _PMADRH	set	402
  1320  0191                     _PMADRL	set	401
  1321  018C                     _ANSELA	set	396
  1322  018D                     _ANSELB	set	397
  1323  018E                     _ANSELC	set	398
  1324  020C                     _WPUA	set	524
  1325  020D                     _WPUB	set	525
  1326  0617                     _PWM3DCL	set	1559
  1327  0618                     _PWM3DCH	set	1560
  1328  0619                     _PWM3CON	set	1561
  1329                           
  1330                           	psect	cinit
  1331  000D                     start_initialization:	
  1332                           ; #config settings
  1333                           
  1334  000D                     __initialization:
  1335                           
  1336                           ; Initialize objects allocated to BANK0
  1337  000D  30C9               	movlw	low __pidataBANK0
  1338  000E  0084               	movwf	4
  1339  000F  3085               	movlw	(high __pidataBANK0)| (0+128)
  1340  0010  0085               	movwf	5
  1341  0011  305B               	movlw	low __pdataBANK0
  1342  0012  0086               	movwf	6
  1343  0013  3000               	movlw	high __pdataBANK0
  1344  0014  0087               	movwf	7
  1345  0015  300A               	movlw	10
  1346  0016  25FD               	fcall	init_ram
  1347                           
  1348                           ; Clear objects allocated to BANK0
  1349  0017  3048               	movlw	low __pbssBANK0
  1350  0018  0084               	movwf	4
  1351  0019  3000               	movlw	high __pbssBANK0
  1352  001A  0085               	movwf	5
  1353  001B  3013               	movlw	19
  1354  001C  2603               	fcall	clear_ram0
  1355  001D                     end_of_initialization:	
  1356                           ;End of C runtime variable initialization code
  1357                           
  1358  001D                     __end_of__initialization:
  1359  001D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1360  001E  0020               	movlb	0
  1361  001F  2820               	ljmp	_main	;jump to C main() function
  1362                           
  1363                           	psect	bssBANK0
  1364  0048                     __pbssBANK0:
  1365  0048                     _lowerLimit:
  1366  0048                     	ds	4
  1367  004C                     _adcValuePosition:
  1368  004C                     	ds	4
  1369  0050                     _b:
  1370  0050                     	ds	3
  1371  0053                     _msPressed:
  1372  0053                     	ds	2
  1373  0055                     _msTick:
  1374  0055                     	ds	2
  1375  0057                     _ADC_InterruptHandler:
  1376  0057                     	ds	2
  1377  0059                     _doToggle:
  1378  0059                     	ds	1
  1379  005A                     _doButtonAction:
  1380  005A                     	ds	1
  1381                           
  1382                           	psect	dataBANK0
  1383  005B                     __pdataBANK0:
  1384  005B                     _m:
  1385  005B                     	ds	4
  1386  005F                     main@channel:
  1387  005F                     	ds	1
  1388  0060                     _currentState:
  1389  0060                     	ds	1
  1390  0061                     _upperLimit:
  1391  0061                     	ds	4
  1392                           
  1393                           	psect	inittext
  1394  05FD                     init_ram:
  1395  05FD  00FE               	movwf	126
  1396  05FE                     initloop:
  1397  05FE  0012               	moviw fsr0++
  1398  05FF  001E               	movwi fsr1++
  1399  0600  0BFE               	decfsz	126,f
  1400  0601  2DFE               	goto	initloop
  1401  0602  3400               	retlw	0
  1402                           
  1403                           	psect	clrtext
  1404  0603                     clear_ram0:	
  1405                           ;	Called with FSR0 containing the base address, and
  1406                           ;	WREG with the size to clear
  1407                           
  1408  0603  0064               	clrwdt	;clear the watchdog before getting into this loop
  1409  0604                     clrloop0:
  1410  0604  0180               	clrf	0	;clear RAM location pointed to by FSR
  1411  0605  3101               	addfsr 0,1
  1412  0606  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1413  0607  2E04               	goto	clrloop0	;have we reached the end yet?
  1414  0608  3400               	retlw	0	;all done for this memory range, return
  1415                           
  1416                           	psect	cstackCOMMON
  1417  0070                     __pcstackCOMMON:
  1418  0070                     ?_PIN_MANAGER_Initialize:
  1419  0070                     ??_PIN_MANAGER_Initialize:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0070                     ?_OSCILLATOR_Initialize:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0070                     ??_OSCILLATOR_Initialize:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0070                     ?_WDT_Initialize:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0070                     ??_WDT_Initialize:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0070                     ?_PWM3_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0070                     ??_PWM3_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0070                     ?_TMR2_Initialize:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0070                     ??_TMR2_Initialize:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0070                     ?_TMR0_Initialize:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0070                     ?_TMR0_SetInterruptHandler:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0070                     ?_TMR0_DefaultInterruptHandler:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0070                     ??_TMR0_DefaultInterruptHandler:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0070                     ?_TMR0_CallBack:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0070                     ??_TMR0_CallBack:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0070                     ?_FLASH_EraseBlock:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0070                     ?_setLedsForPositioning:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0070                     ?_ADC_Initialize:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0070                     ??_ADC_Initialize:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0070                     ?_SYSTEM_Initialize:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0070                     ?_TMR2_StartTimer:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0070                     ??_TMR2_StartTimer:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0070                     ?_TMR0_ISR:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0070                     ??_TMR0_ISR:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0070                     ?_INTERRUPT_InterruptManager:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0070                     ??_INTERRUPT_InterruptManager:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0070                     ?_readFlash:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0070                     ?_writeFlash:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0070                     ?_timer0CallBack:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ??_timer0CallBack:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ?_setState:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_main:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_ADC_GetConversion:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0070                     ?_FLASH_ReadWord:	
  1519                           ; 2 bytes @ 0x0
  1520                           
  1521  0070                     ?___tmul:	
  1522                           ; 2 bytes @ 0x0
  1523                           
  1524  0070                     ?___lmul:	
  1525                           ; 3 bytes @ 0x0
  1526                           
  1527  0070                     ?___lldiv:	
  1528                           ; 4 bytes @ 0x0
  1529                           
  1530  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1531                           ; 4 bytes @ 0x0
  1532                           
  1533  0070                     FLASH_ReadWord@flashAddr:	
  1534                           ; 2 bytes @ 0x0
  1535                           
  1536  0070                     FLASH_EraseBlock@startAddr:	
  1537                           ; 2 bytes @ 0x0
  1538                           
  1539  0070                     ___tmul@multiplier:	
  1540                           ; 2 bytes @ 0x0
  1541                           
  1542  0070                     setLedsForPositioning@adcValue:	
  1543                           ; 3 bytes @ 0x0
  1544                           
  1545  0070                     ___lmul@multiplier:	
  1546                           ; 4 bytes @ 0x0
  1547                           
  1548  0070                     ___lldiv@divisor:	
  1549                           ; 4 bytes @ 0x0
  1550                           
  1551                           
  1552                           ; 4 bytes @ 0x0
  1553  0070                     	ds	2
  1554  0072                     ??_TMR0_Initialize:
  1555  0072                     ??_TMR0_SetInterruptHandler:	
  1556                           ; 1 bytes @ 0x2
  1557                           
  1558  0072                     ??_FLASH_EraseBlock:	
  1559                           ; 1 bytes @ 0x2
  1560                           
  1561  0072                     ??_ADC_GetConversion:	
  1562                           ; 1 bytes @ 0x2
  1563                           
  1564  0072                     ??_FLASH_ReadWord:	
  1565                           ; 1 bytes @ 0x2
  1566                           
  1567  0072                     FLASH_ReadWord@GIEBitValue:	
  1568                           ; 1 bytes @ 0x2
  1569                           
  1570  0072                     FLASH_EraseBlock@GIEBitValue:	
  1571                           ; 1 bytes @ 0x2
  1572                           
  1573                           
  1574                           ; 1 bytes @ 0x2
  1575  0072                     	ds	1
  1576  0073                     ?_FLASH_WriteBlock:
  1577  0073                     ??_SYSTEM_Initialize:	
  1578                           ; 1 bytes @ 0x3
  1579                           
  1580  0073                     ??_readFlash:	
  1581                           ; 1 bytes @ 0x3
  1582                           
  1583  0073                     ADC_GetConversion@channel:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0073                     FLASH_WriteBlock@writeAddr:	
  1587                           ; 1 bytes @ 0x3
  1588                           
  1589  0073                     ___tmul@multiplicand:	
  1590                           ; 2 bytes @ 0x3
  1591                           
  1592                           
  1593                           ; 3 bytes @ 0x3
  1594  0073                     	ds	1
  1595  0074                     ??_setLedsForPositioning:
  1596  0074                     ?_PWM3_LoadDutyValue:	
  1597                           ; 1 bytes @ 0x4
  1598                           
  1599  0074                     PWM3_LoadDutyValue@dutyValue:	
  1600                           ; 1 bytes @ 0x4
  1601                           
  1602  0074                     ___lmul@multiplicand:	
  1603                           ; 2 bytes @ 0x4
  1604                           
  1605  0074                     ___lldiv@dividend:	
  1606                           ; 4 bytes @ 0x4
  1607                           
  1608                           
  1609                           ; 4 bytes @ 0x4
  1610  0074                     	ds	1
  1611  0075                     FLASH_WriteBlock@flashWordArray:
  1612                           
  1613                           ; 1 bytes @ 0x5
  1614  0075                     	ds	1
  1615  0076                     ??_FLASH_WriteBlock:
  1616  0076                     ??_PWM3_LoadDutyValue:	
  1617                           ; 1 bytes @ 0x6
  1618                           
  1619  0076                     ??___tmul:	
  1620                           ; 1 bytes @ 0x6
  1621                           
  1622  0076                     ___tmul@product:	
  1623                           ; 1 bytes @ 0x6
  1624                           
  1625                           
  1626                           ; 3 bytes @ 0x6
  1627  0076                     	ds	2
  1628  0078                     ??___lmul:
  1629  0078                     ??___lldiv:	
  1630                           ; 1 bytes @ 0x8
  1631                           
  1632  0078                     ___lmul@product:	
  1633                           ; 1 bytes @ 0x8
  1634                           
  1635                           
  1636                           ; 4 bytes @ 0x8
  1637  0078                     	ds	1
  1638  0079                     FLASH_WriteBlock@blockStartAddr:
  1639  0079                     ___lldiv@quotient:	
  1640                           ; 2 bytes @ 0x9
  1641                           
  1642                           
  1643                           ; 4 bytes @ 0x9
  1644  0079                     	ds	2
  1645  007B                     FLASH_WriteBlock@GIEBitValue:
  1646                           
  1647                           ; 1 bytes @ 0xB
  1648  007B                     	ds	1
  1649  007C                     ??___aldiv:
  1650  007C                     FLASH_WriteBlock@i:	
  1651                           ; 1 bytes @ 0xC
  1652                           
  1653                           
  1654                           ; 1 bytes @ 0xC
  1655  007C                     	ds	1
  1656  007D                     ??_writeFlash:
  1657  007D                     ___lldiv@counter:	
  1658                           ; 1 bytes @ 0xD
  1659                           
  1660                           
  1661                           ; 1 bytes @ 0xD
  1662  007D                     	ds	1
  1663                           
  1664                           	psect	cstackBANK0
  1665  0020                     __pcstackBANK0:
  1666  0020                     ??_setState:
  1667  0020                     ?___aldiv:	
  1668                           ; 1 bytes @ 0x0
  1669                           
  1670  0020                     ___aldiv@divisor:	
  1671                           ; 4 bytes @ 0x0
  1672                           
  1673  0020                     writeFlash@wrBlockData:	
  1674                           ; 4 bytes @ 0x0
  1675                           
  1676                           
  1677                           ; 32 bytes @ 0x0
  1678  0020                     	ds	4
  1679  0024                     setState@newState:
  1680  0024                     ___aldiv@dividend:	
  1681                           ; 1 bytes @ 0x4
  1682                           
  1683                           
  1684                           ; 4 bytes @ 0x4
  1685  0024                     	ds	4
  1686  0028                     ___aldiv@counter:
  1687                           
  1688                           ; 1 bytes @ 0x8
  1689  0028                     	ds	1
  1690  0029                     ___aldiv@sign:
  1691                           
  1692                           ; 1 bytes @ 0x9
  1693  0029                     	ds	1
  1694  002A                     ___aldiv@quotient:
  1695                           
  1696                           ; 4 bytes @ 0xA
  1697  002A                     	ds	22
  1698  0040                     ??_main:
  1699                           
  1700                           ; 1 bytes @ 0x20
  1701  0040                     	ds	8
  1702                           
  1703                           	psect	maintext
  1704  0020                     __pmaintext:	
  1705 ;;
  1706 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1707 ;;
  1708 ;; *************** function _main *****************
  1709 ;; Defined at:
  1710 ;;		line 190 in file "main.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : B1F/0
  1721 ;;		On exit  : 1F/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMMON   BANK0   BANK1
  1724 ;;      Params:         0       0       0
  1725 ;;      Locals:         0       0       0
  1726 ;;      Temps:          0       8       0
  1727 ;;      Totals:         0       8       0
  1728 ;;Total ram usage:        8 bytes
  1729 ;; Hardware stack levels required when called:    7
  1730 ;; This function calls:
  1731 ;;		_ADC_GetConversion
  1732 ;;		_PWM3_LoadDutyValue
  1733 ;;		_SYSTEM_Initialize
  1734 ;;		_TMR0_SetInterruptHandler
  1735 ;;		_TMR2_StartTimer
  1736 ;;		___aldiv
  1737 ;;		___lmul
  1738 ;;		_readFlash
  1739 ;;		_setLedsForPositioning
  1740 ;;		_setState
  1741 ;;		_writeFlash
  1742 ;; This function is called by:
  1743 ;;		Startup code after reset
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           
  1748                           ;psect for function _main
  1749  0020                     _main:
  1750                           
  1751                           ;main.c: 193:     SYSTEM_Initialize();
  1752                           
  1753                           ;incstack = 0
  1754                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1755  0020  25DD               	fcall	_SYSTEM_Initialize
  1756                           
  1757                           ;main.c: 196:     (INTCONbits.GIE = 1);
  1758  0021  178B               	bsf	11,7	;volatile
  1759                           
  1760                           ;main.c: 198:     setState(STATE_NORMAL);
  1761  0022  3001               	movlw	1
  1762  0023  232D               	fcall	_setState
  1763                           
  1764                           ;main.c: 201:     TMR0_SetInterruptHandler(timer0CallBack);
  1765  0024  30B9               	movlw	low _timer0CallBack
  1766  0025  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1767  0026  3005               	movlw	high _timer0CallBack
  1768  0027  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1769  0028  2615               	fcall	_TMR0_SetInterruptHandler
  1770                           
  1771                           ;main.c: 202:     TMR2_StartTimer();
  1772  0029  2622               	fcall	_TMR2_StartTimer
  1773                           
  1774                           ;main.c: 204:     writeFlash();
  1775  002A  24DA               	fcall	_writeFlash
  1776                           
  1777                           ;main.c: 205:     readFlash();
  1778  002B  239C               	fcall	_readFlash
  1779  002C                     l1923:
  1780                           
  1781                           ;main.c: 208:     {;main.c: 209:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 212:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1782  002C  3003               	movlw	3
  1783  002D  0020               	movlb	0	; select bank0
  1784  002E  065F               	xorwf	main@channel,w
  1785  002F  1903               	btfsc	3,2
  1786  0030  2833               	goto	l1927
  1787  0031  3003               	movlw	3
  1788  0032  2834               	goto	L1
  1789  0033                     l1927:
  1790  0033  300A               	movlw	10
  1791  0034                     L1:
  1792  0034  00C0               	movwf	??_main
  1793  0035  0840               	movf	??_main,w
  1794  0036  00DF               	movwf	main@channel
  1795                           
  1796                           ;main.c: 217:         if(channel == channelRudder)
  1797  0037  3003               	movlw	3
  1798  0038  065F               	xorwf	main@channel,w
  1799  0039  1D03               	btfss	3,2
  1800  003A  2845               	goto	l1933
  1801                           
  1802                           ;main.c: 218:         {;main.c: 219:             adcValuePosition = ADC_GetConversion(ch
      +                          annel);
  1803  003B  085F               	movf	main@channel,w
  1804  003C  2577               	fcall	_ADC_GetConversion
  1805  003D  0870               	movf	?_ADC_GetConversion,w
  1806  003E  0020               	movlb	0	; select bank0
  1807  003F  00CC               	movwf	_adcValuePosition
  1808  0040  0871               	movf	?_ADC_GetConversion+1,w
  1809  0041  00CD               	movwf	_adcValuePosition+1
  1810  0042  01CE               	clrf	_adcValuePosition+2
  1811  0043  01CF               	clrf	_adcValuePosition+3
  1812                           
  1813                           ;main.c: 220:         }
  1814  0044  284C               	goto	l1935
  1815  0045                     l1933:
  1816                           
  1817                           ;main.c: 222:         {;main.c: 224:             PWM3_LoadDutyValue(ADC_GetConversion(ch
      +                          annel));
  1818  0045  085F               	movf	main@channel,w
  1819  0046  2577               	fcall	_ADC_GetConversion
  1820  0047  0871               	movf	?_ADC_GetConversion+1,w
  1821  0048  00F5               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1822  0049  0870               	movf	?_ADC_GetConversion,w
  1823  004A  00F4               	movwf	PWM3_LoadDutyValue@dutyValue
  1824  004B  258F               	fcall	_PWM3_LoadDutyValue
  1825  004C                     l1935:
  1826                           
  1827                           ;main.c: 229:         if(!PORTAbits.RA5 && !doButtonAction)
  1828  004C  0020               	movlb	0	; select bank0
  1829  004D  1A8C               	btfsc	12,5	;volatile
  1830  004E  2864               	goto	l1945
  1831  004F  085A               	movf	_doButtonAction,w	;volatile
  1832  0050  1D03               	btfss	3,2
  1833  0051  2864               	goto	l1945
  1834                           
  1835                           ;main.c: 230:         {;main.c: 231:             msPressed++;
  1836  0052  3001               	movlw	1
  1837  0053  07D3               	addwf	_msPressed,f	;volatile
  1838  0054  3000               	movlw	0
  1839  0055  3DD4               	addwfc	_msPressed+1,f	;volatile
  1840                           
  1841                           ;main.c: 233:             if(msPressed > 3000)
  1842  0056  300B               	movlw	11
  1843  0057  0254               	subwf	_msPressed+1,w	;volatile
  1844  0058  30B9               	movlw	185
  1845  0059  1903               	skipnz
  1846  005A  0253               	subwf	_msPressed,w	;volatile
  1847  005B  1C03               	skipc
  1848  005C  2861               	goto	l1943
  1849                           
  1850                           ;main.c: 234:             {;main.c: 235:                 doButtonAction = 1;
  1851  005D  3001               	movlw	1
  1852  005E  00C0               	movwf	??_main
  1853  005F  0840               	movf	??_main,w
  1854  0060  00DA               	movwf	_doButtonAction	;volatile
  1855  0061                     l1943:
  1856  0061  0022               	movlb	2	; select bank2
  1857  0062  168E               	bsf	14,5	;volatile
  1858  0063  2868               	goto	l1949
  1859  0064                     l1945:
  1860                           
  1861                           ;main.c: 240:         {;main.c: 241:             msPressed = 0;
  1862  0064  01D3               	clrf	_msPressed	;volatile
  1863  0065  01D4               	clrf	_msPressed+1	;volatile
  1864  0066  0022               	movlb	2	; select bank2
  1865  0067  128E               	bcf	14,5	;volatile
  1866  0068                     l1949:
  1867                           
  1868                           ;main.c: 247:         if(doButtonAction)
  1869  0068  0020               	movlb	0	; select bank0
  1870  0069  085A               	movf	_doButtonAction,w	;volatile
  1871  006A  1903               	btfsc	3,2
  1872  006B  2960               	goto	l1989
  1873  006C                     l348:	
  1874                           ;main.c: 251:             {;main.c: 253:             }
  1875                           
  1876                           
  1877                           ;main.c: 250:             while(!PORTAbits.RA5)
  1878  006C  1A8C               	btfsc	12,5	;volatile
  1879  006D  2889               	goto	l1967
  1880  006E  286C               	goto	l348
  1881  006F                     l1953:
  1882                           
  1883                           ;main.c: 260:                     setState(STATE_TEACH_LEFT);
  1884  006F  3002               	movlw	2
  1885  0070  232D               	fcall	_setState
  1886                           
  1887                           ;main.c: 261:                     break;
  1888  0071  289C               	goto	l1969
  1889  0072                     l1955:
  1890                           
  1891                           ;main.c: 264:                     lowerLimit = adcValuePosition;
  1892  0072  084F               	movf	_adcValuePosition+3,w
  1893  0073  00CB               	movwf	_lowerLimit+3
  1894  0074  084E               	movf	_adcValuePosition+2,w
  1895  0075  00CA               	movwf	_lowerLimit+2
  1896  0076  084D               	movf	_adcValuePosition+1,w
  1897  0077  00C9               	movwf	_lowerLimit+1
  1898  0078  084C               	movf	_adcValuePosition,w
  1899  0079  00C8               	movwf	_lowerLimit
  1900                           
  1901                           ;main.c: 266:                     setState(STATE_TEACH_RIGHT);
  1902  007A  3003               	movlw	3
  1903  007B  232D               	fcall	_setState
  1904                           
  1905                           ;main.c: 267:                     break;
  1906  007C  289C               	goto	l1969
  1907  007D                     l1959:
  1908                           
  1909                           ;main.c: 270:                 {;main.c: 271:                     upperLimit = adcValuePo
      +                          sition;
  1910  007D  084F               	movf	_adcValuePosition+3,w
  1911  007E  00E4               	movwf	_upperLimit+3
  1912  007F  084E               	movf	_adcValuePosition+2,w
  1913  0080  00E3               	movwf	_upperLimit+2
  1914  0081  084D               	movf	_adcValuePosition+1,w
  1915  0082  00E2               	movwf	_upperLimit+1
  1916  0083  084C               	movf	_adcValuePosition,w
  1917  0084  00E1               	movwf	_upperLimit
  1918                           
  1919                           ;main.c: 273:                     writeFlash();
  1920  0085  24DA               	fcall	_writeFlash
  1921                           
  1922                           ;main.c: 274:                     setState(STATE_NORMAL);
  1923  0086  3001               	movlw	1
  1924  0087  232D               	fcall	_setState
  1925                           
  1926                           ;main.c: 275:                     break;
  1927  0088  289C               	goto	l1969
  1928  0089                     l1967:
  1929  0089  0860               	movf	_currentState,w
  1930  008A  00C0               	movwf	??_main
  1931  008B  01C1               	clrf	??_main+1
  1932                           
  1933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1934                           ; Switch size 1, requested type "simple"
  1935                           ; Number of cases is 1, Range of values is 0 to 0
  1936                           ; switch strategies available:
  1937                           ; Name         Instructions Cycles
  1938                           ; simple_byte            4     3 (average)
  1939                           ; direct_byte            8     6 (fixed)
  1940                           ; jumptable            260     6 (fixed)
  1941                           ;	Chosen strategy is simple_byte
  1942  008C  0841               	movf	??_main+1,w
  1943  008D  3A00               	xorlw	0	; case 0
  1944  008E  1903               	skipnz
  1945  008F  2891               	goto	l2083
  1946  0090  289C               	goto	l1969
  1947  0091                     l2083:
  1948                           
  1949                           ; Switch size 1, requested type "simple"
  1950                           ; Number of cases is 3, Range of values is 1 to 3
  1951                           ; switch strategies available:
  1952                           ; Name         Instructions Cycles
  1953                           ; simple_byte           10     6 (average)
  1954                           ; direct_byte           15     9 (fixed)
  1955                           ; jumptable            263     9 (fixed)
  1956                           ;	Chosen strategy is simple_byte
  1957  0091  0840               	movf	??_main,w
  1958  0092  3A01               	xorlw	1	; case 1
  1959  0093  1903               	skipnz
  1960  0094  286F               	goto	l1953
  1961  0095  3A03               	xorlw	3	; case 2
  1962  0096  1903               	skipnz
  1963  0097  2872               	goto	l1955
  1964  0098  3A01               	xorlw	1	; case 3
  1965  0099  1903               	skipnz
  1966  009A  287D               	goto	l1959
  1967  009B  289C               	goto	l1969
  1968  009C                     l1969:
  1969                           
  1970                           ;main.c: 279:             doButtonAction = 0;
  1971  009C  01DA               	clrf	_doButtonAction	;volatile
  1972  009D  2960               	goto	l1989
  1973  009E                     l1971:
  1974                           
  1975                           ;main.c: 287:                 if(channel == channelBrightness)
  1976  009E  300A               	movlw	10
  1977  009F  065F               	xorwf	main@channel,w
  1978  00A0  1D03               	btfss	3,2
  1979  00A1  282C               	goto	l1923
  1980                           
  1981                           ;main.c: 288:                 {;main.c: 289:                     adcValuePosition = (adc
      +                          ValuePosition*m-b)/fixedPointFactor;
  1982  00A2  3000               	movlw	0
  1983  00A3  00A3               	movwf	___aldiv@divisor+3
  1984  00A4  3000               	movlw	0
  1985  00A5  00A2               	movwf	___aldiv@divisor+2
  1986  00A6  3003               	movlw	3
  1987  00A7  00A1               	movwf	___aldiv@divisor+1
  1988  00A8  30E8               	movlw	232
  1989  00A9  00A0               	movwf	___aldiv@divisor
  1990  00AA  0850               	movf	_b,w
  1991  00AB  00C0               	movwf	??_main
  1992  00AC  0851               	movf	_b+1,w
  1993  00AD  00C1               	movwf	??_main+1
  1994  00AE  0852               	movf	_b+2,w
  1995  00AF  00C2               	movwf	??_main+2
  1996  00B0  3000               	movlw	0
  1997  00B1  1BC2               	btfsc	??_main+2,7
  1998  00B2  30FF               	movlw	255
  1999  00B3  00C3               	movwf	??_main+3
  2000  00B4  084F               	movf	_adcValuePosition+3,w
  2001  00B5  00F3               	movwf	___lmul@multiplier+3
  2002  00B6  084E               	movf	_adcValuePosition+2,w
  2003  00B7  00F2               	movwf	___lmul@multiplier+2
  2004  00B8  084D               	movf	_adcValuePosition+1,w
  2005  00B9  00F1               	movwf	___lmul@multiplier+1
  2006  00BA  084C               	movf	_adcValuePosition,w
  2007  00BB  00F0               	movwf	___lmul@multiplier
  2008  00BC  085E               	movf	_m+3,w
  2009  00BD  00F7               	movwf	___lmul@multiplicand+3
  2010  00BE  085D               	movf	_m+2,w
  2011  00BF  00F6               	movwf	___lmul@multiplicand+2
  2012  00C0  085C               	movf	_m+1,w
  2013  00C1  00F5               	movwf	___lmul@multiplicand+1
  2014  00C2  085B               	movf	_m,w
  2015  00C3  00F4               	movwf	___lmul@multiplicand
  2016  00C4  24AB               	fcall	___lmul
  2017  00C5  0870               	movf	?___lmul,w
  2018  00C6  00C4               	movwf	??_main+4
  2019  00C7  0871               	movf	?___lmul+1,w
  2020  00C8  00C5               	movwf	??_main+5
  2021  00C9  0872               	movf	?___lmul+2,w
  2022  00CA  00C6               	movwf	??_main+6
  2023  00CB  0873               	movf	?___lmul+3,w
  2024  00CC  00C7               	movwf	??_main+7
  2025  00CD  0840               	movf	??_main,w
  2026  00CE  02C4               	subwf	??_main+4,f
  2027  00CF  0841               	movf	??_main+1,w
  2028  00D0  3BC5               	subwfb	??_main+5,f
  2029  00D1  0842               	movf	??_main+2,w
  2030  00D2  3BC6               	subwfb	??_main+6,f
  2031  00D3  0843               	movf	??_main+3,w
  2032  00D4  3BC7               	subwfb	??_main+7,f
  2033  00D5  0847               	movf	??_main+7,w
  2034  00D6  00A7               	movwf	___aldiv@dividend+3
  2035  00D7  0846               	movf	??_main+6,w
  2036  00D8  00A6               	movwf	___aldiv@dividend+2
  2037  00D9  0845               	movf	??_main+5,w
  2038  00DA  00A5               	movwf	___aldiv@dividend+1
  2039  00DB  0844               	movf	??_main+4,w
  2040  00DC  00A4               	movwf	___aldiv@dividend
  2041  00DD  22AC               	fcall	___aldiv
  2042  00DE  0823               	movf	?___aldiv+3,w
  2043  00DF  00CF               	movwf	_adcValuePosition+3
  2044  00E0  0822               	movf	?___aldiv+2,w
  2045  00E1  00CE               	movwf	_adcValuePosition+2
  2046  00E2  0821               	movf	?___aldiv+1,w
  2047  00E3  00CD               	movwf	_adcValuePosition+1
  2048  00E4  0820               	movf	?___aldiv,w
  2049  00E5  00CC               	movwf	_adcValuePosition
  2050                           
  2051                           ;main.c: 290:                     setLedsForPositioning(adcValuePosition);
  2052  00E6  084F               	movf	_adcValuePosition+3,w
  2053  00E7  00F3               	movwf	setLedsForPositioning@adcValue+3
  2054  00E8  084E               	movf	_adcValuePosition+2,w
  2055  00E9  00F2               	movwf	setLedsForPositioning@adcValue+2
  2056  00EA  084D               	movf	_adcValuePosition+1,w
  2057  00EB  00F1               	movwf	setLedsForPositioning@adcValue+1
  2058  00EC  084C               	movf	_adcValuePosition,w
  2059  00ED  00F0               	movwf	setLedsForPositioning@adcValue
  2060  00EE  2174               	fcall	_setLedsForPositioning
  2061  00EF  282C               	goto	l1923
  2062  00F0                     l1975:
  2063                           
  2064                           ;main.c: 295:                 if(doToggle)
  2065  00F0  0859               	movf	_doToggle,w
  2066  00F1  1903               	btfsc	3,2
  2067  00F2  282C               	goto	l1923
  2068  00F3  1003               	clrc
  2069  00F4  0022               	movlb	2	; select bank2
  2070  00F5  1C0E               	btfss	14,0	;volatile
  2071  00F6  1403               	setc
  2072  00F7  1C03               	btfss	3,0
  2073  00F8  28FC               	goto	u1500
  2074  00F9  0022               	movlb	2	; select bank2
  2075  00FA  140E               	bsf	14,0	;volatile
  2076  00FB  28FE               	goto	l364
  2077  00FC                     u1500:
  2078  00FC  0022               	movlb	2	; select bank2
  2079  00FD  100E               	bcf	14,0	;volatile
  2080  00FE                     l364:	
  2081                           ;main.c: 298:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2082                           
  2083  00FE  1003               	clrc
  2084  00FF  1C8E               	btfss	14,1	;volatile
  2085  0100  1403               	setc
  2086  0101  1C03               	btfss	3,0
  2087  0102  2906               	goto	u1520
  2088  0103  0022               	movlb	2	; select bank2
  2089  0104  148E               	bsf	14,1	;volatile
  2090  0105  2908               	goto	l366
  2091  0106                     u1520:
  2092  0106  0022               	movlb	2	; select bank2
  2093  0107  108E               	bcf	14,1	;volatile
  2094  0108                     l366:	
  2095                           ;main.c: 299:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2096                           
  2097  0108  1003               	clrc
  2098  0109  1D0E               	btfss	14,2	;volatile
  2099  010A  1403               	setc
  2100  010B  1C03               	btfss	3,0
  2101  010C  2910               	goto	u1540
  2102  010D  0022               	movlb	2	; select bank2
  2103  010E  150E               	bsf	14,2	;volatile
  2104  010F  2912               	goto	l368
  2105  0110                     u1540:
  2106  0110  0022               	movlb	2	; select bank2
  2107  0111  110E               	bcf	14,2	;volatile
  2108  0112                     l368:	
  2109                           ;main.c: 300:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2110                           
  2111  0112  1003               	clrc
  2112  0113  1D8E               	btfss	14,3	;volatile
  2113  0114  1403               	setc
  2114  0115  1C03               	btfss	3,0
  2115  0116  291A               	goto	u1560
  2116  0117  0022               	movlb	2	; select bank2
  2117  0118  158E               	bsf	14,3	;volatile
  2118  0119  291C               	goto	l370
  2119  011A                     u1560:
  2120  011A  0022               	movlb	2	; select bank2
  2121  011B  118E               	bcf	14,3	;volatile
  2122  011C                     l370:	
  2123                           ;main.c: 301:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2124                           
  2125  011C  1003               	clrc
  2126  011D  1E0E               	btfss	14,4	;volatile
  2127  011E  1403               	setc
  2128  011F  1C03               	btfss	3,0
  2129  0120  2924               	goto	u1580
  2130  0121  0022               	movlb	2	; select bank2
  2131  0122  160E               	bsf	14,4	;volatile
  2132  0123  2926               	goto	l1979
  2133  0124                     u1580:
  2134  0124  0022               	movlb	2	; select bank2
  2135  0125  120E               	bcf	14,4	;volatile
  2136  0126                     l1979:
  2137                           
  2138                           ;main.c: 302:                     doToggle = 0;
  2139  0126  0020               	movlb	0	; select bank0
  2140  0127  01D9               	clrf	_doToggle
  2141  0128  282C               	goto	l1923
  2142  0129                     l1981:
  2143                           
  2144                           ;main.c: 309:                 if(doToggle)
  2145  0129  0859               	movf	_doToggle,w
  2146  012A  1903               	btfsc	3,2
  2147  012B  282C               	goto	l1923
  2148  012C  1003               	clrc
  2149  012D  0022               	movlb	2	; select bank2
  2150  012E  1F0E               	btfss	14,6	;volatile
  2151  012F  1403               	setc
  2152  0130  1C03               	btfss	3,0
  2153  0131  2935               	goto	u1610
  2154  0132  0022               	movlb	2	; select bank2
  2155  0133  170E               	bsf	14,6	;volatile
  2156  0134  2937               	goto	l376
  2157  0135                     u1610:
  2158  0135  0022               	movlb	2	; select bank2
  2159  0136  130E               	bcf	14,6	;volatile
  2160  0137                     l376:	
  2161                           ;main.c: 312:                     do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2162                           
  2163  0137  1003               	clrc
  2164  0138  1F8E               	btfss	14,7	;volatile
  2165  0139  1403               	setc
  2166  013A  1C03               	btfss	3,0
  2167  013B  293F               	goto	u1630
  2168  013C  0022               	movlb	2	; select bank2
  2169  013D  178E               	bsf	14,7	;volatile
  2170  013E  2941               	goto	l378
  2171  013F                     u1630:
  2172  013F  0022               	movlb	2	; select bank2
  2173  0140  138E               	bcf	14,7	;volatile
  2174  0141                     l378:	
  2175                           ;main.c: 313:                     do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  2176                           
  2177  0141  1003               	clrc
  2178  0142  1E8D               	btfss	13,5	;volatile
  2179  0143  1403               	setc
  2180  0144  1C03               	btfss	3,0
  2181  0145  2949               	goto	u1650
  2182  0146  0022               	movlb	2	; select bank2
  2183  0147  168D               	bsf	13,5	;volatile
  2184  0148  294B               	goto	l380
  2185  0149                     u1650:
  2186  0149  0022               	movlb	2	; select bank2
  2187  014A  128D               	bcf	13,5	;volatile
  2188  014B                     l380:	
  2189                           ;main.c: 314:                     do { LATBbits.LATB6 = ~LATBbits.LATB6; } while(0);
  2190                           
  2191  014B  1003               	clrc
  2192  014C  1F0D               	btfss	13,6	;volatile
  2193  014D  1403               	setc
  2194  014E  1C03               	btfss	3,0
  2195  014F  2953               	goto	u1670
  2196  0150  0022               	movlb	2	; select bank2
  2197  0151  170D               	bsf	13,6	;volatile
  2198  0152  2955               	goto	l382
  2199  0153                     u1670:
  2200  0153  0022               	movlb	2	; select bank2
  2201  0154  130D               	bcf	13,6	;volatile
  2202  0155                     l382:	
  2203                           ;main.c: 315:                     do { LATBbits.LATB7 = ~LATBbits.LATB7; } while(0);
  2204                           
  2205  0155  1003               	clrc
  2206  0156  1F8D               	btfss	13,7	;volatile
  2207  0157  1403               	setc
  2208  0158  1C03               	btfss	3,0
  2209  0159  295D               	goto	u1690
  2210  015A  0022               	movlb	2	; select bank2
  2211  015B  178D               	bsf	13,7	;volatile
  2212  015C  2926               	goto	l1979
  2213  015D                     u1690:
  2214  015D  0022               	movlb	2	; select bank2
  2215  015E  138D               	bcf	13,7	;volatile
  2216  015F  2926               	goto	l1979
  2217  0160                     l1989:
  2218  0160  0860               	movf	_currentState,w
  2219  0161  00C0               	movwf	??_main
  2220  0162  01C1               	clrf	??_main+1
  2221                           
  2222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2223                           ; Switch size 1, requested type "simple"
  2224                           ; Number of cases is 1, Range of values is 0 to 0
  2225                           ; switch strategies available:
  2226                           ; Name         Instructions Cycles
  2227                           ; simple_byte            4     3 (average)
  2228                           ; direct_byte            8     6 (fixed)
  2229                           ; jumptable            260     6 (fixed)
  2230                           ;	Chosen strategy is simple_byte
  2231  0163  0841               	movf	??_main+1,w
  2232  0164  3A00               	xorlw	0	; case 0
  2233  0165  1903               	skipnz
  2234  0166  2968               	goto	l2085
  2235  0167  282C               	goto	l1923
  2236  0168                     l2085:
  2237                           
  2238                           ; Switch size 1, requested type "simple"
  2239                           ; Number of cases is 3, Range of values is 1 to 3
  2240                           ; switch strategies available:
  2241                           ; Name         Instructions Cycles
  2242                           ; simple_byte           10     6 (average)
  2243                           ; direct_byte           15     9 (fixed)
  2244                           ; jumptable            263     9 (fixed)
  2245                           ;	Chosen strategy is simple_byte
  2246  0168  0840               	movf	??_main,w
  2247  0169  3A01               	xorlw	1	; case 1
  2248  016A  1903               	skipnz
  2249  016B  289E               	goto	l1971
  2250  016C  3A03               	xorlw	3	; case 2
  2251  016D  1903               	skipnz
  2252  016E  28F0               	goto	l1975
  2253  016F  3A01               	xorlw	1	; case 3
  2254  0170  1903               	skipnz
  2255  0171  2929               	goto	l1981
  2256  0172  282C               	goto	l1923
  2257  0173  280C               	ljmp	start
  2258  0174                     __end_of_main:
  2259                           
  2260                           	psect	text1
  2261  04DA                     __ptext1:	
  2262 ;; *************** function _writeFlash *****************
  2263 ;; Defined at:
  2264 ;;		line 95 in file "main.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  wrBlockData    32    0[BANK0 ] unsigned short [16]
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      void 
  2271 ;; Registers used:
  2272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : 1F/0
  2275 ;;		On exit  : 1C/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMMON   BANK0   BANK1
  2278 ;;      Params:         0       0       0
  2279 ;;      Locals:         0      32       0
  2280 ;;      Temps:          1       0       0
  2281 ;;      Totals:         1      32       0
  2282 ;;Total ram usage:       33 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    6
  2285 ;; This function calls:
  2286 ;;		_FLASH_WriteBlock
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _writeFlash
  2294  04DA                     _writeFlash:
  2295                           
  2296                           ;main.c: 100:     uint16_t wrBlockData[16];;main.c: 102:     upperLimit = 0x11223344;
  2297                           
  2298                           ;incstack = 0
  2299                           ; Regs used in _writeFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2300  04DA  3011               	movlw	17
  2301  04DB  00E4               	movwf	_upperLimit+3
  2302  04DC  3022               	movlw	34
  2303  04DD  00E3               	movwf	_upperLimit+2
  2304  04DE  3033               	movlw	51
  2305  04DF  00E2               	movwf	_upperLimit+1
  2306  04E0  3044               	movlw	68
  2307  04E1  00E1               	movwf	_upperLimit
  2308                           
  2309                           ;main.c: 103:     lowerLimit = 0x11DDEEFF;
  2310  04E2  3011               	movlw	17
  2311  04E3  00CB               	movwf	_lowerLimit+3
  2312  04E4  30DD               	movlw	221
  2313  04E5  00CA               	movwf	_lowerLimit+2
  2314  04E6  30EE               	movlw	238
  2315  04E7  00C9               	movwf	_lowerLimit+1
  2316  04E8  30FF               	movlw	255
  2317  04E9  00C8               	movwf	_lowerLimit
  2318                           
  2319                           ;main.c: 106:     wrBlockData[16 -1] = (uint16_t)(upperLimit);
  2320  04EA  0862               	movf	_upperLimit+1,w
  2321  04EB  00BF               	movwf	writeFlash@wrBlockData+31
  2322  04EC  0861               	movf	_upperLimit,w
  2323  04ED  00BE               	movwf	writeFlash@wrBlockData+30
  2324                           
  2325                           ;main.c: 107:     wrBlockData[16 -2] = (uint16_t)(upperLimit >> 16);
  2326  04EE  0864               	movf	_upperLimit+3,w
  2327  04EF  00BD               	movwf	writeFlash@wrBlockData+29
  2328  04F0  0863               	movf	_upperLimit+2,w
  2329  04F1  00BC               	movwf	writeFlash@wrBlockData+28
  2330                           
  2331                           ;main.c: 108:     wrBlockData[16 -3] = (uint16_t)(lowerLimit);
  2332  04F2  0849               	movf	_lowerLimit+1,w
  2333  04F3  00BB               	movwf	writeFlash@wrBlockData+27
  2334  04F4  0848               	movf	_lowerLimit,w
  2335  04F5  00BA               	movwf	writeFlash@wrBlockData+26
  2336                           
  2337                           ;main.c: 109:     wrBlockData[16 -4] = (uint16_t)(lowerLimit >> 16);
  2338  04F6  084B               	movf	_lowerLimit+3,w
  2339  04F7  00B9               	movwf	writeFlash@wrBlockData+25
  2340  04F8  084A               	movf	_lowerLimit+2,w
  2341  04F9  00B8               	movwf	writeFlash@wrBlockData+24
  2342                           
  2343                           ;main.c: 112:     FLASH_WriteBlock((uint16_t)( 0x800 -16), (uint16_t*)wrBlockData);
  2344  04FA  30F0               	movlw	240
  2345  04FB  00F3               	movwf	FLASH_WriteBlock@writeAddr
  2346  04FC  3007               	movlw	7
  2347  04FD  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  2348  04FE  3020               	movlw	(low (writeFlash@wrBlockData| 0))& (0+255)
  2349  04FF  00FD               	movwf	??_writeFlash
  2350  0500  087D               	movf	??_writeFlash,w
  2351  0501  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  2352  0502  2405               	fcall	_FLASH_WriteBlock
  2353  0503  0008               	return
  2354  0504                     __end_of_writeFlash:
  2355                           
  2356                           	psect	text2
  2357  0405                     __ptext2:	
  2358 ;; *************** function _FLASH_WriteBlock *****************
  2359 ;; Defined at:
  2360 ;;		line 94 in file "mcc_generated_files/memory.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  writeAddr       2    3[COMMON] unsigned short 
  2363 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  2364 ;;		 -> writeFlash@wrBlockData(32), 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  blockStartAd    2    9[COMMON] unsigned short 
  2367 ;;  i               1   12[COMMON] unsigned char 
  2368 ;;  GIEBitValue     1   11[COMMON] unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  1    wreg      char 
  2371 ;; Registers used:
  2372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2373 ;; Tracked objects:
  2374 ;;		On entry : 1F/0
  2375 ;;		On exit  : 1C/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMMON   BANK0   BANK1
  2378 ;;      Params:         3       0       0
  2379 ;;      Locals:         4       0       0
  2380 ;;      Temps:          3       0       0
  2381 ;;      Totals:        10       0       0
  2382 ;;Total ram usage:       10 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    5
  2385 ;; This function calls:
  2386 ;;		_FLASH_EraseBlock
  2387 ;; This function is called by:
  2388 ;;		_writeFlash
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           
  2393                           ;psect for function _FLASH_WriteBlock
  2394  0405                     _FLASH_WriteBlock:
  2395                           
  2396                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x800 -1) ^ (16 -1)));
  2397                           
  2398                           ;incstack = 0
  2399                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2400  0405  30F0               	movlw	240
  2401  0406  0573               	andwf	FLASH_WriteBlock@writeAddr,w
  2402  0407  00F9               	movwf	FLASH_WriteBlock@blockStartAddr
  2403  0408  3007               	movlw	7
  2404  0409  0574               	andwf	FLASH_WriteBlock@writeAddr+1,w
  2405  040A  00FA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  2406                           
  2407                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  2408  040B  3000               	movlw	0
  2409  040C  1B8B               	btfsc	11,7	;volatile
  2410  040D  3001               	movlw	1
  2411  040E  00FB               	movwf	FLASH_WriteBlock@GIEBitValue
  2412                           
  2413                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  2414  040F  087A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  2415  0410  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  2416  0411  1D03               	skipz
  2417  0412  2C15               	goto	u885
  2418  0413  0879               	movf	FLASH_WriteBlock@blockStartAddr,w
  2419  0414  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  2420  0415                     u885:
  2421  0415  1D03               	btfss	3,2
  2422  0416  0008               	return
  2423                           
  2424                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  2425                           
  2426                           ;mcc_generated_files/memory.c: 104:     }
  2427  0417  138B               	bcf	11,7	;volatile
  2428                           
  2429                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  2430  0418  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2431  0419  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2432  041A  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2433  041B  00F0               	movwf	FLASH_EraseBlock@startAddr
  2434  041C  252A               	fcall	_FLASH_EraseBlock
  2435                           
  2436                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  2437  041D  1315               	bcf	21,6	;volatile
  2438                           
  2439                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  2440  041E  1515               	bsf	21,2	;volatile
  2441                           
  2442                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  2443  041F  1695               	bsf	21,5	;volatile
  2444                           
  2445                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<16; i++)
  2446  0420  01FC               	clrf	FLASH_WriteBlock@i
  2447  0421                     l1691:
  2448                           
  2449                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  2450  0421  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2451  0422  0023               	movlb	3	; select bank3
  2452  0423  0091               	movwf	17	;volatile
  2453                           
  2454                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  2455  0424  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2456  0425  0092               	movwf	18	;volatile
  2457                           
  2458                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  2459  0426  357C               	lslf	FLASH_WriteBlock@i,w
  2460  0427  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2461  0428  00F6               	movwf	??_FLASH_WriteBlock
  2462  0429  0876               	movf	??_FLASH_WriteBlock,w
  2463  042A  0086               	movwf	6
  2464  042B  0187               	clrf	7
  2465  042C  0801               	movf	1,w
  2466  042D  0093               	movwf	19	;volatile
  2467                           
  2468                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  2469  042E  357C               	lslf	FLASH_WriteBlock@i,w
  2470  042F  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2471  0430  00F6               	movwf	??_FLASH_WriteBlock
  2472  0431  0876               	movf	??_FLASH_WriteBlock,w
  2473  0432  0086               	movwf	6
  2474  0433  0187               	clrf	7
  2475  0434  3F40               	moviw [0]fsr1
  2476  0435  00F7               	movwf	??_FLASH_WriteBlock+1
  2477  0436  3F41               	moviw [1]fsr1
  2478  0437  00F8               	movwf	??_FLASH_WriteBlock+2
  2479  0438  0878               	movf	??_FLASH_WriteBlock+2,w
  2480  0439  0094               	movwf	20	;volatile
  2481                           
  2482                           ;mcc_generated_files/memory.c: 127:         if(i == (16 -1))
  2483  043A  300F               	movlw	15
  2484  043B  067C               	xorwf	FLASH_WriteBlock@i,w
  2485  043C  1903               	btfsc	3,2
  2486                           
  2487                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  2488  043D  1295               	bcf	21,5	;volatile
  2489                           
  2490                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  2491  043E  3055               	movlw	85
  2492  043F  0096               	movwf	22	;volsfr
  2493                           
  2494                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  2495  0440  30AA               	movlw	170
  2496  0441  0096               	movwf	22	;volsfr
  2497                           
  2498                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  2499  0442  1495               	bsf	21,1	;volatile
  2500                           
  2501                           ;mcc_generated_files/memory.c: 136:         __nop();
  2502  0443  0000               	nop
  2503                           
  2504                           ;mcc_generated_files/memory.c: 137:         __nop();
  2505  0444  0000               	nop
  2506                           
  2507                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  2508  0445  3001               	movlw	1
  2509  0446  07F3               	addwf	FLASH_WriteBlock@writeAddr,f
  2510  0447  3000               	movlw	0
  2511  0448  3DF4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  2512                           
  2513                           ;mcc_generated_files/memory.c: 140:     }
  2514  0449  3001               	movlw	1
  2515  044A  00F6               	movwf	??_FLASH_WriteBlock
  2516  044B  0876               	movf	??_FLASH_WriteBlock,w
  2517  044C  07FC               	addwf	FLASH_WriteBlock@i,f
  2518  044D  3010               	movlw	16
  2519  044E  027C               	subwf	FLASH_WriteBlock@i,w
  2520  044F  1C03               	skipc
  2521  0450  2C21               	goto	l1691
  2522                           
  2523                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  2524  0451  0023               	movlb	3	; select bank3
  2525  0452  1115               	bcf	21,2	;volatile
  2526                           
  2527                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  2528  0453  0C7B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  2529  0454  1C03               	skipc
  2530  0455  138B               	bcf	11,7	;volatile
  2531  0456  1803               	skipnc
  2532  0457  178B               	bsf	11,7	;volatile
  2533  0458  0008               	return
  2534  0459                     __end_of_FLASH_WriteBlock:
  2535                           
  2536                           	psect	text3
  2537  052A                     __ptext3:	
  2538 ;; *************** function _FLASH_EraseBlock *****************
  2539 ;; Defined at:
  2540 ;;		line 148 in file "mcc_generated_files/memory.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  startAddr       2    0[COMMON] unsigned short 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2, status,0
  2549 ;; Tracked objects:
  2550 ;;		On entry : 1F/0
  2551 ;;		On exit  : 1F/3
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1
  2554 ;;      Params:         2       0       0
  2555 ;;      Locals:         1       0       0
  2556 ;;      Temps:          0       0       0
  2557 ;;      Totals:         3       0       0
  2558 ;;Total ram usage:        3 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    4
  2561 ;; This function calls:
  2562 ;;		Nothing
  2563 ;; This function is called by:
  2564 ;;		_FLASH_WriteBlock
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           
  2569                           ;psect for function _FLASH_EraseBlock
  2570  052A                     _FLASH_EraseBlock:
  2571                           
  2572                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  2573                           
  2574                           ;incstack = 0
  2575                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  2576  052A  3000               	movlw	0
  2577  052B  1B8B               	btfsc	11,7	;volatile
  2578  052C  3001               	movlw	1
  2579  052D  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  2580                           
  2581                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  2582  052E  138B               	bcf	11,7	;volatile
  2583                           
  2584                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  2585  052F  0870               	movf	FLASH_EraseBlock@startAddr,w
  2586  0530  0023               	movlb	3	; select bank3
  2587  0531  0091               	movwf	17	;volatile
  2588                           
  2589                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  2590  0532  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  2591  0533  0092               	movwf	18	;volatile
  2592                           
  2593                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  2594  0534  1315               	bcf	21,6	;volatile
  2595                           
  2596                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  2597  0535  1615               	bsf	21,4	;volatile
  2598                           
  2599                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  2600  0536  1515               	bsf	21,2	;volatile
  2601                           
  2602                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  2603  0537  3055               	movlw	85
  2604  0538  0096               	movwf	22	;volsfr
  2605                           
  2606                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  2607  0539  30AA               	movlw	170
  2608  053A  0096               	movwf	22	;volsfr
  2609                           
  2610                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  2611  053B  1495               	bsf	21,1	;volatile
  2612                           
  2613                           ;mcc_generated_files/memory.c: 168:     __nop();
  2614  053C  0000               	nop
  2615                           
  2616                           ;mcc_generated_files/memory.c: 169:     __nop();
  2617  053D  0000               	nop
  2618                           
  2619                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  2620  053E  0023               	movlb	3	; select bank3
  2621  053F  1115               	bcf	21,2	;volatile
  2622                           
  2623                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  2624  0540  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  2625  0541  1C03               	skipc
  2626  0542  138B               	bcf	11,7	;volatile
  2627  0543  1803               	skipnc
  2628  0544  178B               	bsf	11,7	;volatile
  2629  0545  0008               	return
  2630  0546                     __end_of_FLASH_EraseBlock:
  2631                           
  2632                           	psect	text4
  2633  032D                     __ptext4:	
  2634 ;; *************** function _setState *****************
  2635 ;; Defined at:
  2636 ;;		line 134 in file "main.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  newState        1    wreg     enum E2406
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  newState        1    4[BANK0 ] enum E2406
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 1C/0
  2647 ;;		On exit  : 1F/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1
  2650 ;;      Params:         0       0       0
  2651 ;;      Locals:         0       1       0
  2652 ;;      Temps:          0       4       0
  2653 ;;      Totals:         0       5       0
  2654 ;;Total ram usage:        5 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    6
  2657 ;; This function calls:
  2658 ;;		___lldiv
  2659 ;;		___tmul
  2660 ;;		_readFlash
  2661 ;; This function is called by:
  2662 ;;		_main
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           
  2667                           ;psect for function _setState
  2668  032D                     _setState:
  2669                           
  2670                           ;incstack = 0
  2671                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2672                           ;setState@newState stored from wreg
  2673  032D  0020               	movlb	0	; select bank0
  2674  032E  00A4               	movwf	setState@newState
  2675                           
  2676                           ;main.c: 134: void setState(state_t newState);main.c: 135: {;main.c: 136:     if(newStat
      +                          e == currentState)
  2677  032F  0824               	movf	setState@newState,w
  2678  0330  0660               	xorwf	_currentState,w
  2679  0331  1903               	btfsc	3,2
  2680  0332  0008               	return
  2681                           
  2682                           ;main.c: 142:     do { LATCbits.LATC0 = 0; } while(0);
  2683  0333  0022               	movlb	2	; select bank2
  2684  0334  100E               	bcf	14,0	;volatile
  2685                           
  2686                           ;main.c: 143:     do { LATCbits.LATC1 = 0; } while(0);
  2687  0335  108E               	bcf	14,1	;volatile
  2688                           
  2689                           ;main.c: 144:     do { LATCbits.LATC2 = 0; } while(0);
  2690  0336  110E               	bcf	14,2	;volatile
  2691                           
  2692                           ;main.c: 145:     do { LATCbits.LATC3 = 0; } while(0);
  2693  0337  118E               	bcf	14,3	;volatile
  2694                           
  2695                           ;main.c: 146:     do { LATCbits.LATC4 = 0; } while(0);
  2696  0338  120E               	bcf	14,4	;volatile
  2697                           
  2698                           ;main.c: 147:     do { LATCbits.LATC5 = 0; } while(0);
  2699  0339  128E               	bcf	14,5	;volatile
  2700                           
  2701                           ;main.c: 148:     do { LATCbits.LATC6 = 0; } while(0);
  2702  033A  130E               	bcf	14,6	;volatile
  2703                           
  2704                           ;main.c: 149:     do { LATCbits.LATC7 = 0; } while(0);
  2705  033B  138E               	bcf	14,7	;volatile
  2706                           
  2707                           ;main.c: 150:     do { LATBbits.LATB5 = 0; } while(0);
  2708  033C  128D               	bcf	13,5	;volatile
  2709                           
  2710                           ;main.c: 151:     do { LATBbits.LATB6 = 0; } while(0);
  2711  033D  130D               	bcf	13,6	;volatile
  2712                           
  2713                           ;main.c: 152:     do { LATBbits.LATB7 = 0; } while(0);
  2714  033E  138D               	bcf	13,7	;volatile
  2715  033F  2B80               	goto	l1801
  2716  0340                     l1797:
  2717                           
  2718                           ;main.c: 161:             readFlash();
  2719  0340  239C               	fcall	_readFlash
  2720                           
  2721                           ;main.c: 170:             m = (1023*fixedPointFactor)/(upperLimit - lowerLimit);
  2722  0341  0848               	movf	_lowerLimit,w
  2723  0342  0261               	subwf	_upperLimit,w
  2724  0343  00A0               	movwf	??_setState
  2725  0344  0849               	movf	_lowerLimit+1,w
  2726  0345  3B62               	subwfb	_upperLimit+1,w
  2727  0346  00A1               	movwf	??_setState+1
  2728  0347  084A               	movf	_lowerLimit+2,w
  2729  0348  3B63               	subwfb	_upperLimit+2,w
  2730  0349  00A2               	movwf	??_setState+2
  2731  034A  084B               	movf	_lowerLimit+3,w
  2732  034B  3B64               	subwfb	_upperLimit+3,w
  2733  034C  00A3               	movwf	??_setState+3
  2734  034D  0823               	movf	??_setState+3,w
  2735  034E  00F3               	movwf	___lldiv@divisor+3
  2736  034F  0822               	movf	??_setState+2,w
  2737  0350  00F2               	movwf	___lldiv@divisor+2
  2738  0351  0821               	movf	??_setState+1,w
  2739  0352  00F1               	movwf	___lldiv@divisor+1
  2740  0353  0820               	movf	??_setState,w
  2741  0354  00F0               	movwf	___lldiv@divisor
  2742  0355  3000               	movlw	0
  2743  0356  00F7               	movwf	___lldiv@dividend+3
  2744  0357  300F               	movlw	15
  2745  0358  00F6               	movwf	___lldiv@dividend+2
  2746  0359  309C               	movlw	156
  2747  035A  00F5               	movwf	___lldiv@dividend+1
  2748  035B  3018               	movlw	24
  2749  035C  00F4               	movwf	___lldiv@dividend
  2750  035D  2459               	fcall	___lldiv
  2751  035E  0873               	movf	?___lldiv+3,w
  2752  035F  00DE               	movwf	_m+3
  2753  0360  0872               	movf	?___lldiv+2,w
  2754  0361  00DD               	movwf	_m+2
  2755  0362  0871               	movf	?___lldiv+1,w
  2756  0363  00DC               	movwf	_m+1
  2757  0364  0870               	movf	?___lldiv,w
  2758  0365  00DB               	movwf	_m
  2759                           
  2760                           ;main.c: 171:             b = lowerLimit*m;
  2761  0366  085B               	movf	_m,w
  2762  0367  00F0               	movwf	___tmul@multiplier
  2763  0368  085C               	movf	_m+1,w
  2764  0369  00F1               	movwf	___tmul@multiplier+1
  2765  036A  085D               	movf	_m+2,w
  2766  036B  00F2               	movwf	___tmul@multiplier+2
  2767  036C  0848               	movf	_lowerLimit,w
  2768  036D  00F3               	movwf	___tmul@multiplicand
  2769  036E  0849               	movf	_lowerLimit+1,w
  2770  036F  00F4               	movwf	___tmul@multiplicand+1
  2771  0370  084A               	movf	_lowerLimit+2,w
  2772  0371  00F5               	movwf	___tmul@multiplicand+2
  2773  0372  2504               	fcall	___tmul
  2774  0373  0870               	movf	?___tmul,w
  2775  0374  00D0               	movwf	_b
  2776  0375  0871               	movf	?___tmul+1,w
  2777  0376  00D1               	movwf	_b+1
  2778  0377  0872               	movf	?___tmul+2,w
  2779  0378  00D2               	movwf	_b+2
  2780                           
  2781                           ;main.c: 172:             break;
  2782  0379  2B94               	goto	l1803
  2783  037A                     l322:	
  2784                           ;main.c: 176:             do { LATCbits.LATC0 = 1; } while(0);
  2785                           
  2786  037A  0022               	movlb	2	; select bank2
  2787  037B  140E               	bsf	14,0	;volatile
  2788  037C  2B94               	goto	l1803
  2789  037D                     l325:	
  2790                           ;main.c: 180:             do { LATBbits.LATB7 = 1; } while(0);
  2791                           
  2792  037D  0022               	movlb	2	; select bank2
  2793  037E  178D               	bsf	13,7	;volatile
  2794  037F  2B94               	goto	l1803
  2795  0380                     l1801:
  2796  0380  0020               	movlb	0	; select bank0
  2797  0381  0824               	movf	setState@newState,w
  2798  0382  00A0               	movwf	??_setState
  2799  0383  01A1               	clrf	??_setState+1
  2800                           
  2801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2802                           ; Switch size 1, requested type "simple"
  2803                           ; Number of cases is 1, Range of values is 0 to 0
  2804                           ; switch strategies available:
  2805                           ; Name         Instructions Cycles
  2806                           ; simple_byte            4     3 (average)
  2807                           ; direct_byte            8     6 (fixed)
  2808                           ; jumptable            260     6 (fixed)
  2809                           ;	Chosen strategy is simple_byte
  2810  0384  0821               	movf	??_setState+1,w
  2811  0385  3A00               	xorlw	0	; case 0
  2812  0386  1903               	skipnz
  2813  0387  2B89               	goto	l2087
  2814  0388  2B94               	goto	l1803
  2815  0389                     l2087:
  2816                           
  2817                           ; Switch size 1, requested type "simple"
  2818                           ; Number of cases is 3, Range of values is 1 to 3
  2819                           ; switch strategies available:
  2820                           ; Name         Instructions Cycles
  2821                           ; simple_byte           10     6 (average)
  2822                           ; direct_byte           15     9 (fixed)
  2823                           ; jumptable            263     9 (fixed)
  2824                           ;	Chosen strategy is simple_byte
  2825  0389  0820               	movf	??_setState,w
  2826  038A  3A01               	xorlw	1	; case 1
  2827  038B  1903               	skipnz
  2828  038C  2B40               	goto	l1797
  2829  038D  3A03               	xorlw	3	; case 2
  2830  038E  1903               	skipnz
  2831  038F  2B7A               	goto	l322
  2832  0390  3A01               	xorlw	1	; case 3
  2833  0391  1903               	skipnz
  2834  0392  2B7D               	goto	l325
  2835  0393  2B94               	goto	l1803
  2836  0394                     l1803:
  2837                           
  2838                           ;main.c: 184:     msTick = 0;
  2839  0394  0020               	movlb	0	; select bank0
  2840  0395  01D5               	clrf	_msTick	;volatile
  2841  0396  01D6               	clrf	_msTick+1	;volatile
  2842                           
  2843                           ;main.c: 186:     currentState = newState;
  2844  0397  0824               	movf	setState@newState,w
  2845  0398  00A0               	movwf	??_setState
  2846  0399  0820               	movf	??_setState,w
  2847  039A  00E0               	movwf	_currentState
  2848  039B  0008               	return
  2849  039C                     __end_of_setState:
  2850                           
  2851                           	psect	text5
  2852  039C                     __ptext5:	
  2853 ;; *************** function _readFlash *****************
  2854 ;; Defined at:
  2855 ;;		line 82 in file "main.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0, pclath, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 1C/0
  2866 ;;		On exit  : 1F/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1
  2869 ;;      Params:         0       0       0
  2870 ;;      Locals:         0       0       0
  2871 ;;      Temps:          4       0       0
  2872 ;;      Totals:         4       0       0
  2873 ;;Total ram usage:        4 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    5
  2876 ;; This function calls:
  2877 ;;		_FLASH_ReadWord
  2878 ;; This function is called by:
  2879 ;;		_setState
  2880 ;;		_main
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           
  2885                           ;psect for function _readFlash
  2886  039C                     _readFlash:
  2887                           
  2888                           ;main.c: 85:     lowerLimit = 0;
  2889                           
  2890                           ;incstack = 0
  2891                           ; Regs used in _readFlash: [wreg+status,2+status,0+pclath+cstack]
  2892  039C  3000               	movlw	0
  2893  039D  0020               	movlb	0	; select bank0
  2894  039E  00CB               	movwf	_lowerLimit+3
  2895  039F  3000               	movlw	0
  2896  03A0  00CA               	movwf	_lowerLimit+2
  2897  03A1  3000               	movlw	0
  2898  03A2  00C9               	movwf	_lowerLimit+1
  2899  03A3  3000               	movlw	0
  2900  03A4  00C8               	movwf	_lowerLimit
  2901                           
  2902                           ;main.c: 86:     lowerLimit += (uint32_t)FLASH_ReadWord(0x800 -4) << 16;
  2903  03A5  30FC               	movlw	252
  2904  03A6  00F0               	movwf	FLASH_ReadWord@flashAddr
  2905  03A7  3007               	movlw	7
  2906  03A8  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2907  03A9  2546               	fcall	_FLASH_ReadWord
  2908  03AA  0870               	movf	?_FLASH_ReadWord,w
  2909  03AB  00F3               	movwf	??_readFlash
  2910  03AC  0871               	movf	?_FLASH_ReadWord+1,w
  2911  03AD  00F4               	movwf	??_readFlash+1
  2912  03AE  01F5               	clrf	??_readFlash+2
  2913  03AF  01F6               	clrf	??_readFlash+3
  2914  03B0  3010               	movlw	16
  2915  03B1                     u915:
  2916  03B1  35F3               	lslf	??_readFlash,f
  2917  03B2  0DF4               	rlf	??_readFlash+1,f
  2918  03B3  0DF5               	rlf	??_readFlash+2,f
  2919  03B4  0DF6               	rlf	??_readFlash+3,f
  2920  03B5  0B89               	decfsz	9,f
  2921  03B6  2BB1               	goto	u915
  2922  03B7  0873               	movf	??_readFlash,w
  2923  03B8  0020               	movlb	0	; select bank0
  2924  03B9  07C8               	addwf	_lowerLimit,f
  2925  03BA  0874               	movf	??_readFlash+1,w
  2926  03BB  3DC9               	addwfc	_lowerLimit+1,f
  2927  03BC  0875               	movf	??_readFlash+2,w
  2928  03BD  3DCA               	addwfc	_lowerLimit+2,f
  2929  03BE  0876               	movf	??_readFlash+3,w
  2930  03BF  3DCB               	addwfc	_lowerLimit+3,f
  2931                           
  2932                           ;main.c: 87:     lowerLimit |= (uint32_t)FLASH_ReadWord(0x800 -3);
  2933  03C0  30FD               	movlw	253
  2934  03C1  00F0               	movwf	FLASH_ReadWord@flashAddr
  2935  03C2  3007               	movlw	7
  2936  03C3  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2937  03C4  2546               	fcall	_FLASH_ReadWord
  2938  03C5  0870               	movf	?_FLASH_ReadWord,w
  2939  03C6  00F3               	movwf	??_readFlash
  2940  03C7  0871               	movf	?_FLASH_ReadWord+1,w
  2941  03C8  00F4               	movwf	??_readFlash+1
  2942  03C9  01F5               	clrf	??_readFlash+2
  2943  03CA  01F6               	clrf	??_readFlash+3
  2944  03CB  0873               	movf	??_readFlash,w
  2945  03CC  0020               	movlb	0	; select bank0
  2946  03CD  04C8               	iorwf	_lowerLimit,f
  2947  03CE  0874               	movf	??_readFlash+1,w
  2948  03CF  04C9               	iorwf	_lowerLimit+1,f
  2949  03D0  0875               	movf	??_readFlash+2,w
  2950  03D1  04CA               	iorwf	_lowerLimit+2,f
  2951  03D2  0876               	movf	??_readFlash+3,w
  2952  03D3  04CB               	iorwf	_lowerLimit+3,f
  2953                           
  2954                           ;main.c: 90:     upperLimit = 0;
  2955  03D4  3000               	movlw	0
  2956  03D5  00E4               	movwf	_upperLimit+3
  2957  03D6  3000               	movlw	0
  2958  03D7  00E3               	movwf	_upperLimit+2
  2959  03D8  3000               	movlw	0
  2960  03D9  00E2               	movwf	_upperLimit+1
  2961  03DA  3000               	movlw	0
  2962  03DB  00E1               	movwf	_upperLimit
  2963                           
  2964                           ;main.c: 91:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -2) << 16;
  2965  03DC  30FE               	movlw	254
  2966  03DD  00F0               	movwf	FLASH_ReadWord@flashAddr
  2967  03DE  3007               	movlw	7
  2968  03DF  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2969  03E0  2546               	fcall	_FLASH_ReadWord
  2970  03E1  0870               	movf	?_FLASH_ReadWord,w
  2971  03E2  00F3               	movwf	??_readFlash
  2972  03E3  0871               	movf	?_FLASH_ReadWord+1,w
  2973  03E4  00F4               	movwf	??_readFlash+1
  2974  03E5  01F5               	clrf	??_readFlash+2
  2975  03E6  01F6               	clrf	??_readFlash+3
  2976  03E7  3010               	movlw	16
  2977  03E8                     u925:
  2978  03E8  35F3               	lslf	??_readFlash,f
  2979  03E9  0DF4               	rlf	??_readFlash+1,f
  2980  03EA  0DF5               	rlf	??_readFlash+2,f
  2981  03EB  0DF6               	rlf	??_readFlash+3,f
  2982  03EC  0B89               	decfsz	9,f
  2983  03ED  2BE8               	goto	u925
  2984  03EE  0873               	movf	??_readFlash,w
  2985  03EF  0020               	movlb	0	; select bank0
  2986  03F0  07E1               	addwf	_upperLimit,f
  2987  03F1  0874               	movf	??_readFlash+1,w
  2988  03F2  3DE2               	addwfc	_upperLimit+1,f
  2989  03F3  0875               	movf	??_readFlash+2,w
  2990  03F4  3DE3               	addwfc	_upperLimit+2,f
  2991  03F5  0876               	movf	??_readFlash+3,w
  2992  03F6  3DE4               	addwfc	_upperLimit+3,f
  2993                           
  2994                           ;main.c: 92:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -1) ;
  2995  03F7  30FF               	movlw	255
  2996  03F8  00F0               	movwf	FLASH_ReadWord@flashAddr
  2997  03F9  3007               	movlw	7
  2998  03FA  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2999  03FB  2546               	fcall	_FLASH_ReadWord
  3000  03FC  0870               	movf	?_FLASH_ReadWord,w
  3001  03FD  0020               	movlb	0	; select bank0
  3002  03FE  07E1               	addwf	_upperLimit,f
  3003  03FF  0871               	movf	?_FLASH_ReadWord+1,w
  3004  0400  3DE2               	addwfc	_upperLimit+1,f
  3005  0401  3000               	movlw	0
  3006  0402  3DE3               	addwfc	_upperLimit+2,f
  3007  0403  3DE4               	addwfc	_upperLimit+3,f
  3008  0404  0008               	return
  3009  0405                     __end_of_readFlash:
  3010                           
  3011                           	psect	text6
  3012  0546                     __ptext6:	
  3013 ;; *************** function _FLASH_ReadWord *****************
  3014 ;; Defined at:
  3015 ;;		line 58 in file "mcc_generated_files/memory.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  flashAddr       2    0[COMMON] unsigned short 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  2    0[COMMON] unsigned short 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0
  3024 ;; Tracked objects:
  3025 ;;		On entry : 1F/0
  3026 ;;		On exit  : 1F/3
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1
  3029 ;;      Params:         2       0       0
  3030 ;;      Locals:         1       0       0
  3031 ;;      Temps:          0       0       0
  3032 ;;      Totals:         3       0       0
  3033 ;;Total ram usage:        3 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    4
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_readFlash
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           
  3044                           ;psect for function _FLASH_ReadWord
  3045  0546                     _FLASH_ReadWord:
  3046                           
  3047                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  3048                           
  3049                           ;incstack = 0
  3050                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3051  0546  3000               	movlw	0
  3052  0547  1B8B               	btfsc	11,7	;volatile
  3053  0548  3001               	movlw	1
  3054  0549  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  3055                           
  3056                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  3057  054A  138B               	bcf	11,7	;volatile
  3058                           
  3059                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  3060  054B  0870               	movf	FLASH_ReadWord@flashAddr,w
  3061  054C  0023               	movlb	3	; select bank3
  3062  054D  0091               	movwf	17	;volatile
  3063                           
  3064                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  3065  054E  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  3066  054F  0092               	movwf	18	;volatile
  3067                           
  3068                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  3069  0550  1315               	bcf	21,6	;volatile
  3070                           
  3071                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  3072  0551  1415               	bsf	21,0	;volatile
  3073                           
  3074                           ;mcc_generated_files/memory.c: 68:     __nop();
  3075  0552  0000               	nop
  3076                           
  3077                           ;mcc_generated_files/memory.c: 69:     __nop();
  3078  0553  0000               	nop
  3079                           
  3080                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  3081  0554  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  3082  0555  1C03               	skipc
  3083  0556  138B               	bcf	11,7	;volatile
  3084  0557  1803               	skipnc
  3085  0558  178B               	bsf	11,7	;volatile
  3086                           
  3087                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  3088  0559  0023               	movlb	3	; select bank3
  3089  055A  0814               	movf	20,w	;volatile
  3090  055B  00F1               	movwf	?_FLASH_ReadWord+1
  3091  055C  0813               	movf	19,w	;volatile
  3092  055D  00F0               	movwf	?_FLASH_ReadWord
  3093  055E  0008               	return
  3094  055F                     __end_of_FLASH_ReadWord:
  3095                           
  3096                           	psect	text7
  3097  0504                     __ptext7:	
  3098 ;; *************** function ___tmul *****************
  3099 ;; Defined at:
  3100 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul24.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;  multiplier      3    0[COMMON] unsigned um
  3103 ;;  multiplicand    3    3[COMMON] unsigned um
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  product         3    6[COMMON] unsigned um
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  3    0[COMMON] unsigned um
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, status,0
  3110 ;; Tracked objects:
  3111 ;;		On entry : 1F/0
  3112 ;;		On exit  : 1F/0
  3113 ;;		Unchanged: 1F/0
  3114 ;; Data sizes:     COMMON   BANK0   BANK1
  3115 ;;      Params:         6       0       0
  3116 ;;      Locals:         3       0       0
  3117 ;;      Temps:          0       0       0
  3118 ;;      Totals:         9       0       0
  3119 ;;Total ram usage:        9 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    4
  3122 ;; This function calls:
  3123 ;;		Nothing
  3124 ;; This function is called by:
  3125 ;;		_setState
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           
  3130                           ;psect for function ___tmul
  3131  0504                     ___tmul:
  3132                           
  3133                           ;incstack = 0
  3134                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  3135  0504  3000               	movlw	0
  3136  0505  00F6               	movwf	___tmul@product
  3137  0506  3000               	movlw	0
  3138  0507  00F7               	movwf	___tmul@product+1
  3139  0508  3000               	movlw	0
  3140  0509  00F8               	movwf	___tmul@product+2
  3141  050A                     l1729:
  3142  050A  1C70               	btfss	___tmul@multiplier,0
  3143  050B  2D12               	goto	l1733
  3144  050C  0873               	movf	___tmul@multiplicand,w
  3145  050D  07F6               	addwf	___tmul@product,f
  3146  050E  0874               	movf	___tmul@multiplicand+1,w
  3147  050F  3DF7               	addwfc	___tmul@product+1,f
  3148  0510  0875               	movf	___tmul@multiplicand+2,w
  3149  0511  3DF8               	addwfc	___tmul@product+2,f
  3150  0512                     l1733:
  3151  0512  3001               	movlw	1
  3152  0513                     u945:
  3153  0513  35F3               	lslf	___tmul@multiplicand,f
  3154  0514  0DF4               	rlf	___tmul@multiplicand+1,f
  3155  0515  0DF5               	rlf	___tmul@multiplicand+2,f
  3156  0516  0B89               	decfsz	9,f
  3157  0517  2D13               	goto	u945
  3158  0518  3001               	movlw	1
  3159  0519                     u955:
  3160  0519  36F2               	lsrf	___tmul@multiplier+2,f
  3161  051A  0CF1               	rrf	___tmul@multiplier+1,f
  3162  051B  0CF0               	rrf	___tmul@multiplier,f
  3163  051C  0B89               	decfsz	9,f
  3164  051D  2D19               	goto	u955
  3165  051E  0872               	movf	___tmul@multiplier+2,w
  3166  051F  0471               	iorwf	___tmul@multiplier+1,w
  3167  0520  0470               	iorwf	___tmul@multiplier,w
  3168  0521  1D03               	skipz
  3169  0522  2D0A               	goto	l1729
  3170  0523  0876               	movf	___tmul@product,w
  3171  0524  00F0               	movwf	?___tmul
  3172  0525  0877               	movf	___tmul@product+1,w
  3173  0526  00F1               	movwf	?___tmul+1
  3174  0527  0878               	movf	___tmul@product+2,w
  3175  0528  00F2               	movwf	?___tmul+2
  3176  0529  0008               	return
  3177  052A                     __end_of___tmul:
  3178                           
  3179                           	psect	text8
  3180  0459                     __ptext8:	
  3181 ;; *************** function ___lldiv *****************
  3182 ;; Defined at:
  3183 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\__lldiv.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  divisor         4    0[COMMON] unsigned long 
  3186 ;;  dividend        4    4[COMMON] unsigned long 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  quotient        4    9[COMMON] unsigned long 
  3189 ;;  counter         1   13[COMMON] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  4    0[COMMON] unsigned long 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0
  3194 ;; Tracked objects:
  3195 ;;		On entry : 1F/0
  3196 ;;		On exit  : 1F/0
  3197 ;;		Unchanged: 1F/0
  3198 ;; Data sizes:     COMMON   BANK0   BANK1
  3199 ;;      Params:         8       0       0
  3200 ;;      Locals:         5       0       0
  3201 ;;      Temps:          1       0       0
  3202 ;;      Totals:        14       0       0
  3203 ;;Total ram usage:       14 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    4
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_setState
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           
  3214                           ;psect for function ___lldiv
  3215  0459                     ___lldiv:
  3216                           
  3217                           ;incstack = 0
  3218                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3219  0459  3000               	movlw	0
  3220  045A  00FC               	movwf	___lldiv@quotient+3
  3221  045B  3000               	movlw	0
  3222  045C  00FB               	movwf	___lldiv@quotient+2
  3223  045D  3000               	movlw	0
  3224  045E  00FA               	movwf	___lldiv@quotient+1
  3225  045F  3000               	movlw	0
  3226  0460  00F9               	movwf	___lldiv@quotient
  3227  0461  0873               	movf	___lldiv@divisor+3,w
  3228  0462  0472               	iorwf	___lldiv@divisor+2,w
  3229  0463  0471               	iorwf	___lldiv@divisor+1,w
  3230  0464  0470               	iorwf	___lldiv@divisor,w
  3231  0465  1903               	skipnz
  3232  0466  2CA2               	goto	l1761
  3233  0467  01FD               	clrf	___lldiv@counter
  3234  0468  0AFD               	incf	___lldiv@counter,f
  3235  0469                     l1747:
  3236  0469  1BF3               	btfsc	___lldiv@divisor+3,7
  3237  046A  2C77               	goto	l1749
  3238  046B  3001               	movlw	1
  3239  046C                     u985:
  3240  046C  35F0               	lslf	___lldiv@divisor,f
  3241  046D  0DF1               	rlf	___lldiv@divisor+1,f
  3242  046E  0DF2               	rlf	___lldiv@divisor+2,f
  3243  046F  0DF3               	rlf	___lldiv@divisor+3,f
  3244  0470  0B89               	decfsz	9,f
  3245  0471  2C6C               	goto	u985
  3246  0472  3001               	movlw	1
  3247  0473  00F8               	movwf	??___lldiv
  3248  0474  0878               	movf	??___lldiv,w
  3249  0475  07FD               	addwf	___lldiv@counter,f
  3250  0476  2C69               	goto	l1747
  3251  0477                     l1749:
  3252  0477  3001               	movlw	1
  3253  0478                     u1005:
  3254  0478  35F9               	lslf	___lldiv@quotient,f
  3255  0479  0DFA               	rlf	___lldiv@quotient+1,f
  3256  047A  0DFB               	rlf	___lldiv@quotient+2,f
  3257  047B  0DFC               	rlf	___lldiv@quotient+3,f
  3258  047C  0B89               	decfsz	9,f
  3259  047D  2C78               	goto	u1005
  3260  047E  0873               	movf	___lldiv@divisor+3,w
  3261  047F  0277               	subwf	___lldiv@dividend+3,w
  3262  0480  1D03               	skipz
  3263  0481  2C8C               	goto	u1015
  3264  0482  0872               	movf	___lldiv@divisor+2,w
  3265  0483  0276               	subwf	___lldiv@dividend+2,w
  3266  0484  1D03               	skipz
  3267  0485  2C8C               	goto	u1015
  3268  0486  0871               	movf	___lldiv@divisor+1,w
  3269  0487  0275               	subwf	___lldiv@dividend+1,w
  3270  0488  1D03               	skipz
  3271  0489  2C8C               	goto	u1015
  3272  048A  0870               	movf	___lldiv@divisor,w
  3273  048B  0274               	subwf	___lldiv@dividend,w
  3274  048C                     u1015:
  3275  048C  1C03               	skipc
  3276  048D  2C97               	goto	l1757
  3277  048E  0870               	movf	___lldiv@divisor,w
  3278  048F  02F4               	subwf	___lldiv@dividend,f
  3279  0490  0871               	movf	___lldiv@divisor+1,w
  3280  0491  3BF5               	subwfb	___lldiv@dividend+1,f
  3281  0492  0872               	movf	___lldiv@divisor+2,w
  3282  0493  3BF6               	subwfb	___lldiv@dividend+2,f
  3283  0494  0873               	movf	___lldiv@divisor+3,w
  3284  0495  3BF7               	subwfb	___lldiv@dividend+3,f
  3285  0496  1479               	bsf	___lldiv@quotient,0
  3286  0497                     l1757:
  3287  0497  3001               	movlw	1
  3288  0498                     u1025:
  3289  0498  36F3               	lsrf	___lldiv@divisor+3,f
  3290  0499  0CF2               	rrf	___lldiv@divisor+2,f
  3291  049A  0CF1               	rrf	___lldiv@divisor+1,f
  3292  049B  0CF0               	rrf	___lldiv@divisor,f
  3293  049C  0B89               	decfsz	9,f
  3294  049D  2C98               	goto	u1025
  3295  049E  3001               	movlw	1
  3296  049F  02FD               	subwf	___lldiv@counter,f
  3297  04A0  1D03               	btfss	3,2
  3298  04A1  2C77               	goto	l1749
  3299  04A2                     l1761:
  3300  04A2  087C               	movf	___lldiv@quotient+3,w
  3301  04A3  00F3               	movwf	?___lldiv+3
  3302  04A4  087B               	movf	___lldiv@quotient+2,w
  3303  04A5  00F2               	movwf	?___lldiv+2
  3304  04A6  087A               	movf	___lldiv@quotient+1,w
  3305  04A7  00F1               	movwf	?___lldiv+1
  3306  04A8  0879               	movf	___lldiv@quotient,w
  3307  04A9  00F0               	movwf	?___lldiv
  3308  04AA  0008               	return
  3309  04AB                     __end_of___lldiv:
  3310                           
  3311                           	psect	text9
  3312  0174                     __ptext9:	
  3313 ;; *************** function _setLedsForPositioning *****************
  3314 ;; Defined at:
  3315 ;;		line 327 in file "main.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  adcValue        4    0[COMMON] long 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, status,2, status,0
  3324 ;; Tracked objects:
  3325 ;;		On entry : 1F/0
  3326 ;;		On exit  : 1F/2
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1
  3329 ;;      Params:         4       0       0
  3330 ;;      Locals:         0       0       0
  3331 ;;      Temps:          0       0       0
  3332 ;;      Totals:         4       0       0
  3333 ;;Total ram usage:        4 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    4
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _setLedsForPositioning
  3345  0174                     _setLedsForPositioning:
  3346                           
  3347                           ;incstack = 0
  3348                           ; Regs used in _setLedsForPositioning: [wreg+status,2+status,0]
  3349                           ;main.c: 327: void setLedsForPositioning(int32_t adcValue);main.c: 328: {;main.c: 329:  
      +                             do { LATCbits.LATC0 = 0; } while(0);
  3350  0174  0022               	movlb	2	; select bank2
  3351  0175  100E               	bcf	14,0	;volatile
  3352                           
  3353                           ;main.c: 330:     do { LATCbits.LATC1 = 0; } while(0);
  3354  0176  108E               	bcf	14,1	;volatile
  3355                           
  3356                           ;main.c: 331:     do { LATCbits.LATC2 = 0; } while(0);
  3357  0177  110E               	bcf	14,2	;volatile
  3358                           
  3359                           ;main.c: 332:     do { LATCbits.LATC3 = 0; } while(0);
  3360  0178  118E               	bcf	14,3	;volatile
  3361                           
  3362                           ;main.c: 333:     do { LATCbits.LATC4 = 0; } while(0);
  3363  0179  120E               	bcf	14,4	;volatile
  3364                           
  3365                           ;main.c: 334:     do { LATCbits.LATC5 = 1; } while(0);
  3366  017A  168E               	bsf	14,5	;volatile
  3367                           
  3368                           ;main.c: 335:     do { LATCbits.LATC6 = 0; } while(0);
  3369  017B  130E               	bcf	14,6	;volatile
  3370                           
  3371                           ;main.c: 336:     do { LATCbits.LATC7 = 0; } while(0);
  3372  017C  138E               	bcf	14,7	;volatile
  3373                           
  3374                           ;main.c: 337:     do { LATBbits.LATB5 = 0; } while(0);
  3375  017D  128D               	bcf	13,5	;volatile
  3376                           
  3377                           ;main.c: 338:     do { LATBbits.LATB6 = 0; } while(0);
  3378  017E  130D               	bcf	13,6	;volatile
  3379                           
  3380                           ;main.c: 339:     do { LATBbits.LATB7 = 0; } while(0);
  3381  017F  138D               	bcf	13,7	;volatile
  3382                           
  3383                           ;main.c: 343:     if(adcValue < 54)
  3384  0180  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3385  0181  298F               	goto	l412
  3386  0182  0873               	movf	setLedsForPositioning@adcValue+3,w
  3387  0183  1D03               	btfss	3,2
  3388  0184  2991               	goto	l1813
  3389  0185  0872               	movf	setLedsForPositioning@adcValue+2,w
  3390  0186  1D03               	btfss	3,2
  3391  0187  2991               	goto	l1813
  3392  0188  0871               	movf	setLedsForPositioning@adcValue+1,w
  3393  0189  1D03               	btfss	3,2
  3394  018A  2991               	goto	l1813
  3395  018B  3036               	movlw	54
  3396  018C  0270               	subwf	setLedsForPositioning@adcValue,w
  3397  018D  1803               	btfsc	3,0
  3398  018E  2991               	goto	l1813
  3399  018F                     l412:	
  3400                           ;main.c: 344:     {;main.c: 345:         do { LATCbits.LATC0 = 1; } while(0);
  3401                           
  3402  018F  140E               	bsf	14,0	;volatile
  3403  0190  0008               	return
  3404  0191                     l1813:
  3405  0191  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3406  0192  29A0               	goto	l416
  3407  0193  0873               	movf	setLedsForPositioning@adcValue+3,w
  3408  0194  1D03               	btfss	3,2
  3409  0195  29A3               	goto	l1815
  3410  0196  0872               	movf	setLedsForPositioning@adcValue+2,w
  3411  0197  1D03               	btfss	3,2
  3412  0198  29A3               	goto	l1815
  3413  0199  0871               	movf	setLedsForPositioning@adcValue+1,w
  3414  019A  1D03               	btfss	3,2
  3415  019B  29A3               	goto	l1815
  3416  019C  306C               	movlw	108
  3417  019D  0270               	subwf	setLedsForPositioning@adcValue,w
  3418  019E  1803               	btfsc	3,0
  3419  019F  29A3               	goto	l1815
  3420  01A0                     l416:	
  3421                           ;main.c: 348:     {;main.c: 349:         do { LATCbits.LATC0 = 1; } while(0);
  3422                           
  3423  01A0  140E               	bsf	14,0	;volatile
  3424                           
  3425                           ;main.c: 350:         do { LATCbits.LATC1 = 1; } while(0);
  3426  01A1  148E               	bsf	14,1	;volatile
  3427  01A2  0008               	return
  3428  01A3                     l1815:
  3429  01A3  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3430  01A4  29B2               	goto	l422
  3431  01A5  0873               	movf	setLedsForPositioning@adcValue+3,w
  3432  01A6  1D03               	btfss	3,2
  3433  01A7  29B4               	goto	l1817
  3434  01A8  0872               	movf	setLedsForPositioning@adcValue+2,w
  3435  01A9  1D03               	btfss	3,2
  3436  01AA  29B4               	goto	l1817
  3437  01AB  0871               	movf	setLedsForPositioning@adcValue+1,w
  3438  01AC  1D03               	btfss	3,2
  3439  01AD  29B4               	goto	l1817
  3440  01AE  30A2               	movlw	162
  3441  01AF  0270               	subwf	setLedsForPositioning@adcValue,w
  3442  01B0  1803               	btfsc	3,0
  3443  01B1  29B4               	goto	l1817
  3444  01B2                     l422:	
  3445                           ;main.c: 353:     {;main.c: 354:         do { LATCbits.LATC1 = 1; } while(0);
  3446                           
  3447  01B2  148E               	bsf	14,1	;volatile
  3448  01B3  0008               	return
  3449  01B4                     l1817:
  3450  01B4  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3451  01B5  29C3               	goto	l426
  3452  01B6  0873               	movf	setLedsForPositioning@adcValue+3,w
  3453  01B7  1D03               	btfss	3,2
  3454  01B8  29C6               	goto	l1819
  3455  01B9  0872               	movf	setLedsForPositioning@adcValue+2,w
  3456  01BA  1D03               	btfss	3,2
  3457  01BB  29C6               	goto	l1819
  3458  01BC  0871               	movf	setLedsForPositioning@adcValue+1,w
  3459  01BD  1D03               	btfss	3,2
  3460  01BE  29C6               	goto	l1819
  3461  01BF  30D7               	movlw	215
  3462  01C0  0270               	subwf	setLedsForPositioning@adcValue,w
  3463  01C1  1803               	btfsc	3,0
  3464  01C2  29C6               	goto	l1819
  3465  01C3                     l426:	
  3466                           ;main.c: 357:     {;main.c: 358:         do { LATCbits.LATC1 = 1; } while(0);
  3467                           
  3468  01C3  148E               	bsf	14,1	;volatile
  3469                           
  3470                           ;main.c: 359:         do { LATCbits.LATC2 = 1; } while(0);
  3471  01C4  150E               	bsf	14,2	;volatile
  3472  01C5  0008               	return
  3473  01C6                     l1819:
  3474  01C6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3475  01C7  29D4               	goto	l432
  3476  01C8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3477  01C9  1D03               	btfss	3,2
  3478  01CA  29D6               	goto	l1821
  3479  01CB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3480  01CC  1D03               	btfss	3,2
  3481  01CD  29D6               	goto	l1821
  3482  01CE  300D               	movlw	13
  3483  01CF  0270               	subwf	setLedsForPositioning@adcValue,w
  3484  01D0  3001               	movlw	1
  3485  01D1  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3486  01D2  1803               	btfsc	3,0
  3487  01D3  29D6               	goto	l1821
  3488  01D4                     l432:	
  3489                           ;main.c: 362:     {;main.c: 363:         do { LATCbits.LATC2 = 1; } while(0);
  3490                           
  3491  01D4  150E               	bsf	14,2	;volatile
  3492  01D5  0008               	return
  3493  01D6                     l1821:
  3494  01D6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3495  01D7  29E4               	goto	l436
  3496  01D8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3497  01D9  1D03               	btfss	3,2
  3498  01DA  29E7               	goto	l1823
  3499  01DB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3500  01DC  1D03               	btfss	3,2
  3501  01DD  29E7               	goto	l1823
  3502  01DE  3043               	movlw	67
  3503  01DF  0270               	subwf	setLedsForPositioning@adcValue,w
  3504  01E0  3001               	movlw	1
  3505  01E1  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3506  01E2  1803               	btfsc	3,0
  3507  01E3  29E7               	goto	l1823
  3508  01E4                     l436:	
  3509                           ;main.c: 366:     {;main.c: 367:         do { LATCbits.LATC2 = 1; } while(0);
  3510                           
  3511  01E4  150E               	bsf	14,2	;volatile
  3512                           
  3513                           ;main.c: 368:         do { LATCbits.LATC3 = 1; } while(0);
  3514  01E5  158E               	bsf	14,3	;volatile
  3515  01E6  0008               	return
  3516  01E7                     l1823:
  3517  01E7  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3518  01E8  29F5               	goto	l442
  3519  01E9  0873               	movf	setLedsForPositioning@adcValue+3,w
  3520  01EA  1D03               	btfss	3,2
  3521  01EB  29F7               	goto	l1825
  3522  01EC  0872               	movf	setLedsForPositioning@adcValue+2,w
  3523  01ED  1D03               	btfss	3,2
  3524  01EE  29F7               	goto	l1825
  3525  01EF  3079               	movlw	121
  3526  01F0  0270               	subwf	setLedsForPositioning@adcValue,w
  3527  01F1  3001               	movlw	1
  3528  01F2  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3529  01F3  1803               	btfsc	3,0
  3530  01F4  29F7               	goto	l1825
  3531  01F5                     l442:	
  3532                           ;main.c: 371:     {;main.c: 372:         do { LATCbits.LATC3 = 1; } while(0);
  3533                           
  3534  01F5  158E               	bsf	14,3	;volatile
  3535  01F6  0008               	return
  3536  01F7                     l1825:
  3537  01F7  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3538  01F8  2A05               	goto	l446
  3539  01F9  0873               	movf	setLedsForPositioning@adcValue+3,w
  3540  01FA  1D03               	btfss	3,2
  3541  01FB  2A08               	goto	l1827
  3542  01FC  0872               	movf	setLedsForPositioning@adcValue+2,w
  3543  01FD  1D03               	btfss	3,2
  3544  01FE  2A08               	goto	l1827
  3545  01FF  30AF               	movlw	175
  3546  0200  0270               	subwf	setLedsForPositioning@adcValue,w
  3547  0201  3001               	movlw	1
  3548  0202  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3549  0203  1803               	btfsc	3,0
  3550  0204  2A08               	goto	l1827
  3551  0205                     l446:	
  3552                           ;main.c: 375:     {;main.c: 376:         do { LATCbits.LATC3 = 1; } while(0);
  3553                           
  3554  0205  158E               	bsf	14,3	;volatile
  3555                           
  3556                           ;main.c: 377:         do { LATCbits.LATC4 = 1; } while(0);
  3557  0206  160E               	bsf	14,4	;volatile
  3558  0207  0008               	return
  3559  0208                     l1827:
  3560  0208  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3561  0209  2A16               	goto	l452
  3562  020A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3563  020B  1D03               	btfss	3,2
  3564  020C  2A18               	goto	l1829
  3565  020D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3566  020E  1D03               	btfss	3,2
  3567  020F  2A18               	goto	l1829
  3568  0210  30E5               	movlw	229
  3569  0211  0270               	subwf	setLedsForPositioning@adcValue,w
  3570  0212  3001               	movlw	1
  3571  0213  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3572  0214  1803               	btfsc	3,0
  3573  0215  2A18               	goto	l1829
  3574  0216                     l452:	
  3575                           ;main.c: 380:     {;main.c: 381:         do { LATCbits.LATC4 = 1; } while(0);
  3576                           
  3577  0216  160E               	bsf	14,4	;volatile
  3578  0217  0008               	return
  3579  0218                     l1829:
  3580  0218  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3581  0219  0008               	return
  3582  021A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3583  021B  1D03               	btfss	3,2
  3584  021C  2A26               	goto	l1833
  3585  021D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3586  021E  1D03               	btfss	3,2
  3587  021F  2A26               	goto	l1833
  3588  0220  301A               	movlw	26
  3589  0221  0270               	subwf	setLedsForPositioning@adcValue,w
  3590  0222  3002               	movlw	2
  3591  0223  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3592  0224  1C03               	btfss	3,0
  3593  0225  0008               	return
  3594  0226                     l1833:
  3595  0226  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3596  0227  2A34               	goto	l458
  3597  0228  0873               	movf	setLedsForPositioning@adcValue+3,w
  3598  0229  1D03               	btfss	3,2
  3599  022A  2A36               	goto	l1835
  3600  022B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3601  022C  1D03               	btfss	3,2
  3602  022D  2A36               	goto	l1835
  3603  022E  3050               	movlw	80
  3604  022F  0270               	subwf	setLedsForPositioning@adcValue,w
  3605  0230  3002               	movlw	2
  3606  0231  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3607  0232  1803               	btfsc	3,0
  3608  0233  2A36               	goto	l1835
  3609  0234                     l458:	
  3610                           ;main.c: 388:     {;main.c: 389:         do { LATCbits.LATC6 = 1; } while(0);
  3611                           
  3612  0234  170E               	bsf	14,6	;volatile
  3613  0235  0008               	return
  3614  0236                     l1835:
  3615  0236  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3616  0237  2A44               	goto	l462
  3617  0238  0873               	movf	setLedsForPositioning@adcValue+3,w
  3618  0239  1D03               	btfss	3,2
  3619  023A  2A47               	goto	l1837
  3620  023B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3621  023C  1D03               	btfss	3,2
  3622  023D  2A47               	goto	l1837
  3623  023E  3086               	movlw	134
  3624  023F  0270               	subwf	setLedsForPositioning@adcValue,w
  3625  0240  3002               	movlw	2
  3626  0241  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3627  0242  1803               	btfsc	3,0
  3628  0243  2A47               	goto	l1837
  3629  0244                     l462:	
  3630                           ;main.c: 392:     {;main.c: 393:         do { LATCbits.LATC6 = 1; } while(0);
  3631                           
  3632  0244  170E               	bsf	14,6	;volatile
  3633                           
  3634                           ;main.c: 394:         do { LATCbits.LATC7 = 1; } while(0);
  3635  0245  178E               	bsf	14,7	;volatile
  3636  0246  0008               	return
  3637  0247                     l1837:
  3638  0247  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3639  0248  2A55               	goto	l468
  3640  0249  0873               	movf	setLedsForPositioning@adcValue+3,w
  3641  024A  1D03               	btfss	3,2
  3642  024B  2A57               	goto	l1839
  3643  024C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3644  024D  1D03               	btfss	3,2
  3645  024E  2A57               	goto	l1839
  3646  024F  30BC               	movlw	188
  3647  0250  0270               	subwf	setLedsForPositioning@adcValue,w
  3648  0251  3002               	movlw	2
  3649  0252  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3650  0253  1803               	btfsc	3,0
  3651  0254  2A57               	goto	l1839
  3652  0255                     l468:	
  3653                           ;main.c: 397:     {;main.c: 398:         do { LATCbits.LATC7 = 1; } while(0);
  3654                           
  3655  0255  178E               	bsf	14,7	;volatile
  3656  0256  0008               	return
  3657  0257                     l1839:
  3658  0257  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3659  0258  2A65               	goto	l472
  3660  0259  0873               	movf	setLedsForPositioning@adcValue+3,w
  3661  025A  1D03               	btfss	3,2
  3662  025B  2A68               	goto	l1841
  3663  025C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3664  025D  1D03               	btfss	3,2
  3665  025E  2A68               	goto	l1841
  3666  025F  30F2               	movlw	242
  3667  0260  0270               	subwf	setLedsForPositioning@adcValue,w
  3668  0261  3002               	movlw	2
  3669  0262  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3670  0263  1803               	btfsc	3,0
  3671  0264  2A68               	goto	l1841
  3672  0265                     l472:	
  3673                           ;main.c: 401:     {;main.c: 402:         do { LATCbits.LATC7 = 1; } while(0);
  3674                           
  3675  0265  178E               	bsf	14,7	;volatile
  3676                           
  3677                           ;main.c: 403:         do { LATBbits.LATB5 = 1; } while(0);
  3678  0266  168D               	bsf	13,5	;volatile
  3679  0267  0008               	return
  3680  0268                     l1841:
  3681  0268  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3682  0269  2A76               	goto	l478
  3683  026A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3684  026B  1D03               	btfss	3,2
  3685  026C  2A78               	goto	l1843
  3686  026D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3687  026E  1D03               	btfss	3,2
  3688  026F  2A78               	goto	l1843
  3689  0270  3028               	movlw	40
  3690  0271  0270               	subwf	setLedsForPositioning@adcValue,w
  3691  0272  3003               	movlw	3
  3692  0273  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3693  0274  1803               	btfsc	3,0
  3694  0275  2A78               	goto	l1843
  3695  0276                     l478:	
  3696                           ;main.c: 406:     {;main.c: 407:         do { LATBbits.LATB5 = 1; } while(0);
  3697                           
  3698  0276  168D               	bsf	13,5	;volatile
  3699  0277  0008               	return
  3700  0278                     l1843:
  3701  0278  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3702  0279  2A86               	goto	l482
  3703  027A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3704  027B  1D03               	btfss	3,2
  3705  027C  2A89               	goto	l1845
  3706  027D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3707  027E  1D03               	btfss	3,2
  3708  027F  2A89               	goto	l1845
  3709  0280  305D               	movlw	93
  3710  0281  0270               	subwf	setLedsForPositioning@adcValue,w
  3711  0282  3003               	movlw	3
  3712  0283  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3713  0284  1803               	btfsc	3,0
  3714  0285  2A89               	goto	l1845
  3715  0286                     l482:	
  3716                           ;main.c: 410:     {;main.c: 411:         do { LATBbits.LATB5 = 1; } while(0);
  3717                           
  3718  0286  168D               	bsf	13,5	;volatile
  3719                           
  3720                           ;main.c: 412:         do { LATBbits.LATB6 = 1; } while(0);
  3721  0287  170D               	bsf	13,6	;volatile
  3722  0288  0008               	return
  3723  0289                     l1845:
  3724  0289  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3725  028A  2A97               	goto	l488
  3726  028B  0873               	movf	setLedsForPositioning@adcValue+3,w
  3727  028C  1D03               	btfss	3,2
  3728  028D  2A99               	goto	l1847
  3729  028E  0872               	movf	setLedsForPositioning@adcValue+2,w
  3730  028F  1D03               	btfss	3,2
  3731  0290  2A99               	goto	l1847
  3732  0291  3093               	movlw	147
  3733  0292  0270               	subwf	setLedsForPositioning@adcValue,w
  3734  0293  3003               	movlw	3
  3735  0294  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3736  0295  1803               	btfsc	3,0
  3737  0296  2A99               	goto	l1847
  3738  0297                     l488:	
  3739                           ;main.c: 415:     {;main.c: 416:         do { LATBbits.LATB6 = 1; } while(0);
  3740                           
  3741  0297  170D               	bsf	13,6	;volatile
  3742  0298  0008               	return
  3743  0299                     l1847:
  3744  0299  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3745  029A  2AA7               	goto	l492
  3746  029B  0873               	movf	setLedsForPositioning@adcValue+3,w
  3747  029C  1D03               	btfss	3,2
  3748  029D  2AAA               	goto	l497
  3749  029E  0872               	movf	setLedsForPositioning@adcValue+2,w
  3750  029F  1D03               	btfss	3,2
  3751  02A0  2AAA               	goto	l497
  3752  02A1  30C9               	movlw	201
  3753  02A2  0270               	subwf	setLedsForPositioning@adcValue,w
  3754  02A3  3003               	movlw	3
  3755  02A4  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3756  02A5  1803               	btfsc	3,0
  3757  02A6  2AAA               	goto	l497
  3758  02A7                     l492:	
  3759                           ;main.c: 419:     {;main.c: 420:         do { LATBbits.LATB6 = 1; } while(0);
  3760                           
  3761  02A7  170D               	bsf	13,6	;volatile
  3762                           
  3763                           ;main.c: 421:         do { LATBbits.LATB7 = 1; } while(0);
  3764  02A8  178D               	bsf	13,7	;volatile
  3765  02A9  0008               	return
  3766  02AA                     l497:	
  3767                           ;main.c: 424:     {;main.c: 425:         do { LATBbits.LATB7 = 1; } while(0);
  3768                           
  3769  02AA  178D               	bsf	13,7	;volatile
  3770  02AB  0008               	return
  3771  02AC                     __end_of_setLedsForPositioning:
  3772                           
  3773                           	psect	text10
  3774  04AB                     __ptext10:	
  3775 ;; *************** function ___lmul *****************
  3776 ;; Defined at:
  3777 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  multiplier      4    0[COMMON] unsigned long 
  3780 ;;  multiplicand    4    4[COMMON] unsigned long 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  product         4    8[COMMON] unsigned long 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  4    0[COMMON] unsigned long 
  3785 ;; Registers used:
  3786 ;;		wreg, status,2, status,0
  3787 ;; Tracked objects:
  3788 ;;		On entry : 1F/0
  3789 ;;		On exit  : 1F/0
  3790 ;;		Unchanged: 1F/0
  3791 ;; Data sizes:     COMMON   BANK0   BANK1
  3792 ;;      Params:         8       0       0
  3793 ;;      Locals:         4       0       0
  3794 ;;      Temps:          0       0       0
  3795 ;;      Totals:        12       0       0
  3796 ;;Total ram usage:       12 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    4
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           
  3807                           ;psect for function ___lmul
  3808  04AB                     ___lmul:
  3809                           
  3810                           ;incstack = 0
  3811                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3812  04AB  3000               	movlw	0
  3813  04AC  00FB               	movwf	___lmul@product+3
  3814  04AD  3000               	movlw	0
  3815  04AE  00FA               	movwf	___lmul@product+2
  3816  04AF  3000               	movlw	0
  3817  04B0  00F9               	movwf	___lmul@product+1
  3818  04B1  3000               	movlw	0
  3819  04B2  00F8               	movwf	___lmul@product
  3820  04B3                     l1851:
  3821  04B3  1C70               	btfss	___lmul@multiplier,0
  3822  04B4  2CBD               	goto	l1855
  3823  04B5  0874               	movf	___lmul@multiplicand,w
  3824  04B6  07F8               	addwf	___lmul@product,f
  3825  04B7  0875               	movf	___lmul@multiplicand+1,w
  3826  04B8  3DF9               	addwfc	___lmul@product+1,f
  3827  04B9  0876               	movf	___lmul@multiplicand+2,w
  3828  04BA  3DFA               	addwfc	___lmul@product+2,f
  3829  04BB  0877               	movf	___lmul@multiplicand+3,w
  3830  04BC  3DFB               	addwfc	___lmul@product+3,f
  3831  04BD                     l1855:
  3832  04BD  3001               	movlw	1
  3833  04BE                     u1265:
  3834  04BE  35F4               	lslf	___lmul@multiplicand,f
  3835  04BF  0DF5               	rlf	___lmul@multiplicand+1,f
  3836  04C0  0DF6               	rlf	___lmul@multiplicand+2,f
  3837  04C1  0DF7               	rlf	___lmul@multiplicand+3,f
  3838  04C2  0B89               	decfsz	9,f
  3839  04C3  2CBE               	goto	u1265
  3840  04C4  3001               	movlw	1
  3841  04C5                     u1275:
  3842  04C5  36F3               	lsrf	___lmul@multiplier+3,f
  3843  04C6  0CF2               	rrf	___lmul@multiplier+2,f
  3844  04C7  0CF1               	rrf	___lmul@multiplier+1,f
  3845  04C8  0CF0               	rrf	___lmul@multiplier,f
  3846  04C9  0B89               	decfsz	9,f
  3847  04CA  2CC5               	goto	u1275
  3848  04CB  0873               	movf	___lmul@multiplier+3,w
  3849  04CC  0472               	iorwf	___lmul@multiplier+2,w
  3850  04CD  0471               	iorwf	___lmul@multiplier+1,w
  3851  04CE  0470               	iorwf	___lmul@multiplier,w
  3852  04CF  1D03               	skipz
  3853  04D0  2CB3               	goto	l1851
  3854  04D1  087B               	movf	___lmul@product+3,w
  3855  04D2  00F3               	movwf	?___lmul+3
  3856  04D3  087A               	movf	___lmul@product+2,w
  3857  04D4  00F2               	movwf	?___lmul+2
  3858  04D5  0879               	movf	___lmul@product+1,w
  3859  04D6  00F1               	movwf	?___lmul+1
  3860  04D7  0878               	movf	___lmul@product,w
  3861  04D8  00F0               	movwf	?___lmul
  3862  04D9  0008               	return
  3863  04DA                     __end_of___lmul:
  3864                           
  3865                           	psect	text11
  3866  02AC                     __ptext11:	
  3867 ;; *************** function ___aldiv *****************
  3868 ;; Defined at:
  3869 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  divisor         4    0[BANK0 ] long 
  3872 ;;  dividend        4    4[BANK0 ] long 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  quotient        4   10[BANK0 ] long 
  3875 ;;  sign            1    9[BANK0 ] unsigned char 
  3876 ;;  counter         1    8[BANK0 ] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  4    0[BANK0 ] long 
  3879 ;; Registers used:
  3880 ;;		wreg, status,2, status,0
  3881 ;; Tracked objects:
  3882 ;;		On entry : 1F/0
  3883 ;;		On exit  : 1F/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1
  3886 ;;      Params:         0       8       0
  3887 ;;      Locals:         0       6       0
  3888 ;;      Temps:          1       0       0
  3889 ;;      Totals:         1      14       0
  3890 ;;Total ram usage:       15 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    4
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_main
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           
  3901                           ;psect for function ___aldiv
  3902  02AC                     ___aldiv:
  3903                           
  3904                           ;incstack = 0
  3905                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3906  02AC  01A9               	clrf	___aldiv@sign
  3907  02AD  1FA3               	btfss	___aldiv@divisor+3,7
  3908  02AE  2ABC               	goto	l632
  3909  02AF  09A0               	comf	___aldiv@divisor,f
  3910  02B0  09A1               	comf	___aldiv@divisor+1,f
  3911  02B1  09A2               	comf	___aldiv@divisor+2,f
  3912  02B2  09A3               	comf	___aldiv@divisor+3,f
  3913  02B3  0AA0               	incf	___aldiv@divisor,f
  3914  02B4  1903               	skipnz
  3915  02B5  0AA1               	incf	___aldiv@divisor+1,f
  3916  02B6  1903               	skipnz
  3917  02B7  0AA2               	incf	___aldiv@divisor+2,f
  3918  02B8  1903               	skipnz
  3919  02B9  0AA3               	incf	___aldiv@divisor+3,f
  3920  02BA  01A9               	clrf	___aldiv@sign
  3921  02BB  0AA9               	incf	___aldiv@sign,f
  3922  02BC                     l632:
  3923  02BC  1FA7               	btfss	___aldiv@dividend+3,7
  3924  02BD  2ACD               	goto	l1873
  3925  02BE  09A4               	comf	___aldiv@dividend,f
  3926  02BF  09A5               	comf	___aldiv@dividend+1,f
  3927  02C0  09A6               	comf	___aldiv@dividend+2,f
  3928  02C1  09A7               	comf	___aldiv@dividend+3,f
  3929  02C2  0AA4               	incf	___aldiv@dividend,f
  3930  02C3  1903               	skipnz
  3931  02C4  0AA5               	incf	___aldiv@dividend+1,f
  3932  02C5  1903               	skipnz
  3933  02C6  0AA6               	incf	___aldiv@dividend+2,f
  3934  02C7  1903               	skipnz
  3935  02C8  0AA7               	incf	___aldiv@dividend+3,f
  3936  02C9  3001               	movlw	1
  3937  02CA  00FC               	movwf	??___aldiv
  3938  02CB  087C               	movf	??___aldiv,w
  3939  02CC  06A9               	xorwf	___aldiv@sign,f
  3940  02CD                     l1873:
  3941  02CD  3000               	movlw	0
  3942  02CE  00AD               	movwf	___aldiv@quotient+3
  3943  02CF  3000               	movlw	0
  3944  02D0  00AC               	movwf	___aldiv@quotient+2
  3945  02D1  3000               	movlw	0
  3946  02D2  00AB               	movwf	___aldiv@quotient+1
  3947  02D3  3000               	movlw	0
  3948  02D4  00AA               	movwf	___aldiv@quotient
  3949  02D5  0823               	movf	___aldiv@divisor+3,w
  3950  02D6  0422               	iorwf	___aldiv@divisor+2,w
  3951  02D7  0421               	iorwf	___aldiv@divisor+1,w
  3952  02D8  0420               	iorwf	___aldiv@divisor,w
  3953  02D9  1903               	skipnz
  3954  02DA  2B16               	goto	l1895
  3955  02DB  01A8               	clrf	___aldiv@counter
  3956  02DC  0AA8               	incf	___aldiv@counter,f
  3957  02DD                     l1881:
  3958  02DD  1BA3               	btfsc	___aldiv@divisor+3,7
  3959  02DE  2AEB               	goto	l1883
  3960  02DF  3001               	movlw	1
  3961  02E0                     u1325:
  3962  02E0  35A0               	lslf	___aldiv@divisor,f
  3963  02E1  0DA1               	rlf	___aldiv@divisor+1,f
  3964  02E2  0DA2               	rlf	___aldiv@divisor+2,f
  3965  02E3  0DA3               	rlf	___aldiv@divisor+3,f
  3966  02E4  0B89               	decfsz	9,f
  3967  02E5  2AE0               	goto	u1325
  3968  02E6  3001               	movlw	1
  3969  02E7  00FC               	movwf	??___aldiv
  3970  02E8  087C               	movf	??___aldiv,w
  3971  02E9  07A8               	addwf	___aldiv@counter,f
  3972  02EA  2ADD               	goto	l1881
  3973  02EB                     l1883:
  3974  02EB  3001               	movlw	1
  3975  02EC                     u1345:
  3976  02EC  35AA               	lslf	___aldiv@quotient,f
  3977  02ED  0DAB               	rlf	___aldiv@quotient+1,f
  3978  02EE  0DAC               	rlf	___aldiv@quotient+2,f
  3979  02EF  0DAD               	rlf	___aldiv@quotient+3,f
  3980  02F0  0B89               	decfsz	9,f
  3981  02F1  2AEC               	goto	u1345
  3982  02F2  0823               	movf	___aldiv@divisor+3,w
  3983  02F3  0227               	subwf	___aldiv@dividend+3,w
  3984  02F4  1D03               	skipz
  3985  02F5  2B00               	goto	u1355
  3986  02F6  0822               	movf	___aldiv@divisor+2,w
  3987  02F7  0226               	subwf	___aldiv@dividend+2,w
  3988  02F8  1D03               	skipz
  3989  02F9  2B00               	goto	u1355
  3990  02FA  0821               	movf	___aldiv@divisor+1,w
  3991  02FB  0225               	subwf	___aldiv@dividend+1,w
  3992  02FC  1D03               	skipz
  3993  02FD  2B00               	goto	u1355
  3994  02FE  0820               	movf	___aldiv@divisor,w
  3995  02FF  0224               	subwf	___aldiv@dividend,w
  3996  0300                     u1355:
  3997  0300  1C03               	skipc
  3998  0301  2B0B               	goto	l1891
  3999  0302  0820               	movf	___aldiv@divisor,w
  4000  0303  02A4               	subwf	___aldiv@dividend,f
  4001  0304  0821               	movf	___aldiv@divisor+1,w
  4002  0305  3BA5               	subwfb	___aldiv@dividend+1,f
  4003  0306  0822               	movf	___aldiv@divisor+2,w
  4004  0307  3BA6               	subwfb	___aldiv@dividend+2,f
  4005  0308  0823               	movf	___aldiv@divisor+3,w
  4006  0309  3BA7               	subwfb	___aldiv@dividend+3,f
  4007  030A  142A               	bsf	___aldiv@quotient,0
  4008  030B                     l1891:
  4009  030B  3001               	movlw	1
  4010  030C                     u1365:
  4011  030C  36A3               	lsrf	___aldiv@divisor+3,f
  4012  030D  0CA2               	rrf	___aldiv@divisor+2,f
  4013  030E  0CA1               	rrf	___aldiv@divisor+1,f
  4014  030F  0CA0               	rrf	___aldiv@divisor,f
  4015  0310  0B89               	decfsz	9,f
  4016  0311  2B0C               	goto	u1365
  4017  0312  3001               	movlw	1
  4018  0313  02A8               	subwf	___aldiv@counter,f
  4019  0314  1D03               	btfss	3,2
  4020  0315  2AEB               	goto	l1883
  4021  0316                     l1895:
  4022  0316  0829               	movf	___aldiv@sign,w
  4023  0317  1903               	btfsc	3,2
  4024  0318  2B24               	goto	l1899
  4025  0319  09AA               	comf	___aldiv@quotient,f
  4026  031A  09AB               	comf	___aldiv@quotient+1,f
  4027  031B  09AC               	comf	___aldiv@quotient+2,f
  4028  031C  09AD               	comf	___aldiv@quotient+3,f
  4029  031D  0AAA               	incf	___aldiv@quotient,f
  4030  031E  1903               	skipnz
  4031  031F  0AAB               	incf	___aldiv@quotient+1,f
  4032  0320  1903               	skipnz
  4033  0321  0AAC               	incf	___aldiv@quotient+2,f
  4034  0322  1903               	skipnz
  4035  0323  0AAD               	incf	___aldiv@quotient+3,f
  4036  0324                     l1899:
  4037  0324  082D               	movf	___aldiv@quotient+3,w
  4038  0325  00A3               	movwf	?___aldiv+3
  4039  0326  082C               	movf	___aldiv@quotient+2,w
  4040  0327  00A2               	movwf	?___aldiv+2
  4041  0328  082B               	movf	___aldiv@quotient+1,w
  4042  0329  00A1               	movwf	?___aldiv+1
  4043  032A  082A               	movf	___aldiv@quotient,w
  4044  032B  00A0               	movwf	?___aldiv
  4045  032C  0008               	return
  4046  032D                     __end_of___aldiv:
  4047                           
  4048                           	psect	text12
  4049  0622                     __ptext12:	
  4050 ;; *************** function _TMR2_StartTimer *****************
  4051 ;; Defined at:
  4052 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		None
  4061 ;; Tracked objects:
  4062 ;;		On entry : 1F/0
  4063 ;;		On exit  : 1F/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1
  4066 ;;      Params:         0       0       0
  4067 ;;      Locals:         0       0       0
  4068 ;;      Temps:          0       0       0
  4069 ;;      Totals:         0       0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    4
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function _TMR2_StartTimer
  4082  0622                     _TMR2_StartTimer:
  4083                           
  4084                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in _TMR2_StartTimer: []
  4088  0622  151C               	bsf	28,2	;volatile
  4089  0623  0008               	return
  4090  0624                     __end_of_TMR2_StartTimer:
  4091                           
  4092                           	psect	text13
  4093  05DD                     __ptext13:	
  4094 ;; *************** function _SYSTEM_Initialize *****************
  4095 ;; Defined at:
  4096 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;		None
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;		None
  4101 ;; Return value:  Size  Location     Type
  4102 ;;                  1    wreg      void 
  4103 ;; Registers used:
  4104 ;;		wreg, status,2, status,0, pclath, cstack
  4105 ;; Tracked objects:
  4106 ;;		On entry : B1F/0
  4107 ;;		On exit  : 1F/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMMON   BANK0   BANK1
  4110 ;;      Params:         0       0       0
  4111 ;;      Locals:         0       0       0
  4112 ;;      Temps:          0       0       0
  4113 ;;      Totals:         0       0       0
  4114 ;;Total ram usage:        0 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    6
  4117 ;; This function calls:
  4118 ;;		_ADC_Initialize
  4119 ;;		_OSCILLATOR_Initialize
  4120 ;;		_PIN_MANAGER_Initialize
  4121 ;;		_PWM3_Initialize
  4122 ;;		_TMR0_Initialize
  4123 ;;		_TMR2_Initialize
  4124 ;;		_WDT_Initialize
  4125 ;; This function is called by:
  4126 ;;		_main
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           
  4131                           ;psect for function _SYSTEM_Initialize
  4132  05DD                     _SYSTEM_Initialize:
  4133                           
  4134                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4138  05DD  255F               	fcall	_PIN_MANAGER_Initialize
  4139                           
  4140                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4141  05DE  2609               	fcall	_OSCILLATOR_Initialize
  4142                           
  4143                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4144  05DF  261E               	fcall	_WDT_Initialize
  4145                           
  4146                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  4147  05E0  25F5               	fcall	_ADC_Initialize
  4148                           
  4149                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  4150  05E1  25ED               	fcall	_PWM3_Initialize
  4151                           
  4152                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  4153  05E2  25E5               	fcall	_TMR2_Initialize
  4154                           
  4155                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  4156  05E3  25A5               	fcall	_TMR0_Initialize
  4157  05E4  0008               	return
  4158  05E5                     __end_of_SYSTEM_Initialize:
  4159                           
  4160                           	psect	text14
  4161  061E                     __ptext14:	
  4162 ;; *************** function _WDT_Initialize *****************
  4163 ;; Defined at:
  4164 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg
  4173 ;; Tracked objects:
  4174 ;;		On entry : B1F/2
  4175 ;;		On exit  : B1F/1
  4176 ;;		Unchanged: B00/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1
  4178 ;;      Params:         0       0       0
  4179 ;;      Locals:         0       0       0
  4180 ;;      Temps:          0       0       0
  4181 ;;      Totals:         0       0       0
  4182 ;;Total ram usage:        0 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    4
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_SYSTEM_Initialize
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _WDT_Initialize
  4194  061E                     _WDT_Initialize:
  4195                           
  4196                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4197                           
  4198                           ;incstack = 0
  4199                           ; Regs used in _WDT_Initialize: [wreg]
  4200  061E  3016               	movlw	22
  4201  061F  0021               	movlb	1	; select bank1
  4202  0620  0097               	movwf	23	;volatile
  4203  0621  0008               	return
  4204  0622                     __end_of_WDT_Initialize:
  4205                           
  4206                           	psect	text15
  4207  05E5                     __ptext15:	
  4208 ;; *************** function _TMR2_Initialize *****************
  4209 ;; Defined at:
  4210 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, status,2
  4219 ;; Tracked objects:
  4220 ;;		On entry : B1F/C
  4221 ;;		On exit  : B1F/0
  4222 ;;		Unchanged: B00/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1
  4224 ;;      Params:         0       0       0
  4225 ;;      Locals:         0       0       0
  4226 ;;      Temps:          0       0       0
  4227 ;;      Totals:         0       0       0
  4228 ;;Total ram usage:        0 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    4
  4231 ;; This function calls:
  4232 ;;		Nothing
  4233 ;; This function is called by:
  4234 ;;		_SYSTEM_Initialize
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function _TMR2_Initialize
  4240  05E5                     _TMR2_Initialize:
  4241                           
  4242                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4246  05E5  30FF               	movlw	255
  4247  05E6  0020               	movlb	0	; select bank0
  4248  05E7  009B               	movwf	27	;volatile
  4249                           
  4250                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4251  05E8  019A               	clrf	26	;volatile
  4252                           
  4253                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4254  05E9  1091               	bcf	17,1	;volatile
  4255                           
  4256                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  4257  05EA  301C               	movlw	28
  4258  05EB  009C               	movwf	28	;volatile
  4259  05EC  0008               	return
  4260  05ED                     __end_of_TMR2_Initialize:
  4261                           
  4262                           	psect	text16
  4263  05A5                     __ptext16:	
  4264 ;; *************** function _TMR0_Initialize *****************
  4265 ;; Defined at:
  4266 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0, pclath, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : B1F/0
  4277 ;;		On exit  : 1F/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1
  4280 ;;      Params:         0       0       0
  4281 ;;      Locals:         0       0       0
  4282 ;;      Temps:          1       0       0
  4283 ;;      Totals:         1       0       0
  4284 ;;Total ram usage:        1 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    5
  4287 ;; This function calls:
  4288 ;;		_TMR0_SetInterruptHandler
  4289 ;; This function is called by:
  4290 ;;		_SYSTEM_Initialize
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           
  4295                           ;psect for function _TMR0_Initialize
  4296  05A5                     _TMR0_Initialize:
  4297                           
  4298                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4302  05A5  0021               	movlb	1	; select bank1
  4303  05A6  0815               	movf	21,w	;volatile
  4304  05A7  39C0               	andlw	192
  4305  05A8  3811               	iorlw	17
  4306  05A9  0095               	movwf	21	;volatile
  4307                           
  4308                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  4309  05AA  3006               	movlw	6
  4310  05AB  0020               	movlb	0	; select bank0
  4311  05AC  0095               	movwf	21	;volatile
  4312                           
  4313                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  4314  05AD  3006               	movlw	6
  4315  05AE  00F2               	movwf	??_TMR0_Initialize
  4316  05AF  0872               	movf	??_TMR0_Initialize,w
  4317  05B0  00E7               	movwf	_timer0ReloadVal	;volatile
  4318                           
  4319                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  4320  05B1  110B               	bcf	11,2	;volatile
  4321                           
  4322                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  4323  05B2  168B               	bsf	11,5	;volatile
  4324                           
  4325                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  4326  05B3  3024               	movlw	low _TMR0_DefaultInterruptHandler
  4327  05B4  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4328  05B5  3006               	movlw	high _TMR0_DefaultInterruptHandler
  4329  05B6  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4330  05B7  2615               	fcall	_TMR0_SetInterruptHandler
  4331  05B8  0008               	return
  4332  05B9                     __end_of_TMR0_Initialize:
  4333                           
  4334                           	psect	text17
  4335  0615                     __ptext17:	
  4336 ;; *************** function _TMR0_SetInterruptHandler *****************
  4337 ;; Defined at:
  4338 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4341 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg
  4348 ;; Tracked objects:
  4349 ;;		On entry : 1F/0
  4350 ;;		On exit  : 1F/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1
  4353 ;;      Params:         2       0       0
  4354 ;;      Locals:         0       0       0
  4355 ;;      Temps:          0       0       0
  4356 ;;      Totals:         2       0       0
  4357 ;;Total ram usage:        2 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    4
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_TMR0_Initialize
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           
  4369                           ;psect for function _TMR0_SetInterruptHandler
  4370  0615                     _TMR0_SetInterruptHandler:
  4371                           
  4372                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4376  0615  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4377  0616  00E6               	movwf	_TMR0_InterruptHandler+1
  4378  0617  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4379  0618  00E5               	movwf	_TMR0_InterruptHandler
  4380  0619  0008               	return
  4381  061A                     __end_of_TMR0_SetInterruptHandler:
  4382                           
  4383                           	psect	text18
  4384  05ED                     __ptext18:	
  4385 ;; *************** function _PWM3_Initialize *****************
  4386 ;; Defined at:
  4387 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg
  4396 ;; Tracked objects:
  4397 ;;		On entry : B1F/1
  4398 ;;		On exit  : B1F/C
  4399 ;;		Unchanged: B00/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1
  4401 ;;      Params:         0       0       0
  4402 ;;      Locals:         0       0       0
  4403 ;;      Temps:          0       0       0
  4404 ;;      Totals:         0       0       0
  4405 ;;Total ram usage:        0 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    4
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_SYSTEM_Initialize
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           
  4416                           ;psect for function _PWM3_Initialize
  4417  05ED                     _PWM3_Initialize:
  4418                           
  4419                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  4420                           
  4421                           ;incstack = 0
  4422                           ; Regs used in _PWM3_Initialize: [wreg]
  4423  05ED  30D0               	movlw	208
  4424  05EE  002C               	movlb	12	; select bank12
  4425  05EF  0099               	movwf	25	;volatile
  4426                           
  4427                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  4428  05F0  30FF               	movlw	255
  4429  05F1  0098               	movwf	24	;volatile
  4430                           
  4431                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  4432  05F2  30C0               	movlw	192
  4433  05F3  0097               	movwf	23	;volatile
  4434  05F4  0008               	return
  4435  05F5                     __end_of_PWM3_Initialize:
  4436                           
  4437                           	psect	text19
  4438  055F                     __ptext19:	
  4439 ;; *************** function _PIN_MANAGER_Initialize *****************
  4440 ;; Defined at:
  4441 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;		None
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2
  4450 ;; Tracked objects:
  4451 ;;		On entry : B1F/0
  4452 ;;		On exit  : B1F/2
  4453 ;;		Unchanged: B00/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1
  4455 ;;      Params:         0       0       0
  4456 ;;      Locals:         0       0       0
  4457 ;;      Temps:          0       0       0
  4458 ;;      Totals:         0       0       0
  4459 ;;Total ram usage:        0 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    4
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_SYSTEM_Initialize
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           
  4470                           ;psect for function _PIN_MANAGER_Initialize
  4471  055F                     _PIN_MANAGER_Initialize:
  4472                           
  4473                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4474                           
  4475                           ;incstack = 0
  4476                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4477  055F  0022               	movlb	2	; select bank2
  4478  0560  018C               	clrf	12	;volatile
  4479                           
  4480                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4481  0561  018D               	clrf	13	;volatile
  4482                           
  4483                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4484  0562  018E               	clrf	14	;volatile
  4485                           
  4486                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  4487  0563  303B               	movlw	59
  4488  0564  0021               	movlb	1	; select bank1
  4489  0565  008C               	movwf	12	;volatile
  4490                           
  4491                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  4492  0566  3010               	movlw	16
  4493  0567  008D               	movwf	13	;volatile
  4494                           
  4495                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  4496  0568  018E               	clrf	14	;volatile
  4497                           
  4498                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4499  0569  0023               	movlb	3	; select bank3
  4500  056A  018E               	clrf	14	;volatile
  4501                           
  4502                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  4503  056B  3030               	movlw	48
  4504  056C  008D               	movwf	13	;volatile
  4505                           
  4506                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  4507  056D  3013               	movlw	19
  4508  056E  008C               	movwf	12	;volatile
  4509                           
  4510                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4511  056F  0024               	movlb	4	; select bank4
  4512  0570  018D               	clrf	13	;volatile
  4513                           
  4514                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4515  0571  018C               	clrf	12	;volatile
  4516                           
  4517                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4518  0572  0021               	movlb	1	; select bank1
  4519  0573  1795               	bsf	21,7	;volatile
  4520                           
  4521                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4522  0574  0022               	movlb	2	; select bank2
  4523  0575  019D               	clrf	29	;volatile
  4524  0576  0008               	return
  4525  0577                     __end_of_PIN_MANAGER_Initialize:
  4526                           
  4527                           	psect	text20
  4528  0609                     __ptext20:	
  4529 ;; *************** function _OSCILLATOR_Initialize *****************
  4530 ;; Defined at:
  4531 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2
  4540 ;; Tracked objects:
  4541 ;;		On entry : B1F/2
  4542 ;;		On exit  : B1F/2
  4543 ;;		Unchanged: B00/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1
  4545 ;;      Params:         0       0       0
  4546 ;;      Locals:         0       0       0
  4547 ;;      Temps:          0       0       0
  4548 ;;      Totals:         0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    4
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_SYSTEM_Initialize
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           
  4560                           ;psect for function _OSCILLATOR_Initialize
  4561  0609                     _OSCILLATOR_Initialize:
  4562                           
  4563                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  4564                           
  4565                           ;incstack = 0
  4566                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4567  0609  306A               	movlw	106
  4568  060A  0021               	movlb	1	; select bank1
  4569  060B  0099               	movwf	25	;volatile
  4570                           
  4571                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4572  060C  0022               	movlb	2	; select bank2
  4573  060D  0196               	clrf	22	;volatile
  4574  060E  0008               	return
  4575  060F                     __end_of_OSCILLATOR_Initialize:
  4576                           
  4577                           	psect	text21
  4578  05F5                     __ptext21:	
  4579 ;; *************** function _ADC_Initialize *****************
  4580 ;; Defined at:
  4581 ;;		line 67 in file "mcc_generated_files/adc.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;		None
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2
  4590 ;; Tracked objects:
  4591 ;;		On entry : B1F/1
  4592 ;;		On exit  : B1F/1
  4593 ;;		Unchanged: B00/0
  4594 ;; Data sizes:     COMMON   BANK0   BANK1
  4595 ;;      Params:         0       0       0
  4596 ;;      Locals:         0       0       0
  4597 ;;      Temps:          0       0       0
  4598 ;;      Totals:         0       0       0
  4599 ;;Total ram usage:        0 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    4
  4602 ;; This function calls:
  4603 ;;		Nothing
  4604 ;; This function is called by:
  4605 ;;		_SYSTEM_Initialize
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           
  4610                           ;psect for function _ADC_Initialize
  4611  05F5                     _ADC_Initialize:
  4612                           
  4613                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xC0;
  4614                           
  4615                           ;incstack = 0
  4616                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4617  05F5  30C0               	movlw	192
  4618  05F6  009E               	movwf	30	;volatile
  4619                           
  4620                           ;mcc_generated_files/adc.c: 75:     ADCON2 = 0x00;
  4621  05F7  019F               	clrf	31	;volatile
  4622                           
  4623                           ;mcc_generated_files/adc.c: 78:     ADRESL = 0x00;
  4624  05F8  019B               	clrf	27	;volatile
  4625                           
  4626                           ;mcc_generated_files/adc.c: 81:     ADRESH = 0x00;
  4627  05F9  019C               	clrf	28	;volatile
  4628                           
  4629                           ;mcc_generated_files/adc.c: 84:     ADCON0 = 0x01;
  4630  05FA  3001               	movlw	1
  4631  05FB  009D               	movwf	29	;volatile
  4632  05FC  0008               	return
  4633  05FD                     __end_of_ADC_Initialize:
  4634                           
  4635                           	psect	text22
  4636  058F                     __ptext22:	
  4637 ;; *************** function _PWM3_LoadDutyValue *****************
  4638 ;; Defined at:
  4639 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  dutyValue       2    4[COMMON] unsigned short 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;		None
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  1    wreg      void 
  4646 ;; Registers used:
  4647 ;;		wreg, status,2, status,0
  4648 ;; Tracked objects:
  4649 ;;		On entry : 1F/1
  4650 ;;		On exit  : 1F/C
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMMON   BANK0   BANK1
  4653 ;;      Params:         2       0       0
  4654 ;;      Locals:         0       0       0
  4655 ;;      Temps:          2       0       0
  4656 ;;      Totals:         4       0       0
  4657 ;;Total ram usage:        4 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    4
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_main
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           
  4668                           ;psect for function _PWM3_LoadDutyValue
  4669  058F                     _PWM3_LoadDutyValue:
  4670                           
  4671                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  4675  058F  0875               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  4676  0590  00F7               	movwf	??_PWM3_LoadDutyValue+1
  4677  0591  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4678  0592  00F6               	movwf	??_PWM3_LoadDutyValue
  4679  0593  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4680  0594  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4681  0595  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4682  0596  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4683  0597  0876               	movf	??_PWM3_LoadDutyValue,w
  4684  0598  002C               	movlb	12	; select bank12
  4685  0599  0098               	movwf	24	;volatile
  4686                           
  4687                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  4688  059A  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4689  059B  3903               	andlw	3
  4690  059C  00F6               	movwf	??_PWM3_LoadDutyValue
  4691  059D  3005               	movlw	5
  4692  059E                     u1055:
  4693  059E  35F6               	lslf	??_PWM3_LoadDutyValue,f
  4694  059F  3EFF               	addlw	-1
  4695  05A0  1D03               	skipz
  4696  05A1  2D9E               	goto	u1055
  4697  05A2  3576               	lslf	??_PWM3_LoadDutyValue,w
  4698  05A3  0097               	movwf	23	;volatile
  4699  05A4  0008               	return
  4700  05A5                     __end_of_PWM3_LoadDutyValue:
  4701                           
  4702                           	psect	text23
  4703  0577                     __ptext23:	
  4704 ;; *************** function _ADC_GetConversion *****************
  4705 ;; Defined at:
  4706 ;;		line 115 in file "mcc_generated_files/adc.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  channel         1    wreg     enum E2336
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  channel         1    3[COMMON] enum E2336
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  2    0[COMMON] unsigned short 
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0
  4715 ;; Tracked objects:
  4716 ;;		On entry : 1F/0
  4717 ;;		On exit  : 1F/1
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1
  4720 ;;      Params:         2       0       0
  4721 ;;      Locals:         1       0       0
  4722 ;;      Temps:          1       0       0
  4723 ;;      Totals:         4       0       0
  4724 ;;Total ram usage:        4 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    4
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_main
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function _ADC_GetConversion
  4736  0577                     _ADC_GetConversion:
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4740                           ;ADC_GetConversion@channel stored from wreg
  4741  0577  00F3               	movwf	ADC_GetConversion@channel
  4742                           
  4743                           ;mcc_generated_files/adc.c: 115: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 116: {;mcc_generated_files/adc.c: 118:     ADCON0bits.CHS = ch
      +                          annel;
  4744  0578  0873               	movf	ADC_GetConversion@channel,w
  4745  0579  00F2               	movwf	??_ADC_GetConversion
  4746  057A  0DF2               	rlf	??_ADC_GetConversion,f
  4747  057B  0DF2               	rlf	??_ADC_GetConversion,f
  4748  057C  0021               	movlb	1	; select bank1
  4749  057D  081D               	movf	29,w	;volatile
  4750  057E  0672               	xorwf	??_ADC_GetConversion,w
  4751  057F  3983               	andlw	-125
  4752  0580  0672               	xorwf	??_ADC_GetConversion,w
  4753  0581  009D               	movwf	29	;volatile
  4754                           
  4755                           ;mcc_generated_files/adc.c: 121:     ADCON0bits.ADON = 1;
  4756  0582  141D               	bsf	29,0	;volatile
  4757                           
  4758                           ;mcc_generated_files/adc.c: 124:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4759  0583  3200               	nop2	;2 cycle nop
  4760  0584  3200               	nop2	;2 cycle nop
  4761  0585  0000               	nop
  4762                           
  4763                           ;mcc_generated_files/adc.c: 127:     ADCON0bits.GO_nDONE = 1;
  4764  0586  0021               	movlb	1	; select bank1
  4765  0587  149D               	bsf	29,1	;volatile
  4766  0588                     l34:	
  4767                           ;mcc_generated_files/adc.c: 131:     {;mcc_generated_files/adc.c: 132:     }
  4768                           
  4769                           
  4770                           ;mcc_generated_files/adc.c: 130:     while (ADCON0bits.GO_nDONE)
  4771  0588  189D               	btfsc	29,1	;volatile
  4772  0589  2D88               	goto	l34
  4773                           
  4774                           ;mcc_generated_files/adc.c: 135:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4775  058A  081C               	movf	28,w	;volatile
  4776  058B  00F1               	movwf	?_ADC_GetConversion+1
  4777  058C  081B               	movf	27,w	;volatile
  4778  058D  00F0               	movwf	?_ADC_GetConversion
  4779  058E  0008               	return
  4780  058F                     __end_of_ADC_GetConversion:
  4781                           
  4782                           	psect	intentry
  4783  0004                     __pintentry:	
  4784 ;; *************** function _INTERRUPT_InterruptManager *****************
  4785 ;; Defined at:
  4786 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;		None
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  1    wreg      void 
  4793 ;; Registers used:
  4794 ;;		wreg, status,2, status,0, pclath, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1
  4800 ;;      Params:         0       0       0
  4801 ;;      Locals:         0       0       0
  4802 ;;      Temps:          0       0       0
  4803 ;;      Totals:         0       0       0
  4804 ;;Total ram usage:        0 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    3
  4807 ;; This function calls:
  4808 ;;		_TMR0_ISR
  4809 ;; This function is called by:
  4810 ;;		Interrupt level 1
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814  0004                     _INTERRUPT_InterruptManager:
  4815                           
  4816                           ;incstack = 0
  4817  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4818                           
  4819                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4820  0005  3180               	pagesel	$
  4821                           
  4822                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4823  0006  1A8B               	btfsc	11,5	;volatile
  4824  0007  1D0B               	btfss	11,2	;volatile
  4825  0008  280A               	goto	i1l197
  4826                           
  4827                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4828  0009  260F               	fcall	_TMR0_ISR
  4829  000A                     i1l197:	
  4830                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4831                           
  4832  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4833  000B  0009               	retfie
  4834  000C                     __end_of_INTERRUPT_InterruptManager:
  4835                           
  4836                           	psect	text25
  4837  060F                     __ptext25:	
  4838 ;; *************** function _TMR0_ISR *****************
  4839 ;; Defined at:
  4840 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;		None
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0, pclath, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMMON   BANK0   BANK1
  4854 ;;      Params:         0       0       0
  4855 ;;      Locals:         0       0       0
  4856 ;;      Temps:          0       0       0
  4857 ;;      Totals:         0       0       0
  4858 ;;Total ram usage:        0 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    2
  4861 ;; This function calls:
  4862 ;;		_TMR0_CallBack
  4863 ;; This function is called by:
  4864 ;;		_INTERRUPT_InterruptManager
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           
  4869                           ;psect for function _TMR0_ISR
  4870  060F                     _TMR0_ISR:
  4871                           
  4872                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  4873                           
  4874                           ;incstack = 0
  4875                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4876  060F  110B               	bcf	11,2	;volatile
  4877                           
  4878                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  4879  0610  0020               	movlb	0	; select bank0
  4880  0611  0867               	movf	_timer0ReloadVal,w	;volatile
  4881  0612  0095               	movwf	21	;volatile
  4882                           
  4883                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
  4884  0613  25D3               	fcall	_TMR0_CallBack
  4885  0614  0008               	return
  4886  0615                     __end_of_TMR0_ISR:
  4887                           
  4888                           	psect	text26
  4889  05D3                     __ptext26:	
  4890 ;; *************** function _TMR0_CallBack *****************
  4891 ;; Defined at:
  4892 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;		None
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0, pclath, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 1F/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1
  4906 ;;      Params:         0       0       0
  4907 ;;      Locals:         0       0       0
  4908 ;;      Temps:          0       0       0
  4909 ;;      Totals:         0       0       0
  4910 ;;Total ram usage:        0 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    1
  4913 ;; This function calls:
  4914 ;;		Absolute function
  4915 ;;		_TMR0_DefaultInterruptHandler
  4916 ;;		_timer0CallBack
  4917 ;; This function is called by:
  4918 ;;		_TMR0_ISR
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _TMR0_CallBack
  4924  05D3                     _TMR0_CallBack:
  4925                           
  4926                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
  4927                           
  4928                           ;incstack = 0
  4929                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4930  05D3  0865               	movf	_TMR0_InterruptHandler,w
  4931  05D4  0466               	iorwf	_TMR0_InterruptHandler+1,w
  4932  05D5  1903               	btfsc	3,2
  4933  05D6  0008               	return
  4934                           
  4935                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
  4936  05D7  0866               	movf	_TMR0_InterruptHandler+1,w
  4937  05D8  008A               	movwf	10
  4938  05D9  0865               	movf	_TMR0_InterruptHandler,w
  4939  05DA  000A               	callw
  4940  05DB  3185               	pagesel	$
  4941  05DC  0008               	return
  4942  05DD                     __end_of_TMR0_CallBack:
  4943                           
  4944                           	psect	text27
  4945  0624                     __ptext27:	
  4946 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4947 ;; Defined at:
  4948 ;;		line 137 in file "mcc_generated_files/tmr0.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      void 
  4955 ;; Registers used:
  4956 ;;		None
  4957 ;; Tracked objects:
  4958 ;;		On entry : 1F/0
  4959 ;;		On exit  : 1F/0
  4960 ;;		Unchanged: 1F/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1
  4962 ;;      Params:         0       0       0
  4963 ;;      Locals:         0       0       0
  4964 ;;      Temps:          0       0       0
  4965 ;;      Totals:         0       0       0
  4966 ;;Total ram usage:        0 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_TMR0_Initialize
  4972 ;;		_TMR0_CallBack
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           
  4977                           ;psect for function _TMR0_DefaultInterruptHandler
  4978  0624                     _TMR0_DefaultInterruptHandler:
  4979                           
  4980                           ;incstack = 0
  4981                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  4982  0624  0008               	return
  4983  0625                     __end_of_TMR0_DefaultInterruptHandler:
  4984                           
  4985                           	psect	text28
  4986  05B9                     __ptext28:	
  4987 ;; *************** function _timer0CallBack *****************
  4988 ;; Defined at:
  4989 ;;		line 119 in file "main.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2
  4998 ;; Tracked objects:
  4999 ;;		On entry : 1F/0
  5000 ;;		On exit  : 1F/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMMON   BANK0   BANK1
  5003 ;;      Params:         0       0       0
  5004 ;;      Locals:         0       0       0
  5005 ;;      Temps:          0       0       0
  5006 ;;      Totals:         0       0       0
  5007 ;;Total ram usage:        0 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_main
  5013 ;;		_TMR0_CallBack
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           
  5018                           ;psect for function _timer0CallBack
  5019  05B9                     _timer0CallBack:
  5020                           
  5021                           ;main.c: 121:     msTick++;
  5022                           
  5023                           ;incstack = 0
  5024                           ; Regs used in _timer0CallBack: [wreg+status,2]
  5025  05B9  3001               	movlw	1
  5026  05BA  07D5               	addwf	_msTick,f	;volatile
  5027  05BB  3000               	movlw	0
  5028  05BC  3DD6               	addwfc	_msTick+1,f	;volatile
  5029                           
  5030                           ;main.c: 123:     if(msTick > 200)
  5031  05BD  3000               	movlw	0
  5032  05BE  0256               	subwf	_msTick+1,w	;volatile
  5033  05BF  30C9               	movlw	201
  5034  05C0  1903               	skipnz
  5035  05C1  0255               	subwf	_msTick,w	;volatile
  5036  05C2  1C03               	skipc
  5037  05C3  0008               	return
  5038                           
  5039                           ;main.c: 124:     {;main.c: 125:         doToggle = 1;
  5040  05C4  01D9               	clrf	_doToggle
  5041  05C5  0AD9               	incf	_doToggle,f
  5042                           
  5043                           ;main.c: 126:         msTick = 0;
  5044  05C6  01D5               	clrf	_msTick	;volatile
  5045  05C7  01D6               	clrf	_msTick+1	;volatile
  5046  05C8  0008               	return
  5047  05C9                     __end_of_timer0CallBack:
  5048  007E                     btemp	set	126	;btemp
  5049  007E                     int$flags	set	126
  5050  007E                     wtemp0	set	126
  5051                           
  5052                           	psect	config
  5053                           
  5054                           ;Config register CONFIG1 @ 0x8007
  5055                           ;	Oscillator Selection bits
  5056                           ;	FOSC = INTOSC, Internal Oscillator, I/O Function on OSC1
  5057                           ;	Watchdog Timer Enable
  5058                           ;	WDTE = OFF, WDT disabled
  5059                           ;	Power-up Timer Enable
  5060                           ;	PWRTE = OFF, PWRT disabled
  5061                           ;	MCLR Pin Function Select
  5062                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  5063                           ;	Flash Program Memory Code Protection
  5064                           ;	CP = OFF, Program memory code protection is disabled
  5065                           ;	Brown-out Reset Enable
  5066                           ;	BOREN = ON, Brown-out Reset enabled
  5067                           ;	Clock Out Enable
  5068                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5069  8007                     	org	32775
  5070  8007  3FE4               	dw	16356
  5071                           
  5072                           ;Config register CONFIG2 @ 0x8008
  5073                           ;	Flash Memory Self-Write Protection
  5074                           ;	WRT = OFF, Write protection off
  5075                           ;	Stack Overflow/Underflow Reset Enable
  5076                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5077                           ;	Brown-out Reset Voltage Selection
  5078                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5079                           ;	Low-Power Brown Out Reset
  5080                           ;	LPBOR = OFF, Low-Power BOR is disabled
  5081                           ;	Low-Voltage Programming Enable
  5082                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  5083  8008                     	org	32776
  5084  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        10
    BSS         19
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      72
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 32
		 -> writeFlash@wrBlockData(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_writeFlash
    _writeFlash->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setState->___lldiv
    _readFlash->_FLASH_ReadWord
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PWM3_LoadDutyValue->_ADC_GetConversion

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_writeFlash

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    4008
                                             32 BANK0      8     8      0
                  _ADC_GetConversion
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___aldiv
                             ___lmul
                          _readFlash
              _setLedsForPositioning
                           _setState
                         _writeFlash
 ---------------------------------------------------------------------------------
 (1) _writeFlash                                          33    33      0     856
                                             13 COMMON     1     1      0
                                              0 BANK0     32    32      0
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                    10     7      3     736
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     144
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setState                                             5     5      0    1059
                                              0 BANK0      5     5      0
                            ___lldiv
                             ___tmul
                          _readFlash
 ---------------------------------------------------------------------------------
 (2) _readFlash                                            4     4      0     435
                                              3 COMMON     4     4      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     435
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _setLedsForPositioning                                4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     452
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     120
                                              4 COMMON     4     2      2
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _PWM3_LoadDutyValue
     _ADC_GetConversion (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___aldiv
     ___lmul (ARG)
   ___lmul
   _readFlash
     _FLASH_ReadWord
   _setLedsForPositioning
   _setState
     ___lldiv
     ___tmul
     _readFlash
       _FLASH_ReadWord
   _writeFlash
     _FLASH_WriteBlock
       _FLASH_EraseBlock

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      56       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      56       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Sep 15 14:47:18 2020

                                       _b 0050                                         _m 005B  
                                      l34 0588                           _timer0ReloadVal 0067  
          __size_of_setLedsForPositioning 0138             __end_of_setLedsForPositioning 02AC  
                                     l322 037A                                       l412 018F  
                                     l325 037D                                       l422 01B2  
                                     l432 01D4                                       l416 01A0  
                                     l442 01F5                                       l426 01C3  
                                     l370 011C                                       l452 0216  
                                     l436 01E4                                       l380 014B  
                                     l364 00FE                                       l348 006C  
                                     l462 0244                                       l446 0205  
                                     l382 0155                                       l366 0108  
                                     l632 02BC                                       l472 0265  
                                     l376 0137                                       l368 0112  
                                     l482 0286                                       l458 0234  
                                     l378 0141                                       l492 02A7  
                                     l468 0255                                       l478 0276  
                                     l488 0297                                       l497 02AA  
                                     _PR2 001B                                       u915 03B1  
                                     u925 03E8                                       u945 0513  
                                     u955 0519                                       u885 0415  
                                     u985 046C                           _TMR2_Initialize 05E5  
                                     wreg 0009                               main@channel 005F  
          FLASH_WriteBlock@flashWordArray 0075                                      l2083 0091  
                                    l2085 0168                                      l2087 0389  
                                    l1801 0380                                      l1803 0394  
                                    l1821 01D6                                      l1813 0191  
                                    l1733 0512                                      l1823 01E7  
                                    l1815 01A3                                      l1841 0268  
                                    l1833 0226                                      l1825 01F7  
                                    l1817 01B4                                      l1761 04A2  
                                    l1729 050A                                      l1851 04B3  
                                    l1843 0278                                      l1835 0236  
                                    l1827 0208                                      l1819 01C6  
                                    l1747 0469                                      l1691 0421  
                                    l1923 002C                                      l1845 0289  
                                    l1837 0247                                      l1829 0218  
                                    l1757 0497                                      l1749 0477  
                                    l1933 0045                                      l1855 04BD  
                                    l1847 0299                                      l1839 0257  
                                    l1943 0061                                      l1935 004C  
                                    l1927 0033                                      l1881 02DD  
                                    l1873 02CD                                      l1953 006F  
                                    l1945 0064                                      l1891 030B  
                                    l1883 02EB                                      l1971 009E  
                                    l1955 0072                                      l1797 0340  
                                    l1981 0129                                      l1949 0068  
                                    l1895 0316                                      l1975 00F0  
                                    l1959 007D                                      l1967 0089  
                                    l1969 009C                                      l1899 0324  
                                    l1979 0126                                      l1989 0160  
                                    u1005 0478                                      u1015 048C  
                                    u1025 0498                                      u1055 059E  
                                    u1500 00FC                                      u1325 02E0  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u1520 0106  
                                    u1345 02EC                                      u1265 04BE  
                                    u1610 0135                                      u1355 0300  
                                    u1275 04C5                                      u1540 0110  
                                    u1365 030C                                      u1630 013F  
                                    u1560 011A                                      u1650 0149  
                                    u1580 0124                                      u1670 0153  
                                    u1690 015D                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                                      _main 0020  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                         ?_FLASH_WriteBlock 0073  
                                    start 000C                        ??_FLASH_WriteBlock 0076  
                 __end_of_TMR0_Initialize 05B9            ??_TMR0_DefaultInterruptHandler 0070  
          __size_of_OSCILLATOR_Initialize 0006             __end_of_OSCILLATOR_Initialize 060F  
                         __end_of___aldiv 032D                                     ?_main 0070  
                         __end_of___lldiv 04AB                                     _T2CON 001C  
                                   i1l197 000A                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
       __size_of_TMR0_SetInterruptHandler 0005                       ___lmul@multiplicand 0074  
               ?_TMR0_SetInterruptHandler 0070                          __end_of_TMR0_ISR 0615  
                          _WDT_Initialize 061E                   __end_of_PWM3_Initialize 05F5  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 0622  
                         __initialization 000D                              __end_of_main 0174  
                 __end_of_TMR2_Initialize 05ED               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 0040                     writeFlash@wrBlockData 0020  
                 __size_of_FLASH_ReadWord 0019                    __end_of_WDT_Initialize 0622  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADCON2 009F                 FLASH_WriteBlock@writeAddr 0073  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                                  _BORCON 0116                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
               __size_of_FLASH_EraseBlock 001C                                    _OSCCON 0099  
                                  _WDTCON 0097                                    ___lmul 04AB  
             __size_of_PWM3_LoadDutyValue 0016                                 ??___aldiv 007C  
                                  ___tmul 0504                                 ??___lldiv 0078  
                                  _msTick 0055                          ?_TMR0_Initialize 0070  
                        __end_of_setState 039C                   FLASH_ReadWord@flashAddr 0070  
                         ?_WDT_Initialize 0070                  ADC_GetConversion@channel 0073  
                   __end_of_TMR0_CallBack 05DD                   __end_of_TMR2_StartTimer 0624  
TMR0_SetInterruptHandler@InterruptHandler 0070                          ?_PWM3_Initialize 0070  
                       _SYSTEM_Initialize 05DD                   __end_of__initialization 001D  
                      ?_SYSTEM_Initialize 0070                          _fixedPointFactor 061A  
                          __pcstackCOMMON 0070                   __size_of_timer0CallBack 0010  
                            __pidataBANK0 05C9                       ??_SYSTEM_Initialize 0073  
                               ?_TMR0_ISR 0070                          ?_TMR2_Initialize 0070  
                          _OPTION_REGbits 0095               FLASH_WriteBlock@GIEBitValue 007B  
               __end_of_SYSTEM_Initialize 05E5                                __pbssBANK0 0048  
                      __size_of_readFlash 0069                                __pmaintext 0020  
        __end_of_TMR0_SetInterruptHandler 061A                                   ?___lmul 0070  
                                 ?___tmul 0070                                ??_TMR0_ISR 0070  
                              __pintentry 0004                            ___lmul@product 0078  
               __size_of_FLASH_WriteBlock 0054                   __size_of_ADC_Initialize 0008  
                          _FLASH_ReadWord 0546                     _setLedsForPositioning 0174  
                                 _PWM3DCH 0618                                   _PWM3DCL 0617  
                                 _PWM3CON 0619                          ?_TMR2_StartTimer 0070  
                        _FLASH_EraseBlock 052A                      _ADC_InterruptHandler 0057  
                               ?_setState 0070                                   ___aldiv 02AC  
                         __size_of___lmul 002F                           __size_of___tmul 0026  
                                 ___lldiv 0459                    __end_of_FLASH_ReadWord 055F  
                                 __ptext1 04DA                                   __ptext2 0405  
                                 __ptext3 052A                                   __ptext4 032D  
                                 __ptext5 039C                                   __ptext6 0546  
                                 __ptext7 0504                                   __ptext8 0459  
                                 __ptext9 0174                         __end_of_readFlash 0405  
                   _OSCILLATOR_Initialize 0609                                 _T2CONbits 001C  
                        ___aldiv@dividend 0024                  ??_PIN_MANAGER_Initialize 0070  
              __size_of_SYSTEM_Initialize 0008                                   clrloop0 0604  
                    end_of_initialization 001D                                   init_ram 05FD  
                                 initloop 05FE                                _lowerLimit 0048  
                         ___lldiv@divisor 0070                           ___lldiv@counter 007D  
                              ??_setState 0020                            _timer0CallBack 05B9  
                        ___aldiv@quotient 002A                 FLASH_ReadWord@GIEBitValue 0072  
                         ?_FLASH_ReadWord 0070                          ??_WDT_Initialize 0070  
                _TMR0_SetInterruptHandler 0615                                 _PORTAbits 000C  
                  ?_setLedsForPositioning 0070                  __end_of_fixedPointFactor 061E  
                              _upperLimit 0061                    __end_of_timer0CallBack 05C9  
              __end_of_PWM3_LoadDutyValue 05A5                         FLASH_WriteBlock@i 007C  
                              _writeFlash 04DA                            __end_of___lmul 04DA  
                          __end_of___tmul 052A                         __size_of_TMR0_ISR 0006  
                          _ADC_Initialize 05F5                          _FLASH_WriteBlock 0405  
                  ?_OSCILLATOR_Initialize 0070                       start_initialization 000D  
                __size_of_TMR0_Initialize 0014           __size_of_PIN_MANAGER_Initialize 0018  
                         ?_timer0CallBack 0070                  __size_of_PWM3_Initialize 0008  
                                ??___lmul 0078                                  ??___tmul 0076  
                  __size_of_TMR0_CallBack 000A                    __end_of_ADC_Initialize 05FD  
                             __pdataBANK0 005B               FLASH_EraseBlock@GIEBitValue 0072  
                __end_of_FLASH_EraseBlock 0546                            ___tmul@product 0076  
                               ___latbits 0000                             __pcstackBANK0 0020  
                __size_of_TMR2_Initialize 0008                          setState@newState 0024  
                            _currentState 0060                     _TMR0_InterruptHandler 0065  
                               __pnvBANK0 0065                    _PIN_MANAGER_Initialize 055F  
                                ?___aldiv 0020                         __size_of_setState 006F  
                                ?___lldiv 0070                               ?_writeFlash 0070  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0070  
                               _readFlash 039C                             _TMR0_CallBack 05D3  
                               _msPressed 0053                          _adcValuePosition 004C  
          FLASH_WriteBlock@blockStartAddr 0079                           ___aldiv@divisor 0020  
                       ??_TMR0_Initialize 0072                           ___aldiv@counter 0028  
                                _LATBbits 010D                                  _LATCbits 010E  
                               clear_ram0 0603                  __size_of_TMR2_StartTimer 0002  
     __size_of_INTERRUPT_InterruptManager 0008                ??_TMR0_SetInterruptHandler 0072  
                                _PIR1bits 0011                 FLASH_EraseBlock@startAddr 0070  
                        ??_FLASH_ReadWord 0072                                  _TMR0_ISR 060F  
                 ??_setLedsForPositioning 0074                         ??_PWM3_Initialize 0070  
                              _ADCON0bits 009D                       ___tmul@multiplicand 0073  
                              ?_readFlash 0070                            ?_TMR0_CallBack 0070  
                       ___lmul@multiplier 0070                       __size_of_writeFlash 002A  
                       ??_TMR2_Initialize 0070                  __end_of_FLASH_WriteBlock 0459  
           setLedsForPositioning@adcValue 0070                         _ADC_GetConversion 0577  
                 ??_OSCILLATOR_Initialize 0070                        ?_ADC_GetConversion 0070  
                        __size_of___aldiv 0081                          __size_of___lldiv 0052  
                      _PWM3_LoadDutyValue 058F                       ??_ADC_GetConversion 0072  
                                _doToggle 0059                                  __ptext10 04AB  
                                __ptext11 02AC                                  __ptext20 0609  
                                __ptext12 0622                                  __ptext21 05F5  
                                __ptext13 05DD                                  __ptext22 058F  
                                __ptext14 061E                                  __ptext23 0577  
                                __ptext15 05E5                                  __ptext16 05A5  
                                __ptext25 060F                                  __ptext17 0615  
                                __ptext26 05D3                                  __ptext18 05ED  
                                __ptext27 0624                                  __ptext19 055F  
                                __ptext28 05B9                       ?_PWM3_LoadDutyValue 0074  
                        ??_timer0CallBack 0070                             __size_of_main 0154  
    __end_of_TMR0_DefaultInterruptHandler 0625     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0624                 __end_of_ADC_GetConversion 058F  
                                _setState 032D                      ??_PWM3_LoadDutyValue 0076  
                                int$flags 007E                         ??_TMR2_StartTimer 0070  
      __end_of_INTERRUPT_InterruptManager 000C                _INTERRUPT_InterruptManager 0004  
                       ?_FLASH_EraseBlock 0070                        ??_FLASH_EraseBlock 0072  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0070  
                             ??_readFlash 0073                   __size_of_WDT_Initialize 0004  
                                intlevel1 0000                            _doButtonAction 005A  
                              _PMCON1bits 0195                          ___lldiv@dividend 0074  
                 ?_PIN_MANAGER_Initialize 0070                          ??_ADC_Initialize 0070  
           ?_TMR0_DefaultInterruptHandler 0070                              ??_writeFlash 007D  
                       ___tmul@multiplier 0070               PWM3_LoadDutyValue@dutyValue 0074  
                           __pstringtext1 061A                                _OPTION_REG 0095  
                        ___lldiv@quotient 0079                           _TMR0_Initialize 05A5  
                            ___aldiv@sign 0029            __end_of_PIN_MANAGER_Initialize 0577  
                      __end_of_writeFlash 0504                __size_of_ADC_GetConversion 0018  
                         _PWM3_Initialize 05ED  
