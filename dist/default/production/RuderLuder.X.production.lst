

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Apr 20 08:50:40 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F1507
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.10
    38                           ; Generated 31/07/2019 GMT
    39                           ; 
    40                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F1507 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  0116                     	;# 
   119  0117                     	;# 
   120  011D                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  018E                     	;# 
   124  0191                     	;# 
   125  0191                     	;# 
   126  0192                     	;# 
   127  0193                     	;# 
   128  0193                     	;# 
   129  0194                     	;# 
   130  0195                     	;# 
   131  0196                     	;# 
   132  0197                     	;# 
   133  020C                     	;# 
   134  020D                     	;# 
   135  0391                     	;# 
   136  0392                     	;# 
   137  0393                     	;# 
   138  0394                     	;# 
   139  0395                     	;# 
   140  0396                     	;# 
   141  0498                     	;# 
   142  0498                     	;# 
   143  0499                     	;# 
   144  049A                     	;# 
   145  049B                     	;# 
   146  049B                     	;# 
   147  049C                     	;# 
   148  049D                     	;# 
   149  049E                     	;# 
   150  049F                     	;# 
   151  0611                     	;# 
   152  0612                     	;# 
   153  0613                     	;# 
   154  0613                     	;# 
   155  0614                     	;# 
   156  0615                     	;# 
   157  0616                     	;# 
   158  0616                     	;# 
   159  0617                     	;# 
   160  0618                     	;# 
   161  0619                     	;# 
   162  0619                     	;# 
   163  061A                     	;# 
   164  061B                     	;# 
   165  061C                     	;# 
   166  061C                     	;# 
   167  0691                     	;# 
   168  0692                     	;# 
   169  0693                     	;# 
   170  0694                     	;# 
   171  0695                     	;# 
   172  0F0F                     	;# 
   173  0F10                     	;# 
   174  0F11                     	;# 
   175  0F12                     	;# 
   176  0F13                     	;# 
   177  0F14                     	;# 
   178  0F15                     	;# 
   179  0F16                     	;# 
   180  0F17                     	;# 
   181  0F18                     	;# 
   182  0F19                     	;# 
   183  0F1A                     	;# 
   184  0F1B                     	;# 
   185  0F1C                     	;# 
   186  0F1D                     	;# 
   187  0F1E                     	;# 
   188  0F1F                     	;# 
   189  0FE3                     	;# 
   190  0FE4                     	;# 
   191  0FE5                     	;# 
   192  0FE6                     	;# 
   193  0FE7                     	;# 
   194  0FE8                     	;# 
   195  0FE9                     	;# 
   196  0FEA                     	;# 
   197  0FEB                     	;# 
   198  0FED                     	;# 
   199  0FEE                     	;# 
   200  0FEF                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  0008                     	;# 
   210  0009                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000D                     	;# 
   215  000E                     	;# 
   216  0011                     	;# 
   217  0012                     	;# 
   218  0013                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0016                     	;# 
   222  0017                     	;# 
   223  0018                     	;# 
   224  0019                     	;# 
   225  001A                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  008C                     	;# 
   229  008D                     	;# 
   230  008E                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0095                     	;# 
   235  0096                     	;# 
   236  0097                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  010C                     	;# 
   246  010D                     	;# 
   247  010E                     	;# 
   248  0116                     	;# 
   249  0117                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018D                     	;# 
   253  018E                     	;# 
   254  0191                     	;# 
   255  0191                     	;# 
   256  0192                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0197                     	;# 
   263  020C                     	;# 
   264  020D                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0498                     	;# 
   272  0498                     	;# 
   273  0499                     	;# 
   274  049A                     	;# 
   275  049B                     	;# 
   276  049B                     	;# 
   277  049C                     	;# 
   278  049D                     	;# 
   279  049E                     	;# 
   280  049F                     	;# 
   281  0611                     	;# 
   282  0612                     	;# 
   283  0613                     	;# 
   284  0613                     	;# 
   285  0614                     	;# 
   286  0615                     	;# 
   287  0616                     	;# 
   288  0616                     	;# 
   289  0617                     	;# 
   290  0618                     	;# 
   291  0619                     	;# 
   292  0619                     	;# 
   293  061A                     	;# 
   294  061B                     	;# 
   295  061C                     	;# 
   296  061C                     	;# 
   297  0691                     	;# 
   298  0692                     	;# 
   299  0693                     	;# 
   300  0694                     	;# 
   301  0695                     	;# 
   302  0F0F                     	;# 
   303  0F10                     	;# 
   304  0F11                     	;# 
   305  0F12                     	;# 
   306  0F13                     	;# 
   307  0F14                     	;# 
   308  0F15                     	;# 
   309  0F16                     	;# 
   310  0F17                     	;# 
   311  0F18                     	;# 
   312  0F19                     	;# 
   313  0F1A                     	;# 
   314  0F1B                     	;# 
   315  0F1C                     	;# 
   316  0F1D                     	;# 
   317  0F1E                     	;# 
   318  0F1F                     	;# 
   319  0FE3                     	;# 
   320  0FE4                     	;# 
   321  0FE5                     	;# 
   322  0FE6                     	;# 
   323  0FE7                     	;# 
   324  0FE8                     	;# 
   325  0FE9                     	;# 
   326  0FEA                     	;# 
   327  0FEB                     	;# 
   328  0FED                     	;# 
   329  0FEE                     	;# 
   330  0FEF                     	;# 
   331  0000                     	;# 
   332  0001                     	;# 
   333  0002                     	;# 
   334  0003                     	;# 
   335  0004                     	;# 
   336  0005                     	;# 
   337  0006                     	;# 
   338  0007                     	;# 
   339  0008                     	;# 
   340  0009                     	;# 
   341  000A                     	;# 
   342  000B                     	;# 
   343  000C                     	;# 
   344  000D                     	;# 
   345  000E                     	;# 
   346  0011                     	;# 
   347  0012                     	;# 
   348  0013                     	;# 
   349  0015                     	;# 
   350  0016                     	;# 
   351  0016                     	;# 
   352  0017                     	;# 
   353  0018                     	;# 
   354  0019                     	;# 
   355  001A                     	;# 
   356  001B                     	;# 
   357  001C                     	;# 
   358  008C                     	;# 
   359  008D                     	;# 
   360  008E                     	;# 
   361  0091                     	;# 
   362  0092                     	;# 
   363  0093                     	;# 
   364  0095                     	;# 
   365  0096                     	;# 
   366  0097                     	;# 
   367  0099                     	;# 
   368  009A                     	;# 
   369  009B                     	;# 
   370  009B                     	;# 
   371  009C                     	;# 
   372  009D                     	;# 
   373  009E                     	;# 
   374  009F                     	;# 
   375  010C                     	;# 
   376  010D                     	;# 
   377  010E                     	;# 
   378  0116                     	;# 
   379  0117                     	;# 
   380  011D                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  018E                     	;# 
   384  0191                     	;# 
   385  0191                     	;# 
   386  0192                     	;# 
   387  0193                     	;# 
   388  0193                     	;# 
   389  0194                     	;# 
   390  0195                     	;# 
   391  0196                     	;# 
   392  0197                     	;# 
   393  020C                     	;# 
   394  020D                     	;# 
   395  0391                     	;# 
   396  0392                     	;# 
   397  0393                     	;# 
   398  0394                     	;# 
   399  0395                     	;# 
   400  0396                     	;# 
   401  0498                     	;# 
   402  0498                     	;# 
   403  0499                     	;# 
   404  049A                     	;# 
   405  049B                     	;# 
   406  049B                     	;# 
   407  049C                     	;# 
   408  049D                     	;# 
   409  049E                     	;# 
   410  049F                     	;# 
   411  0611                     	;# 
   412  0612                     	;# 
   413  0613                     	;# 
   414  0613                     	;# 
   415  0614                     	;# 
   416  0615                     	;# 
   417  0616                     	;# 
   418  0616                     	;# 
   419  0617                     	;# 
   420  0618                     	;# 
   421  0619                     	;# 
   422  0619                     	;# 
   423  061A                     	;# 
   424  061B                     	;# 
   425  061C                     	;# 
   426  061C                     	;# 
   427  0691                     	;# 
   428  0692                     	;# 
   429  0693                     	;# 
   430  0694                     	;# 
   431  0695                     	;# 
   432  0F0F                     	;# 
   433  0F10                     	;# 
   434  0F11                     	;# 
   435  0F12                     	;# 
   436  0F13                     	;# 
   437  0F14                     	;# 
   438  0F15                     	;# 
   439  0F16                     	;# 
   440  0F17                     	;# 
   441  0F18                     	;# 
   442  0F19                     	;# 
   443  0F1A                     	;# 
   444  0F1B                     	;# 
   445  0F1C                     	;# 
   446  0F1D                     	;# 
   447  0F1E                     	;# 
   448  0F1F                     	;# 
   449  0FE3                     	;# 
   450  0FE4                     	;# 
   451  0FE5                     	;# 
   452  0FE6                     	;# 
   453  0FE7                     	;# 
   454  0FE8                     	;# 
   455  0FE9                     	;# 
   456  0FEA                     	;# 
   457  0FEB                     	;# 
   458  0FED                     	;# 
   459  0FEE                     	;# 
   460  0FEF                     	;# 
   461  0000                     	;# 
   462  0001                     	;# 
   463  0002                     	;# 
   464  0003                     	;# 
   465  0004                     	;# 
   466  0005                     	;# 
   467  0006                     	;# 
   468  0007                     	;# 
   469  0008                     	;# 
   470  0009                     	;# 
   471  000A                     	;# 
   472  000B                     	;# 
   473  000C                     	;# 
   474  000D                     	;# 
   475  000E                     	;# 
   476  0011                     	;# 
   477  0012                     	;# 
   478  0013                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  008C                     	;# 
   489  008D                     	;# 
   490  008E                     	;# 
   491  0091                     	;# 
   492  0092                     	;# 
   493  0093                     	;# 
   494  0095                     	;# 
   495  0096                     	;# 
   496  0097                     	;# 
   497  0099                     	;# 
   498  009A                     	;# 
   499  009B                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  010C                     	;# 
   506  010D                     	;# 
   507  010E                     	;# 
   508  0116                     	;# 
   509  0117                     	;# 
   510  011D                     	;# 
   511  018C                     	;# 
   512  018D                     	;# 
   513  018E                     	;# 
   514  0191                     	;# 
   515  0191                     	;# 
   516  0192                     	;# 
   517  0193                     	;# 
   518  0193                     	;# 
   519  0194                     	;# 
   520  0195                     	;# 
   521  0196                     	;# 
   522  0197                     	;# 
   523  020C                     	;# 
   524  020D                     	;# 
   525  0391                     	;# 
   526  0392                     	;# 
   527  0393                     	;# 
   528  0394                     	;# 
   529  0395                     	;# 
   530  0396                     	;# 
   531  0498                     	;# 
   532  0498                     	;# 
   533  0499                     	;# 
   534  049A                     	;# 
   535  049B                     	;# 
   536  049B                     	;# 
   537  049C                     	;# 
   538  049D                     	;# 
   539  049E                     	;# 
   540  049F                     	;# 
   541  0611                     	;# 
   542  0612                     	;# 
   543  0613                     	;# 
   544  0613                     	;# 
   545  0614                     	;# 
   546  0615                     	;# 
   547  0616                     	;# 
   548  0616                     	;# 
   549  0617                     	;# 
   550  0618                     	;# 
   551  0619                     	;# 
   552  0619                     	;# 
   553  061A                     	;# 
   554  061B                     	;# 
   555  061C                     	;# 
   556  061C                     	;# 
   557  0691                     	;# 
   558  0692                     	;# 
   559  0693                     	;# 
   560  0694                     	;# 
   561  0695                     	;# 
   562  0F0F                     	;# 
   563  0F10                     	;# 
   564  0F11                     	;# 
   565  0F12                     	;# 
   566  0F13                     	;# 
   567  0F14                     	;# 
   568  0F15                     	;# 
   569  0F16                     	;# 
   570  0F17                     	;# 
   571  0F18                     	;# 
   572  0F19                     	;# 
   573  0F1A                     	;# 
   574  0F1B                     	;# 
   575  0F1C                     	;# 
   576  0F1D                     	;# 
   577  0F1E                     	;# 
   578  0F1F                     	;# 
   579  0FE3                     	;# 
   580  0FE4                     	;# 
   581  0FE5                     	;# 
   582  0FE6                     	;# 
   583  0FE7                     	;# 
   584  0FE8                     	;# 
   585  0FE9                     	;# 
   586  0FEA                     	;# 
   587  0FEB                     	;# 
   588  0FED                     	;# 
   589  0FEE                     	;# 
   590  0FEF                     	;# 
   591  0000                     	;# 
   592  0001                     	;# 
   593  0002                     	;# 
   594  0003                     	;# 
   595  0004                     	;# 
   596  0005                     	;# 
   597  0006                     	;# 
   598  0007                     	;# 
   599  0008                     	;# 
   600  0009                     	;# 
   601  000A                     	;# 
   602  000B                     	;# 
   603  000C                     	;# 
   604  000D                     	;# 
   605  000E                     	;# 
   606  0011                     	;# 
   607  0012                     	;# 
   608  0013                     	;# 
   609  0015                     	;# 
   610  0016                     	;# 
   611  0016                     	;# 
   612  0017                     	;# 
   613  0018                     	;# 
   614  0019                     	;# 
   615  001A                     	;# 
   616  001B                     	;# 
   617  001C                     	;# 
   618  008C                     	;# 
   619  008D                     	;# 
   620  008E                     	;# 
   621  0091                     	;# 
   622  0092                     	;# 
   623  0093                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0097                     	;# 
   627  0099                     	;# 
   628  009A                     	;# 
   629  009B                     	;# 
   630  009B                     	;# 
   631  009C                     	;# 
   632  009D                     	;# 
   633  009E                     	;# 
   634  009F                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010E                     	;# 
   638  0116                     	;# 
   639  0117                     	;# 
   640  011D                     	;# 
   641  018C                     	;# 
   642  018D                     	;# 
   643  018E                     	;# 
   644  0191                     	;# 
   645  0191                     	;# 
   646  0192                     	;# 
   647  0193                     	;# 
   648  0193                     	;# 
   649  0194                     	;# 
   650  0195                     	;# 
   651  0196                     	;# 
   652  0197                     	;# 
   653  020C                     	;# 
   654  020D                     	;# 
   655  0391                     	;# 
   656  0392                     	;# 
   657  0393                     	;# 
   658  0394                     	;# 
   659  0395                     	;# 
   660  0396                     	;# 
   661  0498                     	;# 
   662  0498                     	;# 
   663  0499                     	;# 
   664  049A                     	;# 
   665  049B                     	;# 
   666  049B                     	;# 
   667  049C                     	;# 
   668  049D                     	;# 
   669  049E                     	;# 
   670  049F                     	;# 
   671  0611                     	;# 
   672  0612                     	;# 
   673  0613                     	;# 
   674  0613                     	;# 
   675  0614                     	;# 
   676  0615                     	;# 
   677  0616                     	;# 
   678  0616                     	;# 
   679  0617                     	;# 
   680  0618                     	;# 
   681  0619                     	;# 
   682  0619                     	;# 
   683  061A                     	;# 
   684  061B                     	;# 
   685  061C                     	;# 
   686  061C                     	;# 
   687  0691                     	;# 
   688  0692                     	;# 
   689  0693                     	;# 
   690  0694                     	;# 
   691  0695                     	;# 
   692  0F0F                     	;# 
   693  0F10                     	;# 
   694  0F11                     	;# 
   695  0F12                     	;# 
   696  0F13                     	;# 
   697  0F14                     	;# 
   698  0F15                     	;# 
   699  0F16                     	;# 
   700  0F17                     	;# 
   701  0F18                     	;# 
   702  0F19                     	;# 
   703  0F1A                     	;# 
   704  0F1B                     	;# 
   705  0F1C                     	;# 
   706  0F1D                     	;# 
   707  0F1E                     	;# 
   708  0F1F                     	;# 
   709  0FE3                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0011                     	;# 
   737  0012                     	;# 
   738  0013                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0093                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  009F                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  020C                     	;# 
   784  020D                     	;# 
   785  0391                     	;# 
   786  0392                     	;# 
   787  0393                     	;# 
   788  0394                     	;# 
   789  0395                     	;# 
   790  0396                     	;# 
   791  0498                     	;# 
   792  0498                     	;# 
   793  0499                     	;# 
   794  049A                     	;# 
   795  049B                     	;# 
   796  049B                     	;# 
   797  049C                     	;# 
   798  049D                     	;# 
   799  049E                     	;# 
   800  049F                     	;# 
   801  0611                     	;# 
   802  0612                     	;# 
   803  0613                     	;# 
   804  0613                     	;# 
   805  0614                     	;# 
   806  0615                     	;# 
   807  0616                     	;# 
   808  0616                     	;# 
   809  0617                     	;# 
   810  0618                     	;# 
   811  0619                     	;# 
   812  0619                     	;# 
   813  061A                     	;# 
   814  061B                     	;# 
   815  061C                     	;# 
   816  061C                     	;# 
   817  0691                     	;# 
   818  0692                     	;# 
   819  0693                     	;# 
   820  0694                     	;# 
   821  0695                     	;# 
   822  0F0F                     	;# 
   823  0F10                     	;# 
   824  0F11                     	;# 
   825  0F12                     	;# 
   826  0F13                     	;# 
   827  0F14                     	;# 
   828  0F15                     	;# 
   829  0F16                     	;# 
   830  0F17                     	;# 
   831  0F18                     	;# 
   832  0F19                     	;# 
   833  0F1A                     	;# 
   834  0F1B                     	;# 
   835  0F1C                     	;# 
   836  0F1D                     	;# 
   837  0F1E                     	;# 
   838  0F1F                     	;# 
   839  0FE3                     	;# 
   840  0FE4                     	;# 
   841  0FE5                     	;# 
   842  0FE6                     	;# 
   843  0FE7                     	;# 
   844  0FE8                     	;# 
   845  0FE9                     	;# 
   846  0FEA                     	;# 
   847  0FEB                     	;# 
   848  0FED                     	;# 
   849  0FEE                     	;# 
   850  0FEF                     	;# 
   851  0000                     	;# 
   852  0001                     	;# 
   853  0002                     	;# 
   854  0003                     	;# 
   855  0004                     	;# 
   856  0005                     	;# 
   857  0006                     	;# 
   858  0007                     	;# 
   859  0008                     	;# 
   860  0009                     	;# 
   861  000A                     	;# 
   862  000B                     	;# 
   863  000C                     	;# 
   864  000D                     	;# 
   865  000E                     	;# 
   866  0011                     	;# 
   867  0012                     	;# 
   868  0013                     	;# 
   869  0015                     	;# 
   870  0016                     	;# 
   871  0016                     	;# 
   872  0017                     	;# 
   873  0018                     	;# 
   874  0019                     	;# 
   875  001A                     	;# 
   876  001B                     	;# 
   877  001C                     	;# 
   878  008C                     	;# 
   879  008D                     	;# 
   880  008E                     	;# 
   881  0091                     	;# 
   882  0092                     	;# 
   883  0093                     	;# 
   884  0095                     	;# 
   885  0096                     	;# 
   886  0097                     	;# 
   887  0099                     	;# 
   888  009A                     	;# 
   889  009B                     	;# 
   890  009B                     	;# 
   891  009C                     	;# 
   892  009D                     	;# 
   893  009E                     	;# 
   894  009F                     	;# 
   895  010C                     	;# 
   896  010D                     	;# 
   897  010E                     	;# 
   898  0116                     	;# 
   899  0117                     	;# 
   900  011D                     	;# 
   901  018C                     	;# 
   902  018D                     	;# 
   903  018E                     	;# 
   904  0191                     	;# 
   905  0191                     	;# 
   906  0192                     	;# 
   907  0193                     	;# 
   908  0193                     	;# 
   909  0194                     	;# 
   910  0195                     	;# 
   911  0196                     	;# 
   912  0197                     	;# 
   913  020C                     	;# 
   914  020D                     	;# 
   915  0391                     	;# 
   916  0392                     	;# 
   917  0393                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0498                     	;# 
   922  0498                     	;# 
   923  0499                     	;# 
   924  049A                     	;# 
   925  049B                     	;# 
   926  049B                     	;# 
   927  049C                     	;# 
   928  049D                     	;# 
   929  049E                     	;# 
   930  049F                     	;# 
   931  0611                     	;# 
   932  0612                     	;# 
   933  0613                     	;# 
   934  0613                     	;# 
   935  0614                     	;# 
   936  0615                     	;# 
   937  0616                     	;# 
   938  0616                     	;# 
   939  0617                     	;# 
   940  0618                     	;# 
   941  0619                     	;# 
   942  0619                     	;# 
   943  061A                     	;# 
   944  061B                     	;# 
   945  061C                     	;# 
   946  061C                     	;# 
   947  0691                     	;# 
   948  0692                     	;# 
   949  0693                     	;# 
   950  0694                     	;# 
   951  0695                     	;# 
   952  0F0F                     	;# 
   953  0F10                     	;# 
   954  0F11                     	;# 
   955  0F12                     	;# 
   956  0F13                     	;# 
   957  0F14                     	;# 
   958  0F15                     	;# 
   959  0F16                     	;# 
   960  0F17                     	;# 
   961  0F18                     	;# 
   962  0F19                     	;# 
   963  0F1A                     	;# 
   964  0F1B                     	;# 
   965  0F1C                     	;# 
   966  0F1D                     	;# 
   967  0F1E                     	;# 
   968  0F1F                     	;# 
   969  0FE3                     	;# 
   970  0FE4                     	;# 
   971  0FE5                     	;# 
   972  0FE6                     	;# 
   973  0FE7                     	;# 
   974  0FE8                     	;# 
   975  0FE9                     	;# 
   976  0FEA                     	;# 
   977  0FEB                     	;# 
   978  0FED                     	;# 
   979  0FEE                     	;# 
   980  0FEF                     	;# 
   981  0000                     	;# 
   982  0001                     	;# 
   983  0002                     	;# 
   984  0003                     	;# 
   985  0004                     	;# 
   986  0005                     	;# 
   987  0006                     	;# 
   988  0007                     	;# 
   989  0008                     	;# 
   990  0009                     	;# 
   991  000A                     	;# 
   992  000B                     	;# 
   993  000C                     	;# 
   994  000D                     	;# 
   995  000E                     	;# 
   996  0011                     	;# 
   997  0012                     	;# 
   998  0013                     	;# 
   999  0015                     	;# 
  1000  0016                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001C                     	;# 
  1008  008C                     	;# 
  1009  008D                     	;# 
  1010  008E                     	;# 
  1011  0091                     	;# 
  1012  0092                     	;# 
  1013  0093                     	;# 
  1014  0095                     	;# 
  1015  0096                     	;# 
  1016  0097                     	;# 
  1017  0099                     	;# 
  1018  009A                     	;# 
  1019  009B                     	;# 
  1020  009B                     	;# 
  1021  009C                     	;# 
  1022  009D                     	;# 
  1023  009E                     	;# 
  1024  009F                     	;# 
  1025  010C                     	;# 
  1026  010D                     	;# 
  1027  010E                     	;# 
  1028  0116                     	;# 
  1029  0117                     	;# 
  1030  011D                     	;# 
  1031  018C                     	;# 
  1032  018D                     	;# 
  1033  018E                     	;# 
  1034  0191                     	;# 
  1035  0191                     	;# 
  1036  0192                     	;# 
  1037  0193                     	;# 
  1038  0193                     	;# 
  1039  0194                     	;# 
  1040  0195                     	;# 
  1041  0196                     	;# 
  1042  0197                     	;# 
  1043  020C                     	;# 
  1044  020D                     	;# 
  1045  0391                     	;# 
  1046  0392                     	;# 
  1047  0393                     	;# 
  1048  0394                     	;# 
  1049  0395                     	;# 
  1050  0396                     	;# 
  1051  0498                     	;# 
  1052  0498                     	;# 
  1053  0499                     	;# 
  1054  049A                     	;# 
  1055  049B                     	;# 
  1056  049B                     	;# 
  1057  049C                     	;# 
  1058  049D                     	;# 
  1059  049E                     	;# 
  1060  049F                     	;# 
  1061  0611                     	;# 
  1062  0612                     	;# 
  1063  0613                     	;# 
  1064  0613                     	;# 
  1065  0614                     	;# 
  1066  0615                     	;# 
  1067  0616                     	;# 
  1068  0616                     	;# 
  1069  0617                     	;# 
  1070  0618                     	;# 
  1071  0619                     	;# 
  1072  0619                     	;# 
  1073  061A                     	;# 
  1074  061B                     	;# 
  1075  061C                     	;# 
  1076  061C                     	;# 
  1077  0691                     	;# 
  1078  0692                     	;# 
  1079  0693                     	;# 
  1080  0694                     	;# 
  1081  0695                     	;# 
  1082  0F0F                     	;# 
  1083  0F10                     	;# 
  1084  0F11                     	;# 
  1085  0F12                     	;# 
  1086  0F13                     	;# 
  1087  0F14                     	;# 
  1088  0F15                     	;# 
  1089  0F16                     	;# 
  1090  0F17                     	;# 
  1091  0F18                     	;# 
  1092  0F19                     	;# 
  1093  0F1A                     	;# 
  1094  0F1B                     	;# 
  1095  0F1C                     	;# 
  1096  0F1D                     	;# 
  1097  0F1E                     	;# 
  1098  0F1F                     	;# 
  1099  0FE3                     	;# 
  1100  0FE4                     	;# 
  1101  0FE5                     	;# 
  1102  0FE6                     	;# 
  1103  0FE7                     	;# 
  1104  0FE8                     	;# 
  1105  0FE9                     	;# 
  1106  0FEA                     	;# 
  1107  0FEB                     	;# 
  1108  0FED                     	;# 
  1109  0FEE                     	;# 
  1110  0FEF                     	;# 
  1111  0000                     	;# 
  1112  0001                     	;# 
  1113  0002                     	;# 
  1114  0003                     	;# 
  1115  0004                     	;# 
  1116  0005                     	;# 
  1117  0006                     	;# 
  1118  0007                     	;# 
  1119  0008                     	;# 
  1120  0009                     	;# 
  1121  000A                     	;# 
  1122  000B                     	;# 
  1123  000C                     	;# 
  1124  000D                     	;# 
  1125  000E                     	;# 
  1126  0011                     	;# 
  1127  0012                     	;# 
  1128  0013                     	;# 
  1129  0015                     	;# 
  1130  0016                     	;# 
  1131  0016                     	;# 
  1132  0017                     	;# 
  1133  0018                     	;# 
  1134  0019                     	;# 
  1135  001A                     	;# 
  1136  001B                     	;# 
  1137  001C                     	;# 
  1138  008C                     	;# 
  1139  008D                     	;# 
  1140  008E                     	;# 
  1141  0091                     	;# 
  1142  0092                     	;# 
  1143  0093                     	;# 
  1144  0095                     	;# 
  1145  0096                     	;# 
  1146  0097                     	;# 
  1147  0099                     	;# 
  1148  009A                     	;# 
  1149  009B                     	;# 
  1150  009B                     	;# 
  1151  009C                     	;# 
  1152  009D                     	;# 
  1153  009E                     	;# 
  1154  009F                     	;# 
  1155  010C                     	;# 
  1156  010D                     	;# 
  1157  010E                     	;# 
  1158  0116                     	;# 
  1159  0117                     	;# 
  1160  011D                     	;# 
  1161  018C                     	;# 
  1162  018D                     	;# 
  1163  018E                     	;# 
  1164  0191                     	;# 
  1165  0191                     	;# 
  1166  0192                     	;# 
  1167  0193                     	;# 
  1168  0193                     	;# 
  1169  0194                     	;# 
  1170  0195                     	;# 
  1171  0196                     	;# 
  1172  0197                     	;# 
  1173  020C                     	;# 
  1174  020D                     	;# 
  1175  0391                     	;# 
  1176  0392                     	;# 
  1177  0393                     	;# 
  1178  0394                     	;# 
  1179  0395                     	;# 
  1180  0396                     	;# 
  1181  0498                     	;# 
  1182  0498                     	;# 
  1183  0499                     	;# 
  1184  049A                     	;# 
  1185  049B                     	;# 
  1186  049B                     	;# 
  1187  049C                     	;# 
  1188  049D                     	;# 
  1189  049E                     	;# 
  1190  049F                     	;# 
  1191  0611                     	;# 
  1192  0612                     	;# 
  1193  0613                     	;# 
  1194  0613                     	;# 
  1195  0614                     	;# 
  1196  0615                     	;# 
  1197  0616                     	;# 
  1198  0616                     	;# 
  1199  0617                     	;# 
  1200  0618                     	;# 
  1201  0619                     	;# 
  1202  0619                     	;# 
  1203  061A                     	;# 
  1204  061B                     	;# 
  1205  061C                     	;# 
  1206  061C                     	;# 
  1207  0691                     	;# 
  1208  0692                     	;# 
  1209  0693                     	;# 
  1210  0694                     	;# 
  1211  0695                     	;# 
  1212  0F0F                     	;# 
  1213  0F10                     	;# 
  1214  0F11                     	;# 
  1215  0F12                     	;# 
  1216  0F13                     	;# 
  1217  0F14                     	;# 
  1218  0F15                     	;# 
  1219  0F16                     	;# 
  1220  0F17                     	;# 
  1221  0F18                     	;# 
  1222  0F19                     	;# 
  1223  0F1A                     	;# 
  1224  0F1B                     	;# 
  1225  0F1C                     	;# 
  1226  0F1D                     	;# 
  1227  0F1E                     	;# 
  1228  0F1F                     	;# 
  1229  0FE3                     	;# 
  1230  0FE4                     	;# 
  1231  0FE5                     	;# 
  1232  0FE6                     	;# 
  1233  0FE7                     	;# 
  1234  0FE8                     	;# 
  1235  0FE9                     	;# 
  1236  0FEA                     	;# 
  1237  0FEB                     	;# 
  1238  0FED                     	;# 
  1239  0FEE                     	;# 
  1240  0FEF                     	;# 
  1241                           
  1242                           	psect	idataBANK0
  1243  0414                     __pidataBANK0:	
  1244                           
  1245                           ;initializer for _factor
  1246  0414  34E8               	retlw	232
  1247  0415  3403               	retlw	3
  1248  0416  3400               	retlw	0
  1249  0417  3400               	retlw	0
  1250                           
  1251                           ;initializer for main@channel
  1252  0418  340A               	retlw	10
  1253                           
  1254                           	psect	stringtext1
  1255  041E                     __pstringtext1:	
  1256  041E                     _fixedPointFactor:	
  1257  041E  34E8               	retlw	232
  1258  041F  3403               	retlw	3
  1259  0420  3400               	retlw	0
  1260  0421  3400               	retlw	0
  1261  0422                     __end_of_fixedPointFactor:	
  1262                           
  1263                           	psect	nvBANK0
  1264  0042                     __pnvBANK0:	
  1265  0042                     _TMR0_InterruptHandler:	
  1266  0042                     	ds	2
  1267  0044                     _timer0ReloadVal:	
  1268  0044                     	ds	1
  1269  000C                     _PORTAbits	set	12
  1270  000B                     _INTCONbits	set	11
  1271  0015                     _TMR0	set	21
  1272  001C                     _T2CONbits	set	28
  1273  001C                     _T2CON	set	28
  1274  0011                     _PIR1bits	set	17
  1275  001A                     _TMR2	set	26
  1276  001B                     _PR2	set	27
  1277  0095                     _OPTION_REG	set	149
  1278  0095                     _OPTION_REGbits	set	149
  1279  008E                     _TRISC	set	142
  1280  008D                     _TRISB	set	141
  1281  008C                     _TRISA	set	140
  1282  0097                     _WDTCON	set	151
  1283  0099                     _OSCCON	set	153
  1284  009D                     _ADCON0bits	set	157
  1285  009C                     _ADRESH	set	156
  1286  009B                     _ADRESL	set	155
  1287  009F                     _ADCON2	set	159
  1288  009E                     _ADCON1	set	158
  1289  009D                     _ADCON0	set	157
  1290  010D                     _LATBbits	set	269
  1291  010E                     _LATCbits	set	270
  1292  011D                     _APFCON	set	285
  1293  010E                     _LATC	set	270
  1294  010D                     _LATB	set	269
  1295  010C                     _LATA	set	268
  1296  0116                     _BORCON	set	278
  1297  0193                     _PMDATL	set	403
  1298  0194                     _PMDATH	set	404
  1299  0195                     _PMCON1bits	set	405
  1300  0192                     _PMADRH	set	402
  1301  0191                     _PMADRL	set	401
  1302  018C                     _ANSELA	set	396
  1303  018D                     _ANSELB	set	397
  1304  018E                     _ANSELC	set	398
  1305  020C                     _WPUA	set	524
  1306  020D                     _WPUB	set	525
  1307  0617                     _PWM3DCL	set	1559
  1308  0618                     _PWM3DCH	set	1560
  1309  0619                     _PWM3CON	set	1561
  1310                           
  1311                           ; #config settings
  1312  0000                     
  1313                           	psect	cinit
  1314  000D                     start_initialization:	
  1315  000D                     __initialization:	
  1316                           
  1317                           ; Initialize objects allocated to BANK0
  1318  000D  3014               	movlw	low __pidataBANK0
  1319  000E  0084               	movwf	4
  1320  000F  3084               	movlw	(high __pidataBANK0)| (0+128)
  1321  0010  0085               	movwf	5
  1322  0011  0012               	moviw fsr0++
  1323  0012  00BD               	movwf	__pdataBANK0& (0+127)
  1324  0013  0012               	moviw fsr0++
  1325  0014  00BE               	movwf	(__pdataBANK0+1)& (0+127)
  1326  0015  0012               	moviw fsr0++
  1327  0016  00BF               	movwf	(__pdataBANK0+2)& (0+127)
  1328  0017  0012               	moviw fsr0++
  1329  0018  00C0               	movwf	(__pdataBANK0+3)& (0+127)
  1330  0019  0012               	moviw fsr0++
  1331  001A  00C1               	movwf	(__pdataBANK0+4)& (0+127)
  1332                           
  1333                           ; Clear objects allocated to COMMON
  1334  001B  01FD               	clrf	__pbssCOMMON& (0+127)
  1335                           
  1336                           ; Clear objects allocated to BANK0
  1337  001C  01B1               	clrf	__pbssBANK0& (0+127)
  1338  001D  01B2               	clrf	(__pbssBANK0+1)& (0+127)
  1339  001E  01B3               	clrf	(__pbssBANK0+2)& (0+127)
  1340  001F  01B4               	clrf	(__pbssBANK0+3)& (0+127)
  1341  0020  01B5               	clrf	(__pbssBANK0+4)& (0+127)
  1342  0021  01B6               	clrf	(__pbssBANK0+5)& (0+127)
  1343  0022  01B7               	clrf	(__pbssBANK0+6)& (0+127)
  1344  0023  01B8               	clrf	(__pbssBANK0+7)& (0+127)
  1345  0024  01B9               	clrf	(__pbssBANK0+8)& (0+127)
  1346  0025  01BA               	clrf	(__pbssBANK0+9)& (0+127)
  1347  0026  01BB               	clrf	(__pbssBANK0+10)& (0+127)
  1348  0027  01BC               	clrf	(__pbssBANK0+11)& (0+127)
  1349  0028                     end_of_initialization:	
  1350                           ;End of C runtime variable initialization code
  1351                           
  1352  0028                     __end_of__initialization:	
  1353  0028  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1354  0029  0020               	movlb	0
  1355  002A  282B               	ljmp	_main	;jump to C main() function
  1356                           
  1357                           	psect	bssCOMMON
  1358  007D                     __pbssCOMMON:	
  1359  007D                     _currentState:	
  1360  007D                     	ds	1
  1361                           
  1362                           	psect	bssBANK0
  1363  0031                     __pbssBANK0:	
  1364  0031                     _offset:	
  1365  0031                     	ds	4
  1366  0035                     _msPressed:	
  1367  0035                     	ds	2
  1368  0037                     _msTick:	
  1369  0037                     	ds	2
  1370  0039                     _ADC_InterruptHandler:	
  1371  0039                     	ds	2
  1372  003B                     _doToggle:	
  1373  003B                     	ds	1
  1374  003C                     _doButtonAction:	
  1375  003C                     	ds	1
  1376                           
  1377                           	psect	dataBANK0
  1378  003D                     __pdataBANK0:	
  1379  003D                     _factor:	
  1380  003D                     	ds	4
  1381  0041                     main@channel:	
  1382  0041                     	ds	1
  1383                           
  1384                           	psect	cstackCOMMON
  1385  0070                     __pcstackCOMMON:	
  1386  0070                     ?_PIN_MANAGER_Initialize:	
  1387  0070                     ??_PIN_MANAGER_Initialize:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390  0070                     ?_OSCILLATOR_Initialize:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393  0070                     ??_OSCILLATOR_Initialize:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396  0070                     ?_WDT_Initialize:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399  0070                     ??_WDT_Initialize:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402  0070                     ?_PWM3_Initialize:	
  1403                           ; 1 bytes @ 0x0
  1404                           
  1405  0070                     ??_PWM3_Initialize:	
  1406                           ; 1 bytes @ 0x0
  1407                           
  1408  0070                     ?_TMR2_Initialize:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411  0070                     ??_TMR2_Initialize:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414  0070                     ?_TMR0_Initialize:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417  0070                     ?_TMR0_SetInterruptHandler:	
  1418                           ; 1 bytes @ 0x0
  1419                           
  1420  0070                     ?_TMR0_DefaultInterruptHandler:	
  1421                           ; 1 bytes @ 0x0
  1422                           
  1423  0070                     ??_TMR0_DefaultInterruptHandler:	
  1424                           ; 1 bytes @ 0x0
  1425                           
  1426  0070                     ?_TMR0_CallBack:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  0070                     ??_TMR0_CallBack:	
  1430                           ; 1 bytes @ 0x0
  1431                           
  1432  0070                     ?_ADC_Initialize:	
  1433                           ; 1 bytes @ 0x0
  1434                           
  1435  0070                     ??_ADC_Initialize:	
  1436                           ; 1 bytes @ 0x0
  1437                           
  1438  0070                     ?_SYSTEM_Initialize:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0070                     ?_PWM3_LoadDutyValue:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0070                     ?_TMR2_StartTimer:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0070                     ??_TMR2_StartTimer:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0070                     ?_TMR0_ISR:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0070                     ??_TMR0_ISR:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0070                     ?_INTERRUPT_InterruptManager:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0070                     ??_INTERRUPT_InterruptManager:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0070                     ?_timer0CallBack:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465  0070                     ??_timer0CallBack:	
  1466                           ; 1 bytes @ 0x0
  1467                           
  1468  0070                     ?_setState:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0070                     ?_main:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0070                     ?_ADC_GetConversion:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0070                     ?_FLASH_ReadWord:	
  1478                           ; 2 bytes @ 0x0
  1479                           
  1480  0070                     ?___lmul:	
  1481                           ; 2 bytes @ 0x0
  1482                           
  1483  0070                     PWM3_LoadDutyValue@dutyValue:	
  1484                           ; 4 bytes @ 0x0
  1485                           
  1486  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1487                           ; 2 bytes @ 0x0
  1488                           
  1489  0070                     FLASH_ReadWord@flashAddr:	
  1490                           ; 2 bytes @ 0x0
  1491                           
  1492  0070                     ___lmul@multiplier:	
  1493                           ; 2 bytes @ 0x0
  1494                           
  1495                           
  1496                           ; 4 bytes @ 0x0
  1497  0070                     	ds	2
  1498  0072                     ??_TMR0_Initialize:	
  1499  0072                     ??_TMR0_SetInterruptHandler:	
  1500                           ; 1 bytes @ 0x2
  1501                           
  1502  0072                     ??_ADC_GetConversion:	
  1503                           ; 1 bytes @ 0x2
  1504                           
  1505  0072                     ??_PWM3_LoadDutyValue:	
  1506                           ; 1 bytes @ 0x2
  1507                           
  1508  0072                     ??_FLASH_ReadWord:	
  1509                           ; 1 bytes @ 0x2
  1510                           
  1511  0072                     FLASH_ReadWord@GIEBitValue:	
  1512                           ; 1 bytes @ 0x2
  1513                           
  1514                           
  1515                           ; 1 bytes @ 0x2
  1516  0072                     	ds	1
  1517  0073                     ??_SYSTEM_Initialize:	
  1518  0073                     ??_setState:	
  1519                           ; 1 bytes @ 0x3
  1520                           
  1521  0073                     ADC_GetConversion@channel:	
  1522                           ; 1 bytes @ 0x3
  1523                           
  1524                           
  1525                           ; 1 bytes @ 0x3
  1526  0073                     	ds	1
  1527  0074                     ___lmul@multiplicand:	
  1528                           
  1529                           ; 4 bytes @ 0x4
  1530  0074                     	ds	3
  1531  0077                     setState@newState:	
  1532                           
  1533                           ; 1 bytes @ 0x7
  1534  0077                     	ds	1
  1535  0078                     ??___lmul:	
  1536  0078                     setState@flashEntry:	
  1537                           ; 1 bytes @ 0x8
  1538                           
  1539  0078                     ___lmul@product:	
  1540                           ; 4 bytes @ 0x8
  1541                           
  1542                           
  1543                           ; 4 bytes @ 0x8
  1544  0078                     	ds	4
  1545  007C                     ??___lldiv:	
  1546                           
  1547                           ; 1 bytes @ 0xC
  1548  007C                     	ds	1
  1549                           
  1550                           	psect	cstackBANK0
  1551  0020                     __pcstackBANK0:	
  1552  0020                     ?___lldiv:	
  1553  0020                     ___lldiv@divisor:	
  1554                           ; 4 bytes @ 0x0
  1555                           
  1556                           
  1557                           ; 4 bytes @ 0x0
  1558  0020                     	ds	4
  1559  0024                     ___lldiv@dividend:	
  1560                           
  1561                           ; 4 bytes @ 0x4
  1562  0024                     	ds	4
  1563  0028                     ___lldiv@quotient:	
  1564                           
  1565                           ; 4 bytes @ 0x8
  1566  0028                     	ds	4
  1567  002C                     ___lldiv@counter:	
  1568                           
  1569                           ; 1 bytes @ 0xC
  1570  002C                     	ds	1
  1571  002D                     ??_main:	
  1572                           
  1573                           ; 1 bytes @ 0xD
  1574  002D                     	ds	2
  1575  002F                     main@adcValue:	
  1576                           
  1577                           ; 2 bytes @ 0xF
  1578  002F                     	ds	2
  1579                           
  1580                           	psect	maintext
  1581  002B                     __pmaintext:	
  1582 ;;
  1583 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1584 ;;
  1585 ;; *************** function _main *****************
  1586 ;; Defined at:
  1587 ;;		line 148 in file "main.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  adcValue        2   15[BANK0 ] unsigned short 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      void 
  1594 ;; Registers used:
  1595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : B1F/0
  1598 ;;		On exit  : 1F/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0   BANK1
  1601 ;;      Params:         0       0       0
  1602 ;;      Locals:         0       2       0
  1603 ;;      Temps:          0       2       0
  1604 ;;      Totals:         0       4       0
  1605 ;;Total ram usage:        4 bytes
  1606 ;; Hardware stack levels required when called:    7
  1607 ;; This function calls:
  1608 ;;		_ADC_GetConversion
  1609 ;;		_PWM3_LoadDutyValue
  1610 ;;		_SYSTEM_Initialize
  1611 ;;		_TMR0_SetInterruptHandler
  1612 ;;		_TMR2_StartTimer
  1613 ;;		___lldiv
  1614 ;;		___lmul
  1615 ;;		_setState
  1616 ;; This function is called by:
  1617 ;;		Startup code after reset
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           
  1622                           ;psect for function _main
  1623  002B                     _main:	
  1624                           
  1625                           ;main.c: 151:     SYSTEM_Initialize();
  1626                           
  1627                           ;incstack = 0
  1628                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1629  002B  23E8               	fcall	_SYSTEM_Initialize
  1630                           
  1631                           ;main.c: 157:     (INTCONbits.GIE = 1);
  1632  002C  178B               	bsf	11,7	;volatile
  1633                           
  1634                           ;main.c: 168:     setState(STATE_NORMAL);
  1635  002D  3000               	movlw	0
  1636  002E  21EB               	fcall	_setState
  1637                           
  1638                           ;main.c: 172:     TMR0_SetInterruptHandler(timer0CallBack);
  1639  002F  30CE               	movlw	low _timer0CallBack
  1640  0030  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1641  0031  3003               	movlw	high _timer0CallBack
  1642  0032  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1643  0033  2419               	fcall	_TMR0_SetInterruptHandler
  1644                           
  1645                           ;main.c: 174:     TMR2_StartTimer();
  1646  0034  2426               	fcall	_TMR2_StartTimer
  1647  0035                     l1625:	
  1648                           
  1649                           ;main.c: 184:     {;main.c: 185:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 188:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1650  0035  3003               	movlw	3
  1651  0036  0020               	movlb	0	; select bank0
  1652  0037  0641               	xorwf	main@channel,w
  1653  0038  1903               	btfsc	3,2
  1654  0039  283C               	goto	l1629
  1655  003A  3003               	movlw	3
  1656  003B  283D               	goto	L1
  1657  003C                     l1629:	
  1658  003C  300A               	movlw	10
  1659  003D                     L1:	
  1660  003D  00AD               	movwf	??_main
  1661  003E  082D               	movf	??_main,w
  1662  003F  00C1               	movwf	main@channel
  1663                           
  1664                           ;main.c: 191:         uint16_t adcValue = ADC_GetConversion(channel);
  1665  0040  0841               	movf	main@channel,w
  1666  0041  238C               	fcall	_ADC_GetConversion
  1667  0042  0871               	movf	?_ADC_GetConversion+1,w
  1668  0043  0020               	movlb	0	; select bank0
  1669  0044  00B0               	movwf	main@adcValue+1
  1670  0045  0870               	movf	?_ADC_GetConversion,w
  1671  0046  00AF               	movwf	main@adcValue
  1672                           
  1673                           ;main.c: 196:         if(!PORTAbits.RA5 && !doButtonAction)
  1674  0047  1A8C               	btfsc	12,5	;volatile
  1675  0048  285E               	goto	l1643
  1676  0049  083C               	movf	_doButtonAction,w	;volatile
  1677  004A  1D03               	btfss	3,2
  1678  004B  285E               	goto	l1643
  1679                           
  1680                           ;main.c: 197:         {;main.c: 200:             msPressed++;
  1681  004C  3001               	movlw	1
  1682  004D  07B5               	addwf	_msPressed,f	;volatile
  1683  004E  3000               	movlw	0
  1684  004F  3DB6               	addwfc	_msPressed+1,f	;volatile
  1685                           
  1686                           ;main.c: 202:             if(msPressed > 3000)
  1687  0050  300B               	movlw	11
  1688  0051  0236               	subwf	_msPressed+1,w	;volatile
  1689  0052  30B9               	movlw	185
  1690  0053  1903               	skipnz
  1691  0054  0235               	subwf	_msPressed,w	;volatile
  1692  0055  1C03               	skipc
  1693  0056  285B               	goto	l1641
  1694                           
  1695                           ;main.c: 203:             {;main.c: 204:                 doButtonAction = 1;
  1696  0057  3001               	movlw	1
  1697  0058  00AD               	movwf	??_main
  1698  0059  082D               	movf	??_main,w
  1699  005A  00BC               	movwf	_doButtonAction	;volatile
  1700  005B                     l1641:	
  1701  005B  0022               	movlb	2	; select bank2
  1702  005C  168E               	bsf	14,5	;volatile
  1703  005D  2862               	goto	l1647
  1704  005E                     l1643:	
  1705                           
  1706                           ;main.c: 209:         {;main.c: 210:             msPressed = 0;
  1707  005E  01B5               	clrf	_msPressed	;volatile
  1708  005F  01B6               	clrf	_msPressed+1	;volatile
  1709  0060  0022               	movlb	2	; select bank2
  1710  0061  128E               	bcf	14,5	;volatile
  1711  0062                     l1647:	
  1712                           
  1713                           ;main.c: 216:         if(doButtonAction)
  1714  0062  0020               	movlb	0	; select bank0
  1715  0063  083C               	movf	_doButtonAction,w	;volatile
  1716  0064  1903               	btfsc	3,2
  1717  0065  29D4               	goto	l1723
  1718  0066                     l338:	
  1719                           ;main.c: 220:             {;main.c: 222:             }
  1720                           
  1721                           
  1722                           ;main.c: 219:             while(!PORTAbits.RA5)
  1723  0066  1A8C               	btfsc	12,5	;volatile
  1724  0067  2872               	goto	l1659
  1725  0068  2866               	goto	l338
  1726  0069                     l1651:	
  1727                           
  1728                           ;main.c: 227:                     setState(STATE_TEACH_LEFT);
  1729  0069  3001               	movlw	1
  1730  006A  21EB               	fcall	_setState
  1731                           
  1732                           ;main.c: 228:                     break;
  1733  006B  2885               	goto	l1661
  1734  006C                     l1653:	
  1735                           
  1736                           ;main.c: 231:                     setState(STATE_TEACH_RIGHT);
  1737  006C  3002               	movlw	2
  1738  006D  21EB               	fcall	_setState
  1739                           
  1740                           ;main.c: 232:                     break;
  1741  006E  2885               	goto	l1661
  1742  006F                     l1655:	
  1743                           
  1744                           ;main.c: 235:                     setState(STATE_NORMAL);
  1745  006F  3000               	movlw	0
  1746  0070  21EB               	fcall	_setState
  1747                           
  1748                           ;main.c: 236:                     break;
  1749  0071  2885               	goto	l1661
  1750  0072                     l1659:	
  1751  0072  087D               	movf	_currentState,w
  1752  0073  00AD               	movwf	??_main
  1753  0074  01AE               	clrf	??_main+1
  1754                           
  1755                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1756                           ; Switch size 1, requested type "simple"
  1757                           ; Number of cases is 1, Range of values is 0 to 0
  1758                           ; switch strategies available:
  1759                           ; Name         Instructions Cycles
  1760                           ; simple_byte            4     3 (average)
  1761                           ; direct_byte            8     6 (fixed)
  1762                           ; jumptable            260     6 (fixed)
  1763                           ;	Chosen strategy is simple_byte
  1764  0075  082E               	movf	??_main+1,w
  1765  0076  3A00               	xorlw	0	; case 0
  1766  0077  1903               	skipnz
  1767  0078  287A               	goto	l1817
  1768  0079  2885               	goto	l1661
  1769  007A                     l1817:	
  1770                           
  1771                           ; Switch size 1, requested type "simple"
  1772                           ; Number of cases is 3, Range of values is 0 to 2
  1773                           ; switch strategies available:
  1774                           ; Name         Instructions Cycles
  1775                           ; simple_byte           10     6 (average)
  1776                           ; direct_byte           12     6 (fixed)
  1777                           ; jumptable            260     6 (fixed)
  1778                           ;	Chosen strategy is simple_byte
  1779  007A  082D               	movf	??_main,w
  1780  007B  3A00               	xorlw	0	; case 0
  1781  007C  1903               	skipnz
  1782  007D  2869               	goto	l1651
  1783  007E  3A01               	xorlw	1	; case 1
  1784  007F  1903               	skipnz
  1785  0080  286C               	goto	l1653
  1786  0081  3A03               	xorlw	3	; case 2
  1787  0082  1903               	skipnz
  1788  0083  286F               	goto	l1655
  1789  0084  2885               	goto	l1661
  1790  0085                     l1661:	
  1791                           
  1792                           ;main.c: 241:             doButtonAction = 0;
  1793  0085  01BC               	clrf	_doButtonAction	;volatile
  1794  0086  29D4               	goto	l1723
  1795  0087                     l1663:	
  1796                           
  1797                           ;main.c: 249:                 if(doToggle)
  1798  0087  083B               	movf	_doToggle,w
  1799  0088  1903               	btfsc	3,2
  1800  0089  2835               	goto	l1625
  1801                           
  1802                           ;main.c: 250:                 {;main.c: 251:                     do { LATCbits.LATC0 = 1
      +                          ; } while(0);
  1803  008A  0022               	movlb	2	; select bank2
  1804  008B  140E               	bsf	14,0	;volatile
  1805                           
  1806                           ;main.c: 252:                     do { LATCbits.LATC1 = 0; } while(0);
  1807  008C  108E               	bcf	14,1	;volatile
  1808                           
  1809                           ;main.c: 253:                     do { LATCbits.LATC2 = 0; } while(0);
  1810  008D  110E               	bcf	14,2	;volatile
  1811                           
  1812                           ;main.c: 254:                     do { LATCbits.LATC3 = 0; } while(0);
  1813  008E  118E               	bcf	14,3	;volatile
  1814                           
  1815                           ;main.c: 255:                     do { LATCbits.LATC4 = 0; } while(0);
  1816  008F  120E               	bcf	14,4	;volatile
  1817                           
  1818                           ;main.c: 256:                     do { LATCbits.LATC5 = 1; } while(0);
  1819  0090  168E               	bsf	14,5	;volatile
  1820                           
  1821                           ;main.c: 257:                     do { LATCbits.LATC6 = 0; } while(0);
  1822  0091  130E               	bcf	14,6	;volatile
  1823                           
  1824                           ;main.c: 258:                     do { LATCbits.LATC7 = 0; } while(0);
  1825  0092  138E               	bcf	14,7	;volatile
  1826                           
  1827                           ;main.c: 259:                     do { LATBbits.LATB5 = 0; } while(0);
  1828  0093  128D               	bcf	13,5	;volatile
  1829                           
  1830                           ;main.c: 260:                     do { LATBbits.LATB6 = 0; } while(0);
  1831  0094  130D               	bcf	13,6	;volatile
  1832                           
  1833                           ;main.c: 261:                     do { LATBbits.LATB7 = 0; } while(0);
  1834  0095  138D               	bcf	13,7	;volatile
  1835  0096  2835               	goto	l1625
  1836  0097                     l1665:	
  1837                           
  1838                           ;main.c: 270:                 if(channel == channelBrightness)
  1839  0097  300A               	movlw	10
  1840  0098  0641               	xorwf	main@channel,w
  1841  0099  1D03               	btfss	3,2
  1842  009A  28A1               	goto	l375
  1843                           
  1844                           ;main.c: 271:                 {;main.c: 272:                     PWM3_LoadDutyValue(adcV
      +                          alue);
  1845  009B  0830               	movf	main@adcValue+1,w
  1846  009C  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1847  009D  082F               	movf	main@adcValue,w
  1848  009E  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  1849  009F  23A4               	fcall	_PWM3_LoadDutyValue
  1850                           
  1851                           ;main.c: 273:                 }
  1852  00A0  2835               	goto	l1625
  1853  00A1                     l375:	
  1854                           ;main.c: 275:                 {;main.c: 277:                     do { LATCbits.LATC0 = 0
      +                          ; } while(0);
  1855                           
  1856  00A1  0022               	movlb	2	; select bank2
  1857  00A2  100E               	bcf	14,0	;volatile
  1858                           
  1859                           ;main.c: 278:                     do { LATCbits.LATC1 = 0; } while(0);
  1860  00A3  108E               	bcf	14,1	;volatile
  1861                           
  1862                           ;main.c: 279:                     do { LATCbits.LATC2 = 0; } while(0);
  1863  00A4  110E               	bcf	14,2	;volatile
  1864                           
  1865                           ;main.c: 280:                     do { LATCbits.LATC3 = 0; } while(0);
  1866  00A5  118E               	bcf	14,3	;volatile
  1867                           
  1868                           ;main.c: 281:                     do { LATCbits.LATC4 = 0; } while(0);
  1869  00A6  120E               	bcf	14,4	;volatile
  1870                           
  1871                           ;main.c: 282:                     do { LATCbits.LATC5 = 1; } while(0);
  1872  00A7  168E               	bsf	14,5	;volatile
  1873                           
  1874                           ;main.c: 283:                     do { LATCbits.LATC6 = 0; } while(0);
  1875  00A8  130E               	bcf	14,6	;volatile
  1876                           
  1877                           ;main.c: 284:                     do { LATCbits.LATC7 = 0; } while(0);
  1878  00A9  138E               	bcf	14,7	;volatile
  1879                           
  1880                           ;main.c: 285:                     do { LATBbits.LATB5 = 0; } while(0);
  1881  00AA  128D               	bcf	13,5	;volatile
  1882                           
  1883                           ;main.c: 286:                     do { LATBbits.LATB6 = 0; } while(0);
  1884  00AB  130D               	bcf	13,6	;volatile
  1885                           
  1886                           ;main.c: 287:                     do { LATBbits.LATB7 = 0; } while(0);
  1887  00AC  138D               	bcf	13,7	;volatile
  1888                           
  1889                           ;main.c: 289:                     adcValue = ((uint32_t)adcValue*factor)/fixedPointFacto
      +                          r + offset;
  1890  00AD  3000               	movlw	0
  1891  00AE  0020               	movlb	0	; select bank0
  1892  00AF  00A3               	movwf	___lldiv@divisor+3
  1893  00B0  3000               	movlw	0
  1894  00B1  00A2               	movwf	___lldiv@divisor+2
  1895  00B2  3003               	movlw	3
  1896  00B3  00A1               	movwf	___lldiv@divisor+1
  1897  00B4  30E8               	movlw	232
  1898  00B5  00A0               	movwf	___lldiv@divisor
  1899  00B6  082F               	movf	main@adcValue,w
  1900  00B7  00F0               	movwf	___lmul@multiplier
  1901  00B8  0830               	movf	main@adcValue+1,w
  1902  00B9  00F1               	movwf	___lmul@multiplier+1
  1903  00BA  01F2               	clrf	___lmul@multiplier+2
  1904  00BB  01F3               	clrf	___lmul@multiplier+3
  1905  00BC  0840               	movf	_factor+3,w
  1906  00BD  00F7               	movwf	___lmul@multiplicand+3
  1907  00BE  083F               	movf	_factor+2,w
  1908  00BF  00F6               	movwf	___lmul@multiplicand+2
  1909  00C0  083E               	movf	_factor+1,w
  1910  00C1  00F5               	movwf	___lmul@multiplicand+1
  1911  00C2  083D               	movf	_factor,w
  1912  00C3  00F4               	movwf	___lmul@multiplicand
  1913  00C4  232C               	fcall	___lmul
  1914  00C5  0873               	movf	?___lmul+3,w
  1915  00C6  00A7               	movwf	___lldiv@dividend+3
  1916  00C7  0872               	movf	?___lmul+2,w
  1917  00C8  00A6               	movwf	___lldiv@dividend+2
  1918  00C9  0871               	movf	?___lmul+1,w
  1919  00CA  00A5               	movwf	___lldiv@dividend+1
  1920  00CB  0870               	movf	?___lmul,w
  1921  00CC  00A4               	movwf	___lldiv@dividend
  1922  00CD  22DA               	fcall	___lldiv
  1923  00CE  0831               	movf	_offset,w
  1924  00CF  0720               	addwf	?___lldiv,w
  1925  00D0  00AF               	movwf	main@adcValue
  1926  00D1  0832               	movf	_offset+1,w
  1927  00D2  3D21               	addwfc	?___lldiv+1,w
  1928  00D3  00B0               	movwf	main@adcValue+1
  1929                           
  1930                           ;main.c: 293:                     if(adcValue < 54)
  1931  00D4  3000               	movlw	0
  1932  00D5  0230               	subwf	main@adcValue+1,w
  1933  00D6  3036               	movlw	54
  1934  00D7  1903               	skipnz
  1935  00D8  022F               	subwf	main@adcValue,w
  1936  00D9  1803               	skipnc
  1937  00DA  28DE               	goto	l1673
  1938                           
  1939                           ;main.c: 294:                     {;main.c: 295:                         do { LATCbits.L
      +                          ATC0 = 1; } while(0);
  1940  00DB  0022               	movlb	2	; select bank2
  1941  00DC  140E               	bsf	14,0	;volatile
  1942  00DD  2835               	goto	l1625
  1943  00DE                     l1673:	
  1944  00DE  3000               	movlw	0
  1945  00DF  0230               	subwf	main@adcValue+1,w
  1946  00E0  306C               	movlw	108
  1947  00E1  1903               	skipnz
  1948  00E2  022F               	subwf	main@adcValue,w
  1949  00E3  1803               	skipnc
  1950  00E4  28E8               	goto	l1675
  1951                           
  1952                           ;main.c: 298:                     {;main.c: 299:                         do { LATCbits.L
      +                          ATC0 = 1; } while(0);
  1953  00E5  0022               	movlb	2	; select bank2
  1954  00E6  140E               	bsf	14,0	;volatile
  1955  00E7  28F0               	goto	L2
  1956  00E8                     l1675:	
  1957                           ;main.c: 300:                         do { LATCbits.LATC1 = 1; } while(0);
  1958                           
  1959  00E8  3000               	movlw	0
  1960  00E9  0230               	subwf	main@adcValue+1,w
  1961  00EA  30A2               	movlw	162
  1962  00EB  1903               	skipnz
  1963  00EC  022F               	subwf	main@adcValue,w
  1964  00ED  1803               	skipnc
  1965  00EE  28F2               	goto	l1677
  1966                           
  1967                           ;main.c: 303:                     {;main.c: 304:                         do { LATCbits.L
      +                          ATC1 = 1; } while(0);
  1968  00EF  0022               	movlb	2	; select bank2
  1969  00F0                     L2:	
  1970  00F0  148E               	bsf	14,1	;volatile
  1971  00F1  2835               	goto	l1625
  1972  00F2                     l1677:	
  1973  00F2  3000               	movlw	0
  1974  00F3  0230               	subwf	main@adcValue+1,w
  1975  00F4  30D7               	movlw	215
  1976  00F5  1903               	skipnz
  1977  00F6  022F               	subwf	main@adcValue,w
  1978  00F7  1803               	skipnc
  1979  00F8  28FC               	goto	l1679
  1980                           
  1981                           ;main.c: 307:                     {;main.c: 308:                         do { LATCbits.L
      +                          ATC1 = 1; } while(0);
  1982  00F9  0022               	movlb	2	; select bank2
  1983  00FA  148E               	bsf	14,1	;volatile
  1984  00FB  2904               	goto	L3
  1985  00FC                     l1679:	
  1986                           ;main.c: 309:                         do { LATCbits.LATC2 = 1; } while(0);
  1987                           
  1988  00FC  3001               	movlw	1
  1989  00FD  0230               	subwf	main@adcValue+1,w
  1990  00FE  300D               	movlw	13
  1991  00FF  1903               	skipnz
  1992  0100  022F               	subwf	main@adcValue,w
  1993  0101  1803               	skipnc
  1994  0102  2906               	goto	l1681
  1995                           
  1996                           ;main.c: 312:                     {;main.c: 313:                         do { LATCbits.L
      +                          ATC2 = 1; } while(0);
  1997  0103  0022               	movlb	2	; select bank2
  1998  0104                     L3:	
  1999  0104  150E               	bsf	14,2	;volatile
  2000  0105  2835               	goto	l1625
  2001  0106                     l1681:	
  2002  0106  3001               	movlw	1
  2003  0107  0230               	subwf	main@adcValue+1,w
  2004  0108  3043               	movlw	67
  2005  0109  1903               	skipnz
  2006  010A  022F               	subwf	main@adcValue,w
  2007  010B  1803               	skipnc
  2008  010C  2910               	goto	l1683
  2009                           
  2010                           ;main.c: 316:                     {;main.c: 317:                         do { LATCbits.L
      +                          ATC2 = 1; } while(0);
  2011  010D  0022               	movlb	2	; select bank2
  2012  010E  150E               	bsf	14,2	;volatile
  2013  010F  2918               	goto	L4
  2014  0110                     l1683:	
  2015                           ;main.c: 318:                         do { LATCbits.LATC3 = 1; } while(0);
  2016                           
  2017  0110  3001               	movlw	1
  2018  0111  0230               	subwf	main@adcValue+1,w
  2019  0112  3079               	movlw	121
  2020  0113  1903               	skipnz
  2021  0114  022F               	subwf	main@adcValue,w
  2022  0115  1803               	skipnc
  2023  0116  291A               	goto	l1685
  2024                           
  2025                           ;main.c: 321:                     {;main.c: 322:                         do { LATCbits.L
      +                          ATC3 = 1; } while(0);
  2026  0117  0022               	movlb	2	; select bank2
  2027  0118                     L4:	
  2028  0118  158E               	bsf	14,3	;volatile
  2029  0119  2835               	goto	l1625
  2030  011A                     l1685:	
  2031  011A  3001               	movlw	1
  2032  011B  0230               	subwf	main@adcValue+1,w
  2033  011C  30AF               	movlw	175
  2034  011D  1903               	skipnz
  2035  011E  022F               	subwf	main@adcValue,w
  2036  011F  1803               	skipnc
  2037  0120  2924               	goto	l1687
  2038                           
  2039                           ;main.c: 325:                     {;main.c: 326:                         do { LATCbits.L
      +                          ATC3 = 1; } while(0);
  2040  0121  0022               	movlb	2	; select bank2
  2041  0122  158E               	bsf	14,3	;volatile
  2042  0123  292C               	goto	L5
  2043  0124                     l1687:	
  2044                           ;main.c: 327:                         do { LATCbits.LATC4 = 1; } while(0);
  2045                           
  2046  0124  3001               	movlw	1
  2047  0125  0230               	subwf	main@adcValue+1,w
  2048  0126  30E5               	movlw	229
  2049  0127  1903               	skipnz
  2050  0128  022F               	subwf	main@adcValue,w
  2051  0129  1803               	skipnc
  2052  012A  292E               	goto	l1689
  2053                           
  2054                           ;main.c: 330:                     {;main.c: 331:                         do { LATCbits.L
      +                          ATC4 = 1; } while(0);
  2055  012B  0022               	movlb	2	; select bank2
  2056  012C                     L5:	
  2057  012C  160E               	bsf	14,4	;volatile
  2058  012D  2835               	goto	l1625
  2059  012E                     l1689:	
  2060  012E  3002               	movlw	2
  2061  012F  0230               	subwf	main@adcValue+1,w
  2062  0130  301A               	movlw	26
  2063  0131  1903               	skipnz
  2064  0132  022F               	subwf	main@adcValue,w
  2065  0133  1C03               	btfss	3,0
  2066  0134  2835               	goto	l1625
  2067  0135  3002               	movlw	2
  2068  0136  0230               	subwf	main@adcValue+1,w
  2069  0137  3050               	movlw	80
  2070  0138  1903               	skipnz
  2071  0139  022F               	subwf	main@adcValue,w
  2072  013A  1803               	skipnc
  2073  013B  293F               	goto	l1695
  2074                           
  2075                           ;main.c: 338:                     {;main.c: 339:                         do { LATCbits.L
      +                          ATC6 = 1; } while(0);
  2076  013C  0022               	movlb	2	; select bank2
  2077  013D  170E               	bsf	14,6	;volatile
  2078  013E  2835               	goto	l1625
  2079  013F                     l1695:	
  2080  013F  3002               	movlw	2
  2081  0140  0230               	subwf	main@adcValue+1,w
  2082  0141  3086               	movlw	134
  2083  0142  1903               	skipnz
  2084  0143  022F               	subwf	main@adcValue,w
  2085  0144  1803               	skipnc
  2086  0145  2949               	goto	l1697
  2087                           
  2088                           ;main.c: 342:                     {;main.c: 343:                         do { LATCbits.L
      +                          ATC6 = 1; } while(0);
  2089  0146  0022               	movlb	2	; select bank2
  2090  0147  170E               	bsf	14,6	;volatile
  2091  0148  2951               	goto	L6
  2092  0149                     l1697:	
  2093                           ;main.c: 344:                         do { LATCbits.LATC7 = 1; } while(0);
  2094                           
  2095  0149  3002               	movlw	2
  2096  014A  0230               	subwf	main@adcValue+1,w
  2097  014B  30BC               	movlw	188
  2098  014C  1903               	skipnz
  2099  014D  022F               	subwf	main@adcValue,w
  2100  014E  1803               	skipnc
  2101  014F  2953               	goto	l1699
  2102                           
  2103                           ;main.c: 347:                     {;main.c: 348:                         do { LATCbits.L
      +                          ATC7 = 1; } while(0);
  2104  0150  0022               	movlb	2	; select bank2
  2105  0151                     L6:	
  2106  0151  178E               	bsf	14,7	;volatile
  2107  0152  2835               	goto	l1625
  2108  0153                     l1699:	
  2109  0153  3002               	movlw	2
  2110  0154  0230               	subwf	main@adcValue+1,w
  2111  0155  30F2               	movlw	242
  2112  0156  1903               	skipnz
  2113  0157  022F               	subwf	main@adcValue,w
  2114  0158  1803               	skipnc
  2115  0159  295D               	goto	l1701
  2116                           
  2117                           ;main.c: 351:                     {;main.c: 352:                         do { LATCbits.L
      +                          ATC7 = 1; } while(0);
  2118  015A  0022               	movlb	2	; select bank2
  2119  015B  178E               	bsf	14,7	;volatile
  2120  015C  2965               	goto	L7
  2121  015D                     l1701:	
  2122                           ;main.c: 353:                         do { LATBbits.LATB5 = 1; } while(0);
  2123                           
  2124  015D  3003               	movlw	3
  2125  015E  0230               	subwf	main@adcValue+1,w
  2126  015F  3028               	movlw	40
  2127  0160  1903               	skipnz
  2128  0161  022F               	subwf	main@adcValue,w
  2129  0162  1803               	skipnc
  2130  0163  2967               	goto	l1703
  2131                           
  2132                           ;main.c: 356:                     {;main.c: 357:                         do { LATBbits.L
      +                          ATB5 = 1; } while(0);
  2133  0164  0022               	movlb	2	; select bank2
  2134  0165                     L7:	
  2135  0165  168D               	bsf	13,5	;volatile
  2136  0166  2835               	goto	l1625
  2137  0167                     l1703:	
  2138  0167  3003               	movlw	3
  2139  0168  0230               	subwf	main@adcValue+1,w
  2140  0169  305D               	movlw	93
  2141  016A  1903               	skipnz
  2142  016B  022F               	subwf	main@adcValue,w
  2143  016C  1803               	skipnc
  2144  016D  2971               	goto	l1705
  2145                           
  2146                           ;main.c: 360:                     {;main.c: 361:                         do { LATBbits.L
      +                          ATB5 = 1; } while(0);
  2147  016E  0022               	movlb	2	; select bank2
  2148  016F  168D               	bsf	13,5	;volatile
  2149  0170  2979               	goto	L8
  2150  0171                     l1705:	
  2151                           ;main.c: 362:                         do { LATBbits.LATB6 = 1; } while(0);
  2152                           
  2153  0171  3003               	movlw	3
  2154  0172  0230               	subwf	main@adcValue+1,w
  2155  0173  3093               	movlw	147
  2156  0174  1903               	skipnz
  2157  0175  022F               	subwf	main@adcValue,w
  2158  0176  1803               	skipnc
  2159  0177  297B               	goto	l1707
  2160                           
  2161                           ;main.c: 365:                     {;main.c: 366:                         do { LATBbits.L
      +                          ATB6 = 1; } while(0);
  2162  0178  0022               	movlb	2	; select bank2
  2163  0179                     L8:	
  2164  0179  170D               	bsf	13,6	;volatile
  2165  017A  2835               	goto	l1625
  2166  017B                     l1707:	
  2167  017B  3003               	movlw	3
  2168  017C  0230               	subwf	main@adcValue+1,w
  2169  017D  30C9               	movlw	201
  2170  017E  1903               	skipnz
  2171  017F  022F               	subwf	main@adcValue,w
  2172  0180  1803               	skipnc
  2173  0181  2985               	goto	l483
  2174                           
  2175                           ;main.c: 369:                     {;main.c: 370:                         do { LATBbits.L
      +                          ATB6 = 1; } while(0);
  2176  0182  0022               	movlb	2	; select bank2
  2177  0183  170D               	bsf	13,6	;volatile
  2178  0184  2986               	goto	L9
  2179  0185                     l483:	
  2180                           ;main.c: 374:                     {;main.c: 375:                         do { LATBbits.L
      +                          ATB7 = 1; } while(0);
  2181                           
  2182                           ;main.c: 371:                         do { LATBbits.LATB7 = 1; } while(0);
  2183                           
  2184  0185  0022               	movlb	2	; select bank2
  2185  0186                     L9:	
  2186  0186  178D               	bsf	13,7	;volatile
  2187  0187  2835               	goto	l1625
  2188  0188                     l1709:	
  2189                           
  2190                           ;main.c: 383:                 if(doToggle)
  2191  0188  083B               	movf	_doToggle,w
  2192  0189  1903               	btfsc	3,2
  2193  018A  2835               	goto	l1625
  2194  018B  1003               	clrc
  2195  018C  0022               	movlb	2	; select bank2
  2196  018D  1C0E               	btfss	14,0	;volatile
  2197  018E  1403               	setc
  2198  018F  1C03               	btfss	3,0
  2199  0190  2994               	goto	u1120
  2200  0191  0022               	movlb	2	; select bank2
  2201  0192  140E               	bsf	14,0	;volatile
  2202  0193  2996               	goto	l489
  2203  0194                     u1120:	
  2204  0194  0022               	movlb	2	; select bank2
  2205  0195  100E               	bcf	14,0	;volatile
  2206  0196                     l489:	
  2207                           ;main.c: 386:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2208                           
  2209  0196  1003               	clrc
  2210  0197  1C8E               	btfss	14,1	;volatile
  2211  0198  1403               	setc
  2212  0199  1C03               	btfss	3,0
  2213  019A  299E               	goto	u1140
  2214  019B  0022               	movlb	2	; select bank2
  2215  019C  148E               	bsf	14,1	;volatile
  2216  019D  29A0               	goto	l491
  2217  019E                     u1140:	
  2218  019E  0022               	movlb	2	; select bank2
  2219  019F  108E               	bcf	14,1	;volatile
  2220  01A0                     l491:	
  2221                           ;main.c: 387:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2222                           
  2223  01A0  1003               	clrc
  2224  01A1  1D0E               	btfss	14,2	;volatile
  2225  01A2  1403               	setc
  2226  01A3  1C03               	btfss	3,0
  2227  01A4  29A8               	goto	u1160
  2228  01A5  0022               	movlb	2	; select bank2
  2229  01A6  150E               	bsf	14,2	;volatile
  2230  01A7  29AA               	goto	l493
  2231  01A8                     u1160:	
  2232  01A8  0022               	movlb	2	; select bank2
  2233  01A9  110E               	bcf	14,2	;volatile
  2234  01AA                     l493:	
  2235                           ;main.c: 388:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2236                           
  2237  01AA  1003               	clrc
  2238  01AB  1D8E               	btfss	14,3	;volatile
  2239  01AC  1403               	setc
  2240  01AD  1C03               	btfss	3,0
  2241  01AE  29B2               	goto	u1180
  2242  01AF  0022               	movlb	2	; select bank2
  2243  01B0  158E               	bsf	14,3	;volatile
  2244  01B1  29B4               	goto	l495
  2245  01B2                     u1180:	
  2246  01B2  0022               	movlb	2	; select bank2
  2247  01B3  118E               	bcf	14,3	;volatile
  2248  01B4                     l495:	
  2249                           ;main.c: 389:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2250                           
  2251  01B4  1003               	clrc
  2252  01B5  1E0E               	btfss	14,4	;volatile
  2253  01B6  1403               	setc
  2254  01B7  1C03               	btfss	3,0
  2255  01B8  29BC               	goto	u1200
  2256  01B9  0022               	movlb	2	; select bank2
  2257  01BA  160E               	bsf	14,4	;volatile
  2258  01BB  29BE               	goto	l1713
  2259  01BC                     u1200:	
  2260  01BC  0022               	movlb	2	; select bank2
  2261  01BD  120E               	bcf	14,4	;volatile
  2262  01BE                     l1713:	
  2263                           
  2264                           ;main.c: 390:                     doToggle = 0;
  2265  01BE  0020               	movlb	0	; select bank0
  2266  01BF  01BB               	clrf	_doToggle
  2267  01C0  2835               	goto	l1625
  2268  01C1                     l1715:	
  2269                           
  2270                           ;main.c: 395:                 if(doToggle)
  2271  01C1  083B               	movf	_doToggle,w
  2272  01C2  1903               	btfsc	3,2
  2273  01C3  2835               	goto	l1625
  2274                           
  2275                           ;main.c: 396:                 {;main.c: 397:                     do { LATCbits.LATC6 = 1
      +                          ; } while(0);
  2276  01C4  0022               	movlb	2	; select bank2
  2277  01C5  170E               	bsf	14,6	;volatile
  2278                           
  2279                           ;main.c: 398:                     do { LATCbits.LATC7 = 1; } while(0);
  2280  01C6  178E               	bsf	14,7	;volatile
  2281                           
  2282                           ;main.c: 399:                     do { LATBbits.LATB5 = 1; } while(0);
  2283  01C7  168D               	bsf	13,5	;volatile
  2284                           
  2285                           ;main.c: 400:                     do { LATBbits.LATB6 = 1; } while(0);
  2286  01C8  170D               	bsf	13,6	;volatile
  2287  01C9  1003               	clrc
  2288  01CA  1F8D               	btfss	13,7	;volatile
  2289  01CB  1403               	setc
  2290  01CC  1C03               	btfss	3,0
  2291  01CD  29D1               	goto	u1230
  2292  01CE  0022               	movlb	2	; select bank2
  2293  01CF  178D               	bsf	13,7	;volatile
  2294  01D0  29BE               	goto	l1713
  2295  01D1                     u1230:	
  2296  01D1  0022               	movlb	2	; select bank2
  2297  01D2  138D               	bcf	13,7	;volatile
  2298  01D3  29BE               	goto	l1713
  2299  01D4                     l1723:	
  2300  01D4  087D               	movf	_currentState,w
  2301  01D5  00AD               	movwf	??_main
  2302  01D6  01AE               	clrf	??_main+1
  2303                           
  2304                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2305                           ; Switch size 1, requested type "simple"
  2306                           ; Number of cases is 1, Range of values is 0 to 0
  2307                           ; switch strategies available:
  2308                           ; Name         Instructions Cycles
  2309                           ; simple_byte            4     3 (average)
  2310                           ; direct_byte            8     6 (fixed)
  2311                           ; jumptable            260     6 (fixed)
  2312                           ;	Chosen strategy is simple_byte
  2313  01D7  082E               	movf	??_main+1,w
  2314  01D8  3A00               	xorlw	0	; case 0
  2315  01D9  1903               	skipnz
  2316  01DA  29DC               	goto	l1819
  2317  01DB  2835               	goto	l1625
  2318  01DC                     l1819:	
  2319                           
  2320                           ; Switch size 1, requested type "simple"
  2321                           ; Number of cases is 4, Range of values is 0 to 3
  2322                           ; switch strategies available:
  2323                           ; Name         Instructions Cycles
  2324                           ; simple_byte           13     7 (average)
  2325                           ; direct_byte           14     6 (fixed)
  2326                           ; jumptable            260     6 (fixed)
  2327                           ;	Chosen strategy is simple_byte
  2328  01DC  082D               	movf	??_main,w
  2329  01DD  3A00               	xorlw	0	; case 0
  2330  01DE  1903               	skipnz
  2331  01DF  2897               	goto	l1665
  2332  01E0  3A01               	xorlw	1	; case 1
  2333  01E1  1903               	skipnz
  2334  01E2  2988               	goto	l1709
  2335  01E3  3A03               	xorlw	3	; case 2
  2336  01E4  1903               	skipnz
  2337  01E5  29C1               	goto	l1715
  2338  01E6  3A01               	xorlw	1	; case 3
  2339  01E7  1903               	skipnz
  2340  01E8  2887               	goto	l1663
  2341  01E9  2835               	goto	l1625
  2342  01EA  280C               	ljmp	start
  2343  01EB                     __end_of_main:	
  2344                           
  2345                           	psect	text1
  2346  01EB                     __ptext1:	
  2347 ;; *************** function _setState *****************
  2348 ;; Defined at:
  2349 ;;		line 83 in file "main.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  newState        1    wreg     enum E2406
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  newState        1    7[COMMON] enum E2406
  2354 ;;  flashEntry      4    8[COMMON] unsigned long 
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  1    wreg      void 
  2357 ;; Registers used:
  2358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2359 ;; Tracked objects:
  2360 ;;		On entry : 1F/0
  2361 ;;		On exit  : 1F/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMMON   BANK0   BANK1
  2364 ;;      Params:         0       0       0
  2365 ;;      Locals:         5       0       0
  2366 ;;      Temps:          4       0       0
  2367 ;;      Totals:         9       0       0
  2368 ;;Total ram usage:        9 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    5
  2371 ;; This function calls:
  2372 ;;		_FLASH_ReadWord
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           
  2379                           ;psect for function _setState
  2380  01EB                     _setState:	
  2381                           
  2382                           ;incstack = 0
  2383                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2384                           ;setState@newState stored from wreg
  2385  01EB  00F7               	movwf	setState@newState
  2386                           
  2387                           ;main.c: 83: void setState(state_t newState);main.c: 84: {;main.c: 85:     if(newState =
      +                          = currentState)
  2388  01EC  0877               	movf	setState@newState,w
  2389  01ED  067D               	xorwf	_currentState,w
  2390  01EE  1903               	btfsc	3,2
  2391  01EF  0008               	return
  2392                           
  2393                           ;main.c: 91:     do { LATCbits.LATC0 = 0; } while(0);
  2394  01F0  0022               	movlb	2	; select bank2
  2395  01F1  100E               	bcf	14,0	;volatile
  2396                           
  2397                           ;main.c: 92:     do { LATCbits.LATC1 = 0; } while(0);
  2398  01F2  108E               	bcf	14,1	;volatile
  2399                           
  2400                           ;main.c: 93:     do { LATCbits.LATC2 = 0; } while(0);
  2401  01F3  110E               	bcf	14,2	;volatile
  2402                           
  2403                           ;main.c: 94:     do { LATCbits.LATC3 = 0; } while(0);
  2404  01F4  118E               	bcf	14,3	;volatile
  2405                           
  2406                           ;main.c: 95:     do { LATCbits.LATC4 = 0; } while(0);
  2407  01F5  120E               	bcf	14,4	;volatile
  2408                           
  2409                           ;main.c: 96:     do { LATCbits.LATC5 = 0; } while(0);
  2410  01F6  128E               	bcf	14,5	;volatile
  2411                           
  2412                           ;main.c: 97:     do { LATCbits.LATC6 = 0; } while(0);
  2413  01F7  130E               	bcf	14,6	;volatile
  2414                           
  2415                           ;main.c: 98:     do { LATCbits.LATC7 = 0; } while(0);
  2416  01F8  138E               	bcf	14,7	;volatile
  2417                           
  2418                           ;main.c: 99:     do { LATBbits.LATB5 = 0; } while(0);
  2419  01F9  128D               	bcf	13,5	;volatile
  2420                           
  2421                           ;main.c: 100:     do { LATBbits.LATB6 = 0; } while(0);
  2422  01FA  130D               	bcf	13,6	;volatile
  2423                           
  2424                           ;main.c: 101:     do { LATBbits.LATB7 = 0; } while(0);
  2425  01FB  138D               	bcf	13,7	;volatile
  2426  01FC  2ABF               	goto	l1561
  2427  01FD                     l1537:	
  2428                           
  2429                           ;main.c: 108:         {;main.c: 113:             uint32_t flashEntry;;main.c: 114:      
      +                                 flashEntry = (uint32_t)FLASH_ReadWord(0x800 -7) << 24;
  2430  01FD  30F9               	movlw	249
  2431  01FE  00F0               	movwf	FLASH_ReadWord@flashAddr
  2432  01FF  3007               	movlw	7
  2433  0200  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2434  0201  235B               	fcall	_FLASH_ReadWord
  2435  0202  0870               	movf	?_FLASH_ReadWord,w
  2436  0203  00F3               	movwf	??_setState
  2437  0204  0871               	movf	?_FLASH_ReadWord+1,w
  2438  0205  00F4               	movwf	??_setState+1
  2439  0206  01F5               	clrf	??_setState+2
  2440  0207  01F6               	clrf	??_setState+3
  2441  0208  3018               	movlw	24
  2442  0209                     u685:	
  2443  0209  35F3               	lslf	??_setState,f
  2444  020A  0DF4               	rlf	??_setState+1,f
  2445  020B  0DF5               	rlf	??_setState+2,f
  2446  020C  0DF6               	rlf	??_setState+3,f
  2447  020D  0B89               	decfsz	9,f
  2448  020E  2A09               	goto	u685
  2449  020F  0876               	movf	??_setState+3,w
  2450  0210  00FB               	movwf	setState@flashEntry+3
  2451  0211  0875               	movf	??_setState+2,w
  2452  0212  00FA               	movwf	setState@flashEntry+2
  2453  0213  0874               	movf	??_setState+1,w
  2454  0214  00F9               	movwf	setState@flashEntry+1
  2455  0215  0873               	movf	??_setState,w
  2456  0216  00F8               	movwf	setState@flashEntry
  2457                           
  2458                           ;main.c: 115:             flashEntry += (uint32_t)FLASH_ReadWord(0x800 -6) << 16;
  2459  0217  30FA               	movlw	250
  2460  0218  00F0               	movwf	FLASH_ReadWord@flashAddr
  2461  0219  3007               	movlw	7
  2462  021A  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2463  021B  235B               	fcall	_FLASH_ReadWord
  2464  021C  0870               	movf	?_FLASH_ReadWord,w
  2465  021D  00F3               	movwf	??_setState
  2466  021E  0871               	movf	?_FLASH_ReadWord+1,w
  2467  021F  00F4               	movwf	??_setState+1
  2468  0220  01F5               	clrf	??_setState+2
  2469  0221  01F6               	clrf	??_setState+3
  2470  0222  3010               	movlw	16
  2471  0223                     u695:	
  2472  0223  35F3               	lslf	??_setState,f
  2473  0224  0DF4               	rlf	??_setState+1,f
  2474  0225  0DF5               	rlf	??_setState+2,f
  2475  0226  0DF6               	rlf	??_setState+3,f
  2476  0227  0B89               	decfsz	9,f
  2477  0228  2A23               	goto	u695
  2478  0229  0873               	movf	??_setState,w
  2479  022A  07F8               	addwf	setState@flashEntry,f
  2480  022B  0874               	movf	??_setState+1,w
  2481  022C  3DF9               	addwfc	setState@flashEntry+1,f
  2482  022D  0875               	movf	??_setState+2,w
  2483  022E  3DFA               	addwfc	setState@flashEntry+2,f
  2484  022F  0876               	movf	??_setState+3,w
  2485  0230  3DFB               	addwfc	setState@flashEntry+3,f
  2486                           
  2487                           ;main.c: 116:             flashEntry += FLASH_ReadWord(0x800 -5) << 8;
  2488  0231  30FB               	movlw	251
  2489  0232  00F0               	movwf	FLASH_ReadWord@flashAddr
  2490  0233  3007               	movlw	7
  2491  0234  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2492  0235  235B               	fcall	_FLASH_ReadWord
  2493  0236  0870               	movf	?_FLASH_ReadWord,w
  2494  0237  00F4               	movwf	??_setState+1
  2495  0238  01F3               	clrf	??_setState
  2496  0239  0873               	movf	??_setState,w
  2497  023A  07F8               	addwf	setState@flashEntry,f
  2498  023B  0874               	movf	??_setState+1,w
  2499  023C  3DF9               	addwfc	setState@flashEntry+1,f
  2500  023D  3000               	movlw	0
  2501  023E  3DFA               	addwfc	setState@flashEntry+2,f
  2502  023F  3DFB               	addwfc	setState@flashEntry+3,f
  2503                           
  2504                           ;main.c: 117:             flashEntry += FLASH_ReadWord(0x800 -4);
  2505  0240  30FC               	movlw	252
  2506  0241  00F0               	movwf	FLASH_ReadWord@flashAddr
  2507  0242  3007               	movlw	7
  2508  0243  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2509  0244  235B               	fcall	_FLASH_ReadWord
  2510  0245  0870               	movf	?_FLASH_ReadWord,w
  2511  0246  07F8               	addwf	setState@flashEntry,f
  2512  0247  0871               	movf	?_FLASH_ReadWord+1,w
  2513  0248  3DF9               	addwfc	setState@flashEntry+1,f
  2514  0249  3000               	movlw	0
  2515  024A  3DFA               	addwfc	setState@flashEntry+2,f
  2516  024B  3DFB               	addwfc	setState@flashEntry+3,f
  2517                           
  2518                           ;main.c: 119:             factor = (flashEntry != 0xFFFFFFFF) ? flashEntry : fixedPointF
      +                          actor;
  2519  024C  0A78               	incf	setState@flashEntry,w
  2520  024D  1D03               	skipz
  2521  024E  2A61               	goto	l1543
  2522  024F  0A79               	incf	setState@flashEntry+1,w
  2523  0250  1D03               	skipz
  2524  0251  2A61               	goto	l1543
  2525  0252  0A7A               	incf	setState@flashEntry+2,w
  2526  0253  1D03               	skipz
  2527  0254  2A61               	goto	l1543
  2528  0255  0A7B               	incf	setState@flashEntry+3,w
  2529  0256  1D03               	btfss	3,2
  2530  0257  2A61               	goto	l1543
  2531  0258  3000               	movlw	0
  2532  0259  0020               	movlb	0	; select bank0
  2533  025A  00C0               	movwf	_factor+3
  2534  025B  3000               	movlw	0
  2535  025C  00BF               	movwf	_factor+2
  2536  025D  3003               	movlw	3
  2537  025E  00BE               	movwf	_factor+1
  2538  025F  30E8               	movlw	232
  2539  0260  2A69               	goto	L10
  2540  0261                     l1543:	
  2541  0261  087B               	movf	setState@flashEntry+3,w
  2542  0262  0020               	movlb	0	; select bank0
  2543  0263  00C0               	movwf	_factor+3
  2544  0264  087A               	movf	setState@flashEntry+2,w
  2545  0265  00BF               	movwf	_factor+2
  2546  0266  0879               	movf	setState@flashEntry+1,w
  2547  0267  00BE               	movwf	_factor+1
  2548  0268  0878               	movf	setState@flashEntry,w
  2549  0269                     L10:	
  2550  0269  00BD               	movwf	_factor
  2551                           
  2552                           ;main.c: 123:             flashEntry = FLASH_ReadWord(0x800 -3) << 24;
  2553  026A  30FD               	movlw	253
  2554  026B  00F0               	movwf	FLASH_ReadWord@flashAddr
  2555  026C  3007               	movlw	7
  2556  026D  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2557  026E  235B               	fcall	_FLASH_ReadWord
  2558  026F  0870               	movf	?_FLASH_ReadWord,w
  2559  0270  00F8               	movwf	setState@flashEntry
  2560  0271  0871               	movf	?_FLASH_ReadWord+1,w
  2561  0272  00F9               	movwf	setState@flashEntry+1
  2562  0273  01FA               	clrf	setState@flashEntry+2
  2563  0274  01FB               	clrf	setState@flashEntry+3
  2564                           
  2565                           ;main.c: 124:             flashEntry += FLASH_ReadWord(0x800 -2) << 16;
  2566  0275  30FE               	movlw	254
  2567  0276  00F0               	movwf	FLASH_ReadWord@flashAddr
  2568  0277  3007               	movlw	7
  2569  0278  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2570  0279  235B               	fcall	_FLASH_ReadWord
  2571  027A  0870               	movf	?_FLASH_ReadWord,w
  2572  027B  07F8               	addwf	setState@flashEntry,f
  2573  027C  0871               	movf	?_FLASH_ReadWord+1,w
  2574  027D  3DF9               	addwfc	setState@flashEntry+1,f
  2575  027E  3000               	movlw	0
  2576  027F  3DFA               	addwfc	setState@flashEntry+2,f
  2577  0280  3DFB               	addwfc	setState@flashEntry+3,f
  2578                           
  2579                           ;main.c: 125:             flashEntry += FLASH_ReadWord(0x800 -1) << 8;
  2580  0281  30FF               	movlw	255
  2581  0282  00F0               	movwf	FLASH_ReadWord@flashAddr
  2582  0283  3007               	movlw	7
  2583  0284  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2584  0285  235B               	fcall	_FLASH_ReadWord
  2585  0286  0870               	movf	?_FLASH_ReadWord,w
  2586  0287  00F4               	movwf	??_setState+1
  2587  0288  01F3               	clrf	??_setState
  2588  0289  0873               	movf	??_setState,w
  2589  028A  07F8               	addwf	setState@flashEntry,f
  2590  028B  0874               	movf	??_setState+1,w
  2591  028C  3DF9               	addwfc	setState@flashEntry+1,f
  2592  028D  3000               	movlw	0
  2593  028E  3DFA               	addwfc	setState@flashEntry+2,f
  2594  028F  3DFB               	addwfc	setState@flashEntry+3,f
  2595                           
  2596                           ;main.c: 126:             flashEntry += FLASH_ReadWord(0x800);
  2597  0290  3000               	movlw	0
  2598  0291  00F0               	movwf	FLASH_ReadWord@flashAddr
  2599  0292  3008               	movlw	8
  2600  0293  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2601  0294  235B               	fcall	_FLASH_ReadWord
  2602  0295  0870               	movf	?_FLASH_ReadWord,w
  2603  0296  07F8               	addwf	setState@flashEntry,f
  2604  0297  0871               	movf	?_FLASH_ReadWord+1,w
  2605  0298  3DF9               	addwfc	setState@flashEntry+1,f
  2606  0299  3000               	movlw	0
  2607  029A  3DFA               	addwfc	setState@flashEntry+2,f
  2608  029B  3DFB               	addwfc	setState@flashEntry+3,f
  2609                           
  2610                           ;main.c: 128:             offset = (flashEntry != 0xFFFFFFFF) ? flashEntry : 0;
  2611  029C  0A78               	incf	setState@flashEntry,w
  2612  029D  1D03               	skipz
  2613  029E  2AB1               	goto	l1557
  2614  029F  0A79               	incf	setState@flashEntry+1,w
  2615  02A0  1D03               	skipz
  2616  02A1  2AB1               	goto	l1557
  2617  02A2  0A7A               	incf	setState@flashEntry+2,w
  2618  02A3  1D03               	skipz
  2619  02A4  2AB1               	goto	l1557
  2620  02A5  0A7B               	incf	setState@flashEntry+3,w
  2621  02A6  1D03               	btfss	3,2
  2622  02A7  2AB1               	goto	l1557
  2623  02A8  3000               	movlw	0
  2624  02A9  0020               	movlb	0	; select bank0
  2625  02AA  00B4               	movwf	_offset+3
  2626  02AB  3000               	movlw	0
  2627  02AC  00B3               	movwf	_offset+2
  2628  02AD  3000               	movlw	0
  2629  02AE  00B2               	movwf	_offset+1
  2630  02AF  3000               	movlw	0
  2631  02B0  2AB9               	goto	L11
  2632  02B1                     l1557:	
  2633  02B1  087B               	movf	setState@flashEntry+3,w
  2634  02B2  0020               	movlb	0	; select bank0
  2635  02B3  00B4               	movwf	_offset+3
  2636  02B4  087A               	movf	setState@flashEntry+2,w
  2637  02B5  00B3               	movwf	_offset+2
  2638  02B6  0879               	movf	setState@flashEntry+1,w
  2639  02B7  00B2               	movwf	_offset+1
  2640  02B8  0878               	movf	setState@flashEntry,w
  2641  02B9                     L11:	
  2642  02B9  00B1               	movwf	_offset
  2643  02BA  2AD2               	goto	l1563
  2644  02BB                     l314:	
  2645                           ;main.c: 134:             do { LATCbits.LATC0 = 1; } while(0);
  2646                           
  2647  02BB  140E               	bsf	14,0	;volatile
  2648  02BC  2AD2               	goto	l1563
  2649  02BD                     l317:	
  2650                           ;main.c: 138:             do { LATBbits.LATB7 = 1; } while(0);
  2651                           
  2652  02BD  178D               	bsf	13,7	;volatile
  2653  02BE  2AD2               	goto	l1563
  2654  02BF                     l1561:	
  2655  02BF  0877               	movf	setState@newState,w
  2656  02C0  00F3               	movwf	??_setState
  2657  02C1  01F4               	clrf	??_setState+1
  2658                           
  2659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2660                           ; Switch size 1, requested type "simple"
  2661                           ; Number of cases is 1, Range of values is 0 to 0
  2662                           ; switch strategies available:
  2663                           ; Name         Instructions Cycles
  2664                           ; simple_byte            4     3 (average)
  2665                           ; direct_byte            8     6 (fixed)
  2666                           ; jumptable            260     6 (fixed)
  2667                           ;	Chosen strategy is simple_byte
  2668  02C2  0874               	movf	??_setState+1,w
  2669  02C3  3A00               	xorlw	0	; case 0
  2670  02C4  1903               	skipnz
  2671  02C5  2AC7               	goto	l1821
  2672  02C6  2AD2               	goto	l1563
  2673  02C7                     l1821:	
  2674                           
  2675                           ; Switch size 1, requested type "simple"
  2676                           ; Number of cases is 3, Range of values is 0 to 2
  2677                           ; switch strategies available:
  2678                           ; Name         Instructions Cycles
  2679                           ; simple_byte           10     6 (average)
  2680                           ; direct_byte           12     6 (fixed)
  2681                           ; jumptable            260     6 (fixed)
  2682                           ;	Chosen strategy is simple_byte
  2683  02C7  0873               	movf	??_setState,w
  2684  02C8  3A00               	xorlw	0	; case 0
  2685  02C9  1903               	skipnz
  2686  02CA  29FD               	goto	l1537
  2687  02CB  3A01               	xorlw	1	; case 1
  2688  02CC  1903               	skipnz
  2689  02CD  2ABB               	goto	l314
  2690  02CE  3A03               	xorlw	3	; case 2
  2691  02CF  1903               	skipnz
  2692  02D0  2ABD               	goto	l317
  2693  02D1  2AD2               	goto	l1563
  2694  02D2                     l1563:	
  2695                           
  2696                           ;main.c: 142:     msTick = 0;
  2697  02D2  0020               	movlb	0	; select bank0
  2698  02D3  01B7               	clrf	_msTick	;volatile
  2699  02D4  01B8               	clrf	_msTick+1	;volatile
  2700                           
  2701                           ;main.c: 144:     currentState = newState;
  2702  02D5  0877               	movf	setState@newState,w
  2703  02D6  00F3               	movwf	??_setState
  2704  02D7  0873               	movf	??_setState,w
  2705  02D8  00FD               	movwf	_currentState
  2706  02D9  0008               	return
  2707  02DA                     __end_of_setState:	
  2708                           
  2709                           	psect	text2
  2710  035B                     __ptext2:	
  2711 ;; *************** function _FLASH_ReadWord *****************
  2712 ;; Defined at:
  2713 ;;		line 58 in file "mcc_generated_files/memory.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  flashAddr       2    0[COMMON] unsigned short 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  2    0[COMMON] unsigned short 
  2720 ;; Registers used:
  2721 ;;		wreg, status,2, status,0
  2722 ;; Tracked objects:
  2723 ;;		On entry : 1C/2
  2724 ;;		On exit  : 1F/3
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMMON   BANK0   BANK1
  2727 ;;      Params:         2       0       0
  2728 ;;      Locals:         1       0       0
  2729 ;;      Temps:          0       0       0
  2730 ;;      Totals:         3       0       0
  2731 ;;Total ram usage:        3 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    4
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_setState
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           
  2742                           ;psect for function _FLASH_ReadWord
  2743  035B                     _FLASH_ReadWord:	
  2744                           
  2745                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  2746                           
  2747                           ;incstack = 0
  2748                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  2749  035B  3000               	movlw	0
  2750  035C  1B8B               	btfsc	11,7	;volatile
  2751  035D  3001               	movlw	1
  2752  035E  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  2753                           
  2754                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  2755  035F  138B               	bcf	11,7	;volatile
  2756                           
  2757                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  2758  0360  0870               	movf	FLASH_ReadWord@flashAddr,w
  2759  0361  0023               	movlb	3	; select bank3
  2760  0362  0091               	movwf	17	;volatile
  2761                           
  2762                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  2763  0363  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  2764  0364  0092               	movwf	18	;volatile
  2765                           
  2766                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  2767  0365  1315               	bcf	21,6	;volatile
  2768                           
  2769                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  2770  0366  1415               	bsf	21,0	;volatile
  2771                           
  2772                           ;mcc_generated_files/memory.c: 68:     __nop();
  2773  0367  0000               	nop
  2774                           
  2775                           ;mcc_generated_files/memory.c: 69:     __nop();
  2776  0368  0000               	nop
  2777                           
  2778                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  2779  0369  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  2780  036A  1C03               	skipc
  2781  036B  138B               	bcf	11,7	;volatile
  2782  036C  1803               	skipnc
  2783  036D  178B               	bsf	11,7	;volatile
  2784                           
  2785                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  2786  036E  0023               	movlb	3	; select bank3
  2787  036F  0814               	movf	20,w	;volatile
  2788  0370  00F1               	movwf	?_FLASH_ReadWord+1
  2789  0371  0813               	movf	19,w	;volatile
  2790  0372  00F0               	movwf	?_FLASH_ReadWord
  2791  0373  0008               	return
  2792  0374                     __end_of_FLASH_ReadWord:	
  2793                           
  2794                           	psect	text3
  2795  032C                     __ptext3:	
  2796 ;; *************** function ___lmul *****************
  2797 ;; Defined at:
  2798 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  multiplier      4    0[COMMON] unsigned long 
  2801 ;;  multiplicand    4    4[COMMON] unsigned long 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  product         4    8[COMMON] unsigned long 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  4    0[COMMON] unsigned long 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0
  2808 ;; Tracked objects:
  2809 ;;		On entry : 1F/0
  2810 ;;		On exit  : 1F/0
  2811 ;;		Unchanged: 1F/0
  2812 ;; Data sizes:     COMMON   BANK0   BANK1
  2813 ;;      Params:         8       0       0
  2814 ;;      Locals:         4       0       0
  2815 ;;      Temps:          0       0       0
  2816 ;;      Totals:        12       0       0
  2817 ;;Total ram usage:       12 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    4
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_main
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           
  2828                           ;psect for function ___lmul
  2829  032C                     ___lmul:	
  2830                           
  2831                           ;incstack = 0
  2832                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2833  032C  3000               	movlw	0
  2834  032D  00FB               	movwf	___lmul@product+3
  2835  032E  3000               	movlw	0
  2836  032F  00FA               	movwf	___lmul@product+2
  2837  0330  3000               	movlw	0
  2838  0331  00F9               	movwf	___lmul@product+1
  2839  0332  3000               	movlw	0
  2840  0333  00F8               	movwf	___lmul@product
  2841  0334                     l1573:	
  2842  0334  1C70               	btfss	___lmul@multiplier,0
  2843  0335  2B3E               	goto	l1577
  2844  0336  0874               	movf	___lmul@multiplicand,w
  2845  0337  07F8               	addwf	___lmul@product,f
  2846  0338  0875               	movf	___lmul@multiplicand+1,w
  2847  0339  3DF9               	addwfc	___lmul@product+1,f
  2848  033A  0876               	movf	___lmul@multiplicand+2,w
  2849  033B  3DFA               	addwfc	___lmul@product+2,f
  2850  033C  0877               	movf	___lmul@multiplicand+3,w
  2851  033D  3DFB               	addwfc	___lmul@product+3,f
  2852  033E                     l1577:	
  2853  033E  3001               	movlw	1
  2854  033F                     u735:	
  2855  033F  35F4               	lslf	___lmul@multiplicand,f
  2856  0340  0DF5               	rlf	___lmul@multiplicand+1,f
  2857  0341  0DF6               	rlf	___lmul@multiplicand+2,f
  2858  0342  0DF7               	rlf	___lmul@multiplicand+3,f
  2859  0343  0B89               	decfsz	9,f
  2860  0344  2B3F               	goto	u735
  2861  0345  3001               	movlw	1
  2862  0346                     u745:	
  2863  0346  36F3               	lsrf	___lmul@multiplier+3,f
  2864  0347  0CF2               	rrf	___lmul@multiplier+2,f
  2865  0348  0CF1               	rrf	___lmul@multiplier+1,f
  2866  0349  0CF0               	rrf	___lmul@multiplier,f
  2867  034A  0B89               	decfsz	9,f
  2868  034B  2B46               	goto	u745
  2869  034C  0873               	movf	___lmul@multiplier+3,w
  2870  034D  0472               	iorwf	___lmul@multiplier+2,w
  2871  034E  0471               	iorwf	___lmul@multiplier+1,w
  2872  034F  0470               	iorwf	___lmul@multiplier,w
  2873  0350  1D03               	skipz
  2874  0351  2B34               	goto	l1573
  2875  0352  087B               	movf	___lmul@product+3,w
  2876  0353  00F3               	movwf	?___lmul+3
  2877  0354  087A               	movf	___lmul@product+2,w
  2878  0355  00F2               	movwf	?___lmul+2
  2879  0356  0879               	movf	___lmul@product+1,w
  2880  0357  00F1               	movwf	?___lmul+1
  2881  0358  0878               	movf	___lmul@product,w
  2882  0359  00F0               	movwf	?___lmul
  2883  035A  0008               	return
  2884  035B                     __end_of___lmul:	
  2885                           
  2886                           	psect	text4
  2887  02DA                     __ptext4:	
  2888 ;; *************** function ___lldiv *****************
  2889 ;; Defined at:
  2890 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\__lldiv.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  divisor         4    0[BANK0 ] unsigned long 
  2893 ;;  dividend        4    4[BANK0 ] unsigned long 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  quotient        4    8[BANK0 ] unsigned long 
  2896 ;;  counter         1   12[BANK0 ] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  4    0[BANK0 ] unsigned long 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2, status,0
  2901 ;; Tracked objects:
  2902 ;;		On entry : 1F/0
  2903 ;;		On exit  : 1F/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1
  2906 ;;      Params:         0       8       0
  2907 ;;      Locals:         0       5       0
  2908 ;;      Temps:          1       0       0
  2909 ;;      Totals:         1      13       0
  2910 ;;Total ram usage:       14 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    4
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_main
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           
  2921                           ;psect for function ___lldiv
  2922  02DA                     ___lldiv:	
  2923                           
  2924                           ;incstack = 0
  2925                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2926  02DA  3000               	movlw	0
  2927  02DB  00AB               	movwf	___lldiv@quotient+3
  2928  02DC  3000               	movlw	0
  2929  02DD  00AA               	movwf	___lldiv@quotient+2
  2930  02DE  3000               	movlw	0
  2931  02DF  00A9               	movwf	___lldiv@quotient+1
  2932  02E0  3000               	movlw	0
  2933  02E1  00A8               	movwf	___lldiv@quotient
  2934  02E2  0823               	movf	___lldiv@divisor+3,w
  2935  02E3  0422               	iorwf	___lldiv@divisor+2,w
  2936  02E4  0421               	iorwf	___lldiv@divisor+1,w
  2937  02E5  0420               	iorwf	___lldiv@divisor,w
  2938  02E6  1903               	skipnz
  2939  02E7  2B23               	goto	l1605
  2940  02E8  01AC               	clrf	___lldiv@counter
  2941  02E9  0AAC               	incf	___lldiv@counter,f
  2942  02EA                     l1591:	
  2943  02EA  1BA3               	btfsc	___lldiv@divisor+3,7
  2944  02EB  2AF8               	goto	l1593
  2945  02EC  3001               	movlw	1
  2946  02ED                     u775:	
  2947  02ED  35A0               	lslf	___lldiv@divisor,f
  2948  02EE  0DA1               	rlf	___lldiv@divisor+1,f
  2949  02EF  0DA2               	rlf	___lldiv@divisor+2,f
  2950  02F0  0DA3               	rlf	___lldiv@divisor+3,f
  2951  02F1  0B89               	decfsz	9,f
  2952  02F2  2AED               	goto	u775
  2953  02F3  3001               	movlw	1
  2954  02F4  00FC               	movwf	??___lldiv
  2955  02F5  087C               	movf	??___lldiv,w
  2956  02F6  07AC               	addwf	___lldiv@counter,f
  2957  02F7  2AEA               	goto	l1591
  2958  02F8                     l1593:	
  2959  02F8  3001               	movlw	1
  2960  02F9                     u795:	
  2961  02F9  35A8               	lslf	___lldiv@quotient,f
  2962  02FA  0DA9               	rlf	___lldiv@quotient+1,f
  2963  02FB  0DAA               	rlf	___lldiv@quotient+2,f
  2964  02FC  0DAB               	rlf	___lldiv@quotient+3,f
  2965  02FD  0B89               	decfsz	9,f
  2966  02FE  2AF9               	goto	u795
  2967  02FF  0823               	movf	___lldiv@divisor+3,w
  2968  0300  0227               	subwf	___lldiv@dividend+3,w
  2969  0301  1D03               	skipz
  2970  0302  2B0D               	goto	u805
  2971  0303  0822               	movf	___lldiv@divisor+2,w
  2972  0304  0226               	subwf	___lldiv@dividend+2,w
  2973  0305  1D03               	skipz
  2974  0306  2B0D               	goto	u805
  2975  0307  0821               	movf	___lldiv@divisor+1,w
  2976  0308  0225               	subwf	___lldiv@dividend+1,w
  2977  0309  1D03               	skipz
  2978  030A  2B0D               	goto	u805
  2979  030B  0820               	movf	___lldiv@divisor,w
  2980  030C  0224               	subwf	___lldiv@dividend,w
  2981  030D                     u805:	
  2982  030D  1C03               	skipc
  2983  030E  2B18               	goto	l1601
  2984  030F  0820               	movf	___lldiv@divisor,w
  2985  0310  02A4               	subwf	___lldiv@dividend,f
  2986  0311  0821               	movf	___lldiv@divisor+1,w
  2987  0312  3BA5               	subwfb	___lldiv@dividend+1,f
  2988  0313  0822               	movf	___lldiv@divisor+2,w
  2989  0314  3BA6               	subwfb	___lldiv@dividend+2,f
  2990  0315  0823               	movf	___lldiv@divisor+3,w
  2991  0316  3BA7               	subwfb	___lldiv@dividend+3,f
  2992  0317  1428               	bsf	___lldiv@quotient,0
  2993  0318                     l1601:	
  2994  0318  3001               	movlw	1
  2995  0319                     u815:	
  2996  0319  36A3               	lsrf	___lldiv@divisor+3,f
  2997  031A  0CA2               	rrf	___lldiv@divisor+2,f
  2998  031B  0CA1               	rrf	___lldiv@divisor+1,f
  2999  031C  0CA0               	rrf	___lldiv@divisor,f
  3000  031D  0B89               	decfsz	9,f
  3001  031E  2B19               	goto	u815
  3002  031F  3001               	movlw	1
  3003  0320  02AC               	subwf	___lldiv@counter,f
  3004  0321  1D03               	btfss	3,2
  3005  0322  2AF8               	goto	l1593
  3006  0323                     l1605:	
  3007  0323  082B               	movf	___lldiv@quotient+3,w
  3008  0324  00A3               	movwf	?___lldiv+3
  3009  0325  082A               	movf	___lldiv@quotient+2,w
  3010  0326  00A2               	movwf	?___lldiv+2
  3011  0327  0829               	movf	___lldiv@quotient+1,w
  3012  0328  00A1               	movwf	?___lldiv+1
  3013  0329  0828               	movf	___lldiv@quotient,w
  3014  032A  00A0               	movwf	?___lldiv
  3015  032B  0008               	return
  3016  032C                     __end_of___lldiv:	
  3017                           
  3018                           	psect	text5
  3019  0426                     __ptext5:	
  3020 ;; *************** function _TMR2_StartTimer *****************
  3021 ;; Defined at:
  3022 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		None
  3031 ;; Tracked objects:
  3032 ;;		On entry : 1F/0
  3033 ;;		On exit  : 1F/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMMON   BANK0   BANK1
  3036 ;;      Params:         0       0       0
  3037 ;;      Locals:         0       0       0
  3038 ;;      Temps:          0       0       0
  3039 ;;      Totals:         0       0       0
  3040 ;;Total ram usage:        0 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    4
  3043 ;; This function calls:
  3044 ;;		Nothing
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           
  3051                           ;psect for function _TMR2_StartTimer
  3052  0426                     _TMR2_StartTimer:	
  3053                           
  3054                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  3055                           
  3056                           ;incstack = 0
  3057                           ; Regs used in _TMR2_StartTimer: []
  3058  0426  151C               	bsf	28,2	;volatile
  3059  0427  0008               	return
  3060  0428                     __end_of_TMR2_StartTimer:	
  3061                           
  3062                           	psect	text6
  3063  03E8                     __ptext6:	
  3064 ;; *************** function _SYSTEM_Initialize *****************
  3065 ;; Defined at:
  3066 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0, pclath, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : B1F/0
  3077 ;;		On exit  : 1F/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1
  3080 ;;      Params:         0       0       0
  3081 ;;      Locals:         0       0       0
  3082 ;;      Temps:          0       0       0
  3083 ;;      Totals:         0       0       0
  3084 ;;Total ram usage:        0 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    6
  3087 ;; This function calls:
  3088 ;;		_ADC_Initialize
  3089 ;;		_OSCILLATOR_Initialize
  3090 ;;		_PIN_MANAGER_Initialize
  3091 ;;		_PWM3_Initialize
  3092 ;;		_TMR0_Initialize
  3093 ;;		_TMR2_Initialize
  3094 ;;		_WDT_Initialize
  3095 ;; This function is called by:
  3096 ;;		_main
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           
  3101                           ;psect for function _SYSTEM_Initialize
  3102  03E8                     _SYSTEM_Initialize:	
  3103                           
  3104                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3105                           
  3106                           ;incstack = 0
  3107                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3108  03E8  2374               	fcall	_PIN_MANAGER_Initialize
  3109                           
  3110                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3111  03E9  2408               	fcall	_OSCILLATOR_Initialize
  3112                           
  3113                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3114  03EA  2422               	fcall	_WDT_Initialize
  3115                           
  3116                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  3117  03EB  2400               	fcall	_ADC_Initialize
  3118                           
  3119                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  3120  03EC  23F8               	fcall	_PWM3_Initialize
  3121                           
  3122                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3123  03ED  23F0               	fcall	_TMR2_Initialize
  3124                           
  3125                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  3126  03EE  23BA               	fcall	_TMR0_Initialize
  3127  03EF  0008               	return
  3128  03F0                     __end_of_SYSTEM_Initialize:	
  3129                           
  3130                           	psect	text7
  3131  0422                     __ptext7:	
  3132 ;; *************** function _WDT_Initialize *****************
  3133 ;; Defined at:
  3134 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg
  3143 ;; Tracked objects:
  3144 ;;		On entry : B1F/2
  3145 ;;		On exit  : B1F/1
  3146 ;;		Unchanged: B00/0
  3147 ;; Data sizes:     COMMON   BANK0   BANK1
  3148 ;;      Params:         0       0       0
  3149 ;;      Locals:         0       0       0
  3150 ;;      Temps:          0       0       0
  3151 ;;      Totals:         0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    4
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_SYSTEM_Initialize
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           
  3163                           ;psect for function _WDT_Initialize
  3164  0422                     _WDT_Initialize:	
  3165                           
  3166                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  3167                           
  3168                           ;incstack = 0
  3169                           ; Regs used in _WDT_Initialize: [wreg]
  3170  0422  3016               	movlw	22
  3171  0423  0021               	movlb	1	; select bank1
  3172  0424  0097               	movwf	23	;volatile
  3173  0425  0008               	return
  3174  0426                     __end_of_WDT_Initialize:	
  3175                           
  3176                           	psect	text8
  3177  03F0                     __ptext8:	
  3178 ;; *************** function _TMR2_Initialize *****************
  3179 ;; Defined at:
  3180 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;		None
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;		None
  3185 ;; Return value:  Size  Location     Type
  3186 ;;                  1    wreg      void 
  3187 ;; Registers used:
  3188 ;;		wreg, status,2
  3189 ;; Tracked objects:
  3190 ;;		On entry : B1F/C
  3191 ;;		On exit  : B1F/0
  3192 ;;		Unchanged: B00/0
  3193 ;; Data sizes:     COMMON   BANK0   BANK1
  3194 ;;      Params:         0       0       0
  3195 ;;      Locals:         0       0       0
  3196 ;;      Temps:          0       0       0
  3197 ;;      Totals:         0       0       0
  3198 ;;Total ram usage:        0 bytes
  3199 ;; Hardware stack levels used:    1
  3200 ;; Hardware stack levels required when called:    4
  3201 ;; This function calls:
  3202 ;;		Nothing
  3203 ;; This function is called by:
  3204 ;;		_SYSTEM_Initialize
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           
  3209                           ;psect for function _TMR2_Initialize
  3210  03F0                     _TMR2_Initialize:	
  3211                           
  3212                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  3213                           
  3214                           ;incstack = 0
  3215                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  3216  03F0  30FF               	movlw	255
  3217  03F1  0020               	movlb	0	; select bank0
  3218  03F2  009B               	movwf	27	;volatile
  3219                           
  3220                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  3221  03F3  019A               	clrf	26	;volatile
  3222                           
  3223                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  3224  03F4  1091               	bcf	17,1	;volatile
  3225                           
  3226                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  3227  03F5  301C               	movlw	28
  3228  03F6  009C               	movwf	28	;volatile
  3229  03F7  0008               	return
  3230  03F8                     __end_of_TMR2_Initialize:	
  3231                           
  3232                           	psect	text9
  3233  03BA                     __ptext9:	
  3234 ;; *************** function _TMR0_Initialize *****************
  3235 ;; Defined at:
  3236 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0, pclath, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : B1F/0
  3247 ;;		On exit  : 1F/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1
  3250 ;;      Params:         0       0       0
  3251 ;;      Locals:         0       0       0
  3252 ;;      Temps:          1       0       0
  3253 ;;      Totals:         1       0       0
  3254 ;;Total ram usage:        1 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    5
  3257 ;; This function calls:
  3258 ;;		_TMR0_SetInterruptHandler
  3259 ;; This function is called by:
  3260 ;;		_SYSTEM_Initialize
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           
  3265                           ;psect for function _TMR0_Initialize
  3266  03BA                     _TMR0_Initialize:	
  3267                           
  3268                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3272  03BA  0021               	movlb	1	; select bank1
  3273  03BB  0815               	movf	21,w	;volatile
  3274  03BC  39C0               	andlw	192
  3275  03BD  3811               	iorlw	17
  3276  03BE  0095               	movwf	21	;volatile
  3277                           
  3278                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  3279  03BF  3006               	movlw	6
  3280  03C0  0020               	movlb	0	; select bank0
  3281  03C1  0095               	movwf	21	;volatile
  3282                           
  3283                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  3284  03C2  3006               	movlw	6
  3285  03C3  00F2               	movwf	??_TMR0_Initialize
  3286  03C4  0872               	movf	??_TMR0_Initialize,w
  3287  03C5  00C4               	movwf	_timer0ReloadVal	;volatile
  3288                           
  3289                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  3290  03C6  110B               	bcf	11,2	;volatile
  3291                           
  3292                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  3293  03C7  168B               	bsf	11,5	;volatile
  3294                           
  3295                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  3296  03C8  3028               	movlw	low _TMR0_DefaultInterruptHandler
  3297  03C9  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3298  03CA  3004               	movlw	high _TMR0_DefaultInterruptHandler
  3299  03CB  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3300  03CC  2419               	fcall	_TMR0_SetInterruptHandler
  3301  03CD  0008               	return
  3302  03CE                     __end_of_TMR0_Initialize:	
  3303                           
  3304                           	psect	text10
  3305  0419                     __ptext10:	
  3306 ;; *************** function _TMR0_SetInterruptHandler *****************
  3307 ;; Defined at:
  3308 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  3311 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;		None
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg
  3318 ;; Tracked objects:
  3319 ;;		On entry : 1F/0
  3320 ;;		On exit  : 1F/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMMON   BANK0   BANK1
  3323 ;;      Params:         2       0       0
  3324 ;;      Locals:         0       0       0
  3325 ;;      Temps:          0       0       0
  3326 ;;      Totals:         2       0       0
  3327 ;;Total ram usage:        2 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    4
  3330 ;; This function calls:
  3331 ;;		Nothing
  3332 ;; This function is called by:
  3333 ;;		_TMR0_Initialize
  3334 ;;		_main
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           
  3339                           ;psect for function _TMR0_SetInterruptHandler
  3340  0419                     _TMR0_SetInterruptHandler:	
  3341                           
  3342                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3346  0419  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3347  041A  00C3               	movwf	_TMR0_InterruptHandler+1
  3348  041B  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3349  041C  00C2               	movwf	_TMR0_InterruptHandler
  3350  041D  0008               	return
  3351  041E                     __end_of_TMR0_SetInterruptHandler:	
  3352                           
  3353                           	psect	text11
  3354  03F8                     __ptext11:	
  3355 ;; *************** function _PWM3_Initialize *****************
  3356 ;; Defined at:
  3357 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg
  3366 ;; Tracked objects:
  3367 ;;		On entry : B1F/1
  3368 ;;		On exit  : B1F/C
  3369 ;;		Unchanged: B00/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1
  3371 ;;      Params:         0       0       0
  3372 ;;      Locals:         0       0       0
  3373 ;;      Temps:          0       0       0
  3374 ;;      Totals:         0       0       0
  3375 ;;Total ram usage:        0 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    4
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_SYSTEM_Initialize
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           
  3386                           ;psect for function _PWM3_Initialize
  3387  03F8                     _PWM3_Initialize:	
  3388                           
  3389                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  3390                           
  3391                           ;incstack = 0
  3392                           ; Regs used in _PWM3_Initialize: [wreg]
  3393  03F8  30D0               	movlw	208
  3394  03F9  002C               	movlb	12	; select bank12
  3395  03FA  0099               	movwf	25	;volatile
  3396                           
  3397                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  3398  03FB  30FF               	movlw	255
  3399  03FC  0098               	movwf	24	;volatile
  3400                           
  3401                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  3402  03FD  30C0               	movlw	192
  3403  03FE  0097               	movwf	23	;volatile
  3404  03FF  0008               	return
  3405  0400                     __end_of_PWM3_Initialize:	
  3406                           
  3407                           	psect	text12
  3408  0374                     __ptext12:	
  3409 ;; *************** function _PIN_MANAGER_Initialize *****************
  3410 ;; Defined at:
  3411 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;		None
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2
  3420 ;; Tracked objects:
  3421 ;;		On entry : B1F/0
  3422 ;;		On exit  : B1F/2
  3423 ;;		Unchanged: B00/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1
  3425 ;;      Params:         0       0       0
  3426 ;;      Locals:         0       0       0
  3427 ;;      Temps:          0       0       0
  3428 ;;      Totals:         0       0       0
  3429 ;;Total ram usage:        0 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    4
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_SYSTEM_Initialize
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           
  3440                           ;psect for function _PIN_MANAGER_Initialize
  3441  0374                     _PIN_MANAGER_Initialize:	
  3442                           
  3443                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3447  0374  0022               	movlb	2	; select bank2
  3448  0375  018C               	clrf	12	;volatile
  3449                           
  3450                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  3451  0376  018D               	clrf	13	;volatile
  3452                           
  3453                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  3454  0377  018E               	clrf	14	;volatile
  3455                           
  3456                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  3457  0378  303B               	movlw	59
  3458  0379  0021               	movlb	1	; select bank1
  3459  037A  008C               	movwf	12	;volatile
  3460                           
  3461                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  3462  037B  3010               	movlw	16
  3463  037C  008D               	movwf	13	;volatile
  3464                           
  3465                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  3466  037D  018E               	clrf	14	;volatile
  3467                           
  3468                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  3469  037E  0023               	movlb	3	; select bank3
  3470  037F  018E               	clrf	14	;volatile
  3471                           
  3472                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  3473  0380  3030               	movlw	48
  3474  0381  008D               	movwf	13	;volatile
  3475                           
  3476                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  3477  0382  3013               	movlw	19
  3478  0383  008C               	movwf	12	;volatile
  3479                           
  3480                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  3481  0384  0024               	movlb	4	; select bank4
  3482  0385  018D               	clrf	13	;volatile
  3483                           
  3484                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  3485  0386  018C               	clrf	12	;volatile
  3486                           
  3487                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  3488  0387  0021               	movlb	1	; select bank1
  3489  0388  1795               	bsf	21,7	;volatile
  3490                           
  3491                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  3492  0389  0022               	movlb	2	; select bank2
  3493  038A  019D               	clrf	29	;volatile
  3494  038B  0008               	return
  3495  038C                     __end_of_PIN_MANAGER_Initialize:	
  3496                           
  3497                           	psect	text13
  3498  0408                     __ptext13:	
  3499 ;; *************** function _OSCILLATOR_Initialize *****************
  3500 ;; Defined at:
  3501 ;;		line 62 in file "mcc_generated_files/mcc.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;		None
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;		None
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  1    wreg      void 
  3508 ;; Registers used:
  3509 ;;		wreg, status,2
  3510 ;; Tracked objects:
  3511 ;;		On entry : B1F/2
  3512 ;;		On exit  : B1F/2
  3513 ;;		Unchanged: B00/0
  3514 ;; Data sizes:     COMMON   BANK0   BANK1
  3515 ;;      Params:         0       0       0
  3516 ;;      Locals:         0       0       0
  3517 ;;      Temps:          0       0       0
  3518 ;;      Totals:         0       0       0
  3519 ;;Total ram usage:        0 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    4
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_SYSTEM_Initialize
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           
  3530                           ;psect for function _OSCILLATOR_Initialize
  3531  0408                     _OSCILLATOR_Initialize:	
  3532                           
  3533                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  3534                           
  3535                           ;incstack = 0
  3536                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3537  0408  306A               	movlw	106
  3538  0409  0021               	movlb	1	; select bank1
  3539  040A  0099               	movwf	25	;volatile
  3540                           
  3541                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  3542  040B  0022               	movlb	2	; select bank2
  3543  040C  0196               	clrf	22	;volatile
  3544  040D  0008               	return
  3545  040E                     __end_of_OSCILLATOR_Initialize:	
  3546                           
  3547                           	psect	text14
  3548  0400                     __ptext14:	
  3549 ;; *************** function _ADC_Initialize *****************
  3550 ;; Defined at:
  3551 ;;		line 67 in file "mcc_generated_files/adc.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;		None
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;		None
  3556 ;; Return value:  Size  Location     Type
  3557 ;;                  1    wreg      void 
  3558 ;; Registers used:
  3559 ;;		wreg, status,2
  3560 ;; Tracked objects:
  3561 ;;		On entry : B1F/1
  3562 ;;		On exit  : B1F/1
  3563 ;;		Unchanged: B00/0
  3564 ;; Data sizes:     COMMON   BANK0   BANK1
  3565 ;;      Params:         0       0       0
  3566 ;;      Locals:         0       0       0
  3567 ;;      Temps:          0       0       0
  3568 ;;      Totals:         0       0       0
  3569 ;;Total ram usage:        0 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:    4
  3572 ;; This function calls:
  3573 ;;		Nothing
  3574 ;; This function is called by:
  3575 ;;		_SYSTEM_Initialize
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           
  3580                           ;psect for function _ADC_Initialize
  3581  0400                     _ADC_Initialize:	
  3582                           
  3583                           ;mcc_generated_files/adc.c: 72:     ADCON0 = 0x01;
  3584                           
  3585                           ;incstack = 0
  3586                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  3587  0400  3001               	movlw	1
  3588  0401  009D               	movwf	29	;volatile
  3589                           
  3590                           ;mcc_generated_files/adc.c: 75:     ADCON1 = 0xC0;
  3591  0402  30C0               	movlw	192
  3592  0403  009E               	movwf	30	;volatile
  3593                           
  3594                           ;mcc_generated_files/adc.c: 78:     ADCON2 = 0x00;
  3595  0404  019F               	clrf	31	;volatile
  3596                           
  3597                           ;mcc_generated_files/adc.c: 81:     ADRESL = 0x00;
  3598  0405  019B               	clrf	27	;volatile
  3599                           
  3600                           ;mcc_generated_files/adc.c: 84:     ADRESH = 0x00;
  3601  0406  019C               	clrf	28	;volatile
  3602  0407  0008               	return
  3603  0408                     __end_of_ADC_Initialize:	
  3604                           
  3605                           	psect	text15
  3606  03A4                     __ptext15:	
  3607 ;; *************** function _PWM3_LoadDutyValue *****************
  3608 ;; Defined at:
  3609 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  dutyValue       2    0[COMMON] unsigned short 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;		None
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, status,2, status,0
  3618 ;; Tracked objects:
  3619 ;;		On entry : 1F/0
  3620 ;;		On exit  : 1F/C
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMMON   BANK0   BANK1
  3623 ;;      Params:         2       0       0
  3624 ;;      Locals:         0       0       0
  3625 ;;      Temps:          2       0       0
  3626 ;;      Totals:         4       0       0
  3627 ;;Total ram usage:        4 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    4
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_main
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _PWM3_LoadDutyValue
  3639  03A4                     _PWM3_LoadDutyValue:	
  3640                           
  3641                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  3642                           
  3643                           ;incstack = 0
  3644                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  3645  03A4  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  3646  03A5  00F3               	movwf	??_PWM3_LoadDutyValue+1
  3647  03A6  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  3648  03A7  00F2               	movwf	??_PWM3_LoadDutyValue
  3649  03A8  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  3650  03A9  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  3651  03AA  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  3652  03AB  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  3653  03AC  0872               	movf	??_PWM3_LoadDutyValue,w
  3654  03AD  002C               	movlb	12	; select bank12
  3655  03AE  0098               	movwf	24	;volatile
  3656                           
  3657                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  3658  03AF  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  3659  03B0  3903               	andlw	3
  3660  03B1  00F2               	movwf	??_PWM3_LoadDutyValue
  3661  03B2  3005               	movlw	5
  3662  03B3                     u665:	
  3663  03B3  35F2               	lslf	??_PWM3_LoadDutyValue,f
  3664  03B4  3EFF               	addlw	-1
  3665  03B5  1D03               	skipz
  3666  03B6  2BB3               	goto	u665
  3667  03B7  3572               	lslf	??_PWM3_LoadDutyValue,w
  3668  03B8  0097               	movwf	23	;volatile
  3669  03B9  0008               	return
  3670  03BA                     __end_of_PWM3_LoadDutyValue:	
  3671                           
  3672                           	psect	text16
  3673  038C                     __ptext16:	
  3674 ;; *************** function _ADC_GetConversion *****************
  3675 ;; Defined at:
  3676 ;;		line 115 in file "mcc_generated_files/adc.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  channel         1    wreg     enum E2336
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  channel         1    3[COMMON] enum E2336
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  2    0[COMMON] unsigned short 
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, status,0
  3685 ;; Tracked objects:
  3686 ;;		On entry : 1F/0
  3687 ;;		On exit  : 1F/1
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMMON   BANK0   BANK1
  3690 ;;      Params:         2       0       0
  3691 ;;      Locals:         1       0       0
  3692 ;;      Temps:          1       0       0
  3693 ;;      Totals:         4       0       0
  3694 ;;Total ram usage:        4 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    4
  3697 ;; This function calls:
  3698 ;;		Nothing
  3699 ;; This function is called by:
  3700 ;;		_main
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           
  3705                           ;psect for function _ADC_GetConversion
  3706  038C                     _ADC_GetConversion:	
  3707                           
  3708                           ;incstack = 0
  3709                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  3710                           ;ADC_GetConversion@channel stored from wreg
  3711  038C  00F3               	movwf	ADC_GetConversion@channel
  3712                           
  3713                           ;mcc_generated_files/adc.c: 115: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 116: {;mcc_generated_files/adc.c: 118:     ADCON0bits.CHS = ch
      +                          annel;
  3714  038D  0873               	movf	ADC_GetConversion@channel,w
  3715  038E  00F2               	movwf	??_ADC_GetConversion
  3716  038F  0DF2               	rlf	??_ADC_GetConversion,f
  3717  0390  0DF2               	rlf	??_ADC_GetConversion,f
  3718  0391  0021               	movlb	1	; select bank1
  3719  0392  081D               	movf	29,w	;volatile
  3720  0393  0672               	xorwf	??_ADC_GetConversion,w
  3721  0394  3983               	andlw	-125
  3722  0395  0672               	xorwf	??_ADC_GetConversion,w
  3723  0396  009D               	movwf	29	;volatile
  3724                           
  3725                           ;mcc_generated_files/adc.c: 121:     ADCON0bits.ADON = 1;
  3726  0397  141D               	bsf	29,0	;volatile
  3727                           
  3728                           ;mcc_generated_files/adc.c: 124:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  3729  0398  3200               	nop2	;2 cycle nop
  3730  0399  3200               	nop2	;2 cycle nop
  3731  039A  0000               	nop
  3732                           
  3733                           ;mcc_generated_files/adc.c: 127:     ADCON0bits.GO_nDONE = 1;
  3734  039B  0021               	movlb	1	; select bank1
  3735  039C  149D               	bsf	29,1	;volatile
  3736  039D                     l34:	
  3737                           ;mcc_generated_files/adc.c: 131:     {;mcc_generated_files/adc.c: 132:     }
  3738                           
  3739                           
  3740                           ;mcc_generated_files/adc.c: 130:     while (ADCON0bits.GO_nDONE)
  3741  039D  189D               	btfsc	29,1	;volatile
  3742  039E  2B9D               	goto	l34
  3743                           
  3744                           ;mcc_generated_files/adc.c: 135:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  3745  039F  081C               	movf	28,w	;volatile
  3746  03A0  00F1               	movwf	?_ADC_GetConversion+1
  3747  03A1  081B               	movf	27,w	;volatile
  3748  03A2  00F0               	movwf	?_ADC_GetConversion
  3749  03A3  0008               	return
  3750  03A4                     __end_of_ADC_GetConversion:	
  3751                           
  3752                           	psect	intentry
  3753  0004                     __pintentry:	
  3754 ;; *************** function _INTERRUPT_InterruptManager *****************
  3755 ;; Defined at:
  3756 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0, pclath, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1
  3770 ;;      Params:         0       0       0
  3771 ;;      Locals:         0       0       0
  3772 ;;      Temps:          0       0       0
  3773 ;;      Totals:         0       0       0
  3774 ;;Total ram usage:        0 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    3
  3777 ;; This function calls:
  3778 ;;		_TMR0_ISR
  3779 ;; This function is called by:
  3780 ;;		Interrupt level 1
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784  0004                     _INTERRUPT_InterruptManager:	
  3785                           
  3786                           ;incstack = 0
  3787  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3788                           
  3789                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  3790  0005  3180               	pagesel	$
  3791                           
  3792                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  3793  0006  1A8B               	btfsc	11,5	;volatile
  3794  0007  1D0B               	btfss	11,2	;volatile
  3795  0008  280A               	goto	i1l197
  3796                           
  3797                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  3798  0009  240E               	fcall	_TMR0_ISR
  3799  000A                     i1l197:	
  3800                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  3801                           
  3802  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3803  000B  0009               	retfie
  3804  000C                     __end_of_INTERRUPT_InterruptManager:	
  3805                           
  3806                           	psect	text18
  3807  040E                     __ptext18:	
  3808 ;; *************** function _TMR0_ISR *****************
  3809 ;; Defined at:
  3810 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;		None
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0, pclath, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1
  3824 ;;      Params:         0       0       0
  3825 ;;      Locals:         0       0       0
  3826 ;;      Temps:          0       0       0
  3827 ;;      Totals:         0       0       0
  3828 ;;Total ram usage:        0 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    2
  3831 ;; This function calls:
  3832 ;;		_TMR0_CallBack
  3833 ;; This function is called by:
  3834 ;;		_INTERRUPT_InterruptManager
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function _TMR0_ISR
  3840  040E                     _TMR0_ISR:	
  3841                           
  3842                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  3846  040E  110B               	bcf	11,2	;volatile
  3847                           
  3848                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  3849  040F  0020               	movlb	0	; select bank0
  3850  0410  0844               	movf	_timer0ReloadVal,w	;volatile
  3851  0411  0095               	movwf	21	;volatile
  3852                           
  3853                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
  3854  0412  23DE               	fcall	_TMR0_CallBack
  3855  0413  0008               	return
  3856  0414                     __end_of_TMR0_ISR:	
  3857                           
  3858                           	psect	text19
  3859  03DE                     __ptext19:	
  3860 ;; *************** function _TMR0_CallBack *****************
  3861 ;; Defined at:
  3862 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;		None
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;		None
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      void 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, pclath, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 1F/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMMON   BANK0   BANK1
  3876 ;;      Params:         0       0       0
  3877 ;;      Locals:         0       0       0
  3878 ;;      Temps:          0       0       0
  3879 ;;      Totals:         0       0       0
  3880 ;;Total ram usage:        0 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    1
  3883 ;; This function calls:
  3884 ;;		Absolute function
  3885 ;;		_TMR0_DefaultInterruptHandler
  3886 ;;		_timer0CallBack
  3887 ;; This function is called by:
  3888 ;;		_TMR0_ISR
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _TMR0_CallBack
  3894  03DE                     _TMR0_CallBack:	
  3895                           
  3896                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  3900  03DE  0842               	movf	_TMR0_InterruptHandler,w
  3901  03DF  0443               	iorwf	_TMR0_InterruptHandler+1,w
  3902  03E0  1903               	btfsc	3,2
  3903  03E1  0008               	return
  3904                           
  3905                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
  3906  03E2  0843               	movf	_TMR0_InterruptHandler+1,w
  3907  03E3  008A               	movwf	10
  3908  03E4  0842               	movf	_TMR0_InterruptHandler,w
  3909  03E5  000A               	callw
  3910  03E6  3183               	pagesel	$
  3911  03E7  0008               	return
  3912  03E8                     __end_of_TMR0_CallBack:	
  3913                           
  3914                           	psect	text20
  3915  0428                     __ptext20:	
  3916 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3917 ;; Defined at:
  3918 ;;		line 137 in file "mcc_generated_files/tmr0.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		None
  3927 ;; Tracked objects:
  3928 ;;		On entry : 1F/0
  3929 ;;		On exit  : 1F/0
  3930 ;;		Unchanged: 1F/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1
  3932 ;;      Params:         0       0       0
  3933 ;;      Locals:         0       0       0
  3934 ;;      Temps:          0       0       0
  3935 ;;      Totals:         0       0       0
  3936 ;;Total ram usage:        0 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_TMR0_Initialize
  3942 ;;		_TMR0_CallBack
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _TMR0_DefaultInterruptHandler
  3948  0428                     _TMR0_DefaultInterruptHandler:	
  3949                           
  3950                           ;incstack = 0
  3951                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  3952  0428  0008               	return
  3953  0429                     __end_of_TMR0_DefaultInterruptHandler:	
  3954                           
  3955                           	psect	text21
  3956  03CE                     __ptext21:	
  3957 ;; *************** function _timer0CallBack *****************
  3958 ;; Defined at:
  3959 ;;		line 70 in file "main.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;		None
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;		None
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      void 
  3966 ;; Registers used:
  3967 ;;		wreg, status,2
  3968 ;; Tracked objects:
  3969 ;;		On entry : 1F/0
  3970 ;;		On exit  : 1F/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMMON   BANK0   BANK1
  3973 ;;      Params:         0       0       0
  3974 ;;      Locals:         0       0       0
  3975 ;;      Temps:          0       0       0
  3976 ;;      Totals:         0       0       0
  3977 ;;Total ram usage:        0 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;;		_TMR0_CallBack
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           
  3988                           ;psect for function _timer0CallBack
  3989  03CE                     _timer0CallBack:	
  3990                           
  3991                           ;main.c: 73:     msTick++;
  3992                           
  3993                           ;incstack = 0
  3994                           ; Regs used in _timer0CallBack: [wreg+status,2]
  3995  03CE  3001               	movlw	1
  3996  03CF  07B7               	addwf	_msTick,f	;volatile
  3997  03D0  3000               	movlw	0
  3998  03D1  3DB8               	addwfc	_msTick+1,f	;volatile
  3999                           
  4000                           ;main.c: 75:     if(msTick > 200)
  4001  03D2  3000               	movlw	0
  4002  03D3  0238               	subwf	_msTick+1,w	;volatile
  4003  03D4  30C9               	movlw	201
  4004  03D5  1903               	skipnz
  4005  03D6  0237               	subwf	_msTick,w	;volatile
  4006  03D7  1C03               	skipc
  4007  03D8  0008               	return
  4008                           
  4009                           ;main.c: 76:     {;main.c: 77:         doToggle = 1;
  4010  03D9  01BB               	clrf	_doToggle
  4011  03DA  0ABB               	incf	_doToggle,f
  4012                           
  4013                           ;main.c: 78:         msTick = 0;
  4014  03DB  01B7               	clrf	_msTick	;volatile
  4015  03DC  01B8               	clrf	_msTick+1	;volatile
  4016  03DD  0008               	return
  4017  03DE                     __end_of_timer0CallBack:	
  4018  007E                     btemp	set	126	;btemp
  4019  007E                     int$flags	set	126
  4020  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    4
    Data        5
    BSS         13
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     17      37
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->___lldiv
    _setState->_FLASH_ReadWord
    ___lldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___lldiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2391
                                             13 BANK0      4     4      0
                  _ADC_GetConversion
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___lldiv
                             ___lmul
                           _setState
 ---------------------------------------------------------------------------------
 (1) _setState                                             9     9      0     901
                                              3 COMMON     9     9      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     739
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     314
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _PWM3_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___lldiv
     ___lmul (ARG)
   ___lmul
   _setState
     _FLASH_ReadWord

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      33       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     11      25       6       46.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      33       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Apr 20 08:50:40 2020

                             __CFG_CP$OFF 0000                                        l34 039D  
                         _timer0ReloadVal 0044                                       l314 02BB  
                                     l317 02BD                                       l338 0066  
                                     l375 00A1                                       l491 01A0  
                                     l483 0185                                       l493 01AA  
                                     l495 01B4                                       l489 0196  
                                     _PR2 001B                                       u805 030D  
                                     u815 0319                                       u735 033F  
                                     u665 03B3                                       u745 0346  
                                     u685 0209                                       u775 02ED  
                                     u695 0223                                       u795 02F9  
                         _TMR2_Initialize 03F0                              __CFG_BORV$LO 0000  
                                     wreg 0009                               main@channel 0041  
                            __CFG_LVP$OFF 0000                                      l1601 0318  
                                    l1605 0323                                      l1701 015D  
                                    l1543 0261                                      l1703 0167  
                                    l1537 01FD                                      l1561 02BF  
                                    l1713 01BE                                      l1705 0171  
                                    l1641 005B                                      l1625 0035  
                                    l1563 02D2                                      l1715 01C1  
                                    l1707 017B                                      l1651 0069  
                                    l1723 01D4                                      l1643 005E  
                                    l1573 0334                                      l1821 02C7  
                                    l1557 02B1                                      l1709 0188  
                                    l1653 006C                                      l1661 0085  
                                    l1629 003C                                      l1591 02EA  
                                    l1663 0087                                      l1655 006F  
                                    l1647 0062                                      l1593 02F8  
                                    l1577 033E                                      l1681 0106  
                                    l1673 00DE                                      l1665 0097  
                                    l1817 007A                                      l1819 01DC  
                                    l1683 0110                                      l1675 00E8  
                                    l1659 0072                                      l1685 011A  
                                    l1677 00F2                                      l1695 013F  
                                    l1687 0124                                      l1679 00FC  
                                    l1697 0149                                      l1689 012E  
                                    l1699 0153                                      u1200 01BC  
                                    u1120 0194                                      u1140 019E  
                                    u1230 01D1                                      u1160 01A8  
                                    u1180 01B2                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _TMR0 0015                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUB 020D  
                            __CFG_WRT$OFF 0000                                      _main 002B  
                                    fsr0h 0005                                      fsr0l 0004  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                            main@adcValue 002F                                      start 000C  
                           __CFG_MCLRE$ON 0000                   __end_of_TMR0_Initialize 03CE  
          ??_TMR0_DefaultInterruptHandler 0070            __size_of_OSCILLATOR_Initialize 0006  
           __end_of_OSCILLATOR_Initialize 040E                                     ?_main 0070  
                           __CFG_WDTE$OFF 0000                           __end_of___lldiv 032C  
                                   _T2CON 001C                                     i1l197 000A  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E         __size_of_TMR0_SetInterruptHandler 0005  
                     ___lmul@multiplicand 0074                 ?_TMR0_SetInterruptHandler 0070  
                        __end_of_TMR0_ISR 0414                            _WDT_Initialize 0422  
                 __end_of_PWM3_Initialize 0400                                     pclath 000A  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 0426                           __initialization 000D  
                            __end_of_main 01EB                   __end_of_TMR2_Initialize 03F8  
                          __CFG_LPBOR$OFF 0000               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 002D                   __size_of_FLASH_ReadWord 0019  
                  __end_of_WDT_Initialize 0426                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADCON2 009F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                                  _BORCON 0116                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _OSCCON 0099  
                                  _WDTCON 0097                            __CFG_PWRTE$OFF 0000  
                                  ___lmul 032C               __size_of_PWM3_LoadDutyValue 0016  
                          __CFG_STVREN$ON 0000                                    _factor 003D  
                               ??___lldiv 007C                                    _msTick 0037  
                        ?_TMR0_Initialize 0070                                    _offset 0031  
                        __end_of_setState 02DA                   FLASH_ReadWord@flashAddr 0070  
                         ?_WDT_Initialize 0070                  ADC_GetConversion@channel 0073  
                   __end_of_TMR0_CallBack 03E8                   __end_of_TMR2_StartTimer 0428  
TMR0_SetInterruptHandler@InterruptHandler 0070                          ?_PWM3_Initialize 0070  
                       _SYSTEM_Initialize 03E8                   __end_of__initialization 0028  
                      ?_SYSTEM_Initialize 0070                          _fixedPointFactor 041E  
                          __pcstackCOMMON 0070                   __size_of_timer0CallBack 0010  
                            __pidataBANK0 0414                       ??_SYSTEM_Initialize 0073  
                               ?_TMR0_ISR 0070                          ?_TMR2_Initialize 0070  
                          _OPTION_REGbits 0095                 __end_of_SYSTEM_Initialize 03F0  
                              __pbssBANK0 0031                                __pmaintext 002B  
        __end_of_TMR0_SetInterruptHandler 041E                                   ?___lmul 0070  
                              ??_TMR0_ISR 0070                                __pintentry 0004  
                          ___lmul@product 0078                   __size_of_ADC_Initialize 0008  
                          _FLASH_ReadWord 035B                                   _PWM3DCH 0618  
                                 _PWM3DCL 0617                                   _PWM3CON 0619  
                        ?_TMR2_StartTimer 0070                      _ADC_InterruptHandler 0039  
                               ?_setState 0070                           __size_of___lmul 002F  
                                 ___lldiv 02DA                    __end_of_FLASH_ReadWord 0374  
                                 __ptext1 01EB                                   __ptext2 035B  
                                 __ptext3 032C                                   __ptext4 02DA  
                                 __ptext5 0426                                   __ptext6 03E8  
                                 __ptext7 0422                                   __ptext8 03F0  
                                 __ptext9 03BA                     _OSCILLATOR_Initialize 0408  
                               _T2CONbits 001C                  ??_PIN_MANAGER_Initialize 0070  
              __size_of_SYSTEM_Initialize 0008                      end_of_initialization 0028  
                         ___lldiv@divisor 0020                           ___lldiv@counter 002C  
                              ??_setState 0073                            _timer0CallBack 03CE  
               FLASH_ReadWord@GIEBitValue 0072                        setState@flashEntry 0078  
                         ?_FLASH_ReadWord 0070                          ??_WDT_Initialize 0070  
                _TMR0_SetInterruptHandler 0419                                 _PORTAbits 000C  
                        __CFG_FOSC$INTOSC 0000                  __end_of_fixedPointFactor 0422  
                  __end_of_timer0CallBack 03DE                __end_of_PWM3_LoadDutyValue 03BA  
                          __end_of___lmul 035B                         __size_of_TMR0_ISR 0006  
                          _ADC_Initialize 0400                    ?_OSCILLATOR_Initialize 0070  
                     start_initialization 000D                  __size_of_TMR0_Initialize 0014  
         __size_of_PIN_MANAGER_Initialize 0018                           ?_timer0CallBack 0070  
                __size_of_PWM3_Initialize 0008                                  ??___lmul 0078  
                  __size_of_TMR0_CallBack 000A                    __end_of_ADC_Initialize 0408  
                             __pdataBANK0 003D                               __pbssCOMMON 007D  
                               ___latbits 0000                             __pcstackBANK0 0020  
                __size_of_TMR2_Initialize 0008                          setState@newState 0077  
                            _currentState 007D                     _TMR0_InterruptHandler 0042  
                               __pnvBANK0 0042                    _PIN_MANAGER_Initialize 0374  
                       __size_of_setState 00EF                                  ?___lldiv 0020  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0070  
                           _TMR0_CallBack 03DE                                 _msPressed 0035  
                       ??_TMR0_Initialize 0072                                  _LATBbits 010D  
                                _LATCbits 010E                  __size_of_TMR2_StartTimer 0002  
     __size_of_INTERRUPT_InterruptManager 0008                ??_TMR0_SetInterruptHandler 0072  
                                _PIR1bits 0011                          ??_FLASH_ReadWord 0072  
                                _TMR0_ISR 040E                         ??_PWM3_Initialize 0070  
                              _ADCON0bits 009D                            ?_TMR0_CallBack 0070  
                       ___lmul@multiplier 0070                         ??_TMR2_Initialize 0070  
                       _ADC_GetConversion 038C                   ??_OSCILLATOR_Initialize 0070  
                      ?_ADC_GetConversion 0070                          __size_of___lldiv 0052  
                      _PWM3_LoadDutyValue 03A4                       ??_ADC_GetConversion 0072  
                                _doToggle 003B                                  __ptext10 0419  
                                __ptext11 03F8                                  __ptext20 0428  
                                __ptext12 0374                                  __ptext21 03CE  
                                __ptext13 0408                                  __ptext14 0400  
                                __ptext15 03A4                                  __ptext16 038C  
                                __ptext18 040E                                  __ptext19 03DE  
                     ?_PWM3_LoadDutyValue 0070                          ??_timer0CallBack 0070  
                           __size_of_main 01C0      __end_of_TMR0_DefaultInterruptHandler 0429  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0428  
               __end_of_ADC_GetConversion 03A4                                  _setState 01EB  
                    ??_PWM3_LoadDutyValue 0072                                  int$flags 007E  
                       ??_TMR2_StartTimer 0070        __end_of_INTERRUPT_InterruptManager 000C  
              _INTERRUPT_InterruptManager 0004                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0070                   __size_of_WDT_Initialize 0004  
                                intlevel1 0000                            _doButtonAction 003C  
                              _PMCON1bits 0195                          ___lldiv@dividend 0024  
                 ?_PIN_MANAGER_Initialize 0070                         __CFG_CLKOUTEN$OFF 0000  
                        ??_ADC_Initialize 0070             ?_TMR0_DefaultInterruptHandler 0070  
             PWM3_LoadDutyValue@dutyValue 0070                             __pstringtext1 041E  
                              _OPTION_REG 0095                          ___lldiv@quotient 0028  
                         _TMR0_Initialize 03BA            __end_of_PIN_MANAGER_Initialize 038C  
              __size_of_ADC_GetConversion 0018                           _PWM3_Initialize 03F8  
