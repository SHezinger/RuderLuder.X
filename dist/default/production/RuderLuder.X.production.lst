

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Sep 16 13:07:09 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F1507
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F1507 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0197                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0391                     	;# 
   145  0392                     	;# 
   146  0393                     	;# 
   147  0394                     	;# 
   148  0395                     	;# 
   149  0396                     	;# 
   150  0498                     	;# 
   151  0498                     	;# 
   152  0499                     	;# 
   153  049A                     	;# 
   154  049B                     	;# 
   155  049B                     	;# 
   156  049C                     	;# 
   157  049D                     	;# 
   158  049E                     	;# 
   159  049F                     	;# 
   160  0611                     	;# 
   161  0612                     	;# 
   162  0613                     	;# 
   163  0613                     	;# 
   164  0614                     	;# 
   165  0615                     	;# 
   166  0616                     	;# 
   167  0616                     	;# 
   168  0617                     	;# 
   169  0618                     	;# 
   170  0619                     	;# 
   171  0619                     	;# 
   172  061A                     	;# 
   173  061B                     	;# 
   174  061C                     	;# 
   175  061C                     	;# 
   176  0691                     	;# 
   177  0692                     	;# 
   178  0693                     	;# 
   179  0694                     	;# 
   180  0695                     	;# 
   181  0F0F                     	;# 
   182  0F10                     	;# 
   183  0F11                     	;# 
   184  0F12                     	;# 
   185  0F13                     	;# 
   186  0F14                     	;# 
   187  0F15                     	;# 
   188  0F16                     	;# 
   189  0F17                     	;# 
   190  0F18                     	;# 
   191  0F19                     	;# 
   192  0F1A                     	;# 
   193  0F1B                     	;# 
   194  0F1C                     	;# 
   195  0F1D                     	;# 
   196  0F1E                     	;# 
   197  0F1F                     	;# 
   198  0FE3                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0015                     	;# 
   229  0016                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001C                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0097                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  0116                     	;# 
   258  0117                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0194                     	;# 
   269  0195                     	;# 
   270  0196                     	;# 
   271  0197                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0613                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0616                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  0619                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061C                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0F0F                     	;# 
   312  0F10                     	;# 
   313  0F11                     	;# 
   314  0F12                     	;# 
   315  0F13                     	;# 
   316  0F14                     	;# 
   317  0F15                     	;# 
   318  0F16                     	;# 
   319  0F17                     	;# 
   320  0F18                     	;# 
   321  0F19                     	;# 
   322  0F1A                     	;# 
   323  0F1B                     	;# 
   324  0F1C                     	;# 
   325  0F1D                     	;# 
   326  0F1E                     	;# 
   327  0F1F                     	;# 
   328  0FE3                     	;# 
   329  0FE4                     	;# 
   330  0FE5                     	;# 
   331  0FE6                     	;# 
   332  0FE7                     	;# 
   333  0FE8                     	;# 
   334  0FE9                     	;# 
   335  0FEA                     	;# 
   336  0FEB                     	;# 
   337  0FED                     	;# 
   338  0FEE                     	;# 
   339  0FEF                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  011D                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  020C                     	;# 
   403  020D                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  0394                     	;# 
   408  0395                     	;# 
   409  0396                     	;# 
   410  0498                     	;# 
   411  0498                     	;# 
   412  0499                     	;# 
   413  049A                     	;# 
   414  049B                     	;# 
   415  049B                     	;# 
   416  049C                     	;# 
   417  049D                     	;# 
   418  049E                     	;# 
   419  049F                     	;# 
   420  0611                     	;# 
   421  0612                     	;# 
   422  0613                     	;# 
   423  0613                     	;# 
   424  0614                     	;# 
   425  0615                     	;# 
   426  0616                     	;# 
   427  0616                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0FE3                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0013                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  008C                     	;# 
   498  008D                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0099                     	;# 
   507  009A                     	;# 
   508  009B                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  020C                     	;# 
   533  020D                     	;# 
   534  0391                     	;# 
   535  0392                     	;# 
   536  0393                     	;# 
   537  0394                     	;# 
   538  0395                     	;# 
   539  0396                     	;# 
   540  0498                     	;# 
   541  0498                     	;# 
   542  0499                     	;# 
   543  049A                     	;# 
   544  049B                     	;# 
   545  049B                     	;# 
   546  049C                     	;# 
   547  049D                     	;# 
   548  049E                     	;# 
   549  049F                     	;# 
   550  0611                     	;# 
   551  0612                     	;# 
   552  0613                     	;# 
   553  0613                     	;# 
   554  0614                     	;# 
   555  0615                     	;# 
   556  0616                     	;# 
   557  0616                     	;# 
   558  0617                     	;# 
   559  0618                     	;# 
   560  0619                     	;# 
   561  0619                     	;# 
   562  061A                     	;# 
   563  061B                     	;# 
   564  061C                     	;# 
   565  061C                     	;# 
   566  0691                     	;# 
   567  0692                     	;# 
   568  0693                     	;# 
   569  0694                     	;# 
   570  0695                     	;# 
   571  0F0F                     	;# 
   572  0F10                     	;# 
   573  0F11                     	;# 
   574  0F12                     	;# 
   575  0F13                     	;# 
   576  0F14                     	;# 
   577  0F15                     	;# 
   578  0F16                     	;# 
   579  0F17                     	;# 
   580  0F18                     	;# 
   581  0F19                     	;# 
   582  0F1A                     	;# 
   583  0F1B                     	;# 
   584  0F1C                     	;# 
   585  0F1D                     	;# 
   586  0F1E                     	;# 
   587  0F1F                     	;# 
   588  0FE3                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0013                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  009F                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  020C                     	;# 
   663  020D                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0498                     	;# 
   671  0498                     	;# 
   672  0499                     	;# 
   673  049A                     	;# 
   674  049B                     	;# 
   675  049B                     	;# 
   676  049C                     	;# 
   677  049D                     	;# 
   678  049E                     	;# 
   679  049F                     	;# 
   680  0611                     	;# 
   681  0612                     	;# 
   682  0613                     	;# 
   683  0613                     	;# 
   684  0614                     	;# 
   685  0615                     	;# 
   686  0616                     	;# 
   687  0616                     	;# 
   688  0617                     	;# 
   689  0618                     	;# 
   690  0619                     	;# 
   691  0619                     	;# 
   692  061A                     	;# 
   693  061B                     	;# 
   694  061C                     	;# 
   695  061C                     	;# 
   696  0691                     	;# 
   697  0692                     	;# 
   698  0693                     	;# 
   699  0694                     	;# 
   700  0695                     	;# 
   701  0F0F                     	;# 
   702  0F10                     	;# 
   703  0F11                     	;# 
   704  0F12                     	;# 
   705  0F13                     	;# 
   706  0F14                     	;# 
   707  0F15                     	;# 
   708  0F16                     	;# 
   709  0F17                     	;# 
   710  0F18                     	;# 
   711  0F19                     	;# 
   712  0F1A                     	;# 
   713  0F1B                     	;# 
   714  0F1C                     	;# 
   715  0F1D                     	;# 
   716  0F1E                     	;# 
   717  0F1F                     	;# 
   718  0FE3                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0011                     	;# 
   746  0012                     	;# 
   747  0013                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0093                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  0116                     	;# 
   778  0117                     	;# 
   779  011D                     	;# 
   780  018C                     	;# 
   781  018D                     	;# 
   782  018E                     	;# 
   783  0191                     	;# 
   784  0191                     	;# 
   785  0192                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0197                     	;# 
   792  020C                     	;# 
   793  020D                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0498                     	;# 
   801  0498                     	;# 
   802  0499                     	;# 
   803  049A                     	;# 
   804  049B                     	;# 
   805  049B                     	;# 
   806  049C                     	;# 
   807  049D                     	;# 
   808  049E                     	;# 
   809  049F                     	;# 
   810  0611                     	;# 
   811  0612                     	;# 
   812  0613                     	;# 
   813  0613                     	;# 
   814  0614                     	;# 
   815  0615                     	;# 
   816  0616                     	;# 
   817  0616                     	;# 
   818  0617                     	;# 
   819  0618                     	;# 
   820  0619                     	;# 
   821  0619                     	;# 
   822  061A                     	;# 
   823  061B                     	;# 
   824  061C                     	;# 
   825  061C                     	;# 
   826  0691                     	;# 
   827  0692                     	;# 
   828  0693                     	;# 
   829  0694                     	;# 
   830  0695                     	;# 
   831  0F0F                     	;# 
   832  0F10                     	;# 
   833  0F11                     	;# 
   834  0F12                     	;# 
   835  0F13                     	;# 
   836  0F14                     	;# 
   837  0F15                     	;# 
   838  0F16                     	;# 
   839  0F17                     	;# 
   840  0F18                     	;# 
   841  0F19                     	;# 
   842  0F1A                     	;# 
   843  0F1B                     	;# 
   844  0F1C                     	;# 
   845  0F1D                     	;# 
   846  0F1E                     	;# 
   847  0F1F                     	;# 
   848  0FE3                     	;# 
   849  0FE4                     	;# 
   850  0FE5                     	;# 
   851  0FE6                     	;# 
   852  0FE7                     	;# 
   853  0FE8                     	;# 
   854  0FE9                     	;# 
   855  0FEA                     	;# 
   856  0FEB                     	;# 
   857  0FED                     	;# 
   858  0FEE                     	;# 
   859  0FEF                     	;# 
   860  0000                     	;# 
   861  0001                     	;# 
   862  0002                     	;# 
   863  0003                     	;# 
   864  0004                     	;# 
   865  0005                     	;# 
   866  0006                     	;# 
   867  0007                     	;# 
   868  0008                     	;# 
   869  0009                     	;# 
   870  000A                     	;# 
   871  000B                     	;# 
   872  000C                     	;# 
   873  000D                     	;# 
   874  000E                     	;# 
   875  0011                     	;# 
   876  0012                     	;# 
   877  0013                     	;# 
   878  0015                     	;# 
   879  0016                     	;# 
   880  0016                     	;# 
   881  0017                     	;# 
   882  0018                     	;# 
   883  0019                     	;# 
   884  001A                     	;# 
   885  001B                     	;# 
   886  001C                     	;# 
   887  008C                     	;# 
   888  008D                     	;# 
   889  008E                     	;# 
   890  0091                     	;# 
   891  0092                     	;# 
   892  0093                     	;# 
   893  0095                     	;# 
   894  0096                     	;# 
   895  0097                     	;# 
   896  0099                     	;# 
   897  009A                     	;# 
   898  009B                     	;# 
   899  009B                     	;# 
   900  009C                     	;# 
   901  009D                     	;# 
   902  009E                     	;# 
   903  009F                     	;# 
   904  010C                     	;# 
   905  010D                     	;# 
   906  010E                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  011D                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  0191                     	;# 
   914  0191                     	;# 
   915  0192                     	;# 
   916  0193                     	;# 
   917  0193                     	;# 
   918  0194                     	;# 
   919  0195                     	;# 
   920  0196                     	;# 
   921  0197                     	;# 
   922  020C                     	;# 
   923  020D                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0498                     	;# 
   931  0498                     	;# 
   932  0499                     	;# 
   933  049A                     	;# 
   934  049B                     	;# 
   935  049B                     	;# 
   936  049C                     	;# 
   937  049D                     	;# 
   938  049E                     	;# 
   939  049F                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0613                     	;# 
   944  0614                     	;# 
   945  0615                     	;# 
   946  0616                     	;# 
   947  0616                     	;# 
   948  0617                     	;# 
   949  0618                     	;# 
   950  0619                     	;# 
   951  0619                     	;# 
   952  061A                     	;# 
   953  061B                     	;# 
   954  061C                     	;# 
   955  061C                     	;# 
   956  0691                     	;# 
   957  0692                     	;# 
   958  0693                     	;# 
   959  0694                     	;# 
   960  0695                     	;# 
   961  0F0F                     	;# 
   962  0F10                     	;# 
   963  0F11                     	;# 
   964  0F12                     	;# 
   965  0F13                     	;# 
   966  0F14                     	;# 
   967  0F15                     	;# 
   968  0F16                     	;# 
   969  0F17                     	;# 
   970  0F18                     	;# 
   971  0F19                     	;# 
   972  0F1A                     	;# 
   973  0F1B                     	;# 
   974  0F1C                     	;# 
   975  0F1D                     	;# 
   976  0F1E                     	;# 
   977  0F1F                     	;# 
   978  0FE3                     	;# 
   979  0FE4                     	;# 
   980  0FE5                     	;# 
   981  0FE6                     	;# 
   982  0FE7                     	;# 
   983  0FE8                     	;# 
   984  0FE9                     	;# 
   985  0FEA                     	;# 
   986  0FEB                     	;# 
   987  0FED                     	;# 
   988  0FEE                     	;# 
   989  0FEF                     	;# 
   990  0000                     	;# 
   991  0001                     	;# 
   992  0002                     	;# 
   993  0003                     	;# 
   994  0004                     	;# 
   995  0005                     	;# 
   996  0006                     	;# 
   997  0007                     	;# 
   998  0008                     	;# 
   999  0009                     	;# 
  1000  000A                     	;# 
  1001  000B                     	;# 
  1002  000C                     	;# 
  1003  000D                     	;# 
  1004  000E                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010E                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018E                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0197                     	;# 
  1052  020C                     	;# 
  1053  020D                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0394                     	;# 
  1058  0395                     	;# 
  1059  0396                     	;# 
  1060  0498                     	;# 
  1061  0498                     	;# 
  1062  0499                     	;# 
  1063  049A                     	;# 
  1064  049B                     	;# 
  1065  049B                     	;# 
  1066  049C                     	;# 
  1067  049D                     	;# 
  1068  049E                     	;# 
  1069  049F                     	;# 
  1070  0611                     	;# 
  1071  0612                     	;# 
  1072  0613                     	;# 
  1073  0613                     	;# 
  1074  0614                     	;# 
  1075  0615                     	;# 
  1076  0616                     	;# 
  1077  0616                     	;# 
  1078  0617                     	;# 
  1079  0618                     	;# 
  1080  0619                     	;# 
  1081  0619                     	;# 
  1082  061A                     	;# 
  1083  061B                     	;# 
  1084  061C                     	;# 
  1085  061C                     	;# 
  1086  0691                     	;# 
  1087  0692                     	;# 
  1088  0693                     	;# 
  1089  0694                     	;# 
  1090  0695                     	;# 
  1091  0F0F                     	;# 
  1092  0F10                     	;# 
  1093  0F11                     	;# 
  1094  0F12                     	;# 
  1095  0F13                     	;# 
  1096  0F14                     	;# 
  1097  0F15                     	;# 
  1098  0F16                     	;# 
  1099  0F17                     	;# 
  1100  0F18                     	;# 
  1101  0F19                     	;# 
  1102  0F1A                     	;# 
  1103  0F1B                     	;# 
  1104  0F1C                     	;# 
  1105  0F1D                     	;# 
  1106  0F1E                     	;# 
  1107  0F1F                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0013                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0093                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0099                     	;# 
  1157  009A                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  011D                     	;# 
  1170  018C                     	;# 
  1171  018D                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0194                     	;# 
  1179  0195                     	;# 
  1180  0196                     	;# 
  1181  0197                     	;# 
  1182  020C                     	;# 
  1183  020D                     	;# 
  1184  0391                     	;# 
  1185  0392                     	;# 
  1186  0393                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  0498                     	;# 
  1191  0498                     	;# 
  1192  0499                     	;# 
  1193  049A                     	;# 
  1194  049B                     	;# 
  1195  049B                     	;# 
  1196  049C                     	;# 
  1197  049D                     	;# 
  1198  049E                     	;# 
  1199  049F                     	;# 
  1200  0611                     	;# 
  1201  0612                     	;# 
  1202  0613                     	;# 
  1203  0613                     	;# 
  1204  0614                     	;# 
  1205  0615                     	;# 
  1206  0616                     	;# 
  1207  0616                     	;# 
  1208  0617                     	;# 
  1209  0618                     	;# 
  1210  0619                     	;# 
  1211  0619                     	;# 
  1212  061A                     	;# 
  1213  061B                     	;# 
  1214  061C                     	;# 
  1215  061C                     	;# 
  1216  0691                     	;# 
  1217  0692                     	;# 
  1218  0693                     	;# 
  1219  0694                     	;# 
  1220  0695                     	;# 
  1221  0F0F                     	;# 
  1222  0F10                     	;# 
  1223  0F11                     	;# 
  1224  0F12                     	;# 
  1225  0F13                     	;# 
  1226  0F14                     	;# 
  1227  0F15                     	;# 
  1228  0F16                     	;# 
  1229  0F17                     	;# 
  1230  0F18                     	;# 
  1231  0F19                     	;# 
  1232  0F1A                     	;# 
  1233  0F1B                     	;# 
  1234  0F1C                     	;# 
  1235  0F1D                     	;# 
  1236  0F1E                     	;# 
  1237  0F1F                     	;# 
  1238  0FE3                     	;# 
  1239  0FE4                     	;# 
  1240  0FE5                     	;# 
  1241  0FE6                     	;# 
  1242  0FE7                     	;# 
  1243  0FE8                     	;# 
  1244  0FE9                     	;# 
  1245  0FEA                     	;# 
  1246  0FEB                     	;# 
  1247  0FED                     	;# 
  1248  0FEE                     	;# 
  1249  0FEF                     	;# 
  1250                           
  1251                           	psect	idataBANK0
  1252  05FE                     __pidataBANK0:
  1253                           
  1254                           ;initializer for _m
  1255  05FE  34E8               	retlw	232
  1256  05FF  3403               	retlw	3
  1257  0600  3400               	retlw	0
  1258  0601  3400               	retlw	0
  1259                           
  1260                           ;initializer for main@channel
  1261  0602  340A               	retlw	10
  1262                           
  1263                           ;initializer for _upperLimit
  1264  0603  34FF               	retlw	255
  1265  0604  3403               	retlw	3
  1266  0605  3400               	retlw	0
  1267  0606  3400               	retlw	0
  1268                           
  1269                           	psect	stringtext1
  1270  0644                     __pstringtext1:
  1271  0644                     _fixedPointFactor:
  1272  0644  34E8               	retlw	232
  1273  0645  3403               	retlw	3
  1274  0646  3400               	retlw	0
  1275  0647  3400               	retlw	0
  1276  0648                     __end_of_fixedPointFactor:
  1277                           
  1278                           	psect	nvBANK0
  1279  0065                     __pnvBANK0:
  1280  0065                     _TMR0_InterruptHandler:
  1281  0065                     	ds	2
  1282  0067                     _timer0ReloadVal:
  1283  0067                     	ds	1
  1284  000C                     _PORTAbits	set	12
  1285  000B                     _INTCONbits	set	11
  1286  0015                     _TMR0	set	21
  1287  001C                     _T2CONbits	set	28
  1288  001C                     _T2CON	set	28
  1289  0011                     _PIR1bits	set	17
  1290  001A                     _TMR2	set	26
  1291  001B                     _PR2	set	27
  1292  0095                     _OPTION_REG	set	149
  1293  0095                     _OPTION_REGbits	set	149
  1294  008E                     _TRISC	set	142
  1295  008D                     _TRISB	set	141
  1296  008C                     _TRISA	set	140
  1297  0097                     _WDTCON	set	151
  1298  0099                     _OSCCON	set	153
  1299  009D                     _ADCON0bits	set	157
  1300  009D                     _ADCON0	set	157
  1301  009C                     _ADRESH	set	156
  1302  009B                     _ADRESL	set	155
  1303  009F                     _ADCON2	set	159
  1304  009E                     _ADCON1	set	158
  1305  010D                     _LATBbits	set	269
  1306  010E                     _LATCbits	set	270
  1307  011D                     _APFCON	set	285
  1308  010E                     _LATC	set	270
  1309  010D                     _LATB	set	269
  1310  010C                     _LATA	set	268
  1311  0116                     _BORCON	set	278
  1312  0196                     _PMCON2	set	406
  1313  0193                     _PMDATL	set	403
  1314  0194                     _PMDATH	set	404
  1315  0195                     _PMCON1bits	set	405
  1316  0192                     _PMADRH	set	402
  1317  0191                     _PMADRL	set	401
  1318  018C                     _ANSELA	set	396
  1319  018D                     _ANSELB	set	397
  1320  018E                     _ANSELC	set	398
  1321  020C                     _WPUA	set	524
  1322  020D                     _WPUB	set	525
  1323  0617                     _PWM3DCL	set	1559
  1324  0618                     _PWM3DCH	set	1560
  1325  0619                     _PWM3CON	set	1561
  1326                           
  1327                           	psect	cinit
  1328  000D                     start_initialization:	
  1329                           ; #config settings
  1330                           
  1331  000D                     __initialization:
  1332                           
  1333                           ; Initialize objects allocated to BANK0
  1334  000D  30FE               	movlw	low __pidataBANK0
  1335  000E  0084               	movwf	4
  1336  000F  3085               	movlw	(high __pidataBANK0)| (0+128)
  1337  0010  0085               	movwf	5
  1338  0011  305C               	movlw	low __pdataBANK0
  1339  0012  0086               	movwf	6
  1340  0013  3000               	movlw	high __pdataBANK0
  1341  0014  0087               	movwf	7
  1342  0015  3009               	movlw	9
  1343  0016  2627               	fcall	init_ram
  1344                           
  1345                           ; Clear objects allocated to BANK0
  1346  0017  3048               	movlw	low __pbssBANK0
  1347  0018  0084               	movwf	4
  1348  0019  3000               	movlw	high __pbssBANK0
  1349  001A  0085               	movwf	5
  1350  001B  3014               	movlw	20
  1351  001C  262D               	fcall	clear_ram0
  1352  001D                     end_of_initialization:	
  1353                           ;End of C runtime variable initialization code
  1354                           
  1355  001D                     __end_of__initialization:
  1356  001D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1357  001E  0020               	movlb	0
  1358  001F  2820               	ljmp	_main	;jump to C main() function
  1359                           
  1360                           	psect	bssBANK0
  1361  0048                     __pbssBANK0:
  1362  0048                     _lowerLimit:
  1363  0048                     	ds	4
  1364  004C                     _adcValuePosition:
  1365  004C                     	ds	4
  1366  0050                     _b:
  1367  0050                     	ds	3
  1368  0053                     _msPressed:
  1369  0053                     	ds	2
  1370  0055                     _msTick:
  1371  0055                     	ds	2
  1372  0057                     _ADC_InterruptHandler:
  1373  0057                     	ds	2
  1374  0059                     _currentState:
  1375  0059                     	ds	1
  1376  005A                     _doToggle:
  1377  005A                     	ds	1
  1378  005B                     _doButtonAction:
  1379  005B                     	ds	1
  1380                           
  1381                           	psect	dataBANK0
  1382  005C                     __pdataBANK0:
  1383  005C                     _m:
  1384  005C                     	ds	4
  1385  0060                     main@channel:
  1386  0060                     	ds	1
  1387  0061                     _upperLimit:
  1388  0061                     	ds	4
  1389                           
  1390                           	psect	inittext
  1391  0627                     init_ram:
  1392  0627  00FE               	movwf	126
  1393  0628                     initloop:
  1394  0628  0012               	moviw fsr0++
  1395  0629  001E               	movwi fsr1++
  1396  062A  0BFE               	decfsz	126,f
  1397  062B  2E28               	goto	initloop
  1398  062C  3400               	retlw	0
  1399                           
  1400                           	psect	clrtext
  1401  062D                     clear_ram0:	
  1402                           ;	Called with FSR0 containing the base address, and
  1403                           ;	WREG with the size to clear
  1404                           
  1405  062D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1406  062E                     clrloop0:
  1407  062E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1408  062F  3101               	addfsr 0,1
  1409  0630  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1410  0631  2E2E               	goto	clrloop0	;have we reached the end yet?
  1411  0632  3400               	retlw	0	;all done for this memory range, return
  1412                           
  1413                           	psect	cstackCOMMON
  1414  0070                     __pcstackCOMMON:
  1415  0070                     ?_PIN_MANAGER_Initialize:
  1416  0070                     ??_PIN_MANAGER_Initialize:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0070                     ?_OSCILLATOR_Initialize:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0070                     ??_OSCILLATOR_Initialize:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0070                     ?_WDT_Initialize:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0070                     ??_WDT_Initialize:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0070                     ?_PWM3_Initialize:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0070                     ??_PWM3_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0070                     ?_TMR2_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0070                     ??_TMR2_Initialize:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0070                     ?_TMR0_Initialize:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0070                     ?_TMR0_SetInterruptHandler:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0070                     ?_TMR0_DefaultInterruptHandler:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0070                     ??_TMR0_DefaultInterruptHandler:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0070                     ?_TMR0_CallBack:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0070                     ??_TMR0_CallBack:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0070                     ?_FLASH_EraseBlock:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0070                     ?_setLedsForPositioning:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0070                     ?_ADC_Initialize:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0070                     ??_ADC_Initialize:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0070                     ?_SYSTEM_Initialize:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0070                     ?_TMR2_StartTimer:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0070                     ??_TMR2_StartTimer:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0070                     ?_TMR0_ISR:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0070                     ??_TMR0_ISR:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0070                     ?_INTERRUPT_InterruptManager:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0070                     ??_INTERRUPT_InterruptManager:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0070                     ?_readFlash:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0070                     ?_writeFlash:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0070                     ?_timer0CallBack:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0070                     ??_timer0CallBack:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ?_setState:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ?_main:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_ADC_GetConversion:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_FLASH_ReadWord:	
  1516                           ; 2 bytes @ 0x0
  1517                           
  1518  0070                     ?___tmul:	
  1519                           ; 2 bytes @ 0x0
  1520                           
  1521  0070                     ?___lmul:	
  1522                           ; 3 bytes @ 0x0
  1523                           
  1524  0070                     ?___lldiv:	
  1525                           ; 4 bytes @ 0x0
  1526                           
  1527  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1528                           ; 4 bytes @ 0x0
  1529                           
  1530  0070                     FLASH_ReadWord@flashAddr:	
  1531                           ; 2 bytes @ 0x0
  1532                           
  1533  0070                     FLASH_EraseBlock@startAddr:	
  1534                           ; 2 bytes @ 0x0
  1535                           
  1536  0070                     ___tmul@multiplier:	
  1537                           ; 2 bytes @ 0x0
  1538                           
  1539  0070                     setLedsForPositioning@adcValue:	
  1540                           ; 3 bytes @ 0x0
  1541                           
  1542  0070                     ___lmul@multiplier:	
  1543                           ; 4 bytes @ 0x0
  1544                           
  1545  0070                     ___lldiv@divisor:	
  1546                           ; 4 bytes @ 0x0
  1547                           
  1548                           
  1549                           ; 4 bytes @ 0x0
  1550  0070                     	ds	2
  1551  0072                     ??_TMR0_Initialize:
  1552  0072                     ??_TMR0_SetInterruptHandler:	
  1553                           ; 1 bytes @ 0x2
  1554                           
  1555  0072                     ??_FLASH_EraseBlock:	
  1556                           ; 1 bytes @ 0x2
  1557                           
  1558  0072                     ??_ADC_GetConversion:	
  1559                           ; 1 bytes @ 0x2
  1560                           
  1561  0072                     ??_FLASH_ReadWord:	
  1562                           ; 1 bytes @ 0x2
  1563                           
  1564  0072                     FLASH_ReadWord@GIEBitValue:	
  1565                           ; 1 bytes @ 0x2
  1566                           
  1567  0072                     FLASH_EraseBlock@GIEBitValue:	
  1568                           ; 1 bytes @ 0x2
  1569                           
  1570                           
  1571                           ; 1 bytes @ 0x2
  1572  0072                     	ds	1
  1573  0073                     ?_FLASH_WriteBlock:
  1574  0073                     ??_SYSTEM_Initialize:	
  1575                           ; 1 bytes @ 0x3
  1576                           
  1577  0073                     ??_readFlash:	
  1578                           ; 1 bytes @ 0x3
  1579                           
  1580  0073                     ADC_GetConversion@channel:	
  1581                           ; 1 bytes @ 0x3
  1582                           
  1583  0073                     FLASH_WriteBlock@writeAddr:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0073                     ___tmul@multiplicand:	
  1587                           ; 2 bytes @ 0x3
  1588                           
  1589                           
  1590                           ; 3 bytes @ 0x3
  1591  0073                     	ds	1
  1592  0074                     ??_setLedsForPositioning:
  1593  0074                     ?_PWM3_LoadDutyValue:	
  1594                           ; 1 bytes @ 0x4
  1595                           
  1596  0074                     PWM3_LoadDutyValue@dutyValue:	
  1597                           ; 1 bytes @ 0x4
  1598                           
  1599  0074                     ___lmul@multiplicand:	
  1600                           ; 2 bytes @ 0x4
  1601                           
  1602  0074                     ___lldiv@dividend:	
  1603                           ; 4 bytes @ 0x4
  1604                           
  1605                           
  1606                           ; 4 bytes @ 0x4
  1607  0074                     	ds	1
  1608  0075                     FLASH_WriteBlock@flashWordArray:
  1609                           
  1610                           ; 1 bytes @ 0x5
  1611  0075                     	ds	1
  1612  0076                     ??_FLASH_WriteBlock:
  1613  0076                     ??_PWM3_LoadDutyValue:	
  1614                           ; 1 bytes @ 0x6
  1615                           
  1616  0076                     ??___tmul:	
  1617                           ; 1 bytes @ 0x6
  1618                           
  1619  0076                     ___tmul@product:	
  1620                           ; 1 bytes @ 0x6
  1621                           
  1622                           
  1623                           ; 3 bytes @ 0x6
  1624  0076                     	ds	2
  1625  0078                     ??___lmul:
  1626  0078                     ??___lldiv:	
  1627                           ; 1 bytes @ 0x8
  1628                           
  1629  0078                     ___lmul@product:	
  1630                           ; 1 bytes @ 0x8
  1631                           
  1632                           
  1633                           ; 4 bytes @ 0x8
  1634  0078                     	ds	1
  1635  0079                     FLASH_WriteBlock@blockStartAddr:
  1636  0079                     ___lldiv@quotient:	
  1637                           ; 2 bytes @ 0x9
  1638                           
  1639                           
  1640                           ; 4 bytes @ 0x9
  1641  0079                     	ds	2
  1642  007B                     FLASH_WriteBlock@GIEBitValue:
  1643                           
  1644                           ; 1 bytes @ 0xB
  1645  007B                     	ds	1
  1646  007C                     ??___aldiv:
  1647  007C                     FLASH_WriteBlock@i:	
  1648                           ; 1 bytes @ 0xC
  1649                           
  1650                           
  1651                           ; 1 bytes @ 0xC
  1652  007C                     	ds	1
  1653  007D                     ??_writeFlash:
  1654  007D                     ___lldiv@counter:	
  1655                           ; 1 bytes @ 0xD
  1656                           
  1657                           
  1658                           ; 1 bytes @ 0xD
  1659  007D                     	ds	1
  1660                           
  1661                           	psect	cstackBANK0
  1662  0020                     __pcstackBANK0:
  1663  0020                     ??_setState:
  1664  0020                     ?___aldiv:	
  1665                           ; 1 bytes @ 0x0
  1666                           
  1667  0020                     ___aldiv@divisor:	
  1668                           ; 4 bytes @ 0x0
  1669                           
  1670  0020                     writeFlash@wrBlockData:	
  1671                           ; 4 bytes @ 0x0
  1672                           
  1673                           
  1674                           ; 32 bytes @ 0x0
  1675  0020                     	ds	4
  1676  0024                     setState@newState:
  1677  0024                     ___aldiv@dividend:	
  1678                           ; 1 bytes @ 0x4
  1679                           
  1680                           
  1681                           ; 4 bytes @ 0x4
  1682  0024                     	ds	4
  1683  0028                     ___aldiv@counter:
  1684                           
  1685                           ; 1 bytes @ 0x8
  1686  0028                     	ds	1
  1687  0029                     ___aldiv@sign:
  1688                           
  1689                           ; 1 bytes @ 0x9
  1690  0029                     	ds	1
  1691  002A                     ___aldiv@quotient:
  1692                           
  1693                           ; 4 bytes @ 0xA
  1694  002A                     	ds	22
  1695  0040                     ??_main:
  1696                           
  1697                           ; 1 bytes @ 0x20
  1698  0040                     	ds	8
  1699                           
  1700                           	psect	maintext
  1701  0020                     __pmaintext:	
  1702 ;;
  1703 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1704 ;;
  1705 ;; *************** function _main *****************
  1706 ;; Defined at:
  1707 ;;		line 187 in file "main.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;		None
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      void 
  1714 ;; Registers used:
  1715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : B1F/0
  1718 ;;		On exit  : 1F/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMMON   BANK0   BANK1
  1721 ;;      Params:         0       0       0
  1722 ;;      Locals:         0       0       0
  1723 ;;      Temps:          0       8       0
  1724 ;;      Totals:         0       8       0
  1725 ;;Total ram usage:        8 bytes
  1726 ;; Hardware stack levels required when called:    7
  1727 ;; This function calls:
  1728 ;;		_ADC_GetConversion
  1729 ;;		_PWM3_LoadDutyValue
  1730 ;;		_SYSTEM_Initialize
  1731 ;;		_TMR0_SetInterruptHandler
  1732 ;;		_TMR2_StartTimer
  1733 ;;		___aldiv
  1734 ;;		___lmul
  1735 ;;		_setLedsForPositioning
  1736 ;;		_setState
  1737 ;;		_writeFlash
  1738 ;; This function is called by:
  1739 ;;		Startup code after reset
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           
  1744                           ;psect for function _main
  1745  0020                     _main:
  1746                           
  1747                           ;main.c: 190:     SYSTEM_Initialize();
  1748                           
  1749                           ;incstack = 0
  1750                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1751  0020  2607               	fcall	_SYSTEM_Initialize
  1752                           
  1753                           ;main.c: 193:     (INTCONbits.GIE = 1);
  1754  0021  178B               	bsf	11,7	;volatile
  1755                           
  1756                           ;main.c: 195:     setState(STATE_NORMAL);
  1757  0022  3001               	movlw	1
  1758  0023  22B8               	fcall	_setState
  1759                           
  1760                           ;main.c: 198:     TMR0_SetInterruptHandler(timer0CallBack);
  1761  0024  30E4               	movlw	low _timer0CallBack
  1762  0025  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1763  0026  3005               	movlw	high _timer0CallBack
  1764  0027  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1765  0028  263F               	fcall	_TMR0_SetInterruptHandler
  1766                           
  1767                           ;main.c: 199:     TMR2_StartTimer();
  1768  0029  264C               	fcall	_TMR2_StartTimer
  1769  002A                     l1962:
  1770                           
  1771                           ;main.c: 203:     {;main.c: 204:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 207:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1772  002A  3003               	movlw	3
  1773  002B  0020               	movlb	0	; select bank0
  1774  002C  0660               	xorwf	main@channel,w
  1775  002D  1903               	btfsc	3,2
  1776  002E  2831               	goto	l1966
  1777  002F  3003               	movlw	3
  1778  0030  2832               	goto	L1
  1779  0031                     l1966:
  1780  0031  300A               	movlw	10
  1781  0032                     L1:
  1782  0032  00C0               	movwf	??_main
  1783  0033  0840               	movf	??_main,w
  1784  0034  00E0               	movwf	main@channel
  1785                           
  1786                           ;main.c: 212:         if(channel == channelRudder)
  1787  0035  3003               	movlw	3
  1788  0036  0660               	xorwf	main@channel,w
  1789  0037  1D03               	btfss	3,2
  1790  0038  2843               	goto	l1972
  1791                           
  1792                           ;main.c: 213:         {;main.c: 214:             adcValuePosition = ADC_GetConversion(ch
      +                          annel);
  1793  0039  0860               	movf	main@channel,w
  1794  003A  25A2               	fcall	_ADC_GetConversion
  1795  003B  0870               	movf	?_ADC_GetConversion,w
  1796  003C  0020               	movlb	0	; select bank0
  1797  003D  00CC               	movwf	_adcValuePosition
  1798  003E  0871               	movf	?_ADC_GetConversion+1,w
  1799  003F  00CD               	movwf	_adcValuePosition+1
  1800  0040  01CE               	clrf	_adcValuePosition+2
  1801  0041  01CF               	clrf	_adcValuePosition+3
  1802                           
  1803                           ;main.c: 215:         }
  1804  0042  2857               	goto	l1974
  1805  0043                     l1972:
  1806                           
  1807                           ;main.c: 217:         {;main.c: 219:             PWM3_LoadDutyValue(ADC_GetConversion(ch
      +                          annel) *2 - 200);
  1808  0043  0860               	movf	main@channel,w
  1809  0044  25A2               	fcall	_ADC_GetConversion
  1810  0045  0870               	movf	?_ADC_GetConversion,w
  1811  0046  0020               	movlb	0	; select bank0
  1812  0047  00C0               	movwf	??_main
  1813  0048  0871               	movf	?_ADC_GetConversion+1,w
  1814  0049  00C1               	movwf	??_main+1
  1815  004A  35C0               	lslf	??_main,f
  1816  004B  0DC1               	rlf	??_main+1,f
  1817  004C  0840               	movf	??_main,w
  1818  004D  3E38               	addlw	56
  1819  004E  00F4               	movwf	PWM3_LoadDutyValue@dutyValue
  1820  004F  30FF               	movlw	255
  1821  0050  3D41               	addwfc	??_main+1,w
  1822  0051  00F5               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1823  0052  25BA               	fcall	_PWM3_LoadDutyValue
  1824                           
  1825                           ;main.c: 220:             PWM3_LoadDutyValue(0);
  1826  0053  3000               	movlw	0
  1827  0054  00F4               	movwf	PWM3_LoadDutyValue@dutyValue
  1828  0055  00F5               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1829  0056  25BA               	fcall	_PWM3_LoadDutyValue
  1830  0057                     l1974:
  1831                           
  1832                           ;main.c: 225:         if(!PORTAbits.RA5 && !doButtonAction)
  1833  0057  0020               	movlb	0	; select bank0
  1834  0058  1A8C               	btfsc	12,5	;volatile
  1835  0059  2872               	goto	l1984
  1836  005A  085B               	movf	_doButtonAction,w	;volatile
  1837  005B  1D03               	btfss	3,2
  1838  005C  2872               	goto	l1984
  1839                           
  1840                           ;main.c: 226:         {;main.c: 227:             msPressed++;
  1841  005D  3001               	movlw	1
  1842  005E  07D3               	addwf	_msPressed,f	;volatile
  1843  005F  3000               	movlw	0
  1844  0060  3DD4               	addwfc	_msPressed+1,f	;volatile
  1845                           
  1846                           ;main.c: 229:             if(msPressed > 3000)
  1847  0061  300B               	movlw	11
  1848  0062  0254               	subwf	_msPressed+1,w	;volatile
  1849  0063  30B9               	movlw	185
  1850  0064  1903               	skipnz
  1851  0065  0253               	subwf	_msPressed,w	;volatile
  1852  0066  1C03               	skipc
  1853  0067  286F               	goto	l355
  1854                           
  1855                           ;main.c: 230:             {;main.c: 231:                 doButtonAction = 1;
  1856  0068  3001               	movlw	1
  1857  0069  00C0               	movwf	??_main
  1858  006A  0840               	movf	??_main,w
  1859  006B  00DB               	movwf	_doButtonAction	;volatile
  1860  006C  0022               	movlb	2	; select bank2
  1861  006D  128E               	bcf	14,5	;volatile
  1862  006E  2874               	goto	l1986
  1863  006F                     l355:	
  1864                           ;main.c: 235:             {;main.c: 236:                 do { LATCbits.LATC5 = 1; } whil
      +                          e(0);
  1865                           
  1866  006F  0022               	movlb	2	; select bank2
  1867  0070  168E               	bsf	14,5	;volatile
  1868  0071  2874               	goto	l1986
  1869  0072                     l1984:
  1870                           
  1871                           ;main.c: 240:         {;main.c: 241:             msPressed = 0;
  1872  0072  01D3               	clrf	_msPressed	;volatile
  1873  0073  01D4               	clrf	_msPressed+1	;volatile
  1874  0074                     l1986:
  1875                           
  1876                           ;main.c: 247:         if(doButtonAction)
  1877  0074  0020               	movlb	0	; select bank0
  1878  0075  085B               	movf	_doButtonAction,w	;volatile
  1879  0076  1903               	btfsc	3,2
  1880  0077  296C               	goto	l2026
  1881  0078                     l359:	
  1882                           ;main.c: 251:             {;main.c: 253:             }
  1883                           
  1884                           
  1885                           ;main.c: 250:             while(!PORTAbits.RA5)
  1886  0078  1A8C               	btfsc	12,5	;volatile
  1887  0079  2895               	goto	l2004
  1888  007A  2878               	goto	l359
  1889  007B                     l1990:
  1890                           
  1891                           ;main.c: 260:                     setState(STATE_TEACH_LEFT);
  1892  007B  3002               	movlw	2
  1893  007C  22B8               	fcall	_setState
  1894                           
  1895                           ;main.c: 261:                     break;
  1896  007D  28A8               	goto	l2006
  1897  007E                     l1992:
  1898                           
  1899                           ;main.c: 264:                     lowerLimit = adcValuePosition;
  1900  007E  084F               	movf	_adcValuePosition+3,w
  1901  007F  00CB               	movwf	_lowerLimit+3
  1902  0080  084E               	movf	_adcValuePosition+2,w
  1903  0081  00CA               	movwf	_lowerLimit+2
  1904  0082  084D               	movf	_adcValuePosition+1,w
  1905  0083  00C9               	movwf	_lowerLimit+1
  1906  0084  084C               	movf	_adcValuePosition,w
  1907  0085  00C8               	movwf	_lowerLimit
  1908                           
  1909                           ;main.c: 266:                     setState(STATE_TEACH_RIGHT);
  1910  0086  3003               	movlw	3
  1911  0087  22B8               	fcall	_setState
  1912                           
  1913                           ;main.c: 267:                     break;
  1914  0088  28A8               	goto	l2006
  1915  0089                     l1996:
  1916                           
  1917                           ;main.c: 270:                 {;main.c: 271:                     upperLimit = adcValuePo
      +                          sition;
  1918  0089  084F               	movf	_adcValuePosition+3,w
  1919  008A  00E4               	movwf	_upperLimit+3
  1920  008B  084E               	movf	_adcValuePosition+2,w
  1921  008C  00E3               	movwf	_upperLimit+2
  1922  008D  084D               	movf	_adcValuePosition+1,w
  1923  008E  00E2               	movwf	_upperLimit+1
  1924  008F  084C               	movf	_adcValuePosition,w
  1925  0090  00E1               	movwf	_upperLimit
  1926                           
  1927                           ;main.c: 273:                     writeFlash();
  1928  0091  2535               	fcall	_writeFlash
  1929                           
  1930                           ;main.c: 274:                     setState(STATE_NORMAL);
  1931  0092  3001               	movlw	1
  1932  0093  22B8               	fcall	_setState
  1933                           
  1934                           ;main.c: 275:                     break;
  1935  0094  28A8               	goto	l2006
  1936  0095                     l2004:
  1937  0095  0859               	movf	_currentState,w
  1938  0096  00C0               	movwf	??_main
  1939  0097  01C1               	clrf	??_main+1
  1940                           
  1941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1942                           ; Switch size 1, requested type "simple"
  1943                           ; Number of cases is 1, Range of values is 0 to 0
  1944                           ; switch strategies available:
  1945                           ; Name         Instructions Cycles
  1946                           ; simple_byte            4     3 (average)
  1947                           ; direct_byte            8     6 (fixed)
  1948                           ; jumptable            260     6 (fixed)
  1949                           ;	Chosen strategy is simple_byte
  1950  0098  0841               	movf	??_main+1,w
  1951  0099  3A00               	xorlw	0	; case 0
  1952  009A  1903               	skipnz
  1953  009B  289D               	goto	l2120
  1954  009C  28A8               	goto	l2006
  1955  009D                     l2120:
  1956                           
  1957                           ; Switch size 1, requested type "simple"
  1958                           ; Number of cases is 3, Range of values is 1 to 3
  1959                           ; switch strategies available:
  1960                           ; Name         Instructions Cycles
  1961                           ; simple_byte           10     6 (average)
  1962                           ; direct_byte           15     9 (fixed)
  1963                           ; jumptable            263     9 (fixed)
  1964                           ;	Chosen strategy is simple_byte
  1965  009D  0840               	movf	??_main,w
  1966  009E  3A01               	xorlw	1	; case 1
  1967  009F  1903               	skipnz
  1968  00A0  287B               	goto	l1990
  1969  00A1  3A03               	xorlw	3	; case 2
  1970  00A2  1903               	skipnz
  1971  00A3  287E               	goto	l1992
  1972  00A4  3A01               	xorlw	1	; case 3
  1973  00A5  1903               	skipnz
  1974  00A6  2889               	goto	l1996
  1975  00A7  28A8               	goto	l2006
  1976  00A8                     l2006:
  1977                           
  1978                           ;main.c: 279:             doButtonAction = 0;
  1979  00A8  01DB               	clrf	_doButtonAction	;volatile
  1980  00A9  296C               	goto	l2026
  1981  00AA                     l2008:
  1982                           
  1983                           ;main.c: 287:                 if(channel == channelBrightness)
  1984  00AA  300A               	movlw	10
  1985  00AB  0660               	xorwf	main@channel,w
  1986  00AC  1D03               	btfss	3,2
  1987  00AD  282A               	goto	l1962
  1988                           
  1989                           ;main.c: 288:                 {;main.c: 289:                     adcValuePosition = (adc
      +                          ValuePosition*m-b)/fixedPointFactor;
  1990  00AE  3000               	movlw	0
  1991  00AF  00A3               	movwf	___aldiv@divisor+3
  1992  00B0  3000               	movlw	0
  1993  00B1  00A2               	movwf	___aldiv@divisor+2
  1994  00B2  3003               	movlw	3
  1995  00B3  00A1               	movwf	___aldiv@divisor+1
  1996  00B4  30E8               	movlw	232
  1997  00B5  00A0               	movwf	___aldiv@divisor
  1998  00B6  0850               	movf	_b,w
  1999  00B7  00C0               	movwf	??_main
  2000  00B8  0851               	movf	_b+1,w
  2001  00B9  00C1               	movwf	??_main+1
  2002  00BA  0852               	movf	_b+2,w
  2003  00BB  00C2               	movwf	??_main+2
  2004  00BC  3000               	movlw	0
  2005  00BD  1BC2               	btfsc	??_main+2,7
  2006  00BE  30FF               	movlw	255
  2007  00BF  00C3               	movwf	??_main+3
  2008  00C0  084F               	movf	_adcValuePosition+3,w
  2009  00C1  00F3               	movwf	___lmul@multiplier+3
  2010  00C2  084E               	movf	_adcValuePosition+2,w
  2011  00C3  00F2               	movwf	___lmul@multiplier+2
  2012  00C4  084D               	movf	_adcValuePosition+1,w
  2013  00C5  00F1               	movwf	___lmul@multiplier+1
  2014  00C6  084C               	movf	_adcValuePosition,w
  2015  00C7  00F0               	movwf	___lmul@multiplier
  2016  00C8  085F               	movf	_m+3,w
  2017  00C9  00F7               	movwf	___lmul@multiplicand+3
  2018  00CA  085E               	movf	_m+2,w
  2019  00CB  00F6               	movwf	___lmul@multiplicand+2
  2020  00CC  085D               	movf	_m+1,w
  2021  00CD  00F5               	movwf	___lmul@multiplicand+1
  2022  00CE  085C               	movf	_m,w
  2023  00CF  00F4               	movwf	___lmul@multiplicand
  2024  00D0  24E0               	fcall	___lmul
  2025  00D1  0870               	movf	?___lmul,w
  2026  00D2  00C4               	movwf	??_main+4
  2027  00D3  0871               	movf	?___lmul+1,w
  2028  00D4  00C5               	movwf	??_main+5
  2029  00D5  0872               	movf	?___lmul+2,w
  2030  00D6  00C6               	movwf	??_main+6
  2031  00D7  0873               	movf	?___lmul+3,w
  2032  00D8  00C7               	movwf	??_main+7
  2033  00D9  0840               	movf	??_main,w
  2034  00DA  02C4               	subwf	??_main+4,f
  2035  00DB  0841               	movf	??_main+1,w
  2036  00DC  3BC5               	subwfb	??_main+5,f
  2037  00DD  0842               	movf	??_main+2,w
  2038  00DE  3BC6               	subwfb	??_main+6,f
  2039  00DF  0843               	movf	??_main+3,w
  2040  00E0  3BC7               	subwfb	??_main+7,f
  2041  00E1  0847               	movf	??_main+7,w
  2042  00E2  00A7               	movwf	___aldiv@dividend+3
  2043  00E3  0846               	movf	??_main+6,w
  2044  00E4  00A6               	movwf	___aldiv@dividend+2
  2045  00E5  0845               	movf	??_main+5,w
  2046  00E6  00A5               	movwf	___aldiv@dividend+1
  2047  00E7  0844               	movf	??_main+4,w
  2048  00E8  00A4               	movwf	___aldiv@dividend
  2049  00E9  2351               	fcall	___aldiv
  2050  00EA  0823               	movf	?___aldiv+3,w
  2051  00EB  00CF               	movwf	_adcValuePosition+3
  2052  00EC  0822               	movf	?___aldiv+2,w
  2053  00ED  00CE               	movwf	_adcValuePosition+2
  2054  00EE  0821               	movf	?___aldiv+1,w
  2055  00EF  00CD               	movwf	_adcValuePosition+1
  2056  00F0  0820               	movf	?___aldiv,w
  2057  00F1  00CC               	movwf	_adcValuePosition
  2058                           
  2059                           ;main.c: 290:                     setLedsForPositioning(adcValuePosition);
  2060  00F2  084F               	movf	_adcValuePosition+3,w
  2061  00F3  00F3               	movwf	setLedsForPositioning@adcValue+3
  2062  00F4  084E               	movf	_adcValuePosition+2,w
  2063  00F5  00F2               	movwf	setLedsForPositioning@adcValue+2
  2064  00F6  084D               	movf	_adcValuePosition+1,w
  2065  00F7  00F1               	movwf	setLedsForPositioning@adcValue+1
  2066  00F8  084C               	movf	_adcValuePosition,w
  2067  00F9  00F0               	movwf	setLedsForPositioning@adcValue
  2068  00FA  2180               	fcall	_setLedsForPositioning
  2069  00FB  282A               	goto	l1962
  2070  00FC                     l2012:
  2071                           
  2072                           ;main.c: 295:                 if(doToggle)
  2073  00FC  085A               	movf	_doToggle,w
  2074  00FD  1903               	btfsc	3,2
  2075  00FE  282A               	goto	l1962
  2076  00FF  1003               	clrc
  2077  0100  0022               	movlb	2	; select bank2
  2078  0101  1C0E               	btfss	14,0	;volatile
  2079  0102  1403               	setc
  2080  0103  1C03               	btfss	3,0
  2081  0104  2908               	goto	u1540
  2082  0105  0022               	movlb	2	; select bank2
  2083  0106  140E               	bsf	14,0	;volatile
  2084  0107  290A               	goto	l375
  2085  0108                     u1540:
  2086  0108  0022               	movlb	2	; select bank2
  2087  0109  100E               	bcf	14,0	;volatile
  2088  010A                     l375:	
  2089                           ;main.c: 298:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2090                           
  2091  010A  1003               	clrc
  2092  010B  1C8E               	btfss	14,1	;volatile
  2093  010C  1403               	setc
  2094  010D  1C03               	btfss	3,0
  2095  010E  2912               	goto	u1560
  2096  010F  0022               	movlb	2	; select bank2
  2097  0110  148E               	bsf	14,1	;volatile
  2098  0111  2914               	goto	l377
  2099  0112                     u1560:
  2100  0112  0022               	movlb	2	; select bank2
  2101  0113  108E               	bcf	14,1	;volatile
  2102  0114                     l377:	
  2103                           ;main.c: 299:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2104                           
  2105  0114  1003               	clrc
  2106  0115  1D0E               	btfss	14,2	;volatile
  2107  0116  1403               	setc
  2108  0117  1C03               	btfss	3,0
  2109  0118  291C               	goto	u1580
  2110  0119  0022               	movlb	2	; select bank2
  2111  011A  150E               	bsf	14,2	;volatile
  2112  011B  291E               	goto	l379
  2113  011C                     u1580:
  2114  011C  0022               	movlb	2	; select bank2
  2115  011D  110E               	bcf	14,2	;volatile
  2116  011E                     l379:	
  2117                           ;main.c: 300:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2118                           
  2119  011E  1003               	clrc
  2120  011F  1D8E               	btfss	14,3	;volatile
  2121  0120  1403               	setc
  2122  0121  1C03               	btfss	3,0
  2123  0122  2926               	goto	u1600
  2124  0123  0022               	movlb	2	; select bank2
  2125  0124  158E               	bsf	14,3	;volatile
  2126  0125  2928               	goto	l381
  2127  0126                     u1600:
  2128  0126  0022               	movlb	2	; select bank2
  2129  0127  118E               	bcf	14,3	;volatile
  2130  0128                     l381:	
  2131                           ;main.c: 301:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2132                           
  2133  0128  1003               	clrc
  2134  0129  1E0E               	btfss	14,4	;volatile
  2135  012A  1403               	setc
  2136  012B  1C03               	btfss	3,0
  2137  012C  2930               	goto	u1620
  2138  012D  0022               	movlb	2	; select bank2
  2139  012E  160E               	bsf	14,4	;volatile
  2140  012F  2932               	goto	l2016
  2141  0130                     u1620:
  2142  0130  0022               	movlb	2	; select bank2
  2143  0131  120E               	bcf	14,4	;volatile
  2144  0132                     l2016:
  2145                           
  2146                           ;main.c: 302:                     doToggle = 0;
  2147  0132  0020               	movlb	0	; select bank0
  2148  0133  01DA               	clrf	_doToggle
  2149  0134  282A               	goto	l1962
  2150  0135                     l2018:
  2151                           
  2152                           ;main.c: 309:                 if(doToggle)
  2153  0135  085A               	movf	_doToggle,w
  2154  0136  1903               	btfsc	3,2
  2155  0137  282A               	goto	l1962
  2156  0138  1003               	clrc
  2157  0139  0022               	movlb	2	; select bank2
  2158  013A  1F0E               	btfss	14,6	;volatile
  2159  013B  1403               	setc
  2160  013C  1C03               	btfss	3,0
  2161  013D  2941               	goto	u1650
  2162  013E  0022               	movlb	2	; select bank2
  2163  013F  170E               	bsf	14,6	;volatile
  2164  0140  2943               	goto	l387
  2165  0141                     u1650:
  2166  0141  0022               	movlb	2	; select bank2
  2167  0142  130E               	bcf	14,6	;volatile
  2168  0143                     l387:	
  2169                           ;main.c: 312:                     do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2170                           
  2171  0143  1003               	clrc
  2172  0144  1F8E               	btfss	14,7	;volatile
  2173  0145  1403               	setc
  2174  0146  1C03               	btfss	3,0
  2175  0147  294B               	goto	u1670
  2176  0148  0022               	movlb	2	; select bank2
  2177  0149  178E               	bsf	14,7	;volatile
  2178  014A  294D               	goto	l389
  2179  014B                     u1670:
  2180  014B  0022               	movlb	2	; select bank2
  2181  014C  138E               	bcf	14,7	;volatile
  2182  014D                     l389:	
  2183                           ;main.c: 313:                     do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  2184                           
  2185  014D  1003               	clrc
  2186  014E  1E8D               	btfss	13,5	;volatile
  2187  014F  1403               	setc
  2188  0150  1C03               	btfss	3,0
  2189  0151  2955               	goto	u1690
  2190  0152  0022               	movlb	2	; select bank2
  2191  0153  168D               	bsf	13,5	;volatile
  2192  0154  2957               	goto	l391
  2193  0155                     u1690:
  2194  0155  0022               	movlb	2	; select bank2
  2195  0156  128D               	bcf	13,5	;volatile
  2196  0157                     l391:	
  2197                           ;main.c: 314:                     do { LATBbits.LATB6 = ~LATBbits.LATB6; } while(0);
  2198                           
  2199  0157  1003               	clrc
  2200  0158  1F0D               	btfss	13,6	;volatile
  2201  0159  1403               	setc
  2202  015A  1C03               	btfss	3,0
  2203  015B  295F               	goto	u1710
  2204  015C  0022               	movlb	2	; select bank2
  2205  015D  170D               	bsf	13,6	;volatile
  2206  015E  2961               	goto	l393
  2207  015F                     u1710:
  2208  015F  0022               	movlb	2	; select bank2
  2209  0160  130D               	bcf	13,6	;volatile
  2210  0161                     l393:	
  2211                           ;main.c: 315:                     do { LATBbits.LATB7 = ~LATBbits.LATB7; } while(0);
  2212                           
  2213  0161  1003               	clrc
  2214  0162  1F8D               	btfss	13,7	;volatile
  2215  0163  1403               	setc
  2216  0164  1C03               	btfss	3,0
  2217  0165  2969               	goto	u1730
  2218  0166  0022               	movlb	2	; select bank2
  2219  0167  178D               	bsf	13,7	;volatile
  2220  0168  2932               	goto	l2016
  2221  0169                     u1730:
  2222  0169  0022               	movlb	2	; select bank2
  2223  016A  138D               	bcf	13,7	;volatile
  2224  016B  2932               	goto	l2016
  2225  016C                     l2026:
  2226  016C  0859               	movf	_currentState,w
  2227  016D  00C0               	movwf	??_main
  2228  016E  01C1               	clrf	??_main+1
  2229                           
  2230                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2231                           ; Switch size 1, requested type "simple"
  2232                           ; Number of cases is 1, Range of values is 0 to 0
  2233                           ; switch strategies available:
  2234                           ; Name         Instructions Cycles
  2235                           ; simple_byte            4     3 (average)
  2236                           ; direct_byte            8     6 (fixed)
  2237                           ; jumptable            260     6 (fixed)
  2238                           ;	Chosen strategy is simple_byte
  2239  016F  0841               	movf	??_main+1,w
  2240  0170  3A00               	xorlw	0	; case 0
  2241  0171  1903               	skipnz
  2242  0172  2974               	goto	l2122
  2243  0173  282A               	goto	l1962
  2244  0174                     l2122:
  2245                           
  2246                           ; Switch size 1, requested type "simple"
  2247                           ; Number of cases is 3, Range of values is 1 to 3
  2248                           ; switch strategies available:
  2249                           ; Name         Instructions Cycles
  2250                           ; simple_byte           10     6 (average)
  2251                           ; direct_byte           15     9 (fixed)
  2252                           ; jumptable            263     9 (fixed)
  2253                           ;	Chosen strategy is simple_byte
  2254  0174  0840               	movf	??_main,w
  2255  0175  3A01               	xorlw	1	; case 1
  2256  0176  1903               	skipnz
  2257  0177  28AA               	goto	l2008
  2258  0178  3A03               	xorlw	3	; case 2
  2259  0179  1903               	skipnz
  2260  017A  28FC               	goto	l2012
  2261  017B  3A01               	xorlw	1	; case 3
  2262  017C  1903               	skipnz
  2263  017D  2935               	goto	l2018
  2264  017E  282A               	goto	l1962
  2265  017F  280C               	ljmp	start
  2266  0180                     __end_of_main:
  2267                           
  2268                           	psect	text1
  2269  0535                     __ptext1:	
  2270 ;; *************** function _writeFlash *****************
  2271 ;; Defined at:
  2272 ;;		line 95 in file "main.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  wrBlockData    32    0[BANK0 ] unsigned short [16]
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 1F/0
  2283 ;;		On exit  : 1C/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMMON   BANK0   BANK1
  2286 ;;      Params:         0       0       0
  2287 ;;      Locals:         0      32       0
  2288 ;;      Temps:          1       0       0
  2289 ;;      Totals:         1      32       0
  2290 ;;Total ram usage:       33 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    6
  2293 ;; This function calls:
  2294 ;;		_FLASH_EraseBlock
  2295 ;;		_FLASH_WriteBlock
  2296 ;; This function is called by:
  2297 ;;		_main
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _writeFlash
  2303  0535                     _writeFlash:
  2304                           
  2305                           ;main.c: 100:     FLASH_EraseBlock((uint16_t)( 0x800 -16));
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _writeFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2309  0535  30F0               	movlw	240
  2310  0536  00F0               	movwf	FLASH_EraseBlock@startAddr
  2311  0537  3007               	movlw	7
  2312  0538  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2313  0539  2555               	fcall	_FLASH_EraseBlock
  2314                           
  2315                           ;main.c: 102:     uint16_t wrBlockData[16];;main.c: 104:     wrBlockData[16 -1] = (uint1
      +                          6_t)(upperLimit);
  2316  053A  0020               	movlb	0	; select bank0
  2317  053B  0862               	movf	_upperLimit+1,w
  2318  053C  00BF               	movwf	writeFlash@wrBlockData+31
  2319  053D  0861               	movf	_upperLimit,w
  2320  053E  00BE               	movwf	writeFlash@wrBlockData+30
  2321                           
  2322                           ;main.c: 105:     wrBlockData[16 -2] = (uint16_t)(upperLimit >> 16);
  2323  053F  0864               	movf	_upperLimit+3,w
  2324  0540  00BD               	movwf	writeFlash@wrBlockData+29
  2325  0541  0863               	movf	_upperLimit+2,w
  2326  0542  00BC               	movwf	writeFlash@wrBlockData+28
  2327                           
  2328                           ;main.c: 106:     wrBlockData[16 -3] = (uint16_t)(lowerLimit);
  2329  0543  0849               	movf	_lowerLimit+1,w
  2330  0544  00BB               	movwf	writeFlash@wrBlockData+27
  2331  0545  0848               	movf	_lowerLimit,w
  2332  0546  00BA               	movwf	writeFlash@wrBlockData+26
  2333                           
  2334                           ;main.c: 107:     wrBlockData[16 -4] = (uint16_t)(lowerLimit >> 16);
  2335  0547  084B               	movf	_lowerLimit+3,w
  2336  0548  00B9               	movwf	writeFlash@wrBlockData+25
  2337  0549  084A               	movf	_lowerLimit+2,w
  2338  054A  00B8               	movwf	writeFlash@wrBlockData+24
  2339                           
  2340                           ;main.c: 110:     FLASH_WriteBlock((uint16_t)( 0x800 -16), (uint16_t*)wrBlockData);
  2341  054B  30F0               	movlw	240
  2342  054C  00F3               	movwf	FLASH_WriteBlock@writeAddr
  2343  054D  3007               	movlw	7
  2344  054E  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  2345  054F  3020               	movlw	(low (writeFlash@wrBlockData| 0))& (0+255)
  2346  0550  00FD               	movwf	??_writeFlash
  2347  0551  087D               	movf	??_writeFlash,w
  2348  0552  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  2349  0553  243A               	fcall	_FLASH_WriteBlock
  2350  0554  0008               	return
  2351  0555                     __end_of_writeFlash:
  2352                           
  2353                           	psect	text2
  2354  043A                     __ptext2:	
  2355 ;; *************** function _FLASH_WriteBlock *****************
  2356 ;; Defined at:
  2357 ;;		line 94 in file "mcc_generated_files/memory.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  writeAddr       2    3[COMMON] unsigned short 
  2360 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  2361 ;;		 -> writeFlash@wrBlockData(32), 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  blockStartAd    2    9[COMMON] unsigned short 
  2364 ;;  i               1   12[COMMON] unsigned char 
  2365 ;;  GIEBitValue     1   11[COMMON] unsigned char 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      char 
  2368 ;; Registers used:
  2369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 1F/0
  2372 ;;		On exit  : 1C/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMMON   BANK0   BANK1
  2375 ;;      Params:         3       0       0
  2376 ;;      Locals:         4       0       0
  2377 ;;      Temps:          3       0       0
  2378 ;;      Totals:        10       0       0
  2379 ;;Total ram usage:       10 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    5
  2382 ;; This function calls:
  2383 ;;		_FLASH_EraseBlock
  2384 ;; This function is called by:
  2385 ;;		_writeFlash
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           
  2390                           ;psect for function _FLASH_WriteBlock
  2391  043A                     _FLASH_WriteBlock:
  2392                           
  2393                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x800 -1) ^ (16 -1)));
  2394                           
  2395                           ;incstack = 0
  2396                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2397  043A  30F0               	movlw	240
  2398  043B  0573               	andwf	FLASH_WriteBlock@writeAddr,w
  2399  043C  00F9               	movwf	FLASH_WriteBlock@blockStartAddr
  2400  043D  3007               	movlw	7
  2401  043E  0574               	andwf	FLASH_WriteBlock@writeAddr+1,w
  2402  043F  00FA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  2403                           
  2404                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  2405  0440  3000               	movlw	0
  2406  0441  1B8B               	btfsc	11,7	;volatile
  2407  0442  3001               	movlw	1
  2408  0443  00FB               	movwf	FLASH_WriteBlock@GIEBitValue
  2409                           
  2410                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  2411  0444  087A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  2412  0445  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  2413  0446  1D03               	skipz
  2414  0447  2C4A               	goto	u905
  2415  0448  0879               	movf	FLASH_WriteBlock@blockStartAddr,w
  2416  0449  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  2417  044A                     u905:
  2418  044A  1D03               	btfss	3,2
  2419  044B  0008               	return
  2420                           
  2421                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  2422                           
  2423                           ;mcc_generated_files/memory.c: 104:     }
  2424  044C  138B               	bcf	11,7	;volatile
  2425                           
  2426                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  2427  044D  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2428  044E  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2429  044F  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2430  0450  00F0               	movwf	FLASH_EraseBlock@startAddr
  2431  0451  2555               	fcall	_FLASH_EraseBlock
  2432                           
  2433                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  2434  0452  1315               	bcf	21,6	;volatile
  2435                           
  2436                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  2437  0453  1515               	bsf	21,2	;volatile
  2438                           
  2439                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  2440  0454  1695               	bsf	21,5	;volatile
  2441                           
  2442                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<16; i++)
  2443  0455  01FC               	clrf	FLASH_WriteBlock@i
  2444  0456                     l1712:
  2445                           
  2446                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  2447  0456  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2448  0457  0023               	movlb	3	; select bank3
  2449  0458  0091               	movwf	17	;volatile
  2450                           
  2451                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  2452  0459  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2453  045A  0092               	movwf	18	;volatile
  2454                           
  2455                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  2456  045B  357C               	lslf	FLASH_WriteBlock@i,w
  2457  045C  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2458  045D  00F6               	movwf	??_FLASH_WriteBlock
  2459  045E  0876               	movf	??_FLASH_WriteBlock,w
  2460  045F  0086               	movwf	6
  2461  0460  0187               	clrf	7
  2462  0461  0801               	movf	1,w
  2463  0462  0093               	movwf	19	;volatile
  2464                           
  2465                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  2466  0463  357C               	lslf	FLASH_WriteBlock@i,w
  2467  0464  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2468  0465  00F6               	movwf	??_FLASH_WriteBlock
  2469  0466  0876               	movf	??_FLASH_WriteBlock,w
  2470  0467  0086               	movwf	6
  2471  0468  0187               	clrf	7
  2472  0469  3F40               	moviw [0]fsr1
  2473  046A  00F7               	movwf	??_FLASH_WriteBlock+1
  2474  046B  3F41               	moviw [1]fsr1
  2475  046C  00F8               	movwf	??_FLASH_WriteBlock+2
  2476  046D  0878               	movf	??_FLASH_WriteBlock+2,w
  2477  046E  0094               	movwf	20	;volatile
  2478                           
  2479                           ;mcc_generated_files/memory.c: 127:         if(i == (16 -1))
  2480  046F  300F               	movlw	15
  2481  0470  067C               	xorwf	FLASH_WriteBlock@i,w
  2482  0471  1903               	btfsc	3,2
  2483                           
  2484                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  2485  0472  1295               	bcf	21,5	;volatile
  2486                           
  2487                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  2488  0473  3055               	movlw	85
  2489  0474  0096               	movwf	22	;volsfr
  2490                           
  2491                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  2492  0475  30AA               	movlw	170
  2493  0476  0096               	movwf	22	;volsfr
  2494                           
  2495                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  2496  0477  1495               	bsf	21,1	;volatile
  2497                           
  2498                           ;mcc_generated_files/memory.c: 136:         __nop();
  2499  0478  0000               	nop
  2500                           
  2501                           ;mcc_generated_files/memory.c: 137:         __nop();
  2502  0479  0000               	nop
  2503                           
  2504                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  2505  047A  3001               	movlw	1
  2506  047B  07F3               	addwf	FLASH_WriteBlock@writeAddr,f
  2507  047C  3000               	movlw	0
  2508  047D  3DF4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  2509                           
  2510                           ;mcc_generated_files/memory.c: 140:     }
  2511  047E  3001               	movlw	1
  2512  047F  00F6               	movwf	??_FLASH_WriteBlock
  2513  0480  0876               	movf	??_FLASH_WriteBlock,w
  2514  0481  07FC               	addwf	FLASH_WriteBlock@i,f
  2515  0482  3010               	movlw	16
  2516  0483  027C               	subwf	FLASH_WriteBlock@i,w
  2517  0484  1C03               	skipc
  2518  0485  2C56               	goto	l1712
  2519                           
  2520                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  2521  0486  0023               	movlb	3	; select bank3
  2522  0487  1115               	bcf	21,2	;volatile
  2523                           
  2524                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  2525  0488  0C7B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  2526  0489  1C03               	skipc
  2527  048A  138B               	bcf	11,7	;volatile
  2528  048B  1803               	skipnc
  2529  048C  178B               	bsf	11,7	;volatile
  2530  048D  0008               	return
  2531  048E                     __end_of_FLASH_WriteBlock:
  2532                           
  2533                           	psect	text3
  2534  0555                     __ptext3:	
  2535 ;; *************** function _FLASH_EraseBlock *****************
  2536 ;; Defined at:
  2537 ;;		line 148 in file "mcc_generated_files/memory.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;  startAddr       2    0[COMMON] unsigned short 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  1    wreg      void 
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0
  2546 ;; Tracked objects:
  2547 ;;		On entry : 1F/0
  2548 ;;		On exit  : 1F/3
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMMON   BANK0   BANK1
  2551 ;;      Params:         2       0       0
  2552 ;;      Locals:         1       0       0
  2553 ;;      Temps:          0       0       0
  2554 ;;      Totals:         3       0       0
  2555 ;;Total ram usage:        3 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    4
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		_FLASH_WriteBlock
  2562 ;;		_writeFlash
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           
  2567                           ;psect for function _FLASH_EraseBlock
  2568  0555                     _FLASH_EraseBlock:
  2569                           
  2570                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  2571                           
  2572                           ;incstack = 0
  2573                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  2574  0555  3000               	movlw	0
  2575  0556  1B8B               	btfsc	11,7	;volatile
  2576  0557  3001               	movlw	1
  2577  0558  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  2578                           
  2579                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  2580  0559  138B               	bcf	11,7	;volatile
  2581                           
  2582                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  2583  055A  0870               	movf	FLASH_EraseBlock@startAddr,w
  2584  055B  0023               	movlb	3	; select bank3
  2585  055C  0091               	movwf	17	;volatile
  2586                           
  2587                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  2588  055D  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  2589  055E  0092               	movwf	18	;volatile
  2590                           
  2591                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  2592  055F  1315               	bcf	21,6	;volatile
  2593                           
  2594                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  2595  0560  1615               	bsf	21,4	;volatile
  2596                           
  2597                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  2598  0561  1515               	bsf	21,2	;volatile
  2599                           
  2600                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  2601  0562  3055               	movlw	85
  2602  0563  0096               	movwf	22	;volsfr
  2603                           
  2604                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  2605  0564  30AA               	movlw	170
  2606  0565  0096               	movwf	22	;volsfr
  2607                           
  2608                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  2609  0566  1495               	bsf	21,1	;volatile
  2610                           
  2611                           ;mcc_generated_files/memory.c: 168:     __nop();
  2612  0567  0000               	nop
  2613                           
  2614                           ;mcc_generated_files/memory.c: 169:     __nop();
  2615  0568  0000               	nop
  2616                           
  2617                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  2618  0569  0023               	movlb	3	; select bank3
  2619  056A  1115               	bcf	21,2	;volatile
  2620                           
  2621                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  2622  056B  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  2623  056C  1C03               	skipc
  2624  056D  138B               	bcf	11,7	;volatile
  2625  056E  1803               	skipnc
  2626  056F  178B               	bsf	11,7	;volatile
  2627  0570  0008               	return
  2628  0571                     __end_of_FLASH_EraseBlock:
  2629                           
  2630                           	psect	text4
  2631  02B8                     __ptext4:	
  2632 ;; *************** function _setState *****************
  2633 ;; Defined at:
  2634 ;;		line 132 in file "main.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  newState        1    wreg     enum E2406
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  newState        1    4[BANK0 ] enum E2406
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      void 
  2641 ;; Registers used:
  2642 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2643 ;; Tracked objects:
  2644 ;;		On entry : 1C/0
  2645 ;;		On exit  : 1F/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMMON   BANK0   BANK1
  2648 ;;      Params:         0       0       0
  2649 ;;      Locals:         0       1       0
  2650 ;;      Temps:          0       4       0
  2651 ;;      Totals:         0       5       0
  2652 ;;Total ram usage:        5 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:    6
  2655 ;; This function calls:
  2656 ;;		___lldiv
  2657 ;;		___tmul
  2658 ;;		_readFlash
  2659 ;; This function is called by:
  2660 ;;		_main
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function _setState
  2666  02B8                     _setState:
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2670                           ;setState@newState stored from wreg
  2671  02B8  0020               	movlb	0	; select bank0
  2672  02B9  00A4               	movwf	setState@newState
  2673                           
  2674                           ;main.c: 132: void setState(state_t newState);main.c: 133: {;main.c: 134:     if(newStat
      +                          e == currentState)
  2675  02BA  0824               	movf	setState@newState,w
  2676  02BB  0659               	xorwf	_currentState,w
  2677  02BC  1903               	btfsc	3,2
  2678  02BD  0008               	return
  2679                           
  2680                           ;main.c: 140:     do { LATCbits.LATC0 = 0; } while(0);
  2681  02BE  0022               	movlb	2	; select bank2
  2682  02BF  100E               	bcf	14,0	;volatile
  2683                           
  2684                           ;main.c: 141:     do { LATCbits.LATC1 = 0; } while(0);
  2685  02C0  108E               	bcf	14,1	;volatile
  2686                           
  2687                           ;main.c: 142:     do { LATCbits.LATC2 = 0; } while(0);
  2688  02C1  110E               	bcf	14,2	;volatile
  2689                           
  2690                           ;main.c: 143:     do { LATCbits.LATC3 = 0; } while(0);
  2691  02C2  118E               	bcf	14,3	;volatile
  2692                           
  2693                           ;main.c: 144:     do { LATCbits.LATC4 = 0; } while(0);
  2694  02C3  120E               	bcf	14,4	;volatile
  2695                           
  2696                           ;main.c: 145:     do { LATCbits.LATC5 = 0; } while(0);
  2697  02C4  128E               	bcf	14,5	;volatile
  2698                           
  2699                           ;main.c: 146:     do { LATCbits.LATC6 = 0; } while(0);
  2700  02C5  130E               	bcf	14,6	;volatile
  2701                           
  2702                           ;main.c: 147:     do { LATCbits.LATC7 = 0; } while(0);
  2703  02C6  138E               	bcf	14,7	;volatile
  2704                           
  2705                           ;main.c: 148:     do { LATBbits.LATB5 = 0; } while(0);
  2706  02C7  128D               	bcf	13,5	;volatile
  2707                           
  2708                           ;main.c: 149:     do { LATBbits.LATB6 = 0; } while(0);
  2709  02C8  130D               	bcf	13,6	;volatile
  2710                           
  2711                           ;main.c: 150:     do { LATBbits.LATB7 = 0; } while(0);
  2712  02C9  138D               	bcf	13,7	;volatile
  2713  02CA  2B35               	goto	l1844
  2714  02CB                     l1826:
  2715                           
  2716                           ;main.c: 159:             readFlash();
  2717  02CB  23D2               	fcall	_readFlash
  2718                           
  2719                           ;main.c: 162:             upperLimit = (upperLimit > (1023)) ? (1023) : upperLimit;
  2720  02CC  0864               	movf	_upperLimit+3,w
  2721  02CD  1D03               	btfss	3,2
  2722  02CE  2AD6               	goto	l1832
  2723  02CF  0863               	movf	_upperLimit+2,w
  2724  02D0  1D03               	btfss	3,2
  2725  02D1  2AD6               	goto	l1832
  2726  02D2  3004               	movlw	4
  2727  02D3  0262               	subwf	_upperLimit+1,w
  2728  02D4  1C03               	btfss	3,0
  2729  02D5  2ADE               	goto	l325
  2730  02D6                     l1832:
  2731  02D6  3000               	movlw	0
  2732  02D7  00E4               	movwf	_upperLimit+3
  2733  02D8  3000               	movlw	0
  2734  02D9  00E3               	movwf	_upperLimit+2
  2735  02DA  3003               	movlw	3
  2736  02DB  00E2               	movwf	_upperLimit+1
  2737  02DC  30FF               	movlw	255
  2738  02DD  00E1               	movwf	_upperLimit
  2739  02DE                     l325:
  2740                           
  2741                           ;main.c: 164:             lowerLimit = (lowerLimit < (0)) || (lowerLimit > upperLimit) ?
      +                           (0) : lowerLimit;
  2742  02DE  084B               	movf	_lowerLimit+3,w
  2743  02DF  0264               	subwf	_upperLimit+3,w
  2744  02E0  1D03               	skipz
  2745  02E1  2AEC               	goto	u1105
  2746  02E2  084A               	movf	_lowerLimit+2,w
  2747  02E3  0263               	subwf	_upperLimit+2,w
  2748  02E4  1D03               	skipz
  2749  02E5  2AEC               	goto	u1105
  2750  02E6  0849               	movf	_lowerLimit+1,w
  2751  02E7  0262               	subwf	_upperLimit+1,w
  2752  02E8  1D03               	skipz
  2753  02E9  2AEC               	goto	u1105
  2754  02EA  0848               	movf	_lowerLimit,w
  2755  02EB  0261               	subwf	_upperLimit,w
  2756  02EC                     u1105:
  2757  02EC  1803               	btfsc	3,0
  2758  02ED  2AF6               	goto	l1838
  2759  02EE  3000               	movlw	0
  2760  02EF  00CB               	movwf	_lowerLimit+3
  2761  02F0  3000               	movlw	0
  2762  02F1  00CA               	movwf	_lowerLimit+2
  2763  02F2  3000               	movlw	0
  2764  02F3  00C9               	movwf	_lowerLimit+1
  2765  02F4  3000               	movlw	0
  2766  02F5  00C8               	movwf	_lowerLimit
  2767  02F6                     l1838:
  2768                           
  2769                           ;main.c: 167:             m = (1023*fixedPointFactor)/(upperLimit - lowerLimit);
  2770  02F6  0848               	movf	_lowerLimit,w
  2771  02F7  0261               	subwf	_upperLimit,w
  2772  02F8  00A0               	movwf	??_setState
  2773  02F9  0849               	movf	_lowerLimit+1,w
  2774  02FA  3B62               	subwfb	_upperLimit+1,w
  2775  02FB  00A1               	movwf	??_setState+1
  2776  02FC  084A               	movf	_lowerLimit+2,w
  2777  02FD  3B63               	subwfb	_upperLimit+2,w
  2778  02FE  00A2               	movwf	??_setState+2
  2779  02FF  084B               	movf	_lowerLimit+3,w
  2780  0300  3B64               	subwfb	_upperLimit+3,w
  2781  0301  00A3               	movwf	??_setState+3
  2782  0302  0823               	movf	??_setState+3,w
  2783  0303  00F3               	movwf	___lldiv@divisor+3
  2784  0304  0822               	movf	??_setState+2,w
  2785  0305  00F2               	movwf	___lldiv@divisor+2
  2786  0306  0821               	movf	??_setState+1,w
  2787  0307  00F1               	movwf	___lldiv@divisor+1
  2788  0308  0820               	movf	??_setState,w
  2789  0309  00F0               	movwf	___lldiv@divisor
  2790  030A  3000               	movlw	0
  2791  030B  00F7               	movwf	___lldiv@dividend+3
  2792  030C  300F               	movlw	15
  2793  030D  00F6               	movwf	___lldiv@dividend+2
  2794  030E  309C               	movlw	156
  2795  030F  00F5               	movwf	___lldiv@dividend+1
  2796  0310  3018               	movlw	24
  2797  0311  00F4               	movwf	___lldiv@dividend
  2798  0312  248E               	fcall	___lldiv
  2799  0313  0873               	movf	?___lldiv+3,w
  2800  0314  00DF               	movwf	_m+3
  2801  0315  0872               	movf	?___lldiv+2,w
  2802  0316  00DE               	movwf	_m+2
  2803  0317  0871               	movf	?___lldiv+1,w
  2804  0318  00DD               	movwf	_m+1
  2805  0319  0870               	movf	?___lldiv,w
  2806  031A  00DC               	movwf	_m
  2807                           
  2808                           ;main.c: 168:             b = lowerLimit*m;
  2809  031B  085C               	movf	_m,w
  2810  031C  00F0               	movwf	___tmul@multiplier
  2811  031D  085D               	movf	_m+1,w
  2812  031E  00F1               	movwf	___tmul@multiplier+1
  2813  031F  085E               	movf	_m+2,w
  2814  0320  00F2               	movwf	___tmul@multiplier+2
  2815  0321  0848               	movf	_lowerLimit,w
  2816  0322  00F3               	movwf	___tmul@multiplicand
  2817  0323  0849               	movf	_lowerLimit+1,w
  2818  0324  00F4               	movwf	___tmul@multiplicand+1
  2819  0325  084A               	movf	_lowerLimit+2,w
  2820  0326  00F5               	movwf	___tmul@multiplicand+2
  2821  0327  250F               	fcall	___tmul
  2822  0328  0870               	movf	?___tmul,w
  2823  0329  00D0               	movwf	_b
  2824  032A  0871               	movf	?___tmul+1,w
  2825  032B  00D1               	movwf	_b+1
  2826  032C  0872               	movf	?___tmul+2,w
  2827  032D  00D2               	movwf	_b+2
  2828                           
  2829                           ;main.c: 169:             break;
  2830  032E  2B49               	goto	l1846
  2831  032F                     l332:	
  2832                           ;main.c: 173:             do { LATCbits.LATC0 = 1; } while(0);
  2833                           
  2834  032F  0022               	movlb	2	; select bank2
  2835  0330  140E               	bsf	14,0	;volatile
  2836  0331  2B49               	goto	l1846
  2837  0332                     l335:	
  2838                           ;main.c: 177:             do { LATBbits.LATB7 = 1; } while(0);
  2839                           
  2840  0332  0022               	movlb	2	; select bank2
  2841  0333  178D               	bsf	13,7	;volatile
  2842  0334  2B49               	goto	l1846
  2843  0335                     l1844:
  2844  0335  0020               	movlb	0	; select bank0
  2845  0336  0824               	movf	setState@newState,w
  2846  0337  00A0               	movwf	??_setState
  2847  0338  01A1               	clrf	??_setState+1
  2848                           
  2849                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2850                           ; Switch size 1, requested type "simple"
  2851                           ; Number of cases is 1, Range of values is 0 to 0
  2852                           ; switch strategies available:
  2853                           ; Name         Instructions Cycles
  2854                           ; simple_byte            4     3 (average)
  2855                           ; direct_byte            8     6 (fixed)
  2856                           ; jumptable            260     6 (fixed)
  2857                           ;	Chosen strategy is simple_byte
  2858  0339  0821               	movf	??_setState+1,w
  2859  033A  3A00               	xorlw	0	; case 0
  2860  033B  1903               	skipnz
  2861  033C  2B3E               	goto	l2124
  2862  033D  2B49               	goto	l1846
  2863  033E                     l2124:
  2864                           
  2865                           ; Switch size 1, requested type "simple"
  2866                           ; Number of cases is 3, Range of values is 1 to 3
  2867                           ; switch strategies available:
  2868                           ; Name         Instructions Cycles
  2869                           ; simple_byte           10     6 (average)
  2870                           ; direct_byte           15     9 (fixed)
  2871                           ; jumptable            263     9 (fixed)
  2872                           ;	Chosen strategy is simple_byte
  2873  033E  0820               	movf	??_setState,w
  2874  033F  3A01               	xorlw	1	; case 1
  2875  0340  1903               	skipnz
  2876  0341  2ACB               	goto	l1826
  2877  0342  3A03               	xorlw	3	; case 2
  2878  0343  1903               	skipnz
  2879  0344  2B2F               	goto	l332
  2880  0345  3A01               	xorlw	1	; case 3
  2881  0346  1903               	skipnz
  2882  0347  2B32               	goto	l335
  2883  0348  2B49               	goto	l1846
  2884  0349                     l1846:
  2885                           
  2886                           ;main.c: 181:     msTick = 0;
  2887  0349  0020               	movlb	0	; select bank0
  2888  034A  01D5               	clrf	_msTick	;volatile
  2889  034B  01D6               	clrf	_msTick+1	;volatile
  2890                           
  2891                           ;main.c: 183:     currentState = newState;
  2892  034C  0824               	movf	setState@newState,w
  2893  034D  00A0               	movwf	??_setState
  2894  034E  0820               	movf	??_setState,w
  2895  034F  00D9               	movwf	_currentState
  2896  0350  0008               	return
  2897  0351                     __end_of_setState:
  2898                           
  2899                           	psect	text5
  2900  03D2                     __ptext5:	
  2901 ;; *************** function _readFlash *****************
  2902 ;; Defined at:
  2903 ;;		line 82 in file "main.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;		None
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0, pclath, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : 1F/0
  2914 ;;		On exit  : 1F/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMMON   BANK0   BANK1
  2917 ;;      Params:         0       0       0
  2918 ;;      Locals:         0       0       0
  2919 ;;      Temps:          4       0       0
  2920 ;;      Totals:         4       0       0
  2921 ;;Total ram usage:        4 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    5
  2924 ;; This function calls:
  2925 ;;		_FLASH_ReadWord
  2926 ;; This function is called by:
  2927 ;;		_setState
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           
  2932                           ;psect for function _readFlash
  2933  03D2                     _readFlash:
  2934                           
  2935                           ;main.c: 85:     lowerLimit = 0;
  2936                           
  2937                           ;incstack = 0
  2938                           ; Regs used in _readFlash: [wreg+status,2+status,0+pclath+cstack]
  2939  03D2  3000               	movlw	0
  2940  03D3  00CB               	movwf	_lowerLimit+3
  2941  03D4  3000               	movlw	0
  2942  03D5  00CA               	movwf	_lowerLimit+2
  2943  03D6  3000               	movlw	0
  2944  03D7  00C9               	movwf	_lowerLimit+1
  2945  03D8  3000               	movlw	0
  2946  03D9  00C8               	movwf	_lowerLimit
  2947                           
  2948                           ;main.c: 86:     lowerLimit += (uint32_t)FLASH_ReadWord(0x800 -4) << 16;
  2949  03DA  30FC               	movlw	252
  2950  03DB  00F0               	movwf	FLASH_ReadWord@flashAddr
  2951  03DC  3007               	movlw	7
  2952  03DD  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2953  03DE  2571               	fcall	_FLASH_ReadWord
  2954  03DF  0870               	movf	?_FLASH_ReadWord,w
  2955  03E0  00F3               	movwf	??_readFlash
  2956  03E1  0871               	movf	?_FLASH_ReadWord+1,w
  2957  03E2  00F4               	movwf	??_readFlash+1
  2958  03E3  01F5               	clrf	??_readFlash+2
  2959  03E4  01F6               	clrf	??_readFlash+3
  2960  03E5  3010               	movlw	16
  2961  03E6                     u935:
  2962  03E6  35F3               	lslf	??_readFlash,f
  2963  03E7  0DF4               	rlf	??_readFlash+1,f
  2964  03E8  0DF5               	rlf	??_readFlash+2,f
  2965  03E9  0DF6               	rlf	??_readFlash+3,f
  2966  03EA  0B89               	decfsz	9,f
  2967  03EB  2BE6               	goto	u935
  2968  03EC  0873               	movf	??_readFlash,w
  2969  03ED  0020               	movlb	0	; select bank0
  2970  03EE  07C8               	addwf	_lowerLimit,f
  2971  03EF  0874               	movf	??_readFlash+1,w
  2972  03F0  3DC9               	addwfc	_lowerLimit+1,f
  2973  03F1  0875               	movf	??_readFlash+2,w
  2974  03F2  3DCA               	addwfc	_lowerLimit+2,f
  2975  03F3  0876               	movf	??_readFlash+3,w
  2976  03F4  3DCB               	addwfc	_lowerLimit+3,f
  2977                           
  2978                           ;main.c: 87:     lowerLimit |= (uint32_t)FLASH_ReadWord(0x800 -3);
  2979  03F5  30FD               	movlw	253
  2980  03F6  00F0               	movwf	FLASH_ReadWord@flashAddr
  2981  03F7  3007               	movlw	7
  2982  03F8  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2983  03F9  2571               	fcall	_FLASH_ReadWord
  2984  03FA  0870               	movf	?_FLASH_ReadWord,w
  2985  03FB  00F3               	movwf	??_readFlash
  2986  03FC  0871               	movf	?_FLASH_ReadWord+1,w
  2987  03FD  00F4               	movwf	??_readFlash+1
  2988  03FE  01F5               	clrf	??_readFlash+2
  2989  03FF  01F6               	clrf	??_readFlash+3
  2990  0400  0873               	movf	??_readFlash,w
  2991  0401  0020               	movlb	0	; select bank0
  2992  0402  04C8               	iorwf	_lowerLimit,f
  2993  0403  0874               	movf	??_readFlash+1,w
  2994  0404  04C9               	iorwf	_lowerLimit+1,f
  2995  0405  0875               	movf	??_readFlash+2,w
  2996  0406  04CA               	iorwf	_lowerLimit+2,f
  2997  0407  0876               	movf	??_readFlash+3,w
  2998  0408  04CB               	iorwf	_lowerLimit+3,f
  2999                           
  3000                           ;main.c: 90:     upperLimit = 0;
  3001  0409  3000               	movlw	0
  3002  040A  00E4               	movwf	_upperLimit+3
  3003  040B  3000               	movlw	0
  3004  040C  00E3               	movwf	_upperLimit+2
  3005  040D  3000               	movlw	0
  3006  040E  00E2               	movwf	_upperLimit+1
  3007  040F  3000               	movlw	0
  3008  0410  00E1               	movwf	_upperLimit
  3009                           
  3010                           ;main.c: 91:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -2) << 16;
  3011  0411  30FE               	movlw	254
  3012  0412  00F0               	movwf	FLASH_ReadWord@flashAddr
  3013  0413  3007               	movlw	7
  3014  0414  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3015  0415  2571               	fcall	_FLASH_ReadWord
  3016  0416  0870               	movf	?_FLASH_ReadWord,w
  3017  0417  00F3               	movwf	??_readFlash
  3018  0418  0871               	movf	?_FLASH_ReadWord+1,w
  3019  0419  00F4               	movwf	??_readFlash+1
  3020  041A  01F5               	clrf	??_readFlash+2
  3021  041B  01F6               	clrf	??_readFlash+3
  3022  041C  3010               	movlw	16
  3023  041D                     u945:
  3024  041D  35F3               	lslf	??_readFlash,f
  3025  041E  0DF4               	rlf	??_readFlash+1,f
  3026  041F  0DF5               	rlf	??_readFlash+2,f
  3027  0420  0DF6               	rlf	??_readFlash+3,f
  3028  0421  0B89               	decfsz	9,f
  3029  0422  2C1D               	goto	u945
  3030  0423  0873               	movf	??_readFlash,w
  3031  0424  0020               	movlb	0	; select bank0
  3032  0425  07E1               	addwf	_upperLimit,f
  3033  0426  0874               	movf	??_readFlash+1,w
  3034  0427  3DE2               	addwfc	_upperLimit+1,f
  3035  0428  0875               	movf	??_readFlash+2,w
  3036  0429  3DE3               	addwfc	_upperLimit+2,f
  3037  042A  0876               	movf	??_readFlash+3,w
  3038  042B  3DE4               	addwfc	_upperLimit+3,f
  3039                           
  3040                           ;main.c: 92:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -1) ;
  3041  042C  30FF               	movlw	255
  3042  042D  00F0               	movwf	FLASH_ReadWord@flashAddr
  3043  042E  3007               	movlw	7
  3044  042F  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3045  0430  2571               	fcall	_FLASH_ReadWord
  3046  0431  0870               	movf	?_FLASH_ReadWord,w
  3047  0432  0020               	movlb	0	; select bank0
  3048  0433  07E1               	addwf	_upperLimit,f
  3049  0434  0871               	movf	?_FLASH_ReadWord+1,w
  3050  0435  3DE2               	addwfc	_upperLimit+1,f
  3051  0436  3000               	movlw	0
  3052  0437  3DE3               	addwfc	_upperLimit+2,f
  3053  0438  3DE4               	addwfc	_upperLimit+3,f
  3054  0439  0008               	return
  3055  043A                     __end_of_readFlash:
  3056                           
  3057                           	psect	text6
  3058  0571                     __ptext6:	
  3059 ;; *************** function _FLASH_ReadWord *****************
  3060 ;; Defined at:
  3061 ;;		line 58 in file "mcc_generated_files/memory.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  flashAddr       2    0[COMMON] unsigned short 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  2    0[COMMON] unsigned short 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0
  3070 ;; Tracked objects:
  3071 ;;		On entry : 1F/0
  3072 ;;		On exit  : 1F/3
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1
  3075 ;;      Params:         2       0       0
  3076 ;;      Locals:         1       0       0
  3077 ;;      Temps:          0       0       0
  3078 ;;      Totals:         3       0       0
  3079 ;;Total ram usage:        3 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    4
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_readFlash
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _FLASH_ReadWord
  3091  0571                     _FLASH_ReadWord:
  3092                           
  3093                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  3094                           
  3095                           ;incstack = 0
  3096                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3097  0571  3000               	movlw	0
  3098  0572  1B8B               	btfsc	11,7	;volatile
  3099  0573  3001               	movlw	1
  3100  0574  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  3101                           
  3102                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  3103  0575  138B               	bcf	11,7	;volatile
  3104                           
  3105                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  3106  0576  0870               	movf	FLASH_ReadWord@flashAddr,w
  3107  0577  0023               	movlb	3	; select bank3
  3108  0578  0091               	movwf	17	;volatile
  3109                           
  3110                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  3111  0579  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  3112  057A  0092               	movwf	18	;volatile
  3113                           
  3114                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  3115  057B  1315               	bcf	21,6	;volatile
  3116                           
  3117                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  3118  057C  1415               	bsf	21,0	;volatile
  3119                           
  3120                           ;mcc_generated_files/memory.c: 68:     __nop();
  3121  057D  0000               	nop
  3122                           
  3123                           ;mcc_generated_files/memory.c: 69:     __nop();
  3124  057E  0000               	nop
  3125                           
  3126                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  3127  057F  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  3128  0580  1C03               	skipc
  3129  0581  138B               	bcf	11,7	;volatile
  3130  0582  1803               	skipnc
  3131  0583  178B               	bsf	11,7	;volatile
  3132                           
  3133                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  3134  0584  0023               	movlb	3	; select bank3
  3135  0585  0814               	movf	20,w	;volatile
  3136  0586  00F1               	movwf	?_FLASH_ReadWord+1
  3137  0587  0813               	movf	19,w	;volatile
  3138  0588  00F0               	movwf	?_FLASH_ReadWord
  3139  0589  0008               	return
  3140  058A                     __end_of_FLASH_ReadWord:
  3141                           
  3142                           	psect	text7
  3143  050F                     __ptext7:	
  3144 ;; *************** function ___tmul *****************
  3145 ;; Defined at:
  3146 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul24.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  multiplier      3    0[COMMON] unsigned um
  3149 ;;  multiplicand    3    3[COMMON] unsigned um
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  product         3    6[COMMON] unsigned um
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  3    0[COMMON] unsigned um
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0
  3156 ;; Tracked objects:
  3157 ;;		On entry : 1F/0
  3158 ;;		On exit  : 1F/0
  3159 ;;		Unchanged: 1F/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1
  3161 ;;      Params:         6       0       0
  3162 ;;      Locals:         3       0       0
  3163 ;;      Temps:          0       0       0
  3164 ;;      Totals:         9       0       0
  3165 ;;Total ram usage:        9 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    4
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_setState
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           
  3176                           ;psect for function ___tmul
  3177  050F                     ___tmul:
  3178                           
  3179                           ;incstack = 0
  3180                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  3181  050F  3000               	movlw	0
  3182  0510  00F6               	movwf	___tmul@product
  3183  0511  3000               	movlw	0
  3184  0512  00F7               	movwf	___tmul@product+1
  3185  0513  3000               	movlw	0
  3186  0514  00F8               	movwf	___tmul@product+2
  3187  0515                     l1750:
  3188  0515  1C70               	btfss	___tmul@multiplier,0
  3189  0516  2D1D               	goto	l1754
  3190  0517  0873               	movf	___tmul@multiplicand,w
  3191  0518  07F6               	addwf	___tmul@product,f
  3192  0519  0874               	movf	___tmul@multiplicand+1,w
  3193  051A  3DF7               	addwfc	___tmul@product+1,f
  3194  051B  0875               	movf	___tmul@multiplicand+2,w
  3195  051C  3DF8               	addwfc	___tmul@product+2,f
  3196  051D                     l1754:
  3197  051D  3001               	movlw	1
  3198  051E                     u965:
  3199  051E  35F3               	lslf	___tmul@multiplicand,f
  3200  051F  0DF4               	rlf	___tmul@multiplicand+1,f
  3201  0520  0DF5               	rlf	___tmul@multiplicand+2,f
  3202  0521  0B89               	decfsz	9,f
  3203  0522  2D1E               	goto	u965
  3204  0523  3001               	movlw	1
  3205  0524                     u975:
  3206  0524  36F2               	lsrf	___tmul@multiplier+2,f
  3207  0525  0CF1               	rrf	___tmul@multiplier+1,f
  3208  0526  0CF0               	rrf	___tmul@multiplier,f
  3209  0527  0B89               	decfsz	9,f
  3210  0528  2D24               	goto	u975
  3211  0529  0872               	movf	___tmul@multiplier+2,w
  3212  052A  0471               	iorwf	___tmul@multiplier+1,w
  3213  052B  0470               	iorwf	___tmul@multiplier,w
  3214  052C  1D03               	skipz
  3215  052D  2D15               	goto	l1750
  3216  052E  0876               	movf	___tmul@product,w
  3217  052F  00F0               	movwf	?___tmul
  3218  0530  0877               	movf	___tmul@product+1,w
  3219  0531  00F1               	movwf	?___tmul+1
  3220  0532  0878               	movf	___tmul@product+2,w
  3221  0533  00F2               	movwf	?___tmul+2
  3222  0534  0008               	return
  3223  0535                     __end_of___tmul:
  3224                           
  3225                           	psect	text8
  3226  048E                     __ptext8:	
  3227 ;; *************** function ___lldiv *****************
  3228 ;; Defined at:
  3229 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\__lldiv.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  divisor         4    0[COMMON] unsigned long 
  3232 ;;  dividend        4    4[COMMON] unsigned long 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  quotient        4    9[COMMON] unsigned long 
  3235 ;;  counter         1   13[COMMON] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  4    0[COMMON] unsigned long 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0
  3240 ;; Tracked objects:
  3241 ;;		On entry : 1F/0
  3242 ;;		On exit  : 1F/0
  3243 ;;		Unchanged: 1F/0
  3244 ;; Data sizes:     COMMON   BANK0   BANK1
  3245 ;;      Params:         8       0       0
  3246 ;;      Locals:         5       0       0
  3247 ;;      Temps:          1       0       0
  3248 ;;      Totals:        14       0       0
  3249 ;;Total ram usage:       14 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    4
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_setState
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           
  3260                           ;psect for function ___lldiv
  3261  048E                     ___lldiv:
  3262                           
  3263                           ;incstack = 0
  3264                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3265  048E  3000               	movlw	0
  3266  048F  00FC               	movwf	___lldiv@quotient+3
  3267  0490  3000               	movlw	0
  3268  0491  00FB               	movwf	___lldiv@quotient+2
  3269  0492  3000               	movlw	0
  3270  0493  00FA               	movwf	___lldiv@quotient+1
  3271  0494  3000               	movlw	0
  3272  0495  00F9               	movwf	___lldiv@quotient
  3273  0496  0873               	movf	___lldiv@divisor+3,w
  3274  0497  0472               	iorwf	___lldiv@divisor+2,w
  3275  0498  0471               	iorwf	___lldiv@divisor+1,w
  3276  0499  0470               	iorwf	___lldiv@divisor,w
  3277  049A  1903               	skipnz
  3278  049B  2CD7               	goto	l1782
  3279  049C  01FD               	clrf	___lldiv@counter
  3280  049D  0AFD               	incf	___lldiv@counter,f
  3281  049E                     l1768:
  3282  049E  1BF3               	btfsc	___lldiv@divisor+3,7
  3283  049F  2CAC               	goto	l1770
  3284  04A0  3001               	movlw	1
  3285  04A1                     u1005:
  3286  04A1  35F0               	lslf	___lldiv@divisor,f
  3287  04A2  0DF1               	rlf	___lldiv@divisor+1,f
  3288  04A3  0DF2               	rlf	___lldiv@divisor+2,f
  3289  04A4  0DF3               	rlf	___lldiv@divisor+3,f
  3290  04A5  0B89               	decfsz	9,f
  3291  04A6  2CA1               	goto	u1005
  3292  04A7  3001               	movlw	1
  3293  04A8  00F8               	movwf	??___lldiv
  3294  04A9  0878               	movf	??___lldiv,w
  3295  04AA  07FD               	addwf	___lldiv@counter,f
  3296  04AB  2C9E               	goto	l1768
  3297  04AC                     l1770:
  3298  04AC  3001               	movlw	1
  3299  04AD                     u1025:
  3300  04AD  35F9               	lslf	___lldiv@quotient,f
  3301  04AE  0DFA               	rlf	___lldiv@quotient+1,f
  3302  04AF  0DFB               	rlf	___lldiv@quotient+2,f
  3303  04B0  0DFC               	rlf	___lldiv@quotient+3,f
  3304  04B1  0B89               	decfsz	9,f
  3305  04B2  2CAD               	goto	u1025
  3306  04B3  0873               	movf	___lldiv@divisor+3,w
  3307  04B4  0277               	subwf	___lldiv@dividend+3,w
  3308  04B5  1D03               	skipz
  3309  04B6  2CC1               	goto	u1035
  3310  04B7  0872               	movf	___lldiv@divisor+2,w
  3311  04B8  0276               	subwf	___lldiv@dividend+2,w
  3312  04B9  1D03               	skipz
  3313  04BA  2CC1               	goto	u1035
  3314  04BB  0871               	movf	___lldiv@divisor+1,w
  3315  04BC  0275               	subwf	___lldiv@dividend+1,w
  3316  04BD  1D03               	skipz
  3317  04BE  2CC1               	goto	u1035
  3318  04BF  0870               	movf	___lldiv@divisor,w
  3319  04C0  0274               	subwf	___lldiv@dividend,w
  3320  04C1                     u1035:
  3321  04C1  1C03               	skipc
  3322  04C2  2CCC               	goto	l1778
  3323  04C3  0870               	movf	___lldiv@divisor,w
  3324  04C4  02F4               	subwf	___lldiv@dividend,f
  3325  04C5  0871               	movf	___lldiv@divisor+1,w
  3326  04C6  3BF5               	subwfb	___lldiv@dividend+1,f
  3327  04C7  0872               	movf	___lldiv@divisor+2,w
  3328  04C8  3BF6               	subwfb	___lldiv@dividend+2,f
  3329  04C9  0873               	movf	___lldiv@divisor+3,w
  3330  04CA  3BF7               	subwfb	___lldiv@dividend+3,f
  3331  04CB  1479               	bsf	___lldiv@quotient,0
  3332  04CC                     l1778:
  3333  04CC  3001               	movlw	1
  3334  04CD                     u1045:
  3335  04CD  36F3               	lsrf	___lldiv@divisor+3,f
  3336  04CE  0CF2               	rrf	___lldiv@divisor+2,f
  3337  04CF  0CF1               	rrf	___lldiv@divisor+1,f
  3338  04D0  0CF0               	rrf	___lldiv@divisor,f
  3339  04D1  0B89               	decfsz	9,f
  3340  04D2  2CCD               	goto	u1045
  3341  04D3  3001               	movlw	1
  3342  04D4  02FD               	subwf	___lldiv@counter,f
  3343  04D5  1D03               	btfss	3,2
  3344  04D6  2CAC               	goto	l1770
  3345  04D7                     l1782:
  3346  04D7  087C               	movf	___lldiv@quotient+3,w
  3347  04D8  00F3               	movwf	?___lldiv+3
  3348  04D9  087B               	movf	___lldiv@quotient+2,w
  3349  04DA  00F2               	movwf	?___lldiv+2
  3350  04DB  087A               	movf	___lldiv@quotient+1,w
  3351  04DC  00F1               	movwf	?___lldiv+1
  3352  04DD  0879               	movf	___lldiv@quotient,w
  3353  04DE  00F0               	movwf	?___lldiv
  3354  04DF  0008               	return
  3355  04E0                     __end_of___lldiv:
  3356                           
  3357                           	psect	text9
  3358  0180                     __ptext9:	
  3359 ;; *************** function _setLedsForPositioning *****************
  3360 ;; Defined at:
  3361 ;;		line 327 in file "main.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  adcValue        4    0[COMMON] long 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;		None
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      void 
  3368 ;; Registers used:
  3369 ;;		wreg, status,2, status,0
  3370 ;; Tracked objects:
  3371 ;;		On entry : 1F/0
  3372 ;;		On exit  : 1F/2
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMMON   BANK0   BANK1
  3375 ;;      Params:         4       0       0
  3376 ;;      Locals:         0       0       0
  3377 ;;      Temps:          0       0       0
  3378 ;;      Totals:         4       0       0
  3379 ;;Total ram usage:        4 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    4
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_main
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _setLedsForPositioning
  3391  0180                     _setLedsForPositioning:
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _setLedsForPositioning: [wreg+status,2+status,0]
  3395                           ;main.c: 327: void setLedsForPositioning(int32_t adcValue);main.c: 328: {;main.c: 329:  
      +                             do { LATCbits.LATC0 = 0; } while(0);
  3396  0180  0022               	movlb	2	; select bank2
  3397  0181  100E               	bcf	14,0	;volatile
  3398                           
  3399                           ;main.c: 330:     do { LATCbits.LATC1 = 0; } while(0);
  3400  0182  108E               	bcf	14,1	;volatile
  3401                           
  3402                           ;main.c: 331:     do { LATCbits.LATC2 = 0; } while(0);
  3403  0183  110E               	bcf	14,2	;volatile
  3404                           
  3405                           ;main.c: 332:     do { LATCbits.LATC3 = 0; } while(0);
  3406  0184  118E               	bcf	14,3	;volatile
  3407                           
  3408                           ;main.c: 333:     do { LATCbits.LATC4 = 0; } while(0);
  3409  0185  120E               	bcf	14,4	;volatile
  3410                           
  3411                           ;main.c: 334:     do { LATCbits.LATC5 = 1; } while(0);
  3412  0186  168E               	bsf	14,5	;volatile
  3413                           
  3414                           ;main.c: 335:     do { LATCbits.LATC6 = 0; } while(0);
  3415  0187  130E               	bcf	14,6	;volatile
  3416                           
  3417                           ;main.c: 336:     do { LATCbits.LATC7 = 0; } while(0);
  3418  0188  138E               	bcf	14,7	;volatile
  3419                           
  3420                           ;main.c: 337:     do { LATBbits.LATB5 = 0; } while(0);
  3421  0189  128D               	bcf	13,5	;volatile
  3422                           
  3423                           ;main.c: 338:     do { LATBbits.LATB6 = 0; } while(0);
  3424  018A  130D               	bcf	13,6	;volatile
  3425                           
  3426                           ;main.c: 339:     do { LATBbits.LATB7 = 0; } while(0);
  3427  018B  138D               	bcf	13,7	;volatile
  3428                           
  3429                           ;main.c: 343:     if(adcValue < 54)
  3430  018C  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3431  018D  299B               	goto	l423
  3432  018E  0873               	movf	setLedsForPositioning@adcValue+3,w
  3433  018F  1D03               	btfss	3,2
  3434  0190  299D               	goto	l1856
  3435  0191  0872               	movf	setLedsForPositioning@adcValue+2,w
  3436  0192  1D03               	btfss	3,2
  3437  0193  299D               	goto	l1856
  3438  0194  0871               	movf	setLedsForPositioning@adcValue+1,w
  3439  0195  1D03               	btfss	3,2
  3440  0196  299D               	goto	l1856
  3441  0197  3036               	movlw	54
  3442  0198  0270               	subwf	setLedsForPositioning@adcValue,w
  3443  0199  1803               	btfsc	3,0
  3444  019A  299D               	goto	l1856
  3445  019B                     l423:	
  3446                           ;main.c: 344:     {;main.c: 345:         do { LATCbits.LATC0 = 1; } while(0);
  3447                           
  3448  019B  140E               	bsf	14,0	;volatile
  3449  019C  0008               	return
  3450  019D                     l1856:
  3451  019D  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3452  019E  29AC               	goto	l427
  3453  019F  0873               	movf	setLedsForPositioning@adcValue+3,w
  3454  01A0  1D03               	btfss	3,2
  3455  01A1  29AF               	goto	l1858
  3456  01A2  0872               	movf	setLedsForPositioning@adcValue+2,w
  3457  01A3  1D03               	btfss	3,2
  3458  01A4  29AF               	goto	l1858
  3459  01A5  0871               	movf	setLedsForPositioning@adcValue+1,w
  3460  01A6  1D03               	btfss	3,2
  3461  01A7  29AF               	goto	l1858
  3462  01A8  306C               	movlw	108
  3463  01A9  0270               	subwf	setLedsForPositioning@adcValue,w
  3464  01AA  1803               	btfsc	3,0
  3465  01AB  29AF               	goto	l1858
  3466  01AC                     l427:	
  3467                           ;main.c: 348:     {;main.c: 349:         do { LATCbits.LATC0 = 1; } while(0);
  3468                           
  3469  01AC  140E               	bsf	14,0	;volatile
  3470                           
  3471                           ;main.c: 350:         do { LATCbits.LATC1 = 1; } while(0);
  3472  01AD  148E               	bsf	14,1	;volatile
  3473  01AE  0008               	return
  3474  01AF                     l1858:
  3475  01AF  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3476  01B0  29BE               	goto	l433
  3477  01B1  0873               	movf	setLedsForPositioning@adcValue+3,w
  3478  01B2  1D03               	btfss	3,2
  3479  01B3  29C0               	goto	l1860
  3480  01B4  0872               	movf	setLedsForPositioning@adcValue+2,w
  3481  01B5  1D03               	btfss	3,2
  3482  01B6  29C0               	goto	l1860
  3483  01B7  0871               	movf	setLedsForPositioning@adcValue+1,w
  3484  01B8  1D03               	btfss	3,2
  3485  01B9  29C0               	goto	l1860
  3486  01BA  30A2               	movlw	162
  3487  01BB  0270               	subwf	setLedsForPositioning@adcValue,w
  3488  01BC  1803               	btfsc	3,0
  3489  01BD  29C0               	goto	l1860
  3490  01BE                     l433:	
  3491                           ;main.c: 353:     {;main.c: 354:         do { LATCbits.LATC1 = 1; } while(0);
  3492                           
  3493  01BE  148E               	bsf	14,1	;volatile
  3494  01BF  0008               	return
  3495  01C0                     l1860:
  3496  01C0  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3497  01C1  29CF               	goto	l437
  3498  01C2  0873               	movf	setLedsForPositioning@adcValue+3,w
  3499  01C3  1D03               	btfss	3,2
  3500  01C4  29D2               	goto	l1862
  3501  01C5  0872               	movf	setLedsForPositioning@adcValue+2,w
  3502  01C6  1D03               	btfss	3,2
  3503  01C7  29D2               	goto	l1862
  3504  01C8  0871               	movf	setLedsForPositioning@adcValue+1,w
  3505  01C9  1D03               	btfss	3,2
  3506  01CA  29D2               	goto	l1862
  3507  01CB  30D7               	movlw	215
  3508  01CC  0270               	subwf	setLedsForPositioning@adcValue,w
  3509  01CD  1803               	btfsc	3,0
  3510  01CE  29D2               	goto	l1862
  3511  01CF                     l437:	
  3512                           ;main.c: 357:     {;main.c: 358:         do { LATCbits.LATC1 = 1; } while(0);
  3513                           
  3514  01CF  148E               	bsf	14,1	;volatile
  3515                           
  3516                           ;main.c: 359:         do { LATCbits.LATC2 = 1; } while(0);
  3517  01D0  150E               	bsf	14,2	;volatile
  3518  01D1  0008               	return
  3519  01D2                     l1862:
  3520  01D2  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3521  01D3  29E0               	goto	l443
  3522  01D4  0873               	movf	setLedsForPositioning@adcValue+3,w
  3523  01D5  1D03               	btfss	3,2
  3524  01D6  29E2               	goto	l1864
  3525  01D7  0872               	movf	setLedsForPositioning@adcValue+2,w
  3526  01D8  1D03               	btfss	3,2
  3527  01D9  29E2               	goto	l1864
  3528  01DA  300D               	movlw	13
  3529  01DB  0270               	subwf	setLedsForPositioning@adcValue,w
  3530  01DC  3001               	movlw	1
  3531  01DD  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3532  01DE  1803               	btfsc	3,0
  3533  01DF  29E2               	goto	l1864
  3534  01E0                     l443:	
  3535                           ;main.c: 362:     {;main.c: 363:         do { LATCbits.LATC2 = 1; } while(0);
  3536                           
  3537  01E0  150E               	bsf	14,2	;volatile
  3538  01E1  0008               	return
  3539  01E2                     l1864:
  3540  01E2  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3541  01E3  29F0               	goto	l447
  3542  01E4  0873               	movf	setLedsForPositioning@adcValue+3,w
  3543  01E5  1D03               	btfss	3,2
  3544  01E6  29F3               	goto	l1866
  3545  01E7  0872               	movf	setLedsForPositioning@adcValue+2,w
  3546  01E8  1D03               	btfss	3,2
  3547  01E9  29F3               	goto	l1866
  3548  01EA  3043               	movlw	67
  3549  01EB  0270               	subwf	setLedsForPositioning@adcValue,w
  3550  01EC  3001               	movlw	1
  3551  01ED  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3552  01EE  1803               	btfsc	3,0
  3553  01EF  29F3               	goto	l1866
  3554  01F0                     l447:	
  3555                           ;main.c: 366:     {;main.c: 367:         do { LATCbits.LATC2 = 1; } while(0);
  3556                           
  3557  01F0  150E               	bsf	14,2	;volatile
  3558                           
  3559                           ;main.c: 368:         do { LATCbits.LATC3 = 1; } while(0);
  3560  01F1  158E               	bsf	14,3	;volatile
  3561  01F2  0008               	return
  3562  01F3                     l1866:
  3563  01F3  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3564  01F4  2A01               	goto	l453
  3565  01F5  0873               	movf	setLedsForPositioning@adcValue+3,w
  3566  01F6  1D03               	btfss	3,2
  3567  01F7  2A03               	goto	l1868
  3568  01F8  0872               	movf	setLedsForPositioning@adcValue+2,w
  3569  01F9  1D03               	btfss	3,2
  3570  01FA  2A03               	goto	l1868
  3571  01FB  3079               	movlw	121
  3572  01FC  0270               	subwf	setLedsForPositioning@adcValue,w
  3573  01FD  3001               	movlw	1
  3574  01FE  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3575  01FF  1803               	btfsc	3,0
  3576  0200  2A03               	goto	l1868
  3577  0201                     l453:	
  3578                           ;main.c: 371:     {;main.c: 372:         do { LATCbits.LATC3 = 1; } while(0);
  3579                           
  3580  0201  158E               	bsf	14,3	;volatile
  3581  0202  0008               	return
  3582  0203                     l1868:
  3583  0203  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3584  0204  2A11               	goto	l457
  3585  0205  0873               	movf	setLedsForPositioning@adcValue+3,w
  3586  0206  1D03               	btfss	3,2
  3587  0207  2A14               	goto	l1870
  3588  0208  0872               	movf	setLedsForPositioning@adcValue+2,w
  3589  0209  1D03               	btfss	3,2
  3590  020A  2A14               	goto	l1870
  3591  020B  30AF               	movlw	175
  3592  020C  0270               	subwf	setLedsForPositioning@adcValue,w
  3593  020D  3001               	movlw	1
  3594  020E  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3595  020F  1803               	btfsc	3,0
  3596  0210  2A14               	goto	l1870
  3597  0211                     l457:	
  3598                           ;main.c: 375:     {;main.c: 376:         do { LATCbits.LATC3 = 1; } while(0);
  3599                           
  3600  0211  158E               	bsf	14,3	;volatile
  3601                           
  3602                           ;main.c: 377:         do { LATCbits.LATC4 = 1; } while(0);
  3603  0212  160E               	bsf	14,4	;volatile
  3604  0213  0008               	return
  3605  0214                     l1870:
  3606  0214  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3607  0215  2A22               	goto	l463
  3608  0216  0873               	movf	setLedsForPositioning@adcValue+3,w
  3609  0217  1D03               	btfss	3,2
  3610  0218  2A24               	goto	l1872
  3611  0219  0872               	movf	setLedsForPositioning@adcValue+2,w
  3612  021A  1D03               	btfss	3,2
  3613  021B  2A24               	goto	l1872
  3614  021C  30E5               	movlw	229
  3615  021D  0270               	subwf	setLedsForPositioning@adcValue,w
  3616  021E  3001               	movlw	1
  3617  021F  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3618  0220  1803               	btfsc	3,0
  3619  0221  2A24               	goto	l1872
  3620  0222                     l463:	
  3621                           ;main.c: 380:     {;main.c: 381:         do { LATCbits.LATC4 = 1; } while(0);
  3622                           
  3623  0222  160E               	bsf	14,4	;volatile
  3624  0223  0008               	return
  3625  0224                     l1872:
  3626  0224  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3627  0225  0008               	return
  3628  0226  0873               	movf	setLedsForPositioning@adcValue+3,w
  3629  0227  1D03               	btfss	3,2
  3630  0228  2A32               	goto	l1876
  3631  0229  0872               	movf	setLedsForPositioning@adcValue+2,w
  3632  022A  1D03               	btfss	3,2
  3633  022B  2A32               	goto	l1876
  3634  022C  301A               	movlw	26
  3635  022D  0270               	subwf	setLedsForPositioning@adcValue,w
  3636  022E  3002               	movlw	2
  3637  022F  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3638  0230  1C03               	btfss	3,0
  3639  0231  0008               	return
  3640  0232                     l1876:
  3641  0232  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3642  0233  2A40               	goto	l469
  3643  0234  0873               	movf	setLedsForPositioning@adcValue+3,w
  3644  0235  1D03               	btfss	3,2
  3645  0236  2A42               	goto	l1878
  3646  0237  0872               	movf	setLedsForPositioning@adcValue+2,w
  3647  0238  1D03               	btfss	3,2
  3648  0239  2A42               	goto	l1878
  3649  023A  3050               	movlw	80
  3650  023B  0270               	subwf	setLedsForPositioning@adcValue,w
  3651  023C  3002               	movlw	2
  3652  023D  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3653  023E  1803               	btfsc	3,0
  3654  023F  2A42               	goto	l1878
  3655  0240                     l469:	
  3656                           ;main.c: 388:     {;main.c: 389:         do { LATCbits.LATC6 = 1; } while(0);
  3657                           
  3658  0240  170E               	bsf	14,6	;volatile
  3659  0241  0008               	return
  3660  0242                     l1878:
  3661  0242  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3662  0243  2A50               	goto	l473
  3663  0244  0873               	movf	setLedsForPositioning@adcValue+3,w
  3664  0245  1D03               	btfss	3,2
  3665  0246  2A53               	goto	l1880
  3666  0247  0872               	movf	setLedsForPositioning@adcValue+2,w
  3667  0248  1D03               	btfss	3,2
  3668  0249  2A53               	goto	l1880
  3669  024A  3086               	movlw	134
  3670  024B  0270               	subwf	setLedsForPositioning@adcValue,w
  3671  024C  3002               	movlw	2
  3672  024D  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3673  024E  1803               	btfsc	3,0
  3674  024F  2A53               	goto	l1880
  3675  0250                     l473:	
  3676                           ;main.c: 392:     {;main.c: 393:         do { LATCbits.LATC6 = 1; } while(0);
  3677                           
  3678  0250  170E               	bsf	14,6	;volatile
  3679                           
  3680                           ;main.c: 394:         do { LATCbits.LATC7 = 1; } while(0);
  3681  0251  178E               	bsf	14,7	;volatile
  3682  0252  0008               	return
  3683  0253                     l1880:
  3684  0253  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3685  0254  2A61               	goto	l479
  3686  0255  0873               	movf	setLedsForPositioning@adcValue+3,w
  3687  0256  1D03               	btfss	3,2
  3688  0257  2A63               	goto	l1882
  3689  0258  0872               	movf	setLedsForPositioning@adcValue+2,w
  3690  0259  1D03               	btfss	3,2
  3691  025A  2A63               	goto	l1882
  3692  025B  30BC               	movlw	188
  3693  025C  0270               	subwf	setLedsForPositioning@adcValue,w
  3694  025D  3002               	movlw	2
  3695  025E  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3696  025F  1803               	btfsc	3,0
  3697  0260  2A63               	goto	l1882
  3698  0261                     l479:	
  3699                           ;main.c: 397:     {;main.c: 398:         do { LATCbits.LATC7 = 1; } while(0);
  3700                           
  3701  0261  178E               	bsf	14,7	;volatile
  3702  0262  0008               	return
  3703  0263                     l1882:
  3704  0263  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3705  0264  2A71               	goto	l483
  3706  0265  0873               	movf	setLedsForPositioning@adcValue+3,w
  3707  0266  1D03               	btfss	3,2
  3708  0267  2A74               	goto	l1884
  3709  0268  0872               	movf	setLedsForPositioning@adcValue+2,w
  3710  0269  1D03               	btfss	3,2
  3711  026A  2A74               	goto	l1884
  3712  026B  30F2               	movlw	242
  3713  026C  0270               	subwf	setLedsForPositioning@adcValue,w
  3714  026D  3002               	movlw	2
  3715  026E  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3716  026F  1803               	btfsc	3,0
  3717  0270  2A74               	goto	l1884
  3718  0271                     l483:	
  3719                           ;main.c: 401:     {;main.c: 402:         do { LATCbits.LATC7 = 1; } while(0);
  3720                           
  3721  0271  178E               	bsf	14,7	;volatile
  3722                           
  3723                           ;main.c: 403:         do { LATBbits.LATB5 = 1; } while(0);
  3724  0272  168D               	bsf	13,5	;volatile
  3725  0273  0008               	return
  3726  0274                     l1884:
  3727  0274  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3728  0275  2A82               	goto	l489
  3729  0276  0873               	movf	setLedsForPositioning@adcValue+3,w
  3730  0277  1D03               	btfss	3,2
  3731  0278  2A84               	goto	l1886
  3732  0279  0872               	movf	setLedsForPositioning@adcValue+2,w
  3733  027A  1D03               	btfss	3,2
  3734  027B  2A84               	goto	l1886
  3735  027C  3028               	movlw	40
  3736  027D  0270               	subwf	setLedsForPositioning@adcValue,w
  3737  027E  3003               	movlw	3
  3738  027F  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3739  0280  1803               	btfsc	3,0
  3740  0281  2A84               	goto	l1886
  3741  0282                     l489:	
  3742                           ;main.c: 406:     {;main.c: 407:         do { LATBbits.LATB5 = 1; } while(0);
  3743                           
  3744  0282  168D               	bsf	13,5	;volatile
  3745  0283  0008               	return
  3746  0284                     l1886:
  3747  0284  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3748  0285  2A92               	goto	l493
  3749  0286  0873               	movf	setLedsForPositioning@adcValue+3,w
  3750  0287  1D03               	btfss	3,2
  3751  0288  2A95               	goto	l1888
  3752  0289  0872               	movf	setLedsForPositioning@adcValue+2,w
  3753  028A  1D03               	btfss	3,2
  3754  028B  2A95               	goto	l1888
  3755  028C  305D               	movlw	93
  3756  028D  0270               	subwf	setLedsForPositioning@adcValue,w
  3757  028E  3003               	movlw	3
  3758  028F  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3759  0290  1803               	btfsc	3,0
  3760  0291  2A95               	goto	l1888
  3761  0292                     l493:	
  3762                           ;main.c: 410:     {;main.c: 411:         do { LATBbits.LATB5 = 1; } while(0);
  3763                           
  3764  0292  168D               	bsf	13,5	;volatile
  3765                           
  3766                           ;main.c: 412:         do { LATBbits.LATB6 = 1; } while(0);
  3767  0293  170D               	bsf	13,6	;volatile
  3768  0294  0008               	return
  3769  0295                     l1888:
  3770  0295  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3771  0296  2AA3               	goto	l499
  3772  0297  0873               	movf	setLedsForPositioning@adcValue+3,w
  3773  0298  1D03               	btfss	3,2
  3774  0299  2AA5               	goto	l1890
  3775  029A  0872               	movf	setLedsForPositioning@adcValue+2,w
  3776  029B  1D03               	btfss	3,2
  3777  029C  2AA5               	goto	l1890
  3778  029D  3093               	movlw	147
  3779  029E  0270               	subwf	setLedsForPositioning@adcValue,w
  3780  029F  3003               	movlw	3
  3781  02A0  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3782  02A1  1803               	btfsc	3,0
  3783  02A2  2AA5               	goto	l1890
  3784  02A3                     l499:	
  3785                           ;main.c: 415:     {;main.c: 416:         do { LATBbits.LATB6 = 1; } while(0);
  3786                           
  3787  02A3  170D               	bsf	13,6	;volatile
  3788  02A4  0008               	return
  3789  02A5                     l1890:
  3790  02A5  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3791  02A6  2AB3               	goto	l503
  3792  02A7  0873               	movf	setLedsForPositioning@adcValue+3,w
  3793  02A8  1D03               	btfss	3,2
  3794  02A9  2AB6               	goto	l508
  3795  02AA  0872               	movf	setLedsForPositioning@adcValue+2,w
  3796  02AB  1D03               	btfss	3,2
  3797  02AC  2AB6               	goto	l508
  3798  02AD  30C9               	movlw	201
  3799  02AE  0270               	subwf	setLedsForPositioning@adcValue,w
  3800  02AF  3003               	movlw	3
  3801  02B0  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3802  02B1  1803               	btfsc	3,0
  3803  02B2  2AB6               	goto	l508
  3804  02B3                     l503:	
  3805                           ;main.c: 419:     {;main.c: 420:         do { LATBbits.LATB6 = 1; } while(0);
  3806                           
  3807  02B3  170D               	bsf	13,6	;volatile
  3808                           
  3809                           ;main.c: 421:         do { LATBbits.LATB7 = 1; } while(0);
  3810  02B4  178D               	bsf	13,7	;volatile
  3811  02B5  0008               	return
  3812  02B6                     l508:	
  3813                           ;main.c: 424:     {;main.c: 425:         do { LATBbits.LATB7 = 1; } while(0);
  3814                           
  3815  02B6  178D               	bsf	13,7	;volatile
  3816  02B7  0008               	return
  3817  02B8                     __end_of_setLedsForPositioning:
  3818                           
  3819                           	psect	text10
  3820  04E0                     __ptext10:	
  3821 ;; *************** function ___lmul *****************
  3822 ;; Defined at:
  3823 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  multiplier      4    0[COMMON] unsigned long 
  3826 ;;  multiplicand    4    4[COMMON] unsigned long 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  product         4    8[COMMON] unsigned long 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  4    0[COMMON] unsigned long 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0
  3833 ;; Tracked objects:
  3834 ;;		On entry : 1F/0
  3835 ;;		On exit  : 1F/0
  3836 ;;		Unchanged: 1F/0
  3837 ;; Data sizes:     COMMON   BANK0   BANK1
  3838 ;;      Params:         8       0       0
  3839 ;;      Locals:         4       0       0
  3840 ;;      Temps:          0       0       0
  3841 ;;      Totals:        12       0       0
  3842 ;;Total ram usage:       12 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    4
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_main
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           
  3853                           ;psect for function ___lmul
  3854  04E0                     ___lmul:
  3855                           
  3856                           ;incstack = 0
  3857                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3858  04E0  3000               	movlw	0
  3859  04E1  00FB               	movwf	___lmul@product+3
  3860  04E2  3000               	movlw	0
  3861  04E3  00FA               	movwf	___lmul@product+2
  3862  04E4  3000               	movlw	0
  3863  04E5  00F9               	movwf	___lmul@product+1
  3864  04E6  3000               	movlw	0
  3865  04E7  00F8               	movwf	___lmul@product
  3866  04E8                     l1894:
  3867  04E8  1C70               	btfss	___lmul@multiplier,0
  3868  04E9  2CF2               	goto	l1898
  3869  04EA  0874               	movf	___lmul@multiplicand,w
  3870  04EB  07F8               	addwf	___lmul@product,f
  3871  04EC  0875               	movf	___lmul@multiplicand+1,w
  3872  04ED  3DF9               	addwfc	___lmul@product+1,f
  3873  04EE  0876               	movf	___lmul@multiplicand+2,w
  3874  04EF  3DFA               	addwfc	___lmul@product+2,f
  3875  04F0  0877               	movf	___lmul@multiplicand+3,w
  3876  04F1  3DFB               	addwfc	___lmul@product+3,f
  3877  04F2                     l1898:
  3878  04F2  3001               	movlw	1
  3879  04F3                     u1305:
  3880  04F3  35F4               	lslf	___lmul@multiplicand,f
  3881  04F4  0DF5               	rlf	___lmul@multiplicand+1,f
  3882  04F5  0DF6               	rlf	___lmul@multiplicand+2,f
  3883  04F6  0DF7               	rlf	___lmul@multiplicand+3,f
  3884  04F7  0B89               	decfsz	9,f
  3885  04F8  2CF3               	goto	u1305
  3886  04F9  3001               	movlw	1
  3887  04FA                     u1315:
  3888  04FA  36F3               	lsrf	___lmul@multiplier+3,f
  3889  04FB  0CF2               	rrf	___lmul@multiplier+2,f
  3890  04FC  0CF1               	rrf	___lmul@multiplier+1,f
  3891  04FD  0CF0               	rrf	___lmul@multiplier,f
  3892  04FE  0B89               	decfsz	9,f
  3893  04FF  2CFA               	goto	u1315
  3894  0500  0873               	movf	___lmul@multiplier+3,w
  3895  0501  0472               	iorwf	___lmul@multiplier+2,w
  3896  0502  0471               	iorwf	___lmul@multiplier+1,w
  3897  0503  0470               	iorwf	___lmul@multiplier,w
  3898  0504  1D03               	skipz
  3899  0505  2CE8               	goto	l1894
  3900  0506  087B               	movf	___lmul@product+3,w
  3901  0507  00F3               	movwf	?___lmul+3
  3902  0508  087A               	movf	___lmul@product+2,w
  3903  0509  00F2               	movwf	?___lmul+2
  3904  050A  0879               	movf	___lmul@product+1,w
  3905  050B  00F1               	movwf	?___lmul+1
  3906  050C  0878               	movf	___lmul@product,w
  3907  050D  00F0               	movwf	?___lmul
  3908  050E  0008               	return
  3909  050F                     __end_of___lmul:
  3910                           
  3911                           	psect	text11
  3912  0351                     __ptext11:	
  3913 ;; *************** function ___aldiv *****************
  3914 ;; Defined at:
  3915 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  divisor         4    0[BANK0 ] long 
  3918 ;;  dividend        4    4[BANK0 ] long 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  quotient        4   10[BANK0 ] long 
  3921 ;;  sign            1    9[BANK0 ] unsigned char 
  3922 ;;  counter         1    8[BANK0 ] unsigned char 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  4    0[BANK0 ] long 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0
  3927 ;; Tracked objects:
  3928 ;;		On entry : 1F/0
  3929 ;;		On exit  : 1F/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1
  3932 ;;      Params:         0       8       0
  3933 ;;      Locals:         0       6       0
  3934 ;;      Temps:          1       0       0
  3935 ;;      Totals:         1      14       0
  3936 ;;Total ram usage:       15 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    4
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function ___aldiv
  3948  0351                     ___aldiv:
  3949                           
  3950                           ;incstack = 0
  3951                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3952  0351  01A9               	clrf	___aldiv@sign
  3953  0352  1FA3               	btfss	___aldiv@divisor+3,7
  3954  0353  2B61               	goto	l643
  3955  0354  09A0               	comf	___aldiv@divisor,f
  3956  0355  09A1               	comf	___aldiv@divisor+1,f
  3957  0356  09A2               	comf	___aldiv@divisor+2,f
  3958  0357  09A3               	comf	___aldiv@divisor+3,f
  3959  0358  0AA0               	incf	___aldiv@divisor,f
  3960  0359  1903               	skipnz
  3961  035A  0AA1               	incf	___aldiv@divisor+1,f
  3962  035B  1903               	skipnz
  3963  035C  0AA2               	incf	___aldiv@divisor+2,f
  3964  035D  1903               	skipnz
  3965  035E  0AA3               	incf	___aldiv@divisor+3,f
  3966  035F  01A9               	clrf	___aldiv@sign
  3967  0360  0AA9               	incf	___aldiv@sign,f
  3968  0361                     l643:
  3969  0361  1FA7               	btfss	___aldiv@dividend+3,7
  3970  0362  2B72               	goto	l1916
  3971  0363  09A4               	comf	___aldiv@dividend,f
  3972  0364  09A5               	comf	___aldiv@dividend+1,f
  3973  0365  09A6               	comf	___aldiv@dividend+2,f
  3974  0366  09A7               	comf	___aldiv@dividend+3,f
  3975  0367  0AA4               	incf	___aldiv@dividend,f
  3976  0368  1903               	skipnz
  3977  0369  0AA5               	incf	___aldiv@dividend+1,f
  3978  036A  1903               	skipnz
  3979  036B  0AA6               	incf	___aldiv@dividend+2,f
  3980  036C  1903               	skipnz
  3981  036D  0AA7               	incf	___aldiv@dividend+3,f
  3982  036E  3001               	movlw	1
  3983  036F  00FC               	movwf	??___aldiv
  3984  0370  087C               	movf	??___aldiv,w
  3985  0371  06A9               	xorwf	___aldiv@sign,f
  3986  0372                     l1916:
  3987  0372  3000               	movlw	0
  3988  0373  00AD               	movwf	___aldiv@quotient+3
  3989  0374  3000               	movlw	0
  3990  0375  00AC               	movwf	___aldiv@quotient+2
  3991  0376  3000               	movlw	0
  3992  0377  00AB               	movwf	___aldiv@quotient+1
  3993  0378  3000               	movlw	0
  3994  0379  00AA               	movwf	___aldiv@quotient
  3995  037A  0823               	movf	___aldiv@divisor+3,w
  3996  037B  0422               	iorwf	___aldiv@divisor+2,w
  3997  037C  0421               	iorwf	___aldiv@divisor+1,w
  3998  037D  0420               	iorwf	___aldiv@divisor,w
  3999  037E  1903               	skipnz
  4000  037F  2BBB               	goto	l1938
  4001  0380  01A8               	clrf	___aldiv@counter
  4002  0381  0AA8               	incf	___aldiv@counter,f
  4003  0382                     l1924:
  4004  0382  1BA3               	btfsc	___aldiv@divisor+3,7
  4005  0383  2B90               	goto	l1926
  4006  0384  3001               	movlw	1
  4007  0385                     u1365:
  4008  0385  35A0               	lslf	___aldiv@divisor,f
  4009  0386  0DA1               	rlf	___aldiv@divisor+1,f
  4010  0387  0DA2               	rlf	___aldiv@divisor+2,f
  4011  0388  0DA3               	rlf	___aldiv@divisor+3,f
  4012  0389  0B89               	decfsz	9,f
  4013  038A  2B85               	goto	u1365
  4014  038B  3001               	movlw	1
  4015  038C  00FC               	movwf	??___aldiv
  4016  038D  087C               	movf	??___aldiv,w
  4017  038E  07A8               	addwf	___aldiv@counter,f
  4018  038F  2B82               	goto	l1924
  4019  0390                     l1926:
  4020  0390  3001               	movlw	1
  4021  0391                     u1385:
  4022  0391  35AA               	lslf	___aldiv@quotient,f
  4023  0392  0DAB               	rlf	___aldiv@quotient+1,f
  4024  0393  0DAC               	rlf	___aldiv@quotient+2,f
  4025  0394  0DAD               	rlf	___aldiv@quotient+3,f
  4026  0395  0B89               	decfsz	9,f
  4027  0396  2B91               	goto	u1385
  4028  0397  0823               	movf	___aldiv@divisor+3,w
  4029  0398  0227               	subwf	___aldiv@dividend+3,w
  4030  0399  1D03               	skipz
  4031  039A  2BA5               	goto	u1395
  4032  039B  0822               	movf	___aldiv@divisor+2,w
  4033  039C  0226               	subwf	___aldiv@dividend+2,w
  4034  039D  1D03               	skipz
  4035  039E  2BA5               	goto	u1395
  4036  039F  0821               	movf	___aldiv@divisor+1,w
  4037  03A0  0225               	subwf	___aldiv@dividend+1,w
  4038  03A1  1D03               	skipz
  4039  03A2  2BA5               	goto	u1395
  4040  03A3  0820               	movf	___aldiv@divisor,w
  4041  03A4  0224               	subwf	___aldiv@dividend,w
  4042  03A5                     u1395:
  4043  03A5  1C03               	skipc
  4044  03A6  2BB0               	goto	l1934
  4045  03A7  0820               	movf	___aldiv@divisor,w
  4046  03A8  02A4               	subwf	___aldiv@dividend,f
  4047  03A9  0821               	movf	___aldiv@divisor+1,w
  4048  03AA  3BA5               	subwfb	___aldiv@dividend+1,f
  4049  03AB  0822               	movf	___aldiv@divisor+2,w
  4050  03AC  3BA6               	subwfb	___aldiv@dividend+2,f
  4051  03AD  0823               	movf	___aldiv@divisor+3,w
  4052  03AE  3BA7               	subwfb	___aldiv@dividend+3,f
  4053  03AF  142A               	bsf	___aldiv@quotient,0
  4054  03B0                     l1934:
  4055  03B0  3001               	movlw	1
  4056  03B1                     u1405:
  4057  03B1  36A3               	lsrf	___aldiv@divisor+3,f
  4058  03B2  0CA2               	rrf	___aldiv@divisor+2,f
  4059  03B3  0CA1               	rrf	___aldiv@divisor+1,f
  4060  03B4  0CA0               	rrf	___aldiv@divisor,f
  4061  03B5  0B89               	decfsz	9,f
  4062  03B6  2BB1               	goto	u1405
  4063  03B7  3001               	movlw	1
  4064  03B8  02A8               	subwf	___aldiv@counter,f
  4065  03B9  1D03               	btfss	3,2
  4066  03BA  2B90               	goto	l1926
  4067  03BB                     l1938:
  4068  03BB  0829               	movf	___aldiv@sign,w
  4069  03BC  1903               	btfsc	3,2
  4070  03BD  2BC9               	goto	l1942
  4071  03BE  09AA               	comf	___aldiv@quotient,f
  4072  03BF  09AB               	comf	___aldiv@quotient+1,f
  4073  03C0  09AC               	comf	___aldiv@quotient+2,f
  4074  03C1  09AD               	comf	___aldiv@quotient+3,f
  4075  03C2  0AAA               	incf	___aldiv@quotient,f
  4076  03C3  1903               	skipnz
  4077  03C4  0AAB               	incf	___aldiv@quotient+1,f
  4078  03C5  1903               	skipnz
  4079  03C6  0AAC               	incf	___aldiv@quotient+2,f
  4080  03C7  1903               	skipnz
  4081  03C8  0AAD               	incf	___aldiv@quotient+3,f
  4082  03C9                     l1942:
  4083  03C9  082D               	movf	___aldiv@quotient+3,w
  4084  03CA  00A3               	movwf	?___aldiv+3
  4085  03CB  082C               	movf	___aldiv@quotient+2,w
  4086  03CC  00A2               	movwf	?___aldiv+2
  4087  03CD  082B               	movf	___aldiv@quotient+1,w
  4088  03CE  00A1               	movwf	?___aldiv+1
  4089  03CF  082A               	movf	___aldiv@quotient,w
  4090  03D0  00A0               	movwf	?___aldiv
  4091  03D1  0008               	return
  4092  03D2                     __end_of___aldiv:
  4093                           
  4094                           	psect	text12
  4095  064C                     __ptext12:	
  4096 ;; *************** function _TMR2_StartTimer *****************
  4097 ;; Defined at:
  4098 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		None
  4107 ;; Tracked objects:
  4108 ;;		On entry : 1F/0
  4109 ;;		On exit  : 1F/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1
  4112 ;;      Params:         0       0       0
  4113 ;;      Locals:         0       0       0
  4114 ;;      Temps:          0       0       0
  4115 ;;      Totals:         0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    4
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_main
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _TMR2_StartTimer
  4128  064C                     _TMR2_StartTimer:
  4129                           
  4130                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in _TMR2_StartTimer: []
  4134  064C  151C               	bsf	28,2	;volatile
  4135  064D  0008               	return
  4136  064E                     __end_of_TMR2_StartTimer:
  4137                           
  4138                           	psect	text13
  4139  0607                     __ptext13:	
  4140 ;; *************** function _SYSTEM_Initialize *****************
  4141 ;; Defined at:
  4142 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, status,2, status,0, pclath, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : B1F/0
  4153 ;;		On exit  : 1F/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1
  4156 ;;      Params:         0       0       0
  4157 ;;      Locals:         0       0       0
  4158 ;;      Temps:          0       0       0
  4159 ;;      Totals:         0       0       0
  4160 ;;Total ram usage:        0 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    6
  4163 ;; This function calls:
  4164 ;;		_ADC_Initialize
  4165 ;;		_OSCILLATOR_Initialize
  4166 ;;		_PIN_MANAGER_Initialize
  4167 ;;		_PWM3_Initialize
  4168 ;;		_TMR0_Initialize
  4169 ;;		_TMR2_Initialize
  4170 ;;		_WDT_Initialize
  4171 ;; This function is called by:
  4172 ;;		_main
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function _SYSTEM_Initialize
  4178  0607                     _SYSTEM_Initialize:
  4179                           
  4180                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4181                           
  4182                           ;incstack = 0
  4183                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4184  0607  258A               	fcall	_PIN_MANAGER_Initialize
  4185                           
  4186                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4187  0608  2633               	fcall	_OSCILLATOR_Initialize
  4188                           
  4189                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4190  0609  2648               	fcall	_WDT_Initialize
  4191                           
  4192                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  4193  060A  261F               	fcall	_ADC_Initialize
  4194                           
  4195                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  4196  060B  2617               	fcall	_PWM3_Initialize
  4197                           
  4198                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  4199  060C  260F               	fcall	_TMR2_Initialize
  4200                           
  4201                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  4202  060D  25D0               	fcall	_TMR0_Initialize
  4203  060E  0008               	return
  4204  060F                     __end_of_SYSTEM_Initialize:
  4205                           
  4206                           	psect	text14
  4207  0648                     __ptext14:	
  4208 ;; *************** function _WDT_Initialize *****************
  4209 ;; Defined at:
  4210 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg
  4219 ;; Tracked objects:
  4220 ;;		On entry : B1F/2
  4221 ;;		On exit  : B1F/1
  4222 ;;		Unchanged: B00/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1
  4224 ;;      Params:         0       0       0
  4225 ;;      Locals:         0       0       0
  4226 ;;      Temps:          0       0       0
  4227 ;;      Totals:         0       0       0
  4228 ;;Total ram usage:        0 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    4
  4231 ;; This function calls:
  4232 ;;		Nothing
  4233 ;; This function is called by:
  4234 ;;		_SYSTEM_Initialize
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function _WDT_Initialize
  4240  0648                     _WDT_Initialize:
  4241                           
  4242                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _WDT_Initialize: [wreg]
  4246  0648  3016               	movlw	22
  4247  0649  0021               	movlb	1	; select bank1
  4248  064A  0097               	movwf	23	;volatile
  4249  064B  0008               	return
  4250  064C                     __end_of_WDT_Initialize:
  4251                           
  4252                           	psect	text15
  4253  060F                     __ptext15:	
  4254 ;; *************** function _TMR2_Initialize *****************
  4255 ;; Defined at:
  4256 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, status,2
  4265 ;; Tracked objects:
  4266 ;;		On entry : B1F/C
  4267 ;;		On exit  : B1F/0
  4268 ;;		Unchanged: B00/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1
  4270 ;;      Params:         0       0       0
  4271 ;;      Locals:         0       0       0
  4272 ;;      Temps:          0       0       0
  4273 ;;      Totals:         0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    4
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_SYSTEM_Initialize
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function _TMR2_Initialize
  4286  060F                     _TMR2_Initialize:
  4287                           
  4288                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4289                           
  4290                           ;incstack = 0
  4291                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4292  060F  30FF               	movlw	255
  4293  0610  0020               	movlb	0	; select bank0
  4294  0611  009B               	movwf	27	;volatile
  4295                           
  4296                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4297  0612  019A               	clrf	26	;volatile
  4298                           
  4299                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4300  0613  1091               	bcf	17,1	;volatile
  4301                           
  4302                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  4303  0614  301C               	movlw	28
  4304  0615  009C               	movwf	28	;volatile
  4305  0616  0008               	return
  4306  0617                     __end_of_TMR2_Initialize:
  4307                           
  4308                           	psect	text16
  4309  05D0                     __ptext16:	
  4310 ;; *************** function _TMR0_Initialize *****************
  4311 ;; Defined at:
  4312 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0, pclath, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : B1F/0
  4323 ;;		On exit  : 1F/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1
  4326 ;;      Params:         0       0       0
  4327 ;;      Locals:         0       0       0
  4328 ;;      Temps:          1       0       0
  4329 ;;      Totals:         1       0       0
  4330 ;;Total ram usage:        1 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    5
  4333 ;; This function calls:
  4334 ;;		_TMR0_SetInterruptHandler
  4335 ;; This function is called by:
  4336 ;;		_SYSTEM_Initialize
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           
  4341                           ;psect for function _TMR0_Initialize
  4342  05D0                     _TMR0_Initialize:
  4343                           
  4344                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4348  05D0  0021               	movlb	1	; select bank1
  4349  05D1  0815               	movf	21,w	;volatile
  4350  05D2  39C0               	andlw	192
  4351  05D3  3811               	iorlw	17
  4352  05D4  0095               	movwf	21	;volatile
  4353                           
  4354                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  4355  05D5  3006               	movlw	6
  4356  05D6  0020               	movlb	0	; select bank0
  4357  05D7  0095               	movwf	21	;volatile
  4358                           
  4359                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  4360  05D8  3006               	movlw	6
  4361  05D9  00F2               	movwf	??_TMR0_Initialize
  4362  05DA  0872               	movf	??_TMR0_Initialize,w
  4363  05DB  00E7               	movwf	_timer0ReloadVal	;volatile
  4364                           
  4365                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  4366  05DC  110B               	bcf	11,2	;volatile
  4367                           
  4368                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  4369  05DD  168B               	bsf	11,5	;volatile
  4370                           
  4371                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  4372  05DE  304E               	movlw	low _TMR0_DefaultInterruptHandler
  4373  05DF  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4374  05E0  3006               	movlw	high _TMR0_DefaultInterruptHandler
  4375  05E1  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4376  05E2  263F               	fcall	_TMR0_SetInterruptHandler
  4377  05E3  0008               	return
  4378  05E4                     __end_of_TMR0_Initialize:
  4379                           
  4380                           	psect	text17
  4381  063F                     __ptext17:	
  4382 ;; *************** function _TMR0_SetInterruptHandler *****************
  4383 ;; Defined at:
  4384 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4387 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg
  4394 ;; Tracked objects:
  4395 ;;		On entry : 1F/0
  4396 ;;		On exit  : 1F/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMMON   BANK0   BANK1
  4399 ;;      Params:         2       0       0
  4400 ;;      Locals:         0       0       0
  4401 ;;      Temps:          0       0       0
  4402 ;;      Totals:         2       0       0
  4403 ;;Total ram usage:        2 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    4
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_TMR0_Initialize
  4410 ;;		_main
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           
  4415                           ;psect for function _TMR0_SetInterruptHandler
  4416  063F                     _TMR0_SetInterruptHandler:
  4417                           
  4418                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  4419                           
  4420                           ;incstack = 0
  4421                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4422  063F  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4423  0640  00E6               	movwf	_TMR0_InterruptHandler+1
  4424  0641  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4425  0642  00E5               	movwf	_TMR0_InterruptHandler
  4426  0643  0008               	return
  4427  0644                     __end_of_TMR0_SetInterruptHandler:
  4428                           
  4429                           	psect	text18
  4430  0617                     __ptext18:	
  4431 ;; *************** function _PWM3_Initialize *****************
  4432 ;; Defined at:
  4433 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg
  4442 ;; Tracked objects:
  4443 ;;		On entry : B1F/1
  4444 ;;		On exit  : B1F/C
  4445 ;;		Unchanged: B00/0
  4446 ;; Data sizes:     COMMON   BANK0   BANK1
  4447 ;;      Params:         0       0       0
  4448 ;;      Locals:         0       0       0
  4449 ;;      Temps:          0       0       0
  4450 ;;      Totals:         0       0       0
  4451 ;;Total ram usage:        0 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    4
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		_SYSTEM_Initialize
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _PWM3_Initialize
  4463  0617                     _PWM3_Initialize:
  4464                           
  4465                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  4466                           
  4467                           ;incstack = 0
  4468                           ; Regs used in _PWM3_Initialize: [wreg]
  4469  0617  30D0               	movlw	208
  4470  0618  002C               	movlb	12	; select bank12
  4471  0619  0099               	movwf	25	;volatile
  4472                           
  4473                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  4474  061A  30FF               	movlw	255
  4475  061B  0098               	movwf	24	;volatile
  4476                           
  4477                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  4478  061C  30C0               	movlw	192
  4479  061D  0097               	movwf	23	;volatile
  4480  061E  0008               	return
  4481  061F                     __end_of_PWM3_Initialize:
  4482                           
  4483                           	psect	text19
  4484  058A                     __ptext19:	
  4485 ;; *************** function _PIN_MANAGER_Initialize *****************
  4486 ;; Defined at:
  4487 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  1    wreg      void 
  4494 ;; Registers used:
  4495 ;;		wreg, status,2
  4496 ;; Tracked objects:
  4497 ;;		On entry : B1F/0
  4498 ;;		On exit  : B1F/2
  4499 ;;		Unchanged: B00/0
  4500 ;; Data sizes:     COMMON   BANK0   BANK1
  4501 ;;      Params:         0       0       0
  4502 ;;      Locals:         0       0       0
  4503 ;;      Temps:          0       0       0
  4504 ;;      Totals:         0       0       0
  4505 ;;Total ram usage:        0 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    4
  4508 ;; This function calls:
  4509 ;;		Nothing
  4510 ;; This function is called by:
  4511 ;;		_SYSTEM_Initialize
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _PIN_MANAGER_Initialize
  4517  058A                     _PIN_MANAGER_Initialize:
  4518                           
  4519                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4523  058A  0022               	movlb	2	; select bank2
  4524  058B  018C               	clrf	12	;volatile
  4525                           
  4526                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4527  058C  018D               	clrf	13	;volatile
  4528                           
  4529                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4530  058D  018E               	clrf	14	;volatile
  4531                           
  4532                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  4533  058E  303B               	movlw	59
  4534  058F  0021               	movlb	1	; select bank1
  4535  0590  008C               	movwf	12	;volatile
  4536                           
  4537                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  4538  0591  3010               	movlw	16
  4539  0592  008D               	movwf	13	;volatile
  4540                           
  4541                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  4542  0593  018E               	clrf	14	;volatile
  4543                           
  4544                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4545  0594  0023               	movlb	3	; select bank3
  4546  0595  018E               	clrf	14	;volatile
  4547                           
  4548                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  4549  0596  3030               	movlw	48
  4550  0597  008D               	movwf	13	;volatile
  4551                           
  4552                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  4553  0598  3013               	movlw	19
  4554  0599  008C               	movwf	12	;volatile
  4555                           
  4556                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4557  059A  0024               	movlb	4	; select bank4
  4558  059B  018D               	clrf	13	;volatile
  4559                           
  4560                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4561  059C  018C               	clrf	12	;volatile
  4562                           
  4563                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4564  059D  0021               	movlb	1	; select bank1
  4565  059E  1795               	bsf	21,7	;volatile
  4566                           
  4567                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4568  059F  0022               	movlb	2	; select bank2
  4569  05A0  019D               	clrf	29	;volatile
  4570  05A1  0008               	return
  4571  05A2                     __end_of_PIN_MANAGER_Initialize:
  4572                           
  4573                           	psect	text20
  4574  0633                     __ptext20:	
  4575 ;; *************** function _OSCILLATOR_Initialize *****************
  4576 ;; Defined at:
  4577 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2
  4586 ;; Tracked objects:
  4587 ;;		On entry : B1F/2
  4588 ;;		On exit  : B1F/2
  4589 ;;		Unchanged: B00/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1
  4591 ;;      Params:         0       0       0
  4592 ;;      Locals:         0       0       0
  4593 ;;      Temps:          0       0       0
  4594 ;;      Totals:         0       0       0
  4595 ;;Total ram usage:        0 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    4
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_SYSTEM_Initialize
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function _OSCILLATOR_Initialize
  4607  0633                     _OSCILLATOR_Initialize:
  4608                           
  4609                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  4610                           
  4611                           ;incstack = 0
  4612                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4613  0633  306A               	movlw	106
  4614  0634  0021               	movlb	1	; select bank1
  4615  0635  0099               	movwf	25	;volatile
  4616                           
  4617                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4618  0636  0022               	movlb	2	; select bank2
  4619  0637  0196               	clrf	22	;volatile
  4620  0638  0008               	return
  4621  0639                     __end_of_OSCILLATOR_Initialize:
  4622                           
  4623                           	psect	text21
  4624  061F                     __ptext21:	
  4625 ;; *************** function _ADC_Initialize *****************
  4626 ;; Defined at:
  4627 ;;		line 67 in file "mcc_generated_files/adc.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;		None
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  1    wreg      void 
  4634 ;; Registers used:
  4635 ;;		wreg, status,2
  4636 ;; Tracked objects:
  4637 ;;		On entry : B1F/1
  4638 ;;		On exit  : B1F/1
  4639 ;;		Unchanged: B00/0
  4640 ;; Data sizes:     COMMON   BANK0   BANK1
  4641 ;;      Params:         0       0       0
  4642 ;;      Locals:         0       0       0
  4643 ;;      Temps:          0       0       0
  4644 ;;      Totals:         0       0       0
  4645 ;;Total ram usage:        0 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:    4
  4648 ;; This function calls:
  4649 ;;		Nothing
  4650 ;; This function is called by:
  4651 ;;		_SYSTEM_Initialize
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           
  4656                           ;psect for function _ADC_Initialize
  4657  061F                     _ADC_Initialize:
  4658                           
  4659                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xC0;
  4660                           
  4661                           ;incstack = 0
  4662                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4663  061F  30C0               	movlw	192
  4664  0620  009E               	movwf	30	;volatile
  4665                           
  4666                           ;mcc_generated_files/adc.c: 75:     ADCON2 = 0x00;
  4667  0621  019F               	clrf	31	;volatile
  4668                           
  4669                           ;mcc_generated_files/adc.c: 78:     ADRESL = 0x00;
  4670  0622  019B               	clrf	27	;volatile
  4671                           
  4672                           ;mcc_generated_files/adc.c: 81:     ADRESH = 0x00;
  4673  0623  019C               	clrf	28	;volatile
  4674                           
  4675                           ;mcc_generated_files/adc.c: 84:     ADCON0 = 0x01;
  4676  0624  3001               	movlw	1
  4677  0625  009D               	movwf	29	;volatile
  4678  0626  0008               	return
  4679  0627                     __end_of_ADC_Initialize:
  4680                           
  4681                           	psect	text22
  4682  05BA                     __ptext22:	
  4683 ;; *************** function _PWM3_LoadDutyValue *****************
  4684 ;; Defined at:
  4685 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  dutyValue       2    4[COMMON] unsigned short 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;		None
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  1    wreg      void 
  4692 ;; Registers used:
  4693 ;;		wreg, status,2, status,0
  4694 ;; Tracked objects:
  4695 ;;		On entry : 13/0
  4696 ;;		On exit  : 1F/C
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMMON   BANK0   BANK1
  4699 ;;      Params:         2       0       0
  4700 ;;      Locals:         0       0       0
  4701 ;;      Temps:          2       0       0
  4702 ;;      Totals:         4       0       0
  4703 ;;Total ram usage:        4 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    4
  4706 ;; This function calls:
  4707 ;;		Nothing
  4708 ;; This function is called by:
  4709 ;;		_main
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           
  4714                           ;psect for function _PWM3_LoadDutyValue
  4715  05BA                     _PWM3_LoadDutyValue:
  4716                           
  4717                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  4718                           
  4719                           ;incstack = 0
  4720                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  4721  05BA  0875               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  4722  05BB  00F7               	movwf	??_PWM3_LoadDutyValue+1
  4723  05BC  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4724  05BD  00F6               	movwf	??_PWM3_LoadDutyValue
  4725  05BE  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4726  05BF  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4727  05C0  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4728  05C1  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4729  05C2  0876               	movf	??_PWM3_LoadDutyValue,w
  4730  05C3  002C               	movlb	12	; select bank12
  4731  05C4  0098               	movwf	24	;volatile
  4732                           
  4733                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  4734  05C5  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4735  05C6  3903               	andlw	3
  4736  05C7  00F6               	movwf	??_PWM3_LoadDutyValue
  4737  05C8  3005               	movlw	5
  4738  05C9                     u1075:
  4739  05C9  35F6               	lslf	??_PWM3_LoadDutyValue,f
  4740  05CA  3EFF               	addlw	-1
  4741  05CB  1D03               	skipz
  4742  05CC  2DC9               	goto	u1075
  4743  05CD  3576               	lslf	??_PWM3_LoadDutyValue,w
  4744  05CE  0097               	movwf	23	;volatile
  4745  05CF  0008               	return
  4746  05D0                     __end_of_PWM3_LoadDutyValue:
  4747                           
  4748                           	psect	text23
  4749  05A2                     __ptext23:	
  4750 ;; *************** function _ADC_GetConversion *****************
  4751 ;; Defined at:
  4752 ;;		line 115 in file "mcc_generated_files/adc.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  channel         1    wreg     enum E2336
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  channel         1    3[COMMON] enum E2336
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  2    0[COMMON] unsigned short 
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0
  4761 ;; Tracked objects:
  4762 ;;		On entry : 1F/0
  4763 ;;		On exit  : 1F/1
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMMON   BANK0   BANK1
  4766 ;;      Params:         2       0       0
  4767 ;;      Locals:         1       0       0
  4768 ;;      Temps:          1       0       0
  4769 ;;      Totals:         4       0       0
  4770 ;;Total ram usage:        4 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    4
  4773 ;; This function calls:
  4774 ;;		Nothing
  4775 ;; This function is called by:
  4776 ;;		_main
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function _ADC_GetConversion
  4782  05A2                     _ADC_GetConversion:
  4783                           
  4784                           ;incstack = 0
  4785                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4786                           ;ADC_GetConversion@channel stored from wreg
  4787  05A2  00F3               	movwf	ADC_GetConversion@channel
  4788                           
  4789                           ;mcc_generated_files/adc.c: 115: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 116: {;mcc_generated_files/adc.c: 118:     ADCON0bits.CHS = ch
      +                          annel;
  4790  05A3  0873               	movf	ADC_GetConversion@channel,w
  4791  05A4  00F2               	movwf	??_ADC_GetConversion
  4792  05A5  0DF2               	rlf	??_ADC_GetConversion,f
  4793  05A6  0DF2               	rlf	??_ADC_GetConversion,f
  4794  05A7  0021               	movlb	1	; select bank1
  4795  05A8  081D               	movf	29,w	;volatile
  4796  05A9  0672               	xorwf	??_ADC_GetConversion,w
  4797  05AA  3983               	andlw	-125
  4798  05AB  0672               	xorwf	??_ADC_GetConversion,w
  4799  05AC  009D               	movwf	29	;volatile
  4800                           
  4801                           ;mcc_generated_files/adc.c: 121:     ADCON0bits.ADON = 1;
  4802  05AD  141D               	bsf	29,0	;volatile
  4803                           
  4804                           ;mcc_generated_files/adc.c: 124:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4805  05AE  3200               	nop2	;2 cycle nop
  4806  05AF  3200               	nop2	;2 cycle nop
  4807  05B0  0000               	nop
  4808                           
  4809                           ;mcc_generated_files/adc.c: 127:     ADCON0bits.GO_nDONE = 1;
  4810  05B1  0021               	movlb	1	; select bank1
  4811  05B2  149D               	bsf	29,1	;volatile
  4812  05B3                     l34:	
  4813                           ;mcc_generated_files/adc.c: 131:     {;mcc_generated_files/adc.c: 132:     }
  4814                           
  4815                           
  4816                           ;mcc_generated_files/adc.c: 130:     while (ADCON0bits.GO_nDONE)
  4817  05B3  189D               	btfsc	29,1	;volatile
  4818  05B4  2DB3               	goto	l34
  4819                           
  4820                           ;mcc_generated_files/adc.c: 135:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4821  05B5  081C               	movf	28,w	;volatile
  4822  05B6  00F1               	movwf	?_ADC_GetConversion+1
  4823  05B7  081B               	movf	27,w	;volatile
  4824  05B8  00F0               	movwf	?_ADC_GetConversion
  4825  05B9  0008               	return
  4826  05BA                     __end_of_ADC_GetConversion:
  4827                           
  4828                           	psect	intentry
  4829  0004                     __pintentry:	
  4830 ;; *************** function _INTERRUPT_InterruptManager *****************
  4831 ;; Defined at:
  4832 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  1    wreg      void 
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0, pclath, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMMON   BANK0   BANK1
  4846 ;;      Params:         0       0       0
  4847 ;;      Locals:         0       0       0
  4848 ;;      Temps:          0       0       0
  4849 ;;      Totals:         0       0       0
  4850 ;;Total ram usage:        0 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    3
  4853 ;; This function calls:
  4854 ;;		_TMR0_ISR
  4855 ;; This function is called by:
  4856 ;;		Interrupt level 1
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860  0004                     _INTERRUPT_InterruptManager:
  4861                           
  4862                           ;incstack = 0
  4863  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4864                           
  4865                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4866  0005  3180               	pagesel	$
  4867                           
  4868                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4869  0006  1A8B               	btfsc	11,5	;volatile
  4870  0007  1D0B               	btfss	11,2	;volatile
  4871  0008  280A               	goto	i1l197
  4872                           
  4873                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4874  0009  2639               	fcall	_TMR0_ISR
  4875  000A                     i1l197:	
  4876                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4877                           
  4878  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4879  000B  0009               	retfie
  4880  000C                     __end_of_INTERRUPT_InterruptManager:
  4881                           
  4882                           	psect	text25
  4883  0639                     __ptext25:	
  4884 ;; *************** function _TMR0_ISR *****************
  4885 ;; Defined at:
  4886 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;		None
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  1    wreg      void 
  4893 ;; Registers used:
  4894 ;;		wreg, status,2, status,0, pclath, cstack
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1
  4900 ;;      Params:         0       0       0
  4901 ;;      Locals:         0       0       0
  4902 ;;      Temps:          0       0       0
  4903 ;;      Totals:         0       0       0
  4904 ;;Total ram usage:        0 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    2
  4907 ;; This function calls:
  4908 ;;		_TMR0_CallBack
  4909 ;; This function is called by:
  4910 ;;		_INTERRUPT_InterruptManager
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           
  4915                           ;psect for function _TMR0_ISR
  4916  0639                     _TMR0_ISR:
  4917                           
  4918                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  4919                           
  4920                           ;incstack = 0
  4921                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4922  0639  110B               	bcf	11,2	;volatile
  4923                           
  4924                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  4925  063A  0020               	movlb	0	; select bank0
  4926  063B  0867               	movf	_timer0ReloadVal,w	;volatile
  4927  063C  0095               	movwf	21	;volatile
  4928                           
  4929                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
  4930  063D  25F4               	fcall	_TMR0_CallBack
  4931  063E  0008               	return
  4932  063F                     __end_of_TMR0_ISR:
  4933                           
  4934                           	psect	text26
  4935  05F4                     __ptext26:	
  4936 ;; *************** function _TMR0_CallBack *****************
  4937 ;; Defined at:
  4938 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;		None
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;		None
  4943 ;; Return value:  Size  Location     Type
  4944 ;;                  1    wreg      void 
  4945 ;; Registers used:
  4946 ;;		wreg, status,2, status,0, pclath, cstack
  4947 ;; Tracked objects:
  4948 ;;		On entry : 1F/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1
  4952 ;;      Params:         0       0       0
  4953 ;;      Locals:         0       0       0
  4954 ;;      Temps:          0       0       0
  4955 ;;      Totals:         0       0       0
  4956 ;;Total ram usage:        0 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:    1
  4959 ;; This function calls:
  4960 ;;		Absolute function
  4961 ;;		_TMR0_DefaultInterruptHandler
  4962 ;;		_timer0CallBack
  4963 ;; This function is called by:
  4964 ;;		_TMR0_ISR
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           
  4969                           ;psect for function _TMR0_CallBack
  4970  05F4                     _TMR0_CallBack:
  4971                           
  4972                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
  4973                           
  4974                           ;incstack = 0
  4975                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4976  05F4  0865               	movf	_TMR0_InterruptHandler,w
  4977  05F5  0466               	iorwf	_TMR0_InterruptHandler+1,w
  4978  05F6  1903               	btfsc	3,2
  4979  05F7  0008               	return
  4980                           
  4981                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
  4982  05F8  0866               	movf	_TMR0_InterruptHandler+1,w
  4983  05F9  008A               	movwf	10
  4984  05FA  0865               	movf	_TMR0_InterruptHandler,w
  4985  05FB  000A               	callw
  4986  05FC  3185               	pagesel	$
  4987  05FD  0008               	return
  4988  05FE                     __end_of_TMR0_CallBack:
  4989                           
  4990                           	psect	text27
  4991  064E                     __ptext27:	
  4992 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4993 ;; Defined at:
  4994 ;;		line 137 in file "mcc_generated_files/tmr0.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;		None
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      void 
  5001 ;; Registers used:
  5002 ;;		None
  5003 ;; Tracked objects:
  5004 ;;		On entry : 1F/0
  5005 ;;		On exit  : 1F/0
  5006 ;;		Unchanged: 1F/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1
  5008 ;;      Params:         0       0       0
  5009 ;;      Locals:         0       0       0
  5010 ;;      Temps:          0       0       0
  5011 ;;      Totals:         0       0       0
  5012 ;;Total ram usage:        0 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		_TMR0_Initialize
  5018 ;;		_TMR0_CallBack
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           
  5023                           ;psect for function _TMR0_DefaultInterruptHandler
  5024  064E                     _TMR0_DefaultInterruptHandler:
  5025                           
  5026                           ;incstack = 0
  5027                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5028  064E  0008               	return
  5029  064F                     __end_of_TMR0_DefaultInterruptHandler:
  5030                           
  5031                           	psect	text28
  5032  05E4                     __ptext28:	
  5033 ;; *************** function _timer0CallBack *****************
  5034 ;; Defined at:
  5035 ;;		line 117 in file "main.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2
  5044 ;; Tracked objects:
  5045 ;;		On entry : 1F/0
  5046 ;;		On exit  : 1F/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1
  5049 ;;      Params:         0       0       0
  5050 ;;      Locals:         0       0       0
  5051 ;;      Temps:          0       0       0
  5052 ;;      Totals:         0       0       0
  5053 ;;Total ram usage:        0 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_main
  5059 ;;		_TMR0_CallBack
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           
  5064                           ;psect for function _timer0CallBack
  5065  05E4                     _timer0CallBack:
  5066                           
  5067                           ;main.c: 119:     msTick++;
  5068                           
  5069                           ;incstack = 0
  5070                           ; Regs used in _timer0CallBack: [wreg+status,2]
  5071  05E4  3001               	movlw	1
  5072  05E5  07D5               	addwf	_msTick,f	;volatile
  5073  05E6  3000               	movlw	0
  5074  05E7  3DD6               	addwfc	_msTick+1,f	;volatile
  5075                           
  5076                           ;main.c: 121:     if(msTick > 200)
  5077  05E8  3000               	movlw	0
  5078  05E9  0256               	subwf	_msTick+1,w	;volatile
  5079  05EA  30C9               	movlw	201
  5080  05EB  1903               	skipnz
  5081  05EC  0255               	subwf	_msTick,w	;volatile
  5082  05ED  1C03               	skipc
  5083  05EE  0008               	return
  5084                           
  5085                           ;main.c: 122:     {;main.c: 123:         doToggle = 1;
  5086  05EF  01DA               	clrf	_doToggle
  5087  05F0  0ADA               	incf	_doToggle,f
  5088                           
  5089                           ;main.c: 124:         msTick = 0;
  5090  05F1  01D5               	clrf	_msTick	;volatile
  5091  05F2  01D6               	clrf	_msTick+1	;volatile
  5092  05F3  0008               	return
  5093  05F4                     __end_of_timer0CallBack:
  5094  007E                     btemp	set	126	;btemp
  5095  007E                     int$flags	set	126
  5096  007E                     wtemp0	set	126
  5097                           
  5098                           	psect	config
  5099                           
  5100                           ;Config register CONFIG1 @ 0x8007
  5101                           ;	Oscillator Selection bits
  5102                           ;	FOSC = INTOSC, Internal Oscillator, I/O Function on OSC1
  5103                           ;	Watchdog Timer Enable
  5104                           ;	WDTE = OFF, WDT disabled
  5105                           ;	Power-up Timer Enable
  5106                           ;	PWRTE = OFF, PWRT disabled
  5107                           ;	MCLR Pin Function Select
  5108                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  5109                           ;	Flash Program Memory Code Protection
  5110                           ;	CP = OFF, Program memory code protection is disabled
  5111                           ;	Brown-out Reset Enable
  5112                           ;	BOREN = ON, Brown-out Reset enabled
  5113                           ;	Clock Out Enable
  5114                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5115  8007                     	org	32775
  5116  8007  3FE4               	dw	16356
  5117                           
  5118                           ;Config register CONFIG2 @ 0x8008
  5119                           ;	Flash Memory Self-Write Protection
  5120                           ;	WRT = OFF, Write protection off
  5121                           ;	Stack Overflow/Underflow Reset Enable
  5122                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5123                           ;	Brown-out Reset Voltage Selection
  5124                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5125                           ;	Low-Power Brown Out Reset
  5126                           ;	LPBOR = OFF, Low-Power BOR is disabled
  5127                           ;	Low-Voltage Programming Enable
  5128                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  5129  8008                     	org	32776
  5130  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        9
    BSS         20
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      72
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 32
		 -> writeFlash@wrBlockData(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_writeFlash
    _writeFlash->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setState->___lldiv
    _readFlash->_FLASH_ReadWord
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PWM3_LoadDutyValue->_ADC_GetConversion

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_writeFlash

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    3945
                                             32 BANK0      8     8      0
                  _ADC_GetConversion
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___aldiv
                             ___lmul
              _setLedsForPositioning
                           _setState
                         _writeFlash
 ---------------------------------------------------------------------------------
 (1) _writeFlash                                          33    33      0    1152
                                             13 COMMON     1     1      0
                                              0 BANK0     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                    10     7      3     812
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     220
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setState                                             5     5      0    1059
                                              0 BANK0      5     5      0
                            ___lldiv
                             ___tmul
                          _readFlash
 ---------------------------------------------------------------------------------
 (2) _readFlash                                            4     4      0     435
                                              3 COMMON     4     4      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     435
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _setLedsForPositioning                                4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     452
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     196
                                              4 COMMON     4     2      2
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _PWM3_LoadDutyValue
     _ADC_GetConversion (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___aldiv
     ___lmul (ARG)
   ___lmul
   _setLedsForPositioning
   _setState
     ___lldiv
     ___tmul
     _readFlash
       _FLASH_ReadWord
   _writeFlash
     _FLASH_EraseBlock
     _FLASH_WriteBlock
       _FLASH_EraseBlock

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      56       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      56       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Sep 16 13:07:09 2020

                                       _b 0050                                         _m 005C  
                                      l34 05B3                           _timer0ReloadVal 0067  
          __size_of_setLedsForPositioning 0138             __end_of_setLedsForPositioning 02B8  
                                     l332 032F                                       l325 02DE  
                                     l503 02B3                                       l423 019B  
                                     l335 0332                                       l433 01BE  
                                     l443 01E0                                       l427 01AC  
                                     l355 006F                                       l508 02B6  
                                     l453 0201                                       l437 01CF  
                                     l381 0128                                       l463 0222  
                                     l447 01F0                                       l391 0157  
                                     l375 010A                                       l359 0078  
                                     l473 0250                                       l457 0211  
                                     l393 0161                                       l377 0114  
                                     l643 0361                                       l483 0271  
                                     l387 0143                                       l379 011E  
                                     l493 0292                                       l469 0240  
                                     l389 014D                                       l479 0261  
                                     l489 0282                                       l499 02A3  
                                     _PR2 001B                                       u905 044A  
                                     u935 03E6                                       u945 041D  
                                     u965 051E                                       u975 0524  
                         _TMR2_Initialize 060F                                       wreg 0009  
                             main@channel 0060            FLASH_WriteBlock@flashWordArray 0075  
                                    l2012 00FC                                      l2004 0095  
                                    l2006 00A8                                      l2016 0132  
                                    l2008 00AA                                      l2120 009D  
                                    l2122 0174                                      l2018 0135  
                                    l2026 016C                                      l2124 033E  
                                    l1712 0456                                      l1750 0515  
                                    l1832 02D6                                      l1770 04AC  
                                    l1754 051D                                      l1826 02CB  
                                    l1924 0382                                      l1916 0372  
                                    l1860 01C0                                      l1844 0335  
                                    l1942 03C9                                      l1934 03B0  
                                    l1926 0390                                      l1870 0214  
                                    l1862 01D2                                      l1782 04D7  
                                    l1846 0349                                      l1838 02F6  
                                    l1880 0253                                      l1872 0224  
                                    l1864 01E2                                      l1856 019D  
                                    l1768 049E                                      l1938 03BB  
                                    l1890 02A5                                      l1882 0263  
                                    l1866 01F3                                      l1858 01AF  
                                    l1778 04CC                                      l1962 002A  
                                    l1884 0274                                      l1876 0232  
                                    l1868 0203                                      l1972 0043  
                                    l1894 04E8                                      l1886 0284  
                                    l1878 0242                                      l1990 007B  
                                    l1974 0057                                      l1966 0031  
                                    l1888 0295                                      l1992 007E  
                                    l1984 0072                                      l1898 04F2  
                                    l1986 0074                                      l1996 0089  
                                    u1005 04A1                                      u1025 04AD  
                                    u1105 02EC                                      u1035 04C1  
                                    u1045 04CD                                      u1305 04F3  
                                    u1075 05C9                                      u1315 04FA  
                                    u1405 03B1                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u1600 0126                                      u1620 0130  
                                    u1540 0108                                      u1365 0385  
                                    u1710 015F                                      u1560 0112  
                                    u1385 0391                                      u1730 0169  
                                    u1650 0141                                      u1395 03A5  
                                    u1580 011C                                      u1670 014B  
                                    u1690 0155                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                                      _main 0020  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                         ?_FLASH_WriteBlock 0073  
                                    start 000C                        ??_FLASH_WriteBlock 0076  
                 __end_of_TMR0_Initialize 05E4            ??_TMR0_DefaultInterruptHandler 0070  
          __size_of_OSCILLATOR_Initialize 0006             __end_of_OSCILLATOR_Initialize 0639  
                         __end_of___aldiv 03D2                                     ?_main 0070  
                         __end_of___lldiv 04E0                                     _T2CON 001C  
                                   i1l197 000A                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
       __size_of_TMR0_SetInterruptHandler 0005                       ___lmul@multiplicand 0074  
               ?_TMR0_SetInterruptHandler 0070                          __end_of_TMR0_ISR 063F  
                          _WDT_Initialize 0648                   __end_of_PWM3_Initialize 061F  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 064C  
                         __initialization 000D                              __end_of_main 0180  
                 __end_of_TMR2_Initialize 0617               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 0040                     writeFlash@wrBlockData 0020  
                 __size_of_FLASH_ReadWord 0019                    __end_of_WDT_Initialize 064C  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADCON2 009F                 FLASH_WriteBlock@writeAddr 0073  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                                  _BORCON 0116                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
               __size_of_FLASH_EraseBlock 001C                                    _OSCCON 0099  
                                  _WDTCON 0097                                    ___lmul 04E0  
             __size_of_PWM3_LoadDutyValue 0016                                 ??___aldiv 007C  
                                  ___tmul 050F                                 ??___lldiv 0078  
                                  _msTick 0055                          ?_TMR0_Initialize 0070  
                        __end_of_setState 0351                   FLASH_ReadWord@flashAddr 0070  
                         ?_WDT_Initialize 0070                  ADC_GetConversion@channel 0073  
                   __end_of_TMR0_CallBack 05FE                   __end_of_TMR2_StartTimer 064E  
TMR0_SetInterruptHandler@InterruptHandler 0070                          ?_PWM3_Initialize 0070  
                       _SYSTEM_Initialize 0607                   __end_of__initialization 001D  
                      ?_SYSTEM_Initialize 0070                          _fixedPointFactor 0644  
                          __pcstackCOMMON 0070                   __size_of_timer0CallBack 0010  
                            __pidataBANK0 05FE                       ??_SYSTEM_Initialize 0073  
                               ?_TMR0_ISR 0070                          ?_TMR2_Initialize 0070  
                          _OPTION_REGbits 0095               FLASH_WriteBlock@GIEBitValue 007B  
               __end_of_SYSTEM_Initialize 060F                                __pbssBANK0 0048  
                      __size_of_readFlash 0068                                __pmaintext 0020  
        __end_of_TMR0_SetInterruptHandler 0644                                   ?___lmul 0070  
                                 ?___tmul 0070                                ??_TMR0_ISR 0070  
                              __pintentry 0004                            ___lmul@product 0078  
               __size_of_FLASH_WriteBlock 0054                   __size_of_ADC_Initialize 0008  
                          _FLASH_ReadWord 0571                     _setLedsForPositioning 0180  
                                 _PWM3DCH 0618                                   _PWM3DCL 0617  
                                 _PWM3CON 0619                          ?_TMR2_StartTimer 0070  
                        _FLASH_EraseBlock 0555                      _ADC_InterruptHandler 0057  
                               ?_setState 0070                                   ___aldiv 0351  
                         __size_of___lmul 002F                           __size_of___tmul 0026  
                                 ___lldiv 048E                    __end_of_FLASH_ReadWord 058A  
                                 __ptext1 0535                                   __ptext2 043A  
                                 __ptext3 0555                                   __ptext4 02B8  
                                 __ptext5 03D2                                   __ptext6 0571  
                                 __ptext7 050F                                   __ptext8 048E  
                                 __ptext9 0180                         __end_of_readFlash 043A  
                   _OSCILLATOR_Initialize 0633                                 _T2CONbits 001C  
                        ___aldiv@dividend 0024                  ??_PIN_MANAGER_Initialize 0070  
              __size_of_SYSTEM_Initialize 0008                                   clrloop0 062E  
                    end_of_initialization 001D                                   init_ram 0627  
                                 initloop 0628                                _lowerLimit 0048  
                         ___lldiv@divisor 0070                           ___lldiv@counter 007D  
                              ??_setState 0020                            _timer0CallBack 05E4  
                        ___aldiv@quotient 002A                 FLASH_ReadWord@GIEBitValue 0072  
                         ?_FLASH_ReadWord 0070                          ??_WDT_Initialize 0070  
                _TMR0_SetInterruptHandler 063F                                 _PORTAbits 000C  
                  ?_setLedsForPositioning 0070                  __end_of_fixedPointFactor 0648  
                              _upperLimit 0061                    __end_of_timer0CallBack 05F4  
              __end_of_PWM3_LoadDutyValue 05D0                         FLASH_WriteBlock@i 007C  
                              _writeFlash 0535                            __end_of___lmul 050F  
                          __end_of___tmul 0535                         __size_of_TMR0_ISR 0006  
                          _ADC_Initialize 061F                          _FLASH_WriteBlock 043A  
                  ?_OSCILLATOR_Initialize 0070                       start_initialization 000D  
                __size_of_TMR0_Initialize 0014           __size_of_PIN_MANAGER_Initialize 0018  
                         ?_timer0CallBack 0070                  __size_of_PWM3_Initialize 0008  
                                ??___lmul 0078                                  ??___tmul 0076  
                  __size_of_TMR0_CallBack 000A                    __end_of_ADC_Initialize 0627  
                             __pdataBANK0 005C               FLASH_EraseBlock@GIEBitValue 0072  
                __end_of_FLASH_EraseBlock 0571                            ___tmul@product 0076  
                               ___latbits 0000                             __pcstackBANK0 0020  
                __size_of_TMR2_Initialize 0008                          setState@newState 0024  
                            _currentState 0059                     _TMR0_InterruptHandler 0065  
                               __pnvBANK0 0065                    _PIN_MANAGER_Initialize 058A  
                                ?___aldiv 0020                         __size_of_setState 0099  
                                ?___lldiv 0070                               ?_writeFlash 0070  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0070  
                               _readFlash 03D2                             _TMR0_CallBack 05F4  
                               _msPressed 0053                          _adcValuePosition 004C  
          FLASH_WriteBlock@blockStartAddr 0079                           ___aldiv@divisor 0020  
                       ??_TMR0_Initialize 0072                           ___aldiv@counter 0028  
                                _LATBbits 010D                                  _LATCbits 010E  
                               clear_ram0 062D                  __size_of_TMR2_StartTimer 0002  
     __size_of_INTERRUPT_InterruptManager 0008                ??_TMR0_SetInterruptHandler 0072  
                                _PIR1bits 0011                 FLASH_EraseBlock@startAddr 0070  
                        ??_FLASH_ReadWord 0072                                  _TMR0_ISR 0639  
                 ??_setLedsForPositioning 0074                         ??_PWM3_Initialize 0070  
                              _ADCON0bits 009D                       ___tmul@multiplicand 0073  
                              ?_readFlash 0070                            ?_TMR0_CallBack 0070  
                       ___lmul@multiplier 0070                       __size_of_writeFlash 0020  
                       ??_TMR2_Initialize 0070                  __end_of_FLASH_WriteBlock 048E  
           setLedsForPositioning@adcValue 0070                         _ADC_GetConversion 05A2  
                 ??_OSCILLATOR_Initialize 0070                        ?_ADC_GetConversion 0070  
                        __size_of___aldiv 0081                          __size_of___lldiv 0052  
                      _PWM3_LoadDutyValue 05BA                       ??_ADC_GetConversion 0072  
                                _doToggle 005A                                  __ptext10 04E0  
                                __ptext11 0351                                  __ptext20 0633  
                                __ptext12 064C                                  __ptext21 061F  
                                __ptext13 0607                                  __ptext22 05BA  
                                __ptext14 0648                                  __ptext23 05A2  
                                __ptext15 060F                                  __ptext16 05D0  
                                __ptext25 0639                                  __ptext17 063F  
                                __ptext26 05F4                                  __ptext18 0617  
                                __ptext27 064E                                  __ptext19 058A  
                                __ptext28 05E4                       ?_PWM3_LoadDutyValue 0074  
                        ??_timer0CallBack 0070                             __size_of_main 0160  
    __end_of_TMR0_DefaultInterruptHandler 064F     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 064E                 __end_of_ADC_GetConversion 05BA  
                                _setState 02B8                      ??_PWM3_LoadDutyValue 0076  
                                int$flags 007E                         ??_TMR2_StartTimer 0070  
      __end_of_INTERRUPT_InterruptManager 000C                _INTERRUPT_InterruptManager 0004  
                       ?_FLASH_EraseBlock 0070                        ??_FLASH_EraseBlock 0072  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0070  
                             ??_readFlash 0073                   __size_of_WDT_Initialize 0004  
                                intlevel1 0000                            _doButtonAction 005B  
                              _PMCON1bits 0195                          ___lldiv@dividend 0074  
                 ?_PIN_MANAGER_Initialize 0070                          ??_ADC_Initialize 0070  
           ?_TMR0_DefaultInterruptHandler 0070                              ??_writeFlash 007D  
                       ___tmul@multiplier 0070               PWM3_LoadDutyValue@dutyValue 0074  
                           __pstringtext1 0644                                _OPTION_REG 0095  
                        ___lldiv@quotient 0079                           _TMR0_Initialize 05D0  
                            ___aldiv@sign 0029            __end_of_PIN_MANAGER_Initialize 05A2  
                      __end_of_writeFlash 0555                __size_of_ADC_GetConversion 0018  
                         _PWM3_Initialize 0617  
