

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Sep 15 15:35:08 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F1507
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F1507 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0197                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0391                     	;# 
   145  0392                     	;# 
   146  0393                     	;# 
   147  0394                     	;# 
   148  0395                     	;# 
   149  0396                     	;# 
   150  0498                     	;# 
   151  0498                     	;# 
   152  0499                     	;# 
   153  049A                     	;# 
   154  049B                     	;# 
   155  049B                     	;# 
   156  049C                     	;# 
   157  049D                     	;# 
   158  049E                     	;# 
   159  049F                     	;# 
   160  0611                     	;# 
   161  0612                     	;# 
   162  0613                     	;# 
   163  0613                     	;# 
   164  0614                     	;# 
   165  0615                     	;# 
   166  0616                     	;# 
   167  0616                     	;# 
   168  0617                     	;# 
   169  0618                     	;# 
   170  0619                     	;# 
   171  0619                     	;# 
   172  061A                     	;# 
   173  061B                     	;# 
   174  061C                     	;# 
   175  061C                     	;# 
   176  0691                     	;# 
   177  0692                     	;# 
   178  0693                     	;# 
   179  0694                     	;# 
   180  0695                     	;# 
   181  0F0F                     	;# 
   182  0F10                     	;# 
   183  0F11                     	;# 
   184  0F12                     	;# 
   185  0F13                     	;# 
   186  0F14                     	;# 
   187  0F15                     	;# 
   188  0F16                     	;# 
   189  0F17                     	;# 
   190  0F18                     	;# 
   191  0F19                     	;# 
   192  0F1A                     	;# 
   193  0F1B                     	;# 
   194  0F1C                     	;# 
   195  0F1D                     	;# 
   196  0F1E                     	;# 
   197  0F1F                     	;# 
   198  0FE3                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0015                     	;# 
   229  0016                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001C                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0097                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  0116                     	;# 
   258  0117                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0194                     	;# 
   269  0195                     	;# 
   270  0196                     	;# 
   271  0197                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0613                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0616                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  0619                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061C                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0F0F                     	;# 
   312  0F10                     	;# 
   313  0F11                     	;# 
   314  0F12                     	;# 
   315  0F13                     	;# 
   316  0F14                     	;# 
   317  0F15                     	;# 
   318  0F16                     	;# 
   319  0F17                     	;# 
   320  0F18                     	;# 
   321  0F19                     	;# 
   322  0F1A                     	;# 
   323  0F1B                     	;# 
   324  0F1C                     	;# 
   325  0F1D                     	;# 
   326  0F1E                     	;# 
   327  0F1F                     	;# 
   328  0FE3                     	;# 
   329  0FE4                     	;# 
   330  0FE5                     	;# 
   331  0FE6                     	;# 
   332  0FE7                     	;# 
   333  0FE8                     	;# 
   334  0FE9                     	;# 
   335  0FEA                     	;# 
   336  0FEB                     	;# 
   337  0FED                     	;# 
   338  0FEE                     	;# 
   339  0FEF                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  011D                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  020C                     	;# 
   403  020D                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  0394                     	;# 
   408  0395                     	;# 
   409  0396                     	;# 
   410  0498                     	;# 
   411  0498                     	;# 
   412  0499                     	;# 
   413  049A                     	;# 
   414  049B                     	;# 
   415  049B                     	;# 
   416  049C                     	;# 
   417  049D                     	;# 
   418  049E                     	;# 
   419  049F                     	;# 
   420  0611                     	;# 
   421  0612                     	;# 
   422  0613                     	;# 
   423  0613                     	;# 
   424  0614                     	;# 
   425  0615                     	;# 
   426  0616                     	;# 
   427  0616                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0FE3                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0013                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  008C                     	;# 
   498  008D                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0099                     	;# 
   507  009A                     	;# 
   508  009B                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  020C                     	;# 
   533  020D                     	;# 
   534  0391                     	;# 
   535  0392                     	;# 
   536  0393                     	;# 
   537  0394                     	;# 
   538  0395                     	;# 
   539  0396                     	;# 
   540  0498                     	;# 
   541  0498                     	;# 
   542  0499                     	;# 
   543  049A                     	;# 
   544  049B                     	;# 
   545  049B                     	;# 
   546  049C                     	;# 
   547  049D                     	;# 
   548  049E                     	;# 
   549  049F                     	;# 
   550  0611                     	;# 
   551  0612                     	;# 
   552  0613                     	;# 
   553  0613                     	;# 
   554  0614                     	;# 
   555  0615                     	;# 
   556  0616                     	;# 
   557  0616                     	;# 
   558  0617                     	;# 
   559  0618                     	;# 
   560  0619                     	;# 
   561  0619                     	;# 
   562  061A                     	;# 
   563  061B                     	;# 
   564  061C                     	;# 
   565  061C                     	;# 
   566  0691                     	;# 
   567  0692                     	;# 
   568  0693                     	;# 
   569  0694                     	;# 
   570  0695                     	;# 
   571  0F0F                     	;# 
   572  0F10                     	;# 
   573  0F11                     	;# 
   574  0F12                     	;# 
   575  0F13                     	;# 
   576  0F14                     	;# 
   577  0F15                     	;# 
   578  0F16                     	;# 
   579  0F17                     	;# 
   580  0F18                     	;# 
   581  0F19                     	;# 
   582  0F1A                     	;# 
   583  0F1B                     	;# 
   584  0F1C                     	;# 
   585  0F1D                     	;# 
   586  0F1E                     	;# 
   587  0F1F                     	;# 
   588  0FE3                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0013                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  009F                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  020C                     	;# 
   663  020D                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0498                     	;# 
   671  0498                     	;# 
   672  0499                     	;# 
   673  049A                     	;# 
   674  049B                     	;# 
   675  049B                     	;# 
   676  049C                     	;# 
   677  049D                     	;# 
   678  049E                     	;# 
   679  049F                     	;# 
   680  0611                     	;# 
   681  0612                     	;# 
   682  0613                     	;# 
   683  0613                     	;# 
   684  0614                     	;# 
   685  0615                     	;# 
   686  0616                     	;# 
   687  0616                     	;# 
   688  0617                     	;# 
   689  0618                     	;# 
   690  0619                     	;# 
   691  0619                     	;# 
   692  061A                     	;# 
   693  061B                     	;# 
   694  061C                     	;# 
   695  061C                     	;# 
   696  0691                     	;# 
   697  0692                     	;# 
   698  0693                     	;# 
   699  0694                     	;# 
   700  0695                     	;# 
   701  0F0F                     	;# 
   702  0F10                     	;# 
   703  0F11                     	;# 
   704  0F12                     	;# 
   705  0F13                     	;# 
   706  0F14                     	;# 
   707  0F15                     	;# 
   708  0F16                     	;# 
   709  0F17                     	;# 
   710  0F18                     	;# 
   711  0F19                     	;# 
   712  0F1A                     	;# 
   713  0F1B                     	;# 
   714  0F1C                     	;# 
   715  0F1D                     	;# 
   716  0F1E                     	;# 
   717  0F1F                     	;# 
   718  0FE3                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0011                     	;# 
   746  0012                     	;# 
   747  0013                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0093                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  0116                     	;# 
   778  0117                     	;# 
   779  011D                     	;# 
   780  018C                     	;# 
   781  018D                     	;# 
   782  018E                     	;# 
   783  0191                     	;# 
   784  0191                     	;# 
   785  0192                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0197                     	;# 
   792  020C                     	;# 
   793  020D                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0498                     	;# 
   801  0498                     	;# 
   802  0499                     	;# 
   803  049A                     	;# 
   804  049B                     	;# 
   805  049B                     	;# 
   806  049C                     	;# 
   807  049D                     	;# 
   808  049E                     	;# 
   809  049F                     	;# 
   810  0611                     	;# 
   811  0612                     	;# 
   812  0613                     	;# 
   813  0613                     	;# 
   814  0614                     	;# 
   815  0615                     	;# 
   816  0616                     	;# 
   817  0616                     	;# 
   818  0617                     	;# 
   819  0618                     	;# 
   820  0619                     	;# 
   821  0619                     	;# 
   822  061A                     	;# 
   823  061B                     	;# 
   824  061C                     	;# 
   825  061C                     	;# 
   826  0691                     	;# 
   827  0692                     	;# 
   828  0693                     	;# 
   829  0694                     	;# 
   830  0695                     	;# 
   831  0F0F                     	;# 
   832  0F10                     	;# 
   833  0F11                     	;# 
   834  0F12                     	;# 
   835  0F13                     	;# 
   836  0F14                     	;# 
   837  0F15                     	;# 
   838  0F16                     	;# 
   839  0F17                     	;# 
   840  0F18                     	;# 
   841  0F19                     	;# 
   842  0F1A                     	;# 
   843  0F1B                     	;# 
   844  0F1C                     	;# 
   845  0F1D                     	;# 
   846  0F1E                     	;# 
   847  0F1F                     	;# 
   848  0FE3                     	;# 
   849  0FE4                     	;# 
   850  0FE5                     	;# 
   851  0FE6                     	;# 
   852  0FE7                     	;# 
   853  0FE8                     	;# 
   854  0FE9                     	;# 
   855  0FEA                     	;# 
   856  0FEB                     	;# 
   857  0FED                     	;# 
   858  0FEE                     	;# 
   859  0FEF                     	;# 
   860  0000                     	;# 
   861  0001                     	;# 
   862  0002                     	;# 
   863  0003                     	;# 
   864  0004                     	;# 
   865  0005                     	;# 
   866  0006                     	;# 
   867  0007                     	;# 
   868  0008                     	;# 
   869  0009                     	;# 
   870  000A                     	;# 
   871  000B                     	;# 
   872  000C                     	;# 
   873  000D                     	;# 
   874  000E                     	;# 
   875  0011                     	;# 
   876  0012                     	;# 
   877  0013                     	;# 
   878  0015                     	;# 
   879  0016                     	;# 
   880  0016                     	;# 
   881  0017                     	;# 
   882  0018                     	;# 
   883  0019                     	;# 
   884  001A                     	;# 
   885  001B                     	;# 
   886  001C                     	;# 
   887  008C                     	;# 
   888  008D                     	;# 
   889  008E                     	;# 
   890  0091                     	;# 
   891  0092                     	;# 
   892  0093                     	;# 
   893  0095                     	;# 
   894  0096                     	;# 
   895  0097                     	;# 
   896  0099                     	;# 
   897  009A                     	;# 
   898  009B                     	;# 
   899  009B                     	;# 
   900  009C                     	;# 
   901  009D                     	;# 
   902  009E                     	;# 
   903  009F                     	;# 
   904  010C                     	;# 
   905  010D                     	;# 
   906  010E                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  011D                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  0191                     	;# 
   914  0191                     	;# 
   915  0192                     	;# 
   916  0193                     	;# 
   917  0193                     	;# 
   918  0194                     	;# 
   919  0195                     	;# 
   920  0196                     	;# 
   921  0197                     	;# 
   922  020C                     	;# 
   923  020D                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0498                     	;# 
   931  0498                     	;# 
   932  0499                     	;# 
   933  049A                     	;# 
   934  049B                     	;# 
   935  049B                     	;# 
   936  049C                     	;# 
   937  049D                     	;# 
   938  049E                     	;# 
   939  049F                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0613                     	;# 
   944  0614                     	;# 
   945  0615                     	;# 
   946  0616                     	;# 
   947  0616                     	;# 
   948  0617                     	;# 
   949  0618                     	;# 
   950  0619                     	;# 
   951  0619                     	;# 
   952  061A                     	;# 
   953  061B                     	;# 
   954  061C                     	;# 
   955  061C                     	;# 
   956  0691                     	;# 
   957  0692                     	;# 
   958  0693                     	;# 
   959  0694                     	;# 
   960  0695                     	;# 
   961  0F0F                     	;# 
   962  0F10                     	;# 
   963  0F11                     	;# 
   964  0F12                     	;# 
   965  0F13                     	;# 
   966  0F14                     	;# 
   967  0F15                     	;# 
   968  0F16                     	;# 
   969  0F17                     	;# 
   970  0F18                     	;# 
   971  0F19                     	;# 
   972  0F1A                     	;# 
   973  0F1B                     	;# 
   974  0F1C                     	;# 
   975  0F1D                     	;# 
   976  0F1E                     	;# 
   977  0F1F                     	;# 
   978  0FE3                     	;# 
   979  0FE4                     	;# 
   980  0FE5                     	;# 
   981  0FE6                     	;# 
   982  0FE7                     	;# 
   983  0FE8                     	;# 
   984  0FE9                     	;# 
   985  0FEA                     	;# 
   986  0FEB                     	;# 
   987  0FED                     	;# 
   988  0FEE                     	;# 
   989  0FEF                     	;# 
   990  0000                     	;# 
   991  0001                     	;# 
   992  0002                     	;# 
   993  0003                     	;# 
   994  0004                     	;# 
   995  0005                     	;# 
   996  0006                     	;# 
   997  0007                     	;# 
   998  0008                     	;# 
   999  0009                     	;# 
  1000  000A                     	;# 
  1001  000B                     	;# 
  1002  000C                     	;# 
  1003  000D                     	;# 
  1004  000E                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010E                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018E                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0197                     	;# 
  1052  020C                     	;# 
  1053  020D                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0394                     	;# 
  1058  0395                     	;# 
  1059  0396                     	;# 
  1060  0498                     	;# 
  1061  0498                     	;# 
  1062  0499                     	;# 
  1063  049A                     	;# 
  1064  049B                     	;# 
  1065  049B                     	;# 
  1066  049C                     	;# 
  1067  049D                     	;# 
  1068  049E                     	;# 
  1069  049F                     	;# 
  1070  0611                     	;# 
  1071  0612                     	;# 
  1072  0613                     	;# 
  1073  0613                     	;# 
  1074  0614                     	;# 
  1075  0615                     	;# 
  1076  0616                     	;# 
  1077  0616                     	;# 
  1078  0617                     	;# 
  1079  0618                     	;# 
  1080  0619                     	;# 
  1081  0619                     	;# 
  1082  061A                     	;# 
  1083  061B                     	;# 
  1084  061C                     	;# 
  1085  061C                     	;# 
  1086  0691                     	;# 
  1087  0692                     	;# 
  1088  0693                     	;# 
  1089  0694                     	;# 
  1090  0695                     	;# 
  1091  0F0F                     	;# 
  1092  0F10                     	;# 
  1093  0F11                     	;# 
  1094  0F12                     	;# 
  1095  0F13                     	;# 
  1096  0F14                     	;# 
  1097  0F15                     	;# 
  1098  0F16                     	;# 
  1099  0F17                     	;# 
  1100  0F18                     	;# 
  1101  0F19                     	;# 
  1102  0F1A                     	;# 
  1103  0F1B                     	;# 
  1104  0F1C                     	;# 
  1105  0F1D                     	;# 
  1106  0F1E                     	;# 
  1107  0F1F                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0013                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0093                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0099                     	;# 
  1157  009A                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  011D                     	;# 
  1170  018C                     	;# 
  1171  018D                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0194                     	;# 
  1179  0195                     	;# 
  1180  0196                     	;# 
  1181  0197                     	;# 
  1182  020C                     	;# 
  1183  020D                     	;# 
  1184  0391                     	;# 
  1185  0392                     	;# 
  1186  0393                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  0498                     	;# 
  1191  0498                     	;# 
  1192  0499                     	;# 
  1193  049A                     	;# 
  1194  049B                     	;# 
  1195  049B                     	;# 
  1196  049C                     	;# 
  1197  049D                     	;# 
  1198  049E                     	;# 
  1199  049F                     	;# 
  1200  0611                     	;# 
  1201  0612                     	;# 
  1202  0613                     	;# 
  1203  0613                     	;# 
  1204  0614                     	;# 
  1205  0615                     	;# 
  1206  0616                     	;# 
  1207  0616                     	;# 
  1208  0617                     	;# 
  1209  0618                     	;# 
  1210  0619                     	;# 
  1211  0619                     	;# 
  1212  061A                     	;# 
  1213  061B                     	;# 
  1214  061C                     	;# 
  1215  061C                     	;# 
  1216  0691                     	;# 
  1217  0692                     	;# 
  1218  0693                     	;# 
  1219  0694                     	;# 
  1220  0695                     	;# 
  1221  0F0F                     	;# 
  1222  0F10                     	;# 
  1223  0F11                     	;# 
  1224  0F12                     	;# 
  1225  0F13                     	;# 
  1226  0F14                     	;# 
  1227  0F15                     	;# 
  1228  0F16                     	;# 
  1229  0F17                     	;# 
  1230  0F18                     	;# 
  1231  0F19                     	;# 
  1232  0F1A                     	;# 
  1233  0F1B                     	;# 
  1234  0F1C                     	;# 
  1235  0F1D                     	;# 
  1236  0F1E                     	;# 
  1237  0F1F                     	;# 
  1238  0FE3                     	;# 
  1239  0FE4                     	;# 
  1240  0FE5                     	;# 
  1241  0FE6                     	;# 
  1242  0FE7                     	;# 
  1243  0FE8                     	;# 
  1244  0FE9                     	;# 
  1245  0FEA                     	;# 
  1246  0FEB                     	;# 
  1247  0FED                     	;# 
  1248  0FEE                     	;# 
  1249  0FEF                     	;# 
  1250                           
  1251                           	psect	idataBANK0
  1252  05F1                     __pidataBANK0:
  1253                           
  1254                           ;initializer for _m
  1255  05F1  34E8               	retlw	232
  1256  05F2  3403               	retlw	3
  1257  05F3  3400               	retlw	0
  1258  05F4  3400               	retlw	0
  1259                           
  1260                           ;initializer for main@channel
  1261  05F5  340A               	retlw	10
  1262                           
  1263                           ;initializer for _upperLimit
  1264  05F6  34FF               	retlw	255
  1265  05F7  3403               	retlw	3
  1266  05F8  3400               	retlw	0
  1267  05F9  3400               	retlw	0
  1268                           
  1269                           	psect	stringtext1
  1270  0637                     __pstringtext1:
  1271  0637                     _fixedPointFactor:
  1272  0637  34E8               	retlw	232
  1273  0638  3403               	retlw	3
  1274  0639  3400               	retlw	0
  1275  063A  3400               	retlw	0
  1276  063B                     __end_of_fixedPointFactor:
  1277                           
  1278                           	psect	nvBANK0
  1279  0065                     __pnvBANK0:
  1280  0065                     _TMR0_InterruptHandler:
  1281  0065                     	ds	2
  1282  0067                     _timer0ReloadVal:
  1283  0067                     	ds	1
  1284  000C                     _PORTAbits	set	12
  1285  000B                     _INTCONbits	set	11
  1286  0015                     _TMR0	set	21
  1287  001C                     _T2CONbits	set	28
  1288  001C                     _T2CON	set	28
  1289  0011                     _PIR1bits	set	17
  1290  001A                     _TMR2	set	26
  1291  001B                     _PR2	set	27
  1292  0095                     _OPTION_REG	set	149
  1293  0095                     _OPTION_REGbits	set	149
  1294  008E                     _TRISC	set	142
  1295  008D                     _TRISB	set	141
  1296  008C                     _TRISA	set	140
  1297  0097                     _WDTCON	set	151
  1298  0099                     _OSCCON	set	153
  1299  009D                     _ADCON0bits	set	157
  1300  009D                     _ADCON0	set	157
  1301  009C                     _ADRESH	set	156
  1302  009B                     _ADRESL	set	155
  1303  009F                     _ADCON2	set	159
  1304  009E                     _ADCON1	set	158
  1305  010D                     _LATBbits	set	269
  1306  010E                     _LATCbits	set	270
  1307  011D                     _APFCON	set	285
  1308  010E                     _LATC	set	270
  1309  010D                     _LATB	set	269
  1310  010C                     _LATA	set	268
  1311  0116                     _BORCON	set	278
  1312  0196                     _PMCON2	set	406
  1313  0193                     _PMDATL	set	403
  1314  0194                     _PMDATH	set	404
  1315  0195                     _PMCON1bits	set	405
  1316  0192                     _PMADRH	set	402
  1317  0191                     _PMADRL	set	401
  1318  018C                     _ANSELA	set	396
  1319  018D                     _ANSELB	set	397
  1320  018E                     _ANSELC	set	398
  1321  020C                     _WPUA	set	524
  1322  020D                     _WPUB	set	525
  1323  0617                     _PWM3DCL	set	1559
  1324  0618                     _PWM3DCH	set	1560
  1325  0619                     _PWM3CON	set	1561
  1326                           
  1327                           	psect	cinit
  1328  000D                     start_initialization:	
  1329                           ; #config settings
  1330                           
  1331  000D                     __initialization:
  1332                           
  1333                           ; Initialize objects allocated to BANK0
  1334  000D  30F1               	movlw	low __pidataBANK0
  1335  000E  0084               	movwf	4
  1336  000F  3085               	movlw	(high __pidataBANK0)| (0+128)
  1337  0010  0085               	movwf	5
  1338  0011  305C               	movlw	low __pdataBANK0
  1339  0012  0086               	movwf	6
  1340  0013  3000               	movlw	high __pdataBANK0
  1341  0014  0087               	movwf	7
  1342  0015  3009               	movlw	9
  1343  0016  261A               	fcall	init_ram
  1344                           
  1345                           ; Clear objects allocated to BANK0
  1346  0017  3048               	movlw	low __pbssBANK0
  1347  0018  0084               	movwf	4
  1348  0019  3000               	movlw	high __pbssBANK0
  1349  001A  0085               	movwf	5
  1350  001B  3014               	movlw	20
  1351  001C  2620               	fcall	clear_ram0
  1352  001D                     end_of_initialization:	
  1353                           ;End of C runtime variable initialization code
  1354                           
  1355  001D                     __end_of__initialization:
  1356  001D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1357  001E  0020               	movlb	0
  1358  001F  2820               	ljmp	_main	;jump to C main() function
  1359                           
  1360                           	psect	bssBANK0
  1361  0048                     __pbssBANK0:
  1362  0048                     _lowerLimit:
  1363  0048                     	ds	4
  1364  004C                     _adcValuePosition:
  1365  004C                     	ds	4
  1366  0050                     _b:
  1367  0050                     	ds	3
  1368  0053                     _msPressed:
  1369  0053                     	ds	2
  1370  0055                     _msTick:
  1371  0055                     	ds	2
  1372  0057                     _ADC_InterruptHandler:
  1373  0057                     	ds	2
  1374  0059                     _currentState:
  1375  0059                     	ds	1
  1376  005A                     _doToggle:
  1377  005A                     	ds	1
  1378  005B                     _doButtonAction:
  1379  005B                     	ds	1
  1380                           
  1381                           	psect	dataBANK0
  1382  005C                     __pdataBANK0:
  1383  005C                     _m:
  1384  005C                     	ds	4
  1385  0060                     main@channel:
  1386  0060                     	ds	1
  1387  0061                     _upperLimit:
  1388  0061                     	ds	4
  1389                           
  1390                           	psect	inittext
  1391  061A                     init_ram:
  1392  061A  00FE               	movwf	126
  1393  061B                     initloop:
  1394  061B  0012               	moviw fsr0++
  1395  061C  001E               	movwi fsr1++
  1396  061D  0BFE               	decfsz	126,f
  1397  061E  2E1B               	goto	initloop
  1398  061F  3400               	retlw	0
  1399                           
  1400                           	psect	clrtext
  1401  0620                     clear_ram0:	
  1402                           ;	Called with FSR0 containing the base address, and
  1403                           ;	WREG with the size to clear
  1404                           
  1405  0620  0064               	clrwdt	;clear the watchdog before getting into this loop
  1406  0621                     clrloop0:
  1407  0621  0180               	clrf	0	;clear RAM location pointed to by FSR
  1408  0622  3101               	addfsr 0,1
  1409  0623  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1410  0624  2E21               	goto	clrloop0	;have we reached the end yet?
  1411  0625  3400               	retlw	0	;all done for this memory range, return
  1412                           
  1413                           	psect	cstackCOMMON
  1414  0070                     __pcstackCOMMON:
  1415  0070                     ?_PIN_MANAGER_Initialize:
  1416  0070                     ??_PIN_MANAGER_Initialize:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0070                     ?_OSCILLATOR_Initialize:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0070                     ??_OSCILLATOR_Initialize:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0070                     ?_WDT_Initialize:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0070                     ??_WDT_Initialize:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0070                     ?_PWM3_Initialize:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0070                     ??_PWM3_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0070                     ?_TMR2_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0070                     ??_TMR2_Initialize:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0070                     ?_TMR0_Initialize:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0070                     ?_TMR0_SetInterruptHandler:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0070                     ?_TMR0_DefaultInterruptHandler:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0070                     ??_TMR0_DefaultInterruptHandler:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0070                     ?_TMR0_CallBack:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0070                     ??_TMR0_CallBack:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0070                     ?_FLASH_EraseBlock:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0070                     ?_setLedsForPositioning:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0070                     ?_ADC_Initialize:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0070                     ??_ADC_Initialize:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0070                     ?_SYSTEM_Initialize:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0070                     ?_TMR2_StartTimer:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0070                     ??_TMR2_StartTimer:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0070                     ?_TMR0_ISR:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0070                     ??_TMR0_ISR:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0070                     ?_INTERRUPT_InterruptManager:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0070                     ??_INTERRUPT_InterruptManager:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0070                     ?_readFlash:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0070                     ?_writeFlash:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0070                     ?_timer0CallBack:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0070                     ??_timer0CallBack:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ?_setState:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ?_main:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_ADC_GetConversion:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_FLASH_ReadWord:	
  1516                           ; 2 bytes @ 0x0
  1517                           
  1518  0070                     ?___tmul:	
  1519                           ; 2 bytes @ 0x0
  1520                           
  1521  0070                     ?___lmul:	
  1522                           ; 3 bytes @ 0x0
  1523                           
  1524  0070                     ?___lldiv:	
  1525                           ; 4 bytes @ 0x0
  1526                           
  1527  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1528                           ; 4 bytes @ 0x0
  1529                           
  1530  0070                     FLASH_ReadWord@flashAddr:	
  1531                           ; 2 bytes @ 0x0
  1532                           
  1533  0070                     FLASH_EraseBlock@startAddr:	
  1534                           ; 2 bytes @ 0x0
  1535                           
  1536  0070                     ___tmul@multiplier:	
  1537                           ; 2 bytes @ 0x0
  1538                           
  1539  0070                     setLedsForPositioning@adcValue:	
  1540                           ; 3 bytes @ 0x0
  1541                           
  1542  0070                     ___lmul@multiplier:	
  1543                           ; 4 bytes @ 0x0
  1544                           
  1545  0070                     ___lldiv@divisor:	
  1546                           ; 4 bytes @ 0x0
  1547                           
  1548                           
  1549                           ; 4 bytes @ 0x0
  1550  0070                     	ds	2
  1551  0072                     ??_TMR0_Initialize:
  1552  0072                     ??_TMR0_SetInterruptHandler:	
  1553                           ; 1 bytes @ 0x2
  1554                           
  1555  0072                     ??_FLASH_EraseBlock:	
  1556                           ; 1 bytes @ 0x2
  1557                           
  1558  0072                     ??_ADC_GetConversion:	
  1559                           ; 1 bytes @ 0x2
  1560                           
  1561  0072                     ??_FLASH_ReadWord:	
  1562                           ; 1 bytes @ 0x2
  1563                           
  1564  0072                     FLASH_ReadWord@GIEBitValue:	
  1565                           ; 1 bytes @ 0x2
  1566                           
  1567  0072                     FLASH_EraseBlock@GIEBitValue:	
  1568                           ; 1 bytes @ 0x2
  1569                           
  1570                           
  1571                           ; 1 bytes @ 0x2
  1572  0072                     	ds	1
  1573  0073                     ?_FLASH_WriteBlock:
  1574  0073                     ??_SYSTEM_Initialize:	
  1575                           ; 1 bytes @ 0x3
  1576                           
  1577  0073                     ??_readFlash:	
  1578                           ; 1 bytes @ 0x3
  1579                           
  1580  0073                     ADC_GetConversion@channel:	
  1581                           ; 1 bytes @ 0x3
  1582                           
  1583  0073                     FLASH_WriteBlock@writeAddr:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0073                     ___tmul@multiplicand:	
  1587                           ; 2 bytes @ 0x3
  1588                           
  1589                           
  1590                           ; 3 bytes @ 0x3
  1591  0073                     	ds	1
  1592  0074                     ??_setLedsForPositioning:
  1593  0074                     ?_PWM3_LoadDutyValue:	
  1594                           ; 1 bytes @ 0x4
  1595                           
  1596  0074                     PWM3_LoadDutyValue@dutyValue:	
  1597                           ; 1 bytes @ 0x4
  1598                           
  1599  0074                     ___lmul@multiplicand:	
  1600                           ; 2 bytes @ 0x4
  1601                           
  1602  0074                     ___lldiv@dividend:	
  1603                           ; 4 bytes @ 0x4
  1604                           
  1605                           
  1606                           ; 4 bytes @ 0x4
  1607  0074                     	ds	1
  1608  0075                     FLASH_WriteBlock@flashWordArray:
  1609                           
  1610                           ; 1 bytes @ 0x5
  1611  0075                     	ds	1
  1612  0076                     ??_FLASH_WriteBlock:
  1613  0076                     ??_PWM3_LoadDutyValue:	
  1614                           ; 1 bytes @ 0x6
  1615                           
  1616  0076                     ??___tmul:	
  1617                           ; 1 bytes @ 0x6
  1618                           
  1619  0076                     ___tmul@product:	
  1620                           ; 1 bytes @ 0x6
  1621                           
  1622                           
  1623                           ; 3 bytes @ 0x6
  1624  0076                     	ds	2
  1625  0078                     ??___lmul:
  1626  0078                     ??___lldiv:	
  1627                           ; 1 bytes @ 0x8
  1628                           
  1629  0078                     ___lmul@product:	
  1630                           ; 1 bytes @ 0x8
  1631                           
  1632                           
  1633                           ; 4 bytes @ 0x8
  1634  0078                     	ds	1
  1635  0079                     FLASH_WriteBlock@blockStartAddr:
  1636  0079                     ___lldiv@quotient:	
  1637                           ; 2 bytes @ 0x9
  1638                           
  1639                           
  1640                           ; 4 bytes @ 0x9
  1641  0079                     	ds	2
  1642  007B                     FLASH_WriteBlock@GIEBitValue:
  1643                           
  1644                           ; 1 bytes @ 0xB
  1645  007B                     	ds	1
  1646  007C                     ??___aldiv:
  1647  007C                     FLASH_WriteBlock@i:	
  1648                           ; 1 bytes @ 0xC
  1649                           
  1650                           
  1651                           ; 1 bytes @ 0xC
  1652  007C                     	ds	1
  1653  007D                     ??_writeFlash:
  1654  007D                     ___lldiv@counter:	
  1655                           ; 1 bytes @ 0xD
  1656                           
  1657                           
  1658                           ; 1 bytes @ 0xD
  1659  007D                     	ds	1
  1660                           
  1661                           	psect	cstackBANK0
  1662  0020                     __pcstackBANK0:
  1663  0020                     ??_setState:
  1664  0020                     ?___aldiv:	
  1665                           ; 1 bytes @ 0x0
  1666                           
  1667  0020                     ___aldiv@divisor:	
  1668                           ; 4 bytes @ 0x0
  1669                           
  1670  0020                     writeFlash@wrBlockData:	
  1671                           ; 4 bytes @ 0x0
  1672                           
  1673                           
  1674                           ; 32 bytes @ 0x0
  1675  0020                     	ds	4
  1676  0024                     setState@newState:
  1677  0024                     ___aldiv@dividend:	
  1678                           ; 1 bytes @ 0x4
  1679                           
  1680                           
  1681                           ; 4 bytes @ 0x4
  1682  0024                     	ds	4
  1683  0028                     ___aldiv@counter:
  1684                           
  1685                           ; 1 bytes @ 0x8
  1686  0028                     	ds	1
  1687  0029                     ___aldiv@sign:
  1688                           
  1689                           ; 1 bytes @ 0x9
  1690  0029                     	ds	1
  1691  002A                     ___aldiv@quotient:
  1692                           
  1693                           ; 4 bytes @ 0xA
  1694  002A                     	ds	22
  1695  0040                     ??_main:
  1696                           
  1697                           ; 1 bytes @ 0x20
  1698  0040                     	ds	8
  1699                           
  1700                           	psect	maintext
  1701  0020                     __pmaintext:	
  1702 ;;
  1703 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1704 ;;
  1705 ;; *************** function _main *****************
  1706 ;; Defined at:
  1707 ;;		line 187 in file "main.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;		None
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      void 
  1714 ;; Registers used:
  1715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : B1F/0
  1718 ;;		On exit  : 1F/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMMON   BANK0   BANK1
  1721 ;;      Params:         0       0       0
  1722 ;;      Locals:         0       0       0
  1723 ;;      Temps:          0       8       0
  1724 ;;      Totals:         0       8       0
  1725 ;;Total ram usage:        8 bytes
  1726 ;; Hardware stack levels required when called:    7
  1727 ;; This function calls:
  1728 ;;		_ADC_GetConversion
  1729 ;;		_PWM3_LoadDutyValue
  1730 ;;		_SYSTEM_Initialize
  1731 ;;		_TMR0_SetInterruptHandler
  1732 ;;		_TMR2_StartTimer
  1733 ;;		___aldiv
  1734 ;;		___lmul
  1735 ;;		_setLedsForPositioning
  1736 ;;		_setState
  1737 ;;		_writeFlash
  1738 ;; This function is called by:
  1739 ;;		Startup code after reset
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           
  1744                           ;psect for function _main
  1745  0020                     _main:
  1746                           
  1747                           ;main.c: 190:     SYSTEM_Initialize();
  1748                           
  1749                           ;incstack = 0
  1750                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1751  0020  25FA               	fcall	_SYSTEM_Initialize
  1752                           
  1753                           ;main.c: 193:     (INTCONbits.GIE = 1);
  1754  0021  178B               	bsf	11,7	;volatile
  1755                           
  1756                           ;main.c: 195:     setState(STATE_NORMAL);
  1757  0022  3001               	movlw	1
  1758  0023  22AB               	fcall	_setState
  1759                           
  1760                           ;main.c: 198:     TMR0_SetInterruptHandler(timer0CallBack);
  1761  0024  30D7               	movlw	low _timer0CallBack
  1762  0025  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1763  0026  3005               	movlw	high _timer0CallBack
  1764  0027  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1765  0028  2632               	fcall	_TMR0_SetInterruptHandler
  1766                           
  1767                           ;main.c: 199:     TMR2_StartTimer();
  1768  0029  263F               	fcall	_TMR2_StartTimer
  1769  002A                     l1966:
  1770                           
  1771                           ;main.c: 203:     {;main.c: 204:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 207:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1772  002A  3003               	movlw	3
  1773  002B  0020               	movlb	0	; select bank0
  1774  002C  0660               	xorwf	main@channel,w
  1775  002D  1903               	btfsc	3,2
  1776  002E  2831               	goto	l1970
  1777  002F  3003               	movlw	3
  1778  0030  2832               	goto	L1
  1779  0031                     l1970:
  1780  0031  300A               	movlw	10
  1781  0032                     L1:
  1782  0032  00C0               	movwf	??_main
  1783  0033  0840               	movf	??_main,w
  1784  0034  00E0               	movwf	main@channel
  1785                           
  1786                           ;main.c: 212:         if(channel == channelRudder)
  1787  0035  3003               	movlw	3
  1788  0036  0660               	xorwf	main@channel,w
  1789  0037  1D03               	btfss	3,2
  1790  0038  2843               	goto	l1976
  1791                           
  1792                           ;main.c: 213:         {;main.c: 214:             adcValuePosition = ADC_GetConversion(ch
      +                          annel);
  1793  0039  0860               	movf	main@channel,w
  1794  003A  2595               	fcall	_ADC_GetConversion
  1795  003B  0870               	movf	?_ADC_GetConversion,w
  1796  003C  0020               	movlb	0	; select bank0
  1797  003D  00CC               	movwf	_adcValuePosition
  1798  003E  0871               	movf	?_ADC_GetConversion+1,w
  1799  003F  00CD               	movwf	_adcValuePosition+1
  1800  0040  01CE               	clrf	_adcValuePosition+2
  1801  0041  01CF               	clrf	_adcValuePosition+3
  1802                           
  1803                           ;main.c: 215:         }
  1804  0042  284A               	goto	l1978
  1805  0043                     l1976:
  1806                           
  1807                           ;main.c: 217:         {;main.c: 219:             PWM3_LoadDutyValue(ADC_GetConversion(ch
      +                          annel));
  1808  0043  0860               	movf	main@channel,w
  1809  0044  2595               	fcall	_ADC_GetConversion
  1810  0045  0871               	movf	?_ADC_GetConversion+1,w
  1811  0046  00F5               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1812  0047  0870               	movf	?_ADC_GetConversion,w
  1813  0048  00F4               	movwf	PWM3_LoadDutyValue@dutyValue
  1814  0049  25AD               	fcall	_PWM3_LoadDutyValue
  1815  004A                     l1978:
  1816                           
  1817                           ;main.c: 224:         if(!PORTAbits.RA5 && !doButtonAction)
  1818  004A  0020               	movlb	0	; select bank0
  1819  004B  1A8C               	btfsc	12,5	;volatile
  1820  004C  2863               	goto	l1988
  1821  004D  085B               	movf	_doButtonAction,w	;volatile
  1822  004E  1D03               	btfss	3,2
  1823  004F  2863               	goto	l1988
  1824                           
  1825                           ;main.c: 225:         {;main.c: 226:             msPressed++;
  1826  0050  3001               	movlw	1
  1827  0051  07D3               	addwf	_msPressed,f	;volatile
  1828  0052  3000               	movlw	0
  1829  0053  3DD4               	addwfc	_msPressed+1,f	;volatile
  1830                           
  1831                           ;main.c: 228:             if(msPressed > 3000)
  1832  0054  300B               	movlw	11
  1833  0055  0254               	subwf	_msPressed+1,w	;volatile
  1834  0056  30B9               	movlw	185
  1835  0057  1903               	skipnz
  1836  0058  0253               	subwf	_msPressed,w	;volatile
  1837  0059  1C03               	skipc
  1838  005A  2860               	goto	l355
  1839                           
  1840                           ;main.c: 229:             {;main.c: 230:                 doButtonAction = 1;
  1841  005B  3001               	movlw	1
  1842  005C  00C0               	movwf	??_main
  1843  005D  0840               	movf	??_main,w
  1844  005E  00DB               	movwf	_doButtonAction	;volatile
  1845  005F  2865               	goto	l1990
  1846  0060                     l355:	
  1847                           ;main.c: 234:             {;main.c: 235:                 do { LATCbits.LATC5 = 1; } whil
      +                          e(0);
  1848                           
  1849  0060  0022               	movlb	2	; select bank2
  1850  0061  168E               	bsf	14,5	;volatile
  1851  0062  2867               	goto	l1992
  1852  0063                     l1988:
  1853                           
  1854                           ;main.c: 239:         {;main.c: 240:             msPressed = 0;
  1855  0063  01D3               	clrf	_msPressed	;volatile
  1856  0064  01D4               	clrf	_msPressed+1	;volatile
  1857  0065                     l1990:
  1858  0065  0022               	movlb	2	; select bank2
  1859  0066  128E               	bcf	14,5	;volatile
  1860  0067                     l1992:
  1861                           
  1862                           ;main.c: 246:         if(doButtonAction)
  1863  0067  0020               	movlb	0	; select bank0
  1864  0068  085B               	movf	_doButtonAction,w	;volatile
  1865  0069  1903               	btfsc	3,2
  1866  006A  295F               	goto	l2032
  1867  006B                     l361:	
  1868                           ;main.c: 250:             {;main.c: 252:             }
  1869                           
  1870                           
  1871                           ;main.c: 249:             while(!PORTAbits.RA5)
  1872  006B  1A8C               	btfsc	12,5	;volatile
  1873  006C  2888               	goto	l2010
  1874  006D  286B               	goto	l361
  1875  006E                     l1996:
  1876                           
  1877                           ;main.c: 259:                     setState(STATE_TEACH_LEFT);
  1878  006E  3002               	movlw	2
  1879  006F  22AB               	fcall	_setState
  1880                           
  1881                           ;main.c: 260:                     break;
  1882  0070  289B               	goto	l2012
  1883  0071                     l1998:
  1884                           
  1885                           ;main.c: 263:                     lowerLimit = adcValuePosition;
  1886  0071  084F               	movf	_adcValuePosition+3,w
  1887  0072  00CB               	movwf	_lowerLimit+3
  1888  0073  084E               	movf	_adcValuePosition+2,w
  1889  0074  00CA               	movwf	_lowerLimit+2
  1890  0075  084D               	movf	_adcValuePosition+1,w
  1891  0076  00C9               	movwf	_lowerLimit+1
  1892  0077  084C               	movf	_adcValuePosition,w
  1893  0078  00C8               	movwf	_lowerLimit
  1894                           
  1895                           ;main.c: 265:                     setState(STATE_TEACH_RIGHT);
  1896  0079  3003               	movlw	3
  1897  007A  22AB               	fcall	_setState
  1898                           
  1899                           ;main.c: 266:                     break;
  1900  007B  289B               	goto	l2012
  1901  007C                     l2002:
  1902                           
  1903                           ;main.c: 269:                 {;main.c: 270:                     upperLimit = adcValuePo
      +                          sition;
  1904  007C  084F               	movf	_adcValuePosition+3,w
  1905  007D  00E4               	movwf	_upperLimit+3
  1906  007E  084E               	movf	_adcValuePosition+2,w
  1907  007F  00E3               	movwf	_upperLimit+2
  1908  0080  084D               	movf	_adcValuePosition+1,w
  1909  0081  00E2               	movwf	_upperLimit+1
  1910  0082  084C               	movf	_adcValuePosition,w
  1911  0083  00E1               	movwf	_upperLimit
  1912                           
  1913                           ;main.c: 272:                     writeFlash();
  1914  0084  2528               	fcall	_writeFlash
  1915                           
  1916                           ;main.c: 273:                     setState(STATE_NORMAL);
  1917  0085  3001               	movlw	1
  1918  0086  22AB               	fcall	_setState
  1919                           
  1920                           ;main.c: 274:                     break;
  1921  0087  289B               	goto	l2012
  1922  0088                     l2010:
  1923  0088  0859               	movf	_currentState,w
  1924  0089  00C0               	movwf	??_main
  1925  008A  01C1               	clrf	??_main+1
  1926                           
  1927                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1928                           ; Switch size 1, requested type "simple"
  1929                           ; Number of cases is 1, Range of values is 0 to 0
  1930                           ; switch strategies available:
  1931                           ; Name         Instructions Cycles
  1932                           ; simple_byte            4     3 (average)
  1933                           ; direct_byte            8     6 (fixed)
  1934                           ; jumptable            260     6 (fixed)
  1935                           ;	Chosen strategy is simple_byte
  1936  008B  0841               	movf	??_main+1,w
  1937  008C  3A00               	xorlw	0	; case 0
  1938  008D  1903               	skipnz
  1939  008E  2890               	goto	l2126
  1940  008F  289B               	goto	l2012
  1941  0090                     l2126:
  1942                           
  1943                           ; Switch size 1, requested type "simple"
  1944                           ; Number of cases is 3, Range of values is 1 to 3
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte           10     6 (average)
  1948                           ; direct_byte           15     9 (fixed)
  1949                           ; jumptable            263     9 (fixed)
  1950                           ;	Chosen strategy is simple_byte
  1951  0090  0840               	movf	??_main,w
  1952  0091  3A01               	xorlw	1	; case 1
  1953  0092  1903               	skipnz
  1954  0093  286E               	goto	l1996
  1955  0094  3A03               	xorlw	3	; case 2
  1956  0095  1903               	skipnz
  1957  0096  2871               	goto	l1998
  1958  0097  3A01               	xorlw	1	; case 3
  1959  0098  1903               	skipnz
  1960  0099  287C               	goto	l2002
  1961  009A  289B               	goto	l2012
  1962  009B                     l2012:
  1963                           
  1964                           ;main.c: 278:             doButtonAction = 0;
  1965  009B  01DB               	clrf	_doButtonAction	;volatile
  1966  009C  295F               	goto	l2032
  1967  009D                     l2014:
  1968                           
  1969                           ;main.c: 286:                 if(channel == channelBrightness)
  1970  009D  300A               	movlw	10
  1971  009E  0660               	xorwf	main@channel,w
  1972  009F  1D03               	btfss	3,2
  1973  00A0  282A               	goto	l1966
  1974                           
  1975                           ;main.c: 287:                 {;main.c: 288:                     adcValuePosition = (adc
      +                          ValuePosition*m-b)/fixedPointFactor;
  1976  00A1  3000               	movlw	0
  1977  00A2  00A3               	movwf	___aldiv@divisor+3
  1978  00A3  3000               	movlw	0
  1979  00A4  00A2               	movwf	___aldiv@divisor+2
  1980  00A5  3003               	movlw	3
  1981  00A6  00A1               	movwf	___aldiv@divisor+1
  1982  00A7  30E8               	movlw	232
  1983  00A8  00A0               	movwf	___aldiv@divisor
  1984  00A9  0850               	movf	_b,w
  1985  00AA  00C0               	movwf	??_main
  1986  00AB  0851               	movf	_b+1,w
  1987  00AC  00C1               	movwf	??_main+1
  1988  00AD  0852               	movf	_b+2,w
  1989  00AE  00C2               	movwf	??_main+2
  1990  00AF  3000               	movlw	0
  1991  00B0  1BC2               	btfsc	??_main+2,7
  1992  00B1  30FF               	movlw	255
  1993  00B2  00C3               	movwf	??_main+3
  1994  00B3  084F               	movf	_adcValuePosition+3,w
  1995  00B4  00F3               	movwf	___lmul@multiplier+3
  1996  00B5  084E               	movf	_adcValuePosition+2,w
  1997  00B6  00F2               	movwf	___lmul@multiplier+2
  1998  00B7  084D               	movf	_adcValuePosition+1,w
  1999  00B8  00F1               	movwf	___lmul@multiplier+1
  2000  00B9  084C               	movf	_adcValuePosition,w
  2001  00BA  00F0               	movwf	___lmul@multiplier
  2002  00BB  085F               	movf	_m+3,w
  2003  00BC  00F7               	movwf	___lmul@multiplicand+3
  2004  00BD  085E               	movf	_m+2,w
  2005  00BE  00F6               	movwf	___lmul@multiplicand+2
  2006  00BF  085D               	movf	_m+1,w
  2007  00C0  00F5               	movwf	___lmul@multiplicand+1
  2008  00C1  085C               	movf	_m,w
  2009  00C2  00F4               	movwf	___lmul@multiplicand
  2010  00C3  24D3               	fcall	___lmul
  2011  00C4  0870               	movf	?___lmul,w
  2012  00C5  00C4               	movwf	??_main+4
  2013  00C6  0871               	movf	?___lmul+1,w
  2014  00C7  00C5               	movwf	??_main+5
  2015  00C8  0872               	movf	?___lmul+2,w
  2016  00C9  00C6               	movwf	??_main+6
  2017  00CA  0873               	movf	?___lmul+3,w
  2018  00CB  00C7               	movwf	??_main+7
  2019  00CC  0840               	movf	??_main,w
  2020  00CD  02C4               	subwf	??_main+4,f
  2021  00CE  0841               	movf	??_main+1,w
  2022  00CF  3BC5               	subwfb	??_main+5,f
  2023  00D0  0842               	movf	??_main+2,w
  2024  00D1  3BC6               	subwfb	??_main+6,f
  2025  00D2  0843               	movf	??_main+3,w
  2026  00D3  3BC7               	subwfb	??_main+7,f
  2027  00D4  0847               	movf	??_main+7,w
  2028  00D5  00A7               	movwf	___aldiv@dividend+3
  2029  00D6  0846               	movf	??_main+6,w
  2030  00D7  00A6               	movwf	___aldiv@dividend+2
  2031  00D8  0845               	movf	??_main+5,w
  2032  00D9  00A5               	movwf	___aldiv@dividend+1
  2033  00DA  0844               	movf	??_main+4,w
  2034  00DB  00A4               	movwf	___aldiv@dividend
  2035  00DC  2344               	fcall	___aldiv
  2036  00DD  0823               	movf	?___aldiv+3,w
  2037  00DE  00CF               	movwf	_adcValuePosition+3
  2038  00DF  0822               	movf	?___aldiv+2,w
  2039  00E0  00CE               	movwf	_adcValuePosition+2
  2040  00E1  0821               	movf	?___aldiv+1,w
  2041  00E2  00CD               	movwf	_adcValuePosition+1
  2042  00E3  0820               	movf	?___aldiv,w
  2043  00E4  00CC               	movwf	_adcValuePosition
  2044                           
  2045                           ;main.c: 289:                     setLedsForPositioning(adcValuePosition);
  2046  00E5  084F               	movf	_adcValuePosition+3,w
  2047  00E6  00F3               	movwf	setLedsForPositioning@adcValue+3
  2048  00E7  084E               	movf	_adcValuePosition+2,w
  2049  00E8  00F2               	movwf	setLedsForPositioning@adcValue+2
  2050  00E9  084D               	movf	_adcValuePosition+1,w
  2051  00EA  00F1               	movwf	setLedsForPositioning@adcValue+1
  2052  00EB  084C               	movf	_adcValuePosition,w
  2053  00EC  00F0               	movwf	setLedsForPositioning@adcValue
  2054  00ED  2173               	fcall	_setLedsForPositioning
  2055  00EE  282A               	goto	l1966
  2056  00EF                     l2018:
  2057                           
  2058                           ;main.c: 294:                 if(doToggle)
  2059  00EF  085A               	movf	_doToggle,w
  2060  00F0  1903               	btfsc	3,2
  2061  00F1  282A               	goto	l1966
  2062  00F2  1003               	clrc
  2063  00F3  0022               	movlb	2	; select bank2
  2064  00F4  1C0E               	btfss	14,0	;volatile
  2065  00F5  1403               	setc
  2066  00F6  1C03               	btfss	3,0
  2067  00F7  28FB               	goto	u1540
  2068  00F8  0022               	movlb	2	; select bank2
  2069  00F9  140E               	bsf	14,0	;volatile
  2070  00FA  28FD               	goto	l377
  2071  00FB                     u1540:
  2072  00FB  0022               	movlb	2	; select bank2
  2073  00FC  100E               	bcf	14,0	;volatile
  2074  00FD                     l377:	
  2075                           ;main.c: 297:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2076                           
  2077  00FD  1003               	clrc
  2078  00FE  1C8E               	btfss	14,1	;volatile
  2079  00FF  1403               	setc
  2080  0100  1C03               	btfss	3,0
  2081  0101  2905               	goto	u1560
  2082  0102  0022               	movlb	2	; select bank2
  2083  0103  148E               	bsf	14,1	;volatile
  2084  0104  2907               	goto	l379
  2085  0105                     u1560:
  2086  0105  0022               	movlb	2	; select bank2
  2087  0106  108E               	bcf	14,1	;volatile
  2088  0107                     l379:	
  2089                           ;main.c: 298:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2090                           
  2091  0107  1003               	clrc
  2092  0108  1D0E               	btfss	14,2	;volatile
  2093  0109  1403               	setc
  2094  010A  1C03               	btfss	3,0
  2095  010B  290F               	goto	u1580
  2096  010C  0022               	movlb	2	; select bank2
  2097  010D  150E               	bsf	14,2	;volatile
  2098  010E  2911               	goto	l381
  2099  010F                     u1580:
  2100  010F  0022               	movlb	2	; select bank2
  2101  0110  110E               	bcf	14,2	;volatile
  2102  0111                     l381:	
  2103                           ;main.c: 299:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2104                           
  2105  0111  1003               	clrc
  2106  0112  1D8E               	btfss	14,3	;volatile
  2107  0113  1403               	setc
  2108  0114  1C03               	btfss	3,0
  2109  0115  2919               	goto	u1600
  2110  0116  0022               	movlb	2	; select bank2
  2111  0117  158E               	bsf	14,3	;volatile
  2112  0118  291B               	goto	l383
  2113  0119                     u1600:
  2114  0119  0022               	movlb	2	; select bank2
  2115  011A  118E               	bcf	14,3	;volatile
  2116  011B                     l383:	
  2117                           ;main.c: 300:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2118                           
  2119  011B  1003               	clrc
  2120  011C  1E0E               	btfss	14,4	;volatile
  2121  011D  1403               	setc
  2122  011E  1C03               	btfss	3,0
  2123  011F  2923               	goto	u1620
  2124  0120  0022               	movlb	2	; select bank2
  2125  0121  160E               	bsf	14,4	;volatile
  2126  0122  2925               	goto	l2022
  2127  0123                     u1620:
  2128  0123  0022               	movlb	2	; select bank2
  2129  0124  120E               	bcf	14,4	;volatile
  2130  0125                     l2022:
  2131                           
  2132                           ;main.c: 301:                     doToggle = 0;
  2133  0125  0020               	movlb	0	; select bank0
  2134  0126  01DA               	clrf	_doToggle
  2135  0127  282A               	goto	l1966
  2136  0128                     l2024:
  2137                           
  2138                           ;main.c: 308:                 if(doToggle)
  2139  0128  085A               	movf	_doToggle,w
  2140  0129  1903               	btfsc	3,2
  2141  012A  282A               	goto	l1966
  2142  012B  1003               	clrc
  2143  012C  0022               	movlb	2	; select bank2
  2144  012D  1F0E               	btfss	14,6	;volatile
  2145  012E  1403               	setc
  2146  012F  1C03               	btfss	3,0
  2147  0130  2934               	goto	u1650
  2148  0131  0022               	movlb	2	; select bank2
  2149  0132  170E               	bsf	14,6	;volatile
  2150  0133  2936               	goto	l389
  2151  0134                     u1650:
  2152  0134  0022               	movlb	2	; select bank2
  2153  0135  130E               	bcf	14,6	;volatile
  2154  0136                     l389:	
  2155                           ;main.c: 311:                     do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2156                           
  2157  0136  1003               	clrc
  2158  0137  1F8E               	btfss	14,7	;volatile
  2159  0138  1403               	setc
  2160  0139  1C03               	btfss	3,0
  2161  013A  293E               	goto	u1670
  2162  013B  0022               	movlb	2	; select bank2
  2163  013C  178E               	bsf	14,7	;volatile
  2164  013D  2940               	goto	l391
  2165  013E                     u1670:
  2166  013E  0022               	movlb	2	; select bank2
  2167  013F  138E               	bcf	14,7	;volatile
  2168  0140                     l391:	
  2169                           ;main.c: 312:                     do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  2170                           
  2171  0140  1003               	clrc
  2172  0141  1E8D               	btfss	13,5	;volatile
  2173  0142  1403               	setc
  2174  0143  1C03               	btfss	3,0
  2175  0144  2948               	goto	u1690
  2176  0145  0022               	movlb	2	; select bank2
  2177  0146  168D               	bsf	13,5	;volatile
  2178  0147  294A               	goto	l393
  2179  0148                     u1690:
  2180  0148  0022               	movlb	2	; select bank2
  2181  0149  128D               	bcf	13,5	;volatile
  2182  014A                     l393:	
  2183                           ;main.c: 313:                     do { LATBbits.LATB6 = ~LATBbits.LATB6; } while(0);
  2184                           
  2185  014A  1003               	clrc
  2186  014B  1F0D               	btfss	13,6	;volatile
  2187  014C  1403               	setc
  2188  014D  1C03               	btfss	3,0
  2189  014E  2952               	goto	u1710
  2190  014F  0022               	movlb	2	; select bank2
  2191  0150  170D               	bsf	13,6	;volatile
  2192  0151  2954               	goto	l395
  2193  0152                     u1710:
  2194  0152  0022               	movlb	2	; select bank2
  2195  0153  130D               	bcf	13,6	;volatile
  2196  0154                     l395:	
  2197                           ;main.c: 314:                     do { LATBbits.LATB7 = ~LATBbits.LATB7; } while(0);
  2198                           
  2199  0154  1003               	clrc
  2200  0155  1F8D               	btfss	13,7	;volatile
  2201  0156  1403               	setc
  2202  0157  1C03               	btfss	3,0
  2203  0158  295C               	goto	u1730
  2204  0159  0022               	movlb	2	; select bank2
  2205  015A  178D               	bsf	13,7	;volatile
  2206  015B  2925               	goto	l2022
  2207  015C                     u1730:
  2208  015C  0022               	movlb	2	; select bank2
  2209  015D  138D               	bcf	13,7	;volatile
  2210  015E  2925               	goto	l2022
  2211  015F                     l2032:
  2212  015F  0859               	movf	_currentState,w
  2213  0160  00C0               	movwf	??_main
  2214  0161  01C1               	clrf	??_main+1
  2215                           
  2216                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2217                           ; Switch size 1, requested type "simple"
  2218                           ; Number of cases is 1, Range of values is 0 to 0
  2219                           ; switch strategies available:
  2220                           ; Name         Instructions Cycles
  2221                           ; simple_byte            4     3 (average)
  2222                           ; direct_byte            8     6 (fixed)
  2223                           ; jumptable            260     6 (fixed)
  2224                           ;	Chosen strategy is simple_byte
  2225  0162  0841               	movf	??_main+1,w
  2226  0163  3A00               	xorlw	0	; case 0
  2227  0164  1903               	skipnz
  2228  0165  2967               	goto	l2128
  2229  0166  282A               	goto	l1966
  2230  0167                     l2128:
  2231                           
  2232                           ; Switch size 1, requested type "simple"
  2233                           ; Number of cases is 3, Range of values is 1 to 3
  2234                           ; switch strategies available:
  2235                           ; Name         Instructions Cycles
  2236                           ; simple_byte           10     6 (average)
  2237                           ; direct_byte           15     9 (fixed)
  2238                           ; jumptable            263     9 (fixed)
  2239                           ;	Chosen strategy is simple_byte
  2240  0167  0840               	movf	??_main,w
  2241  0168  3A01               	xorlw	1	; case 1
  2242  0169  1903               	skipnz
  2243  016A  289D               	goto	l2014
  2244  016B  3A03               	xorlw	3	; case 2
  2245  016C  1903               	skipnz
  2246  016D  28EF               	goto	l2018
  2247  016E  3A01               	xorlw	1	; case 3
  2248  016F  1903               	skipnz
  2249  0170  2928               	goto	l2024
  2250  0171  282A               	goto	l1966
  2251  0172  280C               	ljmp	start
  2252  0173                     __end_of_main:
  2253                           
  2254                           	psect	text1
  2255  0528                     __ptext1:	
  2256 ;; *************** function _writeFlash *****************
  2257 ;; Defined at:
  2258 ;;		line 95 in file "main.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  wrBlockData    32    0[BANK0 ] unsigned short [16]
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 1F/0
  2269 ;;		On exit  : 1C/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMMON   BANK0   BANK1
  2272 ;;      Params:         0       0       0
  2273 ;;      Locals:         0      32       0
  2274 ;;      Temps:          1       0       0
  2275 ;;      Totals:         1      32       0
  2276 ;;Total ram usage:       33 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    6
  2279 ;; This function calls:
  2280 ;;		_FLASH_EraseBlock
  2281 ;;		_FLASH_WriteBlock
  2282 ;; This function is called by:
  2283 ;;		_main
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           
  2288                           ;psect for function _writeFlash
  2289  0528                     _writeFlash:
  2290                           
  2291                           ;main.c: 100:     FLASH_EraseBlock((uint16_t)( 0x800 -16));
  2292                           
  2293                           ;incstack = 0
  2294                           ; Regs used in _writeFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2295  0528  30F0               	movlw	240
  2296  0529  00F0               	movwf	FLASH_EraseBlock@startAddr
  2297  052A  3007               	movlw	7
  2298  052B  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2299  052C  2548               	fcall	_FLASH_EraseBlock
  2300                           
  2301                           ;main.c: 102:     uint16_t wrBlockData[16];;main.c: 104:     wrBlockData[16 -1] = (uint1
      +                          6_t)(upperLimit);
  2302  052D  0020               	movlb	0	; select bank0
  2303  052E  0862               	movf	_upperLimit+1,w
  2304  052F  00BF               	movwf	writeFlash@wrBlockData+31
  2305  0530  0861               	movf	_upperLimit,w
  2306  0531  00BE               	movwf	writeFlash@wrBlockData+30
  2307                           
  2308                           ;main.c: 105:     wrBlockData[16 -2] = (uint16_t)(upperLimit >> 16);
  2309  0532  0864               	movf	_upperLimit+3,w
  2310  0533  00BD               	movwf	writeFlash@wrBlockData+29
  2311  0534  0863               	movf	_upperLimit+2,w
  2312  0535  00BC               	movwf	writeFlash@wrBlockData+28
  2313                           
  2314                           ;main.c: 106:     wrBlockData[16 -3] = (uint16_t)(lowerLimit);
  2315  0536  0849               	movf	_lowerLimit+1,w
  2316  0537  00BB               	movwf	writeFlash@wrBlockData+27
  2317  0538  0848               	movf	_lowerLimit,w
  2318  0539  00BA               	movwf	writeFlash@wrBlockData+26
  2319                           
  2320                           ;main.c: 107:     wrBlockData[16 -4] = (uint16_t)(lowerLimit >> 16);
  2321  053A  084B               	movf	_lowerLimit+3,w
  2322  053B  00B9               	movwf	writeFlash@wrBlockData+25
  2323  053C  084A               	movf	_lowerLimit+2,w
  2324  053D  00B8               	movwf	writeFlash@wrBlockData+24
  2325                           
  2326                           ;main.c: 110:     FLASH_WriteBlock((uint16_t)( 0x800 -16), (uint16_t*)wrBlockData);
  2327  053E  30F0               	movlw	240
  2328  053F  00F3               	movwf	FLASH_WriteBlock@writeAddr
  2329  0540  3007               	movlw	7
  2330  0541  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  2331  0542  3020               	movlw	(low (writeFlash@wrBlockData| 0))& (0+255)
  2332  0543  00FD               	movwf	??_writeFlash
  2333  0544  087D               	movf	??_writeFlash,w
  2334  0545  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  2335  0546  242D               	fcall	_FLASH_WriteBlock
  2336  0547  0008               	return
  2337  0548                     __end_of_writeFlash:
  2338                           
  2339                           	psect	text2
  2340  042D                     __ptext2:	
  2341 ;; *************** function _FLASH_WriteBlock *****************
  2342 ;; Defined at:
  2343 ;;		line 94 in file "mcc_generated_files/memory.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  writeAddr       2    3[COMMON] unsigned short 
  2346 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  2347 ;;		 -> writeFlash@wrBlockData(32), 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  blockStartAd    2    9[COMMON] unsigned short 
  2350 ;;  i               1   12[COMMON] unsigned char 
  2351 ;;  GIEBitValue     1   11[COMMON] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      char 
  2354 ;; Registers used:
  2355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 1F/0
  2358 ;;		On exit  : 1C/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMMON   BANK0   BANK1
  2361 ;;      Params:         3       0       0
  2362 ;;      Locals:         4       0       0
  2363 ;;      Temps:          3       0       0
  2364 ;;      Totals:        10       0       0
  2365 ;;Total ram usage:       10 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    5
  2368 ;; This function calls:
  2369 ;;		_FLASH_EraseBlock
  2370 ;; This function is called by:
  2371 ;;		_writeFlash
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           
  2376                           ;psect for function _FLASH_WriteBlock
  2377  042D                     _FLASH_WriteBlock:
  2378                           
  2379                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x800 -1) ^ (16 -1)));
  2380                           
  2381                           ;incstack = 0
  2382                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2383  042D  30F0               	movlw	240
  2384  042E  0573               	andwf	FLASH_WriteBlock@writeAddr,w
  2385  042F  00F9               	movwf	FLASH_WriteBlock@blockStartAddr
  2386  0430  3007               	movlw	7
  2387  0431  0574               	andwf	FLASH_WriteBlock@writeAddr+1,w
  2388  0432  00FA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  2389                           
  2390                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  2391  0433  3000               	movlw	0
  2392  0434  1B8B               	btfsc	11,7	;volatile
  2393  0435  3001               	movlw	1
  2394  0436  00FB               	movwf	FLASH_WriteBlock@GIEBitValue
  2395                           
  2396                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  2397  0437  087A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  2398  0438  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  2399  0439  1D03               	skipz
  2400  043A  2C3D               	goto	u905
  2401  043B  0879               	movf	FLASH_WriteBlock@blockStartAddr,w
  2402  043C  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  2403  043D                     u905:
  2404  043D  1D03               	btfss	3,2
  2405  043E  0008               	return
  2406                           
  2407                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  2408                           
  2409                           ;mcc_generated_files/memory.c: 104:     }
  2410  043F  138B               	bcf	11,7	;volatile
  2411                           
  2412                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  2413  0440  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2414  0441  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2415  0442  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2416  0443  00F0               	movwf	FLASH_EraseBlock@startAddr
  2417  0444  2548               	fcall	_FLASH_EraseBlock
  2418                           
  2419                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  2420  0445  1315               	bcf	21,6	;volatile
  2421                           
  2422                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  2423  0446  1515               	bsf	21,2	;volatile
  2424                           
  2425                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  2426  0447  1695               	bsf	21,5	;volatile
  2427                           
  2428                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<16; i++)
  2429  0448  01FC               	clrf	FLASH_WriteBlock@i
  2430  0449                     l1716:
  2431                           
  2432                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  2433  0449  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2434  044A  0023               	movlb	3	; select bank3
  2435  044B  0091               	movwf	17	;volatile
  2436                           
  2437                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  2438  044C  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2439  044D  0092               	movwf	18	;volatile
  2440                           
  2441                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  2442  044E  357C               	lslf	FLASH_WriteBlock@i,w
  2443  044F  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2444  0450  00F6               	movwf	??_FLASH_WriteBlock
  2445  0451  0876               	movf	??_FLASH_WriteBlock,w
  2446  0452  0086               	movwf	6
  2447  0453  0187               	clrf	7
  2448  0454  0801               	movf	1,w
  2449  0455  0093               	movwf	19	;volatile
  2450                           
  2451                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  2452  0456  357C               	lslf	FLASH_WriteBlock@i,w
  2453  0457  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2454  0458  00F6               	movwf	??_FLASH_WriteBlock
  2455  0459  0876               	movf	??_FLASH_WriteBlock,w
  2456  045A  0086               	movwf	6
  2457  045B  0187               	clrf	7
  2458  045C  3F40               	moviw [0]fsr1
  2459  045D  00F7               	movwf	??_FLASH_WriteBlock+1
  2460  045E  3F41               	moviw [1]fsr1
  2461  045F  00F8               	movwf	??_FLASH_WriteBlock+2
  2462  0460  0878               	movf	??_FLASH_WriteBlock+2,w
  2463  0461  0094               	movwf	20	;volatile
  2464                           
  2465                           ;mcc_generated_files/memory.c: 127:         if(i == (16 -1))
  2466  0462  300F               	movlw	15
  2467  0463  067C               	xorwf	FLASH_WriteBlock@i,w
  2468  0464  1903               	btfsc	3,2
  2469                           
  2470                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  2471  0465  1295               	bcf	21,5	;volatile
  2472                           
  2473                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  2474  0466  3055               	movlw	85
  2475  0467  0096               	movwf	22	;volsfr
  2476                           
  2477                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  2478  0468  30AA               	movlw	170
  2479  0469  0096               	movwf	22	;volsfr
  2480                           
  2481                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  2482  046A  1495               	bsf	21,1	;volatile
  2483                           
  2484                           ;mcc_generated_files/memory.c: 136:         __nop();
  2485  046B  0000               	nop
  2486                           
  2487                           ;mcc_generated_files/memory.c: 137:         __nop();
  2488  046C  0000               	nop
  2489                           
  2490                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  2491  046D  3001               	movlw	1
  2492  046E  07F3               	addwf	FLASH_WriteBlock@writeAddr,f
  2493  046F  3000               	movlw	0
  2494  0470  3DF4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  2495                           
  2496                           ;mcc_generated_files/memory.c: 140:     }
  2497  0471  3001               	movlw	1
  2498  0472  00F6               	movwf	??_FLASH_WriteBlock
  2499  0473  0876               	movf	??_FLASH_WriteBlock,w
  2500  0474  07FC               	addwf	FLASH_WriteBlock@i,f
  2501  0475  3010               	movlw	16
  2502  0476  027C               	subwf	FLASH_WriteBlock@i,w
  2503  0477  1C03               	skipc
  2504  0478  2C49               	goto	l1716
  2505                           
  2506                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  2507  0479  0023               	movlb	3	; select bank3
  2508  047A  1115               	bcf	21,2	;volatile
  2509                           
  2510                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  2511  047B  0C7B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  2512  047C  1C03               	skipc
  2513  047D  138B               	bcf	11,7	;volatile
  2514  047E  1803               	skipnc
  2515  047F  178B               	bsf	11,7	;volatile
  2516  0480  0008               	return
  2517  0481                     __end_of_FLASH_WriteBlock:
  2518                           
  2519                           	psect	text3
  2520  0548                     __ptext3:	
  2521 ;; *************** function _FLASH_EraseBlock *****************
  2522 ;; Defined at:
  2523 ;;		line 148 in file "mcc_generated_files/memory.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  startAddr       2    0[COMMON] unsigned short 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : 1F/0
  2534 ;;		On exit  : 1F/3
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1
  2537 ;;      Params:         2       0       0
  2538 ;;      Locals:         1       0       0
  2539 ;;      Temps:          0       0       0
  2540 ;;      Totals:         3       0       0
  2541 ;;Total ram usage:        3 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    4
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_FLASH_WriteBlock
  2548 ;;		_writeFlash
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           
  2553                           ;psect for function _FLASH_EraseBlock
  2554  0548                     _FLASH_EraseBlock:
  2555                           
  2556                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  2557                           
  2558                           ;incstack = 0
  2559                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  2560  0548  3000               	movlw	0
  2561  0549  1B8B               	btfsc	11,7	;volatile
  2562  054A  3001               	movlw	1
  2563  054B  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  2564                           
  2565                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  2566  054C  138B               	bcf	11,7	;volatile
  2567                           
  2568                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  2569  054D  0870               	movf	FLASH_EraseBlock@startAddr,w
  2570  054E  0023               	movlb	3	; select bank3
  2571  054F  0091               	movwf	17	;volatile
  2572                           
  2573                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  2574  0550  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  2575  0551  0092               	movwf	18	;volatile
  2576                           
  2577                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  2578  0552  1315               	bcf	21,6	;volatile
  2579                           
  2580                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  2581  0553  1615               	bsf	21,4	;volatile
  2582                           
  2583                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  2584  0554  1515               	bsf	21,2	;volatile
  2585                           
  2586                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  2587  0555  3055               	movlw	85
  2588  0556  0096               	movwf	22	;volsfr
  2589                           
  2590                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  2591  0557  30AA               	movlw	170
  2592  0558  0096               	movwf	22	;volsfr
  2593                           
  2594                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  2595  0559  1495               	bsf	21,1	;volatile
  2596                           
  2597                           ;mcc_generated_files/memory.c: 168:     __nop();
  2598  055A  0000               	nop
  2599                           
  2600                           ;mcc_generated_files/memory.c: 169:     __nop();
  2601  055B  0000               	nop
  2602                           
  2603                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  2604  055C  0023               	movlb	3	; select bank3
  2605  055D  1115               	bcf	21,2	;volatile
  2606                           
  2607                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  2608  055E  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  2609  055F  1C03               	skipc
  2610  0560  138B               	bcf	11,7	;volatile
  2611  0561  1803               	skipnc
  2612  0562  178B               	bsf	11,7	;volatile
  2613  0563  0008               	return
  2614  0564                     __end_of_FLASH_EraseBlock:
  2615                           
  2616                           	psect	text4
  2617  02AB                     __ptext4:	
  2618 ;; *************** function _setState *****************
  2619 ;; Defined at:
  2620 ;;		line 132 in file "main.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  newState        1    wreg     enum E2406
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  newState        1    4[BANK0 ] enum E2406
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 1C/0
  2631 ;;		On exit  : 1F/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMMON   BANK0   BANK1
  2634 ;;      Params:         0       0       0
  2635 ;;      Locals:         0       1       0
  2636 ;;      Temps:          0       4       0
  2637 ;;      Totals:         0       5       0
  2638 ;;Total ram usage:        5 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    6
  2641 ;; This function calls:
  2642 ;;		___lldiv
  2643 ;;		___tmul
  2644 ;;		_readFlash
  2645 ;; This function is called by:
  2646 ;;		_main
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function _setState
  2652  02AB                     _setState:
  2653                           
  2654                           ;incstack = 0
  2655                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2656                           ;setState@newState stored from wreg
  2657  02AB  0020               	movlb	0	; select bank0
  2658  02AC  00A4               	movwf	setState@newState
  2659                           
  2660                           ;main.c: 132: void setState(state_t newState);main.c: 133: {;main.c: 134:     if(newStat
      +                          e == currentState)
  2661  02AD  0824               	movf	setState@newState,w
  2662  02AE  0659               	xorwf	_currentState,w
  2663  02AF  1903               	btfsc	3,2
  2664  02B0  0008               	return
  2665                           
  2666                           ;main.c: 140:     do { LATCbits.LATC0 = 0; } while(0);
  2667  02B1  0022               	movlb	2	; select bank2
  2668  02B2  100E               	bcf	14,0	;volatile
  2669                           
  2670                           ;main.c: 141:     do { LATCbits.LATC1 = 0; } while(0);
  2671  02B3  108E               	bcf	14,1	;volatile
  2672                           
  2673                           ;main.c: 142:     do { LATCbits.LATC2 = 0; } while(0);
  2674  02B4  110E               	bcf	14,2	;volatile
  2675                           
  2676                           ;main.c: 143:     do { LATCbits.LATC3 = 0; } while(0);
  2677  02B5  118E               	bcf	14,3	;volatile
  2678                           
  2679                           ;main.c: 144:     do { LATCbits.LATC4 = 0; } while(0);
  2680  02B6  120E               	bcf	14,4	;volatile
  2681                           
  2682                           ;main.c: 145:     do { LATCbits.LATC5 = 0; } while(0);
  2683  02B7  128E               	bcf	14,5	;volatile
  2684                           
  2685                           ;main.c: 146:     do { LATCbits.LATC6 = 0; } while(0);
  2686  02B8  130E               	bcf	14,6	;volatile
  2687                           
  2688                           ;main.c: 147:     do { LATCbits.LATC7 = 0; } while(0);
  2689  02B9  138E               	bcf	14,7	;volatile
  2690                           
  2691                           ;main.c: 148:     do { LATBbits.LATB5 = 0; } while(0);
  2692  02BA  128D               	bcf	13,5	;volatile
  2693                           
  2694                           ;main.c: 149:     do { LATBbits.LATB6 = 0; } while(0);
  2695  02BB  130D               	bcf	13,6	;volatile
  2696                           
  2697                           ;main.c: 150:     do { LATBbits.LATB7 = 0; } while(0);
  2698  02BC  138D               	bcf	13,7	;volatile
  2699  02BD  2B28               	goto	l1848
  2700  02BE                     l1830:
  2701                           
  2702                           ;main.c: 159:             readFlash();
  2703  02BE  23C5               	fcall	_readFlash
  2704                           
  2705                           ;main.c: 162:             upperLimit = (upperLimit > (1023)) ? (1023) : upperLimit;
  2706  02BF  0864               	movf	_upperLimit+3,w
  2707  02C0  1D03               	btfss	3,2
  2708  02C1  2AC9               	goto	l1836
  2709  02C2  0863               	movf	_upperLimit+2,w
  2710  02C3  1D03               	btfss	3,2
  2711  02C4  2AC9               	goto	l1836
  2712  02C5  3004               	movlw	4
  2713  02C6  0262               	subwf	_upperLimit+1,w
  2714  02C7  1C03               	btfss	3,0
  2715  02C8  2AD1               	goto	l325
  2716  02C9                     l1836:
  2717  02C9  3000               	movlw	0
  2718  02CA  00E4               	movwf	_upperLimit+3
  2719  02CB  3000               	movlw	0
  2720  02CC  00E3               	movwf	_upperLimit+2
  2721  02CD  3003               	movlw	3
  2722  02CE  00E2               	movwf	_upperLimit+1
  2723  02CF  30FF               	movlw	255
  2724  02D0  00E1               	movwf	_upperLimit
  2725  02D1                     l325:
  2726                           
  2727                           ;main.c: 164:             lowerLimit = (lowerLimit < (0)) || (lowerLimit > upperLimit) ?
      +                           (0) : lowerLimit;
  2728  02D1  084B               	movf	_lowerLimit+3,w
  2729  02D2  0264               	subwf	_upperLimit+3,w
  2730  02D3  1D03               	skipz
  2731  02D4  2ADF               	goto	u1105
  2732  02D5  084A               	movf	_lowerLimit+2,w
  2733  02D6  0263               	subwf	_upperLimit+2,w
  2734  02D7  1D03               	skipz
  2735  02D8  2ADF               	goto	u1105
  2736  02D9  0849               	movf	_lowerLimit+1,w
  2737  02DA  0262               	subwf	_upperLimit+1,w
  2738  02DB  1D03               	skipz
  2739  02DC  2ADF               	goto	u1105
  2740  02DD  0848               	movf	_lowerLimit,w
  2741  02DE  0261               	subwf	_upperLimit,w
  2742  02DF                     u1105:
  2743  02DF  1803               	btfsc	3,0
  2744  02E0  2AE9               	goto	l1842
  2745  02E1  3000               	movlw	0
  2746  02E2  00CB               	movwf	_lowerLimit+3
  2747  02E3  3000               	movlw	0
  2748  02E4  00CA               	movwf	_lowerLimit+2
  2749  02E5  3000               	movlw	0
  2750  02E6  00C9               	movwf	_lowerLimit+1
  2751  02E7  3000               	movlw	0
  2752  02E8  00C8               	movwf	_lowerLimit
  2753  02E9                     l1842:
  2754                           
  2755                           ;main.c: 167:             m = (1023*fixedPointFactor)/(upperLimit - lowerLimit);
  2756  02E9  0848               	movf	_lowerLimit,w
  2757  02EA  0261               	subwf	_upperLimit,w
  2758  02EB  00A0               	movwf	??_setState
  2759  02EC  0849               	movf	_lowerLimit+1,w
  2760  02ED  3B62               	subwfb	_upperLimit+1,w
  2761  02EE  00A1               	movwf	??_setState+1
  2762  02EF  084A               	movf	_lowerLimit+2,w
  2763  02F0  3B63               	subwfb	_upperLimit+2,w
  2764  02F1  00A2               	movwf	??_setState+2
  2765  02F2  084B               	movf	_lowerLimit+3,w
  2766  02F3  3B64               	subwfb	_upperLimit+3,w
  2767  02F4  00A3               	movwf	??_setState+3
  2768  02F5  0823               	movf	??_setState+3,w
  2769  02F6  00F3               	movwf	___lldiv@divisor+3
  2770  02F7  0822               	movf	??_setState+2,w
  2771  02F8  00F2               	movwf	___lldiv@divisor+2
  2772  02F9  0821               	movf	??_setState+1,w
  2773  02FA  00F1               	movwf	___lldiv@divisor+1
  2774  02FB  0820               	movf	??_setState,w
  2775  02FC  00F0               	movwf	___lldiv@divisor
  2776  02FD  3000               	movlw	0
  2777  02FE  00F7               	movwf	___lldiv@dividend+3
  2778  02FF  300F               	movlw	15
  2779  0300  00F6               	movwf	___lldiv@dividend+2
  2780  0301  309C               	movlw	156
  2781  0302  00F5               	movwf	___lldiv@dividend+1
  2782  0303  3018               	movlw	24
  2783  0304  00F4               	movwf	___lldiv@dividend
  2784  0305  2481               	fcall	___lldiv
  2785  0306  0873               	movf	?___lldiv+3,w
  2786  0307  00DF               	movwf	_m+3
  2787  0308  0872               	movf	?___lldiv+2,w
  2788  0309  00DE               	movwf	_m+2
  2789  030A  0871               	movf	?___lldiv+1,w
  2790  030B  00DD               	movwf	_m+1
  2791  030C  0870               	movf	?___lldiv,w
  2792  030D  00DC               	movwf	_m
  2793                           
  2794                           ;main.c: 168:             b = lowerLimit*m;
  2795  030E  085C               	movf	_m,w
  2796  030F  00F0               	movwf	___tmul@multiplier
  2797  0310  085D               	movf	_m+1,w
  2798  0311  00F1               	movwf	___tmul@multiplier+1
  2799  0312  085E               	movf	_m+2,w
  2800  0313  00F2               	movwf	___tmul@multiplier+2
  2801  0314  0848               	movf	_lowerLimit,w
  2802  0315  00F3               	movwf	___tmul@multiplicand
  2803  0316  0849               	movf	_lowerLimit+1,w
  2804  0317  00F4               	movwf	___tmul@multiplicand+1
  2805  0318  084A               	movf	_lowerLimit+2,w
  2806  0319  00F5               	movwf	___tmul@multiplicand+2
  2807  031A  2502               	fcall	___tmul
  2808  031B  0870               	movf	?___tmul,w
  2809  031C  00D0               	movwf	_b
  2810  031D  0871               	movf	?___tmul+1,w
  2811  031E  00D1               	movwf	_b+1
  2812  031F  0872               	movf	?___tmul+2,w
  2813  0320  00D2               	movwf	_b+2
  2814                           
  2815                           ;main.c: 169:             break;
  2816  0321  2B3C               	goto	l1850
  2817  0322                     l332:	
  2818                           ;main.c: 173:             do { LATCbits.LATC0 = 1; } while(0);
  2819                           
  2820  0322  0022               	movlb	2	; select bank2
  2821  0323  140E               	bsf	14,0	;volatile
  2822  0324  2B3C               	goto	l1850
  2823  0325                     l335:	
  2824                           ;main.c: 177:             do { LATBbits.LATB7 = 1; } while(0);
  2825                           
  2826  0325  0022               	movlb	2	; select bank2
  2827  0326  178D               	bsf	13,7	;volatile
  2828  0327  2B3C               	goto	l1850
  2829  0328                     l1848:
  2830  0328  0020               	movlb	0	; select bank0
  2831  0329  0824               	movf	setState@newState,w
  2832  032A  00A0               	movwf	??_setState
  2833  032B  01A1               	clrf	??_setState+1
  2834                           
  2835                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2836                           ; Switch size 1, requested type "simple"
  2837                           ; Number of cases is 1, Range of values is 0 to 0
  2838                           ; switch strategies available:
  2839                           ; Name         Instructions Cycles
  2840                           ; simple_byte            4     3 (average)
  2841                           ; direct_byte            8     6 (fixed)
  2842                           ; jumptable            260     6 (fixed)
  2843                           ;	Chosen strategy is simple_byte
  2844  032C  0821               	movf	??_setState+1,w
  2845  032D  3A00               	xorlw	0	; case 0
  2846  032E  1903               	skipnz
  2847  032F  2B31               	goto	l2130
  2848  0330  2B3C               	goto	l1850
  2849  0331                     l2130:
  2850                           
  2851                           ; Switch size 1, requested type "simple"
  2852                           ; Number of cases is 3, Range of values is 1 to 3
  2853                           ; switch strategies available:
  2854                           ; Name         Instructions Cycles
  2855                           ; simple_byte           10     6 (average)
  2856                           ; direct_byte           15     9 (fixed)
  2857                           ; jumptable            263     9 (fixed)
  2858                           ;	Chosen strategy is simple_byte
  2859  0331  0820               	movf	??_setState,w
  2860  0332  3A01               	xorlw	1	; case 1
  2861  0333  1903               	skipnz
  2862  0334  2ABE               	goto	l1830
  2863  0335  3A03               	xorlw	3	; case 2
  2864  0336  1903               	skipnz
  2865  0337  2B22               	goto	l332
  2866  0338  3A01               	xorlw	1	; case 3
  2867  0339  1903               	skipnz
  2868  033A  2B25               	goto	l335
  2869  033B  2B3C               	goto	l1850
  2870  033C                     l1850:
  2871                           
  2872                           ;main.c: 181:     msTick = 0;
  2873  033C  0020               	movlb	0	; select bank0
  2874  033D  01D5               	clrf	_msTick	;volatile
  2875  033E  01D6               	clrf	_msTick+1	;volatile
  2876                           
  2877                           ;main.c: 183:     currentState = newState;
  2878  033F  0824               	movf	setState@newState,w
  2879  0340  00A0               	movwf	??_setState
  2880  0341  0820               	movf	??_setState,w
  2881  0342  00D9               	movwf	_currentState
  2882  0343  0008               	return
  2883  0344                     __end_of_setState:
  2884                           
  2885                           	psect	text5
  2886  03C5                     __ptext5:	
  2887 ;; *************** function _readFlash *****************
  2888 ;; Defined at:
  2889 ;;		line 82 in file "main.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;		None
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0, pclath, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 1F/0
  2900 ;;		On exit  : 1F/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMMON   BANK0   BANK1
  2903 ;;      Params:         0       0       0
  2904 ;;      Locals:         0       0       0
  2905 ;;      Temps:          4       0       0
  2906 ;;      Totals:         4       0       0
  2907 ;;Total ram usage:        4 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    5
  2910 ;; This function calls:
  2911 ;;		_FLASH_ReadWord
  2912 ;; This function is called by:
  2913 ;;		_setState
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function _readFlash
  2919  03C5                     _readFlash:
  2920                           
  2921                           ;main.c: 85:     lowerLimit = 0;
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in _readFlash: [wreg+status,2+status,0+pclath+cstack]
  2925  03C5  3000               	movlw	0
  2926  03C6  00CB               	movwf	_lowerLimit+3
  2927  03C7  3000               	movlw	0
  2928  03C8  00CA               	movwf	_lowerLimit+2
  2929  03C9  3000               	movlw	0
  2930  03CA  00C9               	movwf	_lowerLimit+1
  2931  03CB  3000               	movlw	0
  2932  03CC  00C8               	movwf	_lowerLimit
  2933                           
  2934                           ;main.c: 86:     lowerLimit += (uint32_t)FLASH_ReadWord(0x800 -4) << 16;
  2935  03CD  30FC               	movlw	252
  2936  03CE  00F0               	movwf	FLASH_ReadWord@flashAddr
  2937  03CF  3007               	movlw	7
  2938  03D0  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2939  03D1  2564               	fcall	_FLASH_ReadWord
  2940  03D2  0870               	movf	?_FLASH_ReadWord,w
  2941  03D3  00F3               	movwf	??_readFlash
  2942  03D4  0871               	movf	?_FLASH_ReadWord+1,w
  2943  03D5  00F4               	movwf	??_readFlash+1
  2944  03D6  01F5               	clrf	??_readFlash+2
  2945  03D7  01F6               	clrf	??_readFlash+3
  2946  03D8  3010               	movlw	16
  2947  03D9                     u935:
  2948  03D9  35F3               	lslf	??_readFlash,f
  2949  03DA  0DF4               	rlf	??_readFlash+1,f
  2950  03DB  0DF5               	rlf	??_readFlash+2,f
  2951  03DC  0DF6               	rlf	??_readFlash+3,f
  2952  03DD  0B89               	decfsz	9,f
  2953  03DE  2BD9               	goto	u935
  2954  03DF  0873               	movf	??_readFlash,w
  2955  03E0  0020               	movlb	0	; select bank0
  2956  03E1  07C8               	addwf	_lowerLimit,f
  2957  03E2  0874               	movf	??_readFlash+1,w
  2958  03E3  3DC9               	addwfc	_lowerLimit+1,f
  2959  03E4  0875               	movf	??_readFlash+2,w
  2960  03E5  3DCA               	addwfc	_lowerLimit+2,f
  2961  03E6  0876               	movf	??_readFlash+3,w
  2962  03E7  3DCB               	addwfc	_lowerLimit+3,f
  2963                           
  2964                           ;main.c: 87:     lowerLimit |= (uint32_t)FLASH_ReadWord(0x800 -3);
  2965  03E8  30FD               	movlw	253
  2966  03E9  00F0               	movwf	FLASH_ReadWord@flashAddr
  2967  03EA  3007               	movlw	7
  2968  03EB  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2969  03EC  2564               	fcall	_FLASH_ReadWord
  2970  03ED  0870               	movf	?_FLASH_ReadWord,w
  2971  03EE  00F3               	movwf	??_readFlash
  2972  03EF  0871               	movf	?_FLASH_ReadWord+1,w
  2973  03F0  00F4               	movwf	??_readFlash+1
  2974  03F1  01F5               	clrf	??_readFlash+2
  2975  03F2  01F6               	clrf	??_readFlash+3
  2976  03F3  0873               	movf	??_readFlash,w
  2977  03F4  0020               	movlb	0	; select bank0
  2978  03F5  04C8               	iorwf	_lowerLimit,f
  2979  03F6  0874               	movf	??_readFlash+1,w
  2980  03F7  04C9               	iorwf	_lowerLimit+1,f
  2981  03F8  0875               	movf	??_readFlash+2,w
  2982  03F9  04CA               	iorwf	_lowerLimit+2,f
  2983  03FA  0876               	movf	??_readFlash+3,w
  2984  03FB  04CB               	iorwf	_lowerLimit+3,f
  2985                           
  2986                           ;main.c: 90:     upperLimit = 0;
  2987  03FC  3000               	movlw	0
  2988  03FD  00E4               	movwf	_upperLimit+3
  2989  03FE  3000               	movlw	0
  2990  03FF  00E3               	movwf	_upperLimit+2
  2991  0400  3000               	movlw	0
  2992  0401  00E2               	movwf	_upperLimit+1
  2993  0402  3000               	movlw	0
  2994  0403  00E1               	movwf	_upperLimit
  2995                           
  2996                           ;main.c: 91:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -2) << 16;
  2997  0404  30FE               	movlw	254
  2998  0405  00F0               	movwf	FLASH_ReadWord@flashAddr
  2999  0406  3007               	movlw	7
  3000  0407  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3001  0408  2564               	fcall	_FLASH_ReadWord
  3002  0409  0870               	movf	?_FLASH_ReadWord,w
  3003  040A  00F3               	movwf	??_readFlash
  3004  040B  0871               	movf	?_FLASH_ReadWord+1,w
  3005  040C  00F4               	movwf	??_readFlash+1
  3006  040D  01F5               	clrf	??_readFlash+2
  3007  040E  01F6               	clrf	??_readFlash+3
  3008  040F  3010               	movlw	16
  3009  0410                     u945:
  3010  0410  35F3               	lslf	??_readFlash,f
  3011  0411  0DF4               	rlf	??_readFlash+1,f
  3012  0412  0DF5               	rlf	??_readFlash+2,f
  3013  0413  0DF6               	rlf	??_readFlash+3,f
  3014  0414  0B89               	decfsz	9,f
  3015  0415  2C10               	goto	u945
  3016  0416  0873               	movf	??_readFlash,w
  3017  0417  0020               	movlb	0	; select bank0
  3018  0418  07E1               	addwf	_upperLimit,f
  3019  0419  0874               	movf	??_readFlash+1,w
  3020  041A  3DE2               	addwfc	_upperLimit+1,f
  3021  041B  0875               	movf	??_readFlash+2,w
  3022  041C  3DE3               	addwfc	_upperLimit+2,f
  3023  041D  0876               	movf	??_readFlash+3,w
  3024  041E  3DE4               	addwfc	_upperLimit+3,f
  3025                           
  3026                           ;main.c: 92:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -1) ;
  3027  041F  30FF               	movlw	255
  3028  0420  00F0               	movwf	FLASH_ReadWord@flashAddr
  3029  0421  3007               	movlw	7
  3030  0422  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3031  0423  2564               	fcall	_FLASH_ReadWord
  3032  0424  0870               	movf	?_FLASH_ReadWord,w
  3033  0425  0020               	movlb	0	; select bank0
  3034  0426  07E1               	addwf	_upperLimit,f
  3035  0427  0871               	movf	?_FLASH_ReadWord+1,w
  3036  0428  3DE2               	addwfc	_upperLimit+1,f
  3037  0429  3000               	movlw	0
  3038  042A  3DE3               	addwfc	_upperLimit+2,f
  3039  042B  3DE4               	addwfc	_upperLimit+3,f
  3040  042C  0008               	return
  3041  042D                     __end_of_readFlash:
  3042                           
  3043                           	psect	text6
  3044  0564                     __ptext6:	
  3045 ;; *************** function _FLASH_ReadWord *****************
  3046 ;; Defined at:
  3047 ;;		line 58 in file "mcc_generated_files/memory.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  flashAddr       2    0[COMMON] unsigned short 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  2    0[COMMON] unsigned short 
  3054 ;; Registers used:
  3055 ;;		wreg, status,2, status,0
  3056 ;; Tracked objects:
  3057 ;;		On entry : 1F/0
  3058 ;;		On exit  : 1F/3
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMMON   BANK0   BANK1
  3061 ;;      Params:         2       0       0
  3062 ;;      Locals:         1       0       0
  3063 ;;      Temps:          0       0       0
  3064 ;;      Totals:         3       0       0
  3065 ;;Total ram usage:        3 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    4
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_readFlash
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           
  3076                           ;psect for function _FLASH_ReadWord
  3077  0564                     _FLASH_ReadWord:
  3078                           
  3079                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  3080                           
  3081                           ;incstack = 0
  3082                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3083  0564  3000               	movlw	0
  3084  0565  1B8B               	btfsc	11,7	;volatile
  3085  0566  3001               	movlw	1
  3086  0567  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  3087                           
  3088                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  3089  0568  138B               	bcf	11,7	;volatile
  3090                           
  3091                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  3092  0569  0870               	movf	FLASH_ReadWord@flashAddr,w
  3093  056A  0023               	movlb	3	; select bank3
  3094  056B  0091               	movwf	17	;volatile
  3095                           
  3096                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  3097  056C  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  3098  056D  0092               	movwf	18	;volatile
  3099                           
  3100                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  3101  056E  1315               	bcf	21,6	;volatile
  3102                           
  3103                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  3104  056F  1415               	bsf	21,0	;volatile
  3105                           
  3106                           ;mcc_generated_files/memory.c: 68:     __nop();
  3107  0570  0000               	nop
  3108                           
  3109                           ;mcc_generated_files/memory.c: 69:     __nop();
  3110  0571  0000               	nop
  3111                           
  3112                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  3113  0572  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  3114  0573  1C03               	skipc
  3115  0574  138B               	bcf	11,7	;volatile
  3116  0575  1803               	skipnc
  3117  0576  178B               	bsf	11,7	;volatile
  3118                           
  3119                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  3120  0577  0023               	movlb	3	; select bank3
  3121  0578  0814               	movf	20,w	;volatile
  3122  0579  00F1               	movwf	?_FLASH_ReadWord+1
  3123  057A  0813               	movf	19,w	;volatile
  3124  057B  00F0               	movwf	?_FLASH_ReadWord
  3125  057C  0008               	return
  3126  057D                     __end_of_FLASH_ReadWord:
  3127                           
  3128                           	psect	text7
  3129  0502                     __ptext7:	
  3130 ;; *************** function ___tmul *****************
  3131 ;; Defined at:
  3132 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul24.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  multiplier      3    0[COMMON] unsigned um
  3135 ;;  multiplicand    3    3[COMMON] unsigned um
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  product         3    6[COMMON] unsigned um
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  3    0[COMMON] unsigned um
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 1F/0
  3144 ;;		On exit  : 1F/0
  3145 ;;		Unchanged: 1F/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1
  3147 ;;      Params:         6       0       0
  3148 ;;      Locals:         3       0       0
  3149 ;;      Temps:          0       0       0
  3150 ;;      Totals:         9       0       0
  3151 ;;Total ram usage:        9 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    4
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_setState
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function ___tmul
  3163  0502                     ___tmul:
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  3167  0502  3000               	movlw	0
  3168  0503  00F6               	movwf	___tmul@product
  3169  0504  3000               	movlw	0
  3170  0505  00F7               	movwf	___tmul@product+1
  3171  0506  3000               	movlw	0
  3172  0507  00F8               	movwf	___tmul@product+2
  3173  0508                     l1754:
  3174  0508  1C70               	btfss	___tmul@multiplier,0
  3175  0509  2D10               	goto	l1758
  3176  050A  0873               	movf	___tmul@multiplicand,w
  3177  050B  07F6               	addwf	___tmul@product,f
  3178  050C  0874               	movf	___tmul@multiplicand+1,w
  3179  050D  3DF7               	addwfc	___tmul@product+1,f
  3180  050E  0875               	movf	___tmul@multiplicand+2,w
  3181  050F  3DF8               	addwfc	___tmul@product+2,f
  3182  0510                     l1758:
  3183  0510  3001               	movlw	1
  3184  0511                     u965:
  3185  0511  35F3               	lslf	___tmul@multiplicand,f
  3186  0512  0DF4               	rlf	___tmul@multiplicand+1,f
  3187  0513  0DF5               	rlf	___tmul@multiplicand+2,f
  3188  0514  0B89               	decfsz	9,f
  3189  0515  2D11               	goto	u965
  3190  0516  3001               	movlw	1
  3191  0517                     u975:
  3192  0517  36F2               	lsrf	___tmul@multiplier+2,f
  3193  0518  0CF1               	rrf	___tmul@multiplier+1,f
  3194  0519  0CF0               	rrf	___tmul@multiplier,f
  3195  051A  0B89               	decfsz	9,f
  3196  051B  2D17               	goto	u975
  3197  051C  0872               	movf	___tmul@multiplier+2,w
  3198  051D  0471               	iorwf	___tmul@multiplier+1,w
  3199  051E  0470               	iorwf	___tmul@multiplier,w
  3200  051F  1D03               	skipz
  3201  0520  2D08               	goto	l1754
  3202  0521  0876               	movf	___tmul@product,w
  3203  0522  00F0               	movwf	?___tmul
  3204  0523  0877               	movf	___tmul@product+1,w
  3205  0524  00F1               	movwf	?___tmul+1
  3206  0525  0878               	movf	___tmul@product+2,w
  3207  0526  00F2               	movwf	?___tmul+2
  3208  0527  0008               	return
  3209  0528                     __end_of___tmul:
  3210                           
  3211                           	psect	text8
  3212  0481                     __ptext8:	
  3213 ;; *************** function ___lldiv *****************
  3214 ;; Defined at:
  3215 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\__lldiv.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  divisor         4    0[COMMON] unsigned long 
  3218 ;;  dividend        4    4[COMMON] unsigned long 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  quotient        4    9[COMMON] unsigned long 
  3221 ;;  counter         1   13[COMMON] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  4    0[COMMON] unsigned long 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, status,0
  3226 ;; Tracked objects:
  3227 ;;		On entry : 1F/0
  3228 ;;		On exit  : 1F/0
  3229 ;;		Unchanged: 1F/0
  3230 ;; Data sizes:     COMMON   BANK0   BANK1
  3231 ;;      Params:         8       0       0
  3232 ;;      Locals:         5       0       0
  3233 ;;      Temps:          1       0       0
  3234 ;;      Totals:        14       0       0
  3235 ;;Total ram usage:       14 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    4
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_setState
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           
  3246                           ;psect for function ___lldiv
  3247  0481                     ___lldiv:
  3248                           
  3249                           ;incstack = 0
  3250                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3251  0481  3000               	movlw	0
  3252  0482  00FC               	movwf	___lldiv@quotient+3
  3253  0483  3000               	movlw	0
  3254  0484  00FB               	movwf	___lldiv@quotient+2
  3255  0485  3000               	movlw	0
  3256  0486  00FA               	movwf	___lldiv@quotient+1
  3257  0487  3000               	movlw	0
  3258  0488  00F9               	movwf	___lldiv@quotient
  3259  0489  0873               	movf	___lldiv@divisor+3,w
  3260  048A  0472               	iorwf	___lldiv@divisor+2,w
  3261  048B  0471               	iorwf	___lldiv@divisor+1,w
  3262  048C  0470               	iorwf	___lldiv@divisor,w
  3263  048D  1903               	skipnz
  3264  048E  2CCA               	goto	l1786
  3265  048F  01FD               	clrf	___lldiv@counter
  3266  0490  0AFD               	incf	___lldiv@counter,f
  3267  0491                     l1772:
  3268  0491  1BF3               	btfsc	___lldiv@divisor+3,7
  3269  0492  2C9F               	goto	l1774
  3270  0493  3001               	movlw	1
  3271  0494                     u1005:
  3272  0494  35F0               	lslf	___lldiv@divisor,f
  3273  0495  0DF1               	rlf	___lldiv@divisor+1,f
  3274  0496  0DF2               	rlf	___lldiv@divisor+2,f
  3275  0497  0DF3               	rlf	___lldiv@divisor+3,f
  3276  0498  0B89               	decfsz	9,f
  3277  0499  2C94               	goto	u1005
  3278  049A  3001               	movlw	1
  3279  049B  00F8               	movwf	??___lldiv
  3280  049C  0878               	movf	??___lldiv,w
  3281  049D  07FD               	addwf	___lldiv@counter,f
  3282  049E  2C91               	goto	l1772
  3283  049F                     l1774:
  3284  049F  3001               	movlw	1
  3285  04A0                     u1025:
  3286  04A0  35F9               	lslf	___lldiv@quotient,f
  3287  04A1  0DFA               	rlf	___lldiv@quotient+1,f
  3288  04A2  0DFB               	rlf	___lldiv@quotient+2,f
  3289  04A3  0DFC               	rlf	___lldiv@quotient+3,f
  3290  04A4  0B89               	decfsz	9,f
  3291  04A5  2CA0               	goto	u1025
  3292  04A6  0873               	movf	___lldiv@divisor+3,w
  3293  04A7  0277               	subwf	___lldiv@dividend+3,w
  3294  04A8  1D03               	skipz
  3295  04A9  2CB4               	goto	u1035
  3296  04AA  0872               	movf	___lldiv@divisor+2,w
  3297  04AB  0276               	subwf	___lldiv@dividend+2,w
  3298  04AC  1D03               	skipz
  3299  04AD  2CB4               	goto	u1035
  3300  04AE  0871               	movf	___lldiv@divisor+1,w
  3301  04AF  0275               	subwf	___lldiv@dividend+1,w
  3302  04B0  1D03               	skipz
  3303  04B1  2CB4               	goto	u1035
  3304  04B2  0870               	movf	___lldiv@divisor,w
  3305  04B3  0274               	subwf	___lldiv@dividend,w
  3306  04B4                     u1035:
  3307  04B4  1C03               	skipc
  3308  04B5  2CBF               	goto	l1782
  3309  04B6  0870               	movf	___lldiv@divisor,w
  3310  04B7  02F4               	subwf	___lldiv@dividend,f
  3311  04B8  0871               	movf	___lldiv@divisor+1,w
  3312  04B9  3BF5               	subwfb	___lldiv@dividend+1,f
  3313  04BA  0872               	movf	___lldiv@divisor+2,w
  3314  04BB  3BF6               	subwfb	___lldiv@dividend+2,f
  3315  04BC  0873               	movf	___lldiv@divisor+3,w
  3316  04BD  3BF7               	subwfb	___lldiv@dividend+3,f
  3317  04BE  1479               	bsf	___lldiv@quotient,0
  3318  04BF                     l1782:
  3319  04BF  3001               	movlw	1
  3320  04C0                     u1045:
  3321  04C0  36F3               	lsrf	___lldiv@divisor+3,f
  3322  04C1  0CF2               	rrf	___lldiv@divisor+2,f
  3323  04C2  0CF1               	rrf	___lldiv@divisor+1,f
  3324  04C3  0CF0               	rrf	___lldiv@divisor,f
  3325  04C4  0B89               	decfsz	9,f
  3326  04C5  2CC0               	goto	u1045
  3327  04C6  3001               	movlw	1
  3328  04C7  02FD               	subwf	___lldiv@counter,f
  3329  04C8  1D03               	btfss	3,2
  3330  04C9  2C9F               	goto	l1774
  3331  04CA                     l1786:
  3332  04CA  087C               	movf	___lldiv@quotient+3,w
  3333  04CB  00F3               	movwf	?___lldiv+3
  3334  04CC  087B               	movf	___lldiv@quotient+2,w
  3335  04CD  00F2               	movwf	?___lldiv+2
  3336  04CE  087A               	movf	___lldiv@quotient+1,w
  3337  04CF  00F1               	movwf	?___lldiv+1
  3338  04D0  0879               	movf	___lldiv@quotient,w
  3339  04D1  00F0               	movwf	?___lldiv
  3340  04D2  0008               	return
  3341  04D3                     __end_of___lldiv:
  3342                           
  3343                           	psect	text9
  3344  0173                     __ptext9:	
  3345 ;; *************** function _setLedsForPositioning *****************
  3346 ;; Defined at:
  3347 ;;		line 326 in file "main.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  adcValue        4    0[COMMON] long 
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg, status,2, status,0
  3356 ;; Tracked objects:
  3357 ;;		On entry : 1F/0
  3358 ;;		On exit  : 1F/2
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMMON   BANK0   BANK1
  3361 ;;      Params:         4       0       0
  3362 ;;      Locals:         0       0       0
  3363 ;;      Temps:          0       0       0
  3364 ;;      Totals:         4       0       0
  3365 ;;Total ram usage:        4 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    4
  3368 ;; This function calls:
  3369 ;;		Nothing
  3370 ;; This function is called by:
  3371 ;;		_main
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           
  3376                           ;psect for function _setLedsForPositioning
  3377  0173                     _setLedsForPositioning:
  3378                           
  3379                           ;incstack = 0
  3380                           ; Regs used in _setLedsForPositioning: [wreg+status,2+status,0]
  3381                           ;main.c: 326: void setLedsForPositioning(int32_t adcValue);main.c: 327: {;main.c: 328:  
      +                             do { LATCbits.LATC0 = 0; } while(0);
  3382  0173  0022               	movlb	2	; select bank2
  3383  0174  100E               	bcf	14,0	;volatile
  3384                           
  3385                           ;main.c: 329:     do { LATCbits.LATC1 = 0; } while(0);
  3386  0175  108E               	bcf	14,1	;volatile
  3387                           
  3388                           ;main.c: 330:     do { LATCbits.LATC2 = 0; } while(0);
  3389  0176  110E               	bcf	14,2	;volatile
  3390                           
  3391                           ;main.c: 331:     do { LATCbits.LATC3 = 0; } while(0);
  3392  0177  118E               	bcf	14,3	;volatile
  3393                           
  3394                           ;main.c: 332:     do { LATCbits.LATC4 = 0; } while(0);
  3395  0178  120E               	bcf	14,4	;volatile
  3396                           
  3397                           ;main.c: 333:     do { LATCbits.LATC5 = 1; } while(0);
  3398  0179  168E               	bsf	14,5	;volatile
  3399                           
  3400                           ;main.c: 334:     do { LATCbits.LATC6 = 0; } while(0);
  3401  017A  130E               	bcf	14,6	;volatile
  3402                           
  3403                           ;main.c: 335:     do { LATCbits.LATC7 = 0; } while(0);
  3404  017B  138E               	bcf	14,7	;volatile
  3405                           
  3406                           ;main.c: 336:     do { LATBbits.LATB5 = 0; } while(0);
  3407  017C  128D               	bcf	13,5	;volatile
  3408                           
  3409                           ;main.c: 337:     do { LATBbits.LATB6 = 0; } while(0);
  3410  017D  130D               	bcf	13,6	;volatile
  3411                           
  3412                           ;main.c: 338:     do { LATBbits.LATB7 = 0; } while(0);
  3413  017E  138D               	bcf	13,7	;volatile
  3414                           
  3415                           ;main.c: 342:     if(adcValue < 54)
  3416  017F  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3417  0180  298E               	goto	l425
  3418  0181  0873               	movf	setLedsForPositioning@adcValue+3,w
  3419  0182  1D03               	btfss	3,2
  3420  0183  2990               	goto	l1860
  3421  0184  0872               	movf	setLedsForPositioning@adcValue+2,w
  3422  0185  1D03               	btfss	3,2
  3423  0186  2990               	goto	l1860
  3424  0187  0871               	movf	setLedsForPositioning@adcValue+1,w
  3425  0188  1D03               	btfss	3,2
  3426  0189  2990               	goto	l1860
  3427  018A  3036               	movlw	54
  3428  018B  0270               	subwf	setLedsForPositioning@adcValue,w
  3429  018C  1803               	btfsc	3,0
  3430  018D  2990               	goto	l1860
  3431  018E                     l425:	
  3432                           ;main.c: 343:     {;main.c: 344:         do { LATCbits.LATC0 = 1; } while(0);
  3433                           
  3434  018E  140E               	bsf	14,0	;volatile
  3435  018F  0008               	return
  3436  0190                     l1860:
  3437  0190  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3438  0191  299F               	goto	l429
  3439  0192  0873               	movf	setLedsForPositioning@adcValue+3,w
  3440  0193  1D03               	btfss	3,2
  3441  0194  29A2               	goto	l1862
  3442  0195  0872               	movf	setLedsForPositioning@adcValue+2,w
  3443  0196  1D03               	btfss	3,2
  3444  0197  29A2               	goto	l1862
  3445  0198  0871               	movf	setLedsForPositioning@adcValue+1,w
  3446  0199  1D03               	btfss	3,2
  3447  019A  29A2               	goto	l1862
  3448  019B  306C               	movlw	108
  3449  019C  0270               	subwf	setLedsForPositioning@adcValue,w
  3450  019D  1803               	btfsc	3,0
  3451  019E  29A2               	goto	l1862
  3452  019F                     l429:	
  3453                           ;main.c: 347:     {;main.c: 348:         do { LATCbits.LATC0 = 1; } while(0);
  3454                           
  3455  019F  140E               	bsf	14,0	;volatile
  3456                           
  3457                           ;main.c: 349:         do { LATCbits.LATC1 = 1; } while(0);
  3458  01A0  148E               	bsf	14,1	;volatile
  3459  01A1  0008               	return
  3460  01A2                     l1862:
  3461  01A2  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3462  01A3  29B1               	goto	l435
  3463  01A4  0873               	movf	setLedsForPositioning@adcValue+3,w
  3464  01A5  1D03               	btfss	3,2
  3465  01A6  29B3               	goto	l1864
  3466  01A7  0872               	movf	setLedsForPositioning@adcValue+2,w
  3467  01A8  1D03               	btfss	3,2
  3468  01A9  29B3               	goto	l1864
  3469  01AA  0871               	movf	setLedsForPositioning@adcValue+1,w
  3470  01AB  1D03               	btfss	3,2
  3471  01AC  29B3               	goto	l1864
  3472  01AD  30A2               	movlw	162
  3473  01AE  0270               	subwf	setLedsForPositioning@adcValue,w
  3474  01AF  1803               	btfsc	3,0
  3475  01B0  29B3               	goto	l1864
  3476  01B1                     l435:	
  3477                           ;main.c: 352:     {;main.c: 353:         do { LATCbits.LATC1 = 1; } while(0);
  3478                           
  3479  01B1  148E               	bsf	14,1	;volatile
  3480  01B2  0008               	return
  3481  01B3                     l1864:
  3482  01B3  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3483  01B4  29C2               	goto	l439
  3484  01B5  0873               	movf	setLedsForPositioning@adcValue+3,w
  3485  01B6  1D03               	btfss	3,2
  3486  01B7  29C5               	goto	l1866
  3487  01B8  0872               	movf	setLedsForPositioning@adcValue+2,w
  3488  01B9  1D03               	btfss	3,2
  3489  01BA  29C5               	goto	l1866
  3490  01BB  0871               	movf	setLedsForPositioning@adcValue+1,w
  3491  01BC  1D03               	btfss	3,2
  3492  01BD  29C5               	goto	l1866
  3493  01BE  30D7               	movlw	215
  3494  01BF  0270               	subwf	setLedsForPositioning@adcValue,w
  3495  01C0  1803               	btfsc	3,0
  3496  01C1  29C5               	goto	l1866
  3497  01C2                     l439:	
  3498                           ;main.c: 356:     {;main.c: 357:         do { LATCbits.LATC1 = 1; } while(0);
  3499                           
  3500  01C2  148E               	bsf	14,1	;volatile
  3501                           
  3502                           ;main.c: 358:         do { LATCbits.LATC2 = 1; } while(0);
  3503  01C3  150E               	bsf	14,2	;volatile
  3504  01C4  0008               	return
  3505  01C5                     l1866:
  3506  01C5  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3507  01C6  29D3               	goto	l445
  3508  01C7  0873               	movf	setLedsForPositioning@adcValue+3,w
  3509  01C8  1D03               	btfss	3,2
  3510  01C9  29D5               	goto	l1868
  3511  01CA  0872               	movf	setLedsForPositioning@adcValue+2,w
  3512  01CB  1D03               	btfss	3,2
  3513  01CC  29D5               	goto	l1868
  3514  01CD  300D               	movlw	13
  3515  01CE  0270               	subwf	setLedsForPositioning@adcValue,w
  3516  01CF  3001               	movlw	1
  3517  01D0  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3518  01D1  1803               	btfsc	3,0
  3519  01D2  29D5               	goto	l1868
  3520  01D3                     l445:	
  3521                           ;main.c: 361:     {;main.c: 362:         do { LATCbits.LATC2 = 1; } while(0);
  3522                           
  3523  01D3  150E               	bsf	14,2	;volatile
  3524  01D4  0008               	return
  3525  01D5                     l1868:
  3526  01D5  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3527  01D6  29E3               	goto	l449
  3528  01D7  0873               	movf	setLedsForPositioning@adcValue+3,w
  3529  01D8  1D03               	btfss	3,2
  3530  01D9  29E6               	goto	l1870
  3531  01DA  0872               	movf	setLedsForPositioning@adcValue+2,w
  3532  01DB  1D03               	btfss	3,2
  3533  01DC  29E6               	goto	l1870
  3534  01DD  3043               	movlw	67
  3535  01DE  0270               	subwf	setLedsForPositioning@adcValue,w
  3536  01DF  3001               	movlw	1
  3537  01E0  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3538  01E1  1803               	btfsc	3,0
  3539  01E2  29E6               	goto	l1870
  3540  01E3                     l449:	
  3541                           ;main.c: 365:     {;main.c: 366:         do { LATCbits.LATC2 = 1; } while(0);
  3542                           
  3543  01E3  150E               	bsf	14,2	;volatile
  3544                           
  3545                           ;main.c: 367:         do { LATCbits.LATC3 = 1; } while(0);
  3546  01E4  158E               	bsf	14,3	;volatile
  3547  01E5  0008               	return
  3548  01E6                     l1870:
  3549  01E6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3550  01E7  29F4               	goto	l455
  3551  01E8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3552  01E9  1D03               	btfss	3,2
  3553  01EA  29F6               	goto	l1872
  3554  01EB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3555  01EC  1D03               	btfss	3,2
  3556  01ED  29F6               	goto	l1872
  3557  01EE  3079               	movlw	121
  3558  01EF  0270               	subwf	setLedsForPositioning@adcValue,w
  3559  01F0  3001               	movlw	1
  3560  01F1  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3561  01F2  1803               	btfsc	3,0
  3562  01F3  29F6               	goto	l1872
  3563  01F4                     l455:	
  3564                           ;main.c: 370:     {;main.c: 371:         do { LATCbits.LATC3 = 1; } while(0);
  3565                           
  3566  01F4  158E               	bsf	14,3	;volatile
  3567  01F5  0008               	return
  3568  01F6                     l1872:
  3569  01F6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3570  01F7  2A04               	goto	l459
  3571  01F8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3572  01F9  1D03               	btfss	3,2
  3573  01FA  2A07               	goto	l1874
  3574  01FB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3575  01FC  1D03               	btfss	3,2
  3576  01FD  2A07               	goto	l1874
  3577  01FE  30AF               	movlw	175
  3578  01FF  0270               	subwf	setLedsForPositioning@adcValue,w
  3579  0200  3001               	movlw	1
  3580  0201  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3581  0202  1803               	btfsc	3,0
  3582  0203  2A07               	goto	l1874
  3583  0204                     l459:	
  3584                           ;main.c: 374:     {;main.c: 375:         do { LATCbits.LATC3 = 1; } while(0);
  3585                           
  3586  0204  158E               	bsf	14,3	;volatile
  3587                           
  3588                           ;main.c: 376:         do { LATCbits.LATC4 = 1; } while(0);
  3589  0205  160E               	bsf	14,4	;volatile
  3590  0206  0008               	return
  3591  0207                     l1874:
  3592  0207  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3593  0208  2A15               	goto	l465
  3594  0209  0873               	movf	setLedsForPositioning@adcValue+3,w
  3595  020A  1D03               	btfss	3,2
  3596  020B  2A17               	goto	l1876
  3597  020C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3598  020D  1D03               	btfss	3,2
  3599  020E  2A17               	goto	l1876
  3600  020F  30E5               	movlw	229
  3601  0210  0270               	subwf	setLedsForPositioning@adcValue,w
  3602  0211  3001               	movlw	1
  3603  0212  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3604  0213  1803               	btfsc	3,0
  3605  0214  2A17               	goto	l1876
  3606  0215                     l465:	
  3607                           ;main.c: 379:     {;main.c: 380:         do { LATCbits.LATC4 = 1; } while(0);
  3608                           
  3609  0215  160E               	bsf	14,4	;volatile
  3610  0216  0008               	return
  3611  0217                     l1876:
  3612  0217  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3613  0218  0008               	return
  3614  0219  0873               	movf	setLedsForPositioning@adcValue+3,w
  3615  021A  1D03               	btfss	3,2
  3616  021B  2A25               	goto	l1880
  3617  021C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3618  021D  1D03               	btfss	3,2
  3619  021E  2A25               	goto	l1880
  3620  021F  301A               	movlw	26
  3621  0220  0270               	subwf	setLedsForPositioning@adcValue,w
  3622  0221  3002               	movlw	2
  3623  0222  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3624  0223  1C03               	btfss	3,0
  3625  0224  0008               	return
  3626  0225                     l1880:
  3627  0225  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3628  0226  2A33               	goto	l471
  3629  0227  0873               	movf	setLedsForPositioning@adcValue+3,w
  3630  0228  1D03               	btfss	3,2
  3631  0229  2A35               	goto	l1882
  3632  022A  0872               	movf	setLedsForPositioning@adcValue+2,w
  3633  022B  1D03               	btfss	3,2
  3634  022C  2A35               	goto	l1882
  3635  022D  3050               	movlw	80
  3636  022E  0270               	subwf	setLedsForPositioning@adcValue,w
  3637  022F  3002               	movlw	2
  3638  0230  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3639  0231  1803               	btfsc	3,0
  3640  0232  2A35               	goto	l1882
  3641  0233                     l471:	
  3642                           ;main.c: 387:     {;main.c: 388:         do { LATCbits.LATC6 = 1; } while(0);
  3643                           
  3644  0233  170E               	bsf	14,6	;volatile
  3645  0234  0008               	return
  3646  0235                     l1882:
  3647  0235  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3648  0236  2A43               	goto	l475
  3649  0237  0873               	movf	setLedsForPositioning@adcValue+3,w
  3650  0238  1D03               	btfss	3,2
  3651  0239  2A46               	goto	l1884
  3652  023A  0872               	movf	setLedsForPositioning@adcValue+2,w
  3653  023B  1D03               	btfss	3,2
  3654  023C  2A46               	goto	l1884
  3655  023D  3086               	movlw	134
  3656  023E  0270               	subwf	setLedsForPositioning@adcValue,w
  3657  023F  3002               	movlw	2
  3658  0240  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3659  0241  1803               	btfsc	3,0
  3660  0242  2A46               	goto	l1884
  3661  0243                     l475:	
  3662                           ;main.c: 391:     {;main.c: 392:         do { LATCbits.LATC6 = 1; } while(0);
  3663                           
  3664  0243  170E               	bsf	14,6	;volatile
  3665                           
  3666                           ;main.c: 393:         do { LATCbits.LATC7 = 1; } while(0);
  3667  0244  178E               	bsf	14,7	;volatile
  3668  0245  0008               	return
  3669  0246                     l1884:
  3670  0246  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3671  0247  2A54               	goto	l481
  3672  0248  0873               	movf	setLedsForPositioning@adcValue+3,w
  3673  0249  1D03               	btfss	3,2
  3674  024A  2A56               	goto	l1886
  3675  024B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3676  024C  1D03               	btfss	3,2
  3677  024D  2A56               	goto	l1886
  3678  024E  30BC               	movlw	188
  3679  024F  0270               	subwf	setLedsForPositioning@adcValue,w
  3680  0250  3002               	movlw	2
  3681  0251  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3682  0252  1803               	btfsc	3,0
  3683  0253  2A56               	goto	l1886
  3684  0254                     l481:	
  3685                           ;main.c: 396:     {;main.c: 397:         do { LATCbits.LATC7 = 1; } while(0);
  3686                           
  3687  0254  178E               	bsf	14,7	;volatile
  3688  0255  0008               	return
  3689  0256                     l1886:
  3690  0256  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3691  0257  2A64               	goto	l485
  3692  0258  0873               	movf	setLedsForPositioning@adcValue+3,w
  3693  0259  1D03               	btfss	3,2
  3694  025A  2A67               	goto	l1888
  3695  025B  0872               	movf	setLedsForPositioning@adcValue+2,w
  3696  025C  1D03               	btfss	3,2
  3697  025D  2A67               	goto	l1888
  3698  025E  30F2               	movlw	242
  3699  025F  0270               	subwf	setLedsForPositioning@adcValue,w
  3700  0260  3002               	movlw	2
  3701  0261  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3702  0262  1803               	btfsc	3,0
  3703  0263  2A67               	goto	l1888
  3704  0264                     l485:	
  3705                           ;main.c: 400:     {;main.c: 401:         do { LATCbits.LATC7 = 1; } while(0);
  3706                           
  3707  0264  178E               	bsf	14,7	;volatile
  3708                           
  3709                           ;main.c: 402:         do { LATBbits.LATB5 = 1; } while(0);
  3710  0265  168D               	bsf	13,5	;volatile
  3711  0266  0008               	return
  3712  0267                     l1888:
  3713  0267  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3714  0268  2A75               	goto	l491
  3715  0269  0873               	movf	setLedsForPositioning@adcValue+3,w
  3716  026A  1D03               	btfss	3,2
  3717  026B  2A77               	goto	l1890
  3718  026C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3719  026D  1D03               	btfss	3,2
  3720  026E  2A77               	goto	l1890
  3721  026F  3028               	movlw	40
  3722  0270  0270               	subwf	setLedsForPositioning@adcValue,w
  3723  0271  3003               	movlw	3
  3724  0272  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3725  0273  1803               	btfsc	3,0
  3726  0274  2A77               	goto	l1890
  3727  0275                     l491:	
  3728                           ;main.c: 405:     {;main.c: 406:         do { LATBbits.LATB5 = 1; } while(0);
  3729                           
  3730  0275  168D               	bsf	13,5	;volatile
  3731  0276  0008               	return
  3732  0277                     l1890:
  3733  0277  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3734  0278  2A85               	goto	l495
  3735  0279  0873               	movf	setLedsForPositioning@adcValue+3,w
  3736  027A  1D03               	btfss	3,2
  3737  027B  2A88               	goto	l1892
  3738  027C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3739  027D  1D03               	btfss	3,2
  3740  027E  2A88               	goto	l1892
  3741  027F  305D               	movlw	93
  3742  0280  0270               	subwf	setLedsForPositioning@adcValue,w
  3743  0281  3003               	movlw	3
  3744  0282  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3745  0283  1803               	btfsc	3,0
  3746  0284  2A88               	goto	l1892
  3747  0285                     l495:	
  3748                           ;main.c: 409:     {;main.c: 410:         do { LATBbits.LATB5 = 1; } while(0);
  3749                           
  3750  0285  168D               	bsf	13,5	;volatile
  3751                           
  3752                           ;main.c: 411:         do { LATBbits.LATB6 = 1; } while(0);
  3753  0286  170D               	bsf	13,6	;volatile
  3754  0287  0008               	return
  3755  0288                     l1892:
  3756  0288  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3757  0289  2A96               	goto	l501
  3758  028A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3759  028B  1D03               	btfss	3,2
  3760  028C  2A98               	goto	l1894
  3761  028D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3762  028E  1D03               	btfss	3,2
  3763  028F  2A98               	goto	l1894
  3764  0290  3093               	movlw	147
  3765  0291  0270               	subwf	setLedsForPositioning@adcValue,w
  3766  0292  3003               	movlw	3
  3767  0293  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3768  0294  1803               	btfsc	3,0
  3769  0295  2A98               	goto	l1894
  3770  0296                     l501:	
  3771                           ;main.c: 414:     {;main.c: 415:         do { LATBbits.LATB6 = 1; } while(0);
  3772                           
  3773  0296  170D               	bsf	13,6	;volatile
  3774  0297  0008               	return
  3775  0298                     l1894:
  3776  0298  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3777  0299  2AA6               	goto	l505
  3778  029A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3779  029B  1D03               	btfss	3,2
  3780  029C  2AA9               	goto	l510
  3781  029D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3782  029E  1D03               	btfss	3,2
  3783  029F  2AA9               	goto	l510
  3784  02A0  30C9               	movlw	201
  3785  02A1  0270               	subwf	setLedsForPositioning@adcValue,w
  3786  02A2  3003               	movlw	3
  3787  02A3  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3788  02A4  1803               	btfsc	3,0
  3789  02A5  2AA9               	goto	l510
  3790  02A6                     l505:	
  3791                           ;main.c: 418:     {;main.c: 419:         do { LATBbits.LATB6 = 1; } while(0);
  3792                           
  3793  02A6  170D               	bsf	13,6	;volatile
  3794                           
  3795                           ;main.c: 420:         do { LATBbits.LATB7 = 1; } while(0);
  3796  02A7  178D               	bsf	13,7	;volatile
  3797  02A8  0008               	return
  3798  02A9                     l510:	
  3799                           ;main.c: 423:     {;main.c: 424:         do { LATBbits.LATB7 = 1; } while(0);
  3800                           
  3801  02A9  178D               	bsf	13,7	;volatile
  3802  02AA  0008               	return
  3803  02AB                     __end_of_setLedsForPositioning:
  3804                           
  3805                           	psect	text10
  3806  04D3                     __ptext10:	
  3807 ;; *************** function ___lmul *****************
  3808 ;; Defined at:
  3809 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;  multiplier      4    0[COMMON] unsigned long 
  3812 ;;  multiplicand    4    4[COMMON] unsigned long 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  product         4    8[COMMON] unsigned long 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  4    0[COMMON] unsigned long 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0
  3819 ;; Tracked objects:
  3820 ;;		On entry : 1F/0
  3821 ;;		On exit  : 1F/0
  3822 ;;		Unchanged: 1F/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1
  3824 ;;      Params:         8       0       0
  3825 ;;      Locals:         4       0       0
  3826 ;;      Temps:          0       0       0
  3827 ;;      Totals:        12       0       0
  3828 ;;Total ram usage:       12 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    4
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_main
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function ___lmul
  3840  04D3                     ___lmul:
  3841                           
  3842                           ;incstack = 0
  3843                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3844  04D3  3000               	movlw	0
  3845  04D4  00FB               	movwf	___lmul@product+3
  3846  04D5  3000               	movlw	0
  3847  04D6  00FA               	movwf	___lmul@product+2
  3848  04D7  3000               	movlw	0
  3849  04D8  00F9               	movwf	___lmul@product+1
  3850  04D9  3000               	movlw	0
  3851  04DA  00F8               	movwf	___lmul@product
  3852  04DB                     l1898:
  3853  04DB  1C70               	btfss	___lmul@multiplier,0
  3854  04DC  2CE5               	goto	l1902
  3855  04DD  0874               	movf	___lmul@multiplicand,w
  3856  04DE  07F8               	addwf	___lmul@product,f
  3857  04DF  0875               	movf	___lmul@multiplicand+1,w
  3858  04E0  3DF9               	addwfc	___lmul@product+1,f
  3859  04E1  0876               	movf	___lmul@multiplicand+2,w
  3860  04E2  3DFA               	addwfc	___lmul@product+2,f
  3861  04E3  0877               	movf	___lmul@multiplicand+3,w
  3862  04E4  3DFB               	addwfc	___lmul@product+3,f
  3863  04E5                     l1902:
  3864  04E5  3001               	movlw	1
  3865  04E6                     u1305:
  3866  04E6  35F4               	lslf	___lmul@multiplicand,f
  3867  04E7  0DF5               	rlf	___lmul@multiplicand+1,f
  3868  04E8  0DF6               	rlf	___lmul@multiplicand+2,f
  3869  04E9  0DF7               	rlf	___lmul@multiplicand+3,f
  3870  04EA  0B89               	decfsz	9,f
  3871  04EB  2CE6               	goto	u1305
  3872  04EC  3001               	movlw	1
  3873  04ED                     u1315:
  3874  04ED  36F3               	lsrf	___lmul@multiplier+3,f
  3875  04EE  0CF2               	rrf	___lmul@multiplier+2,f
  3876  04EF  0CF1               	rrf	___lmul@multiplier+1,f
  3877  04F0  0CF0               	rrf	___lmul@multiplier,f
  3878  04F1  0B89               	decfsz	9,f
  3879  04F2  2CED               	goto	u1315
  3880  04F3  0873               	movf	___lmul@multiplier+3,w
  3881  04F4  0472               	iorwf	___lmul@multiplier+2,w
  3882  04F5  0471               	iorwf	___lmul@multiplier+1,w
  3883  04F6  0470               	iorwf	___lmul@multiplier,w
  3884  04F7  1D03               	skipz
  3885  04F8  2CDB               	goto	l1898
  3886  04F9  087B               	movf	___lmul@product+3,w
  3887  04FA  00F3               	movwf	?___lmul+3
  3888  04FB  087A               	movf	___lmul@product+2,w
  3889  04FC  00F2               	movwf	?___lmul+2
  3890  04FD  0879               	movf	___lmul@product+1,w
  3891  04FE  00F1               	movwf	?___lmul+1
  3892  04FF  0878               	movf	___lmul@product,w
  3893  0500  00F0               	movwf	?___lmul
  3894  0501  0008               	return
  3895  0502                     __end_of___lmul:
  3896                           
  3897                           	psect	text11
  3898  0344                     __ptext11:	
  3899 ;; *************** function ___aldiv *****************
  3900 ;; Defined at:
  3901 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  divisor         4    0[BANK0 ] long 
  3904 ;;  dividend        4    4[BANK0 ] long 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  quotient        4   10[BANK0 ] long 
  3907 ;;  sign            1    9[BANK0 ] unsigned char 
  3908 ;;  counter         1    8[BANK0 ] unsigned char 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  4    0[BANK0 ] long 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0
  3913 ;; Tracked objects:
  3914 ;;		On entry : 1F/0
  3915 ;;		On exit  : 1F/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1
  3918 ;;      Params:         0       8       0
  3919 ;;      Locals:         0       6       0
  3920 ;;      Temps:          1       0       0
  3921 ;;      Totals:         1      14       0
  3922 ;;Total ram usage:       15 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    4
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_main
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function ___aldiv
  3934  0344                     ___aldiv:
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3938  0344  01A9               	clrf	___aldiv@sign
  3939  0345  1FA3               	btfss	___aldiv@divisor+3,7
  3940  0346  2B54               	goto	l645
  3941  0347  09A0               	comf	___aldiv@divisor,f
  3942  0348  09A1               	comf	___aldiv@divisor+1,f
  3943  0349  09A2               	comf	___aldiv@divisor+2,f
  3944  034A  09A3               	comf	___aldiv@divisor+3,f
  3945  034B  0AA0               	incf	___aldiv@divisor,f
  3946  034C  1903               	skipnz
  3947  034D  0AA1               	incf	___aldiv@divisor+1,f
  3948  034E  1903               	skipnz
  3949  034F  0AA2               	incf	___aldiv@divisor+2,f
  3950  0350  1903               	skipnz
  3951  0351  0AA3               	incf	___aldiv@divisor+3,f
  3952  0352  01A9               	clrf	___aldiv@sign
  3953  0353  0AA9               	incf	___aldiv@sign,f
  3954  0354                     l645:
  3955  0354  1FA7               	btfss	___aldiv@dividend+3,7
  3956  0355  2B65               	goto	l1920
  3957  0356  09A4               	comf	___aldiv@dividend,f
  3958  0357  09A5               	comf	___aldiv@dividend+1,f
  3959  0358  09A6               	comf	___aldiv@dividend+2,f
  3960  0359  09A7               	comf	___aldiv@dividend+3,f
  3961  035A  0AA4               	incf	___aldiv@dividend,f
  3962  035B  1903               	skipnz
  3963  035C  0AA5               	incf	___aldiv@dividend+1,f
  3964  035D  1903               	skipnz
  3965  035E  0AA6               	incf	___aldiv@dividend+2,f
  3966  035F  1903               	skipnz
  3967  0360  0AA7               	incf	___aldiv@dividend+3,f
  3968  0361  3001               	movlw	1
  3969  0362  00FC               	movwf	??___aldiv
  3970  0363  087C               	movf	??___aldiv,w
  3971  0364  06A9               	xorwf	___aldiv@sign,f
  3972  0365                     l1920:
  3973  0365  3000               	movlw	0
  3974  0366  00AD               	movwf	___aldiv@quotient+3
  3975  0367  3000               	movlw	0
  3976  0368  00AC               	movwf	___aldiv@quotient+2
  3977  0369  3000               	movlw	0
  3978  036A  00AB               	movwf	___aldiv@quotient+1
  3979  036B  3000               	movlw	0
  3980  036C  00AA               	movwf	___aldiv@quotient
  3981  036D  0823               	movf	___aldiv@divisor+3,w
  3982  036E  0422               	iorwf	___aldiv@divisor+2,w
  3983  036F  0421               	iorwf	___aldiv@divisor+1,w
  3984  0370  0420               	iorwf	___aldiv@divisor,w
  3985  0371  1903               	skipnz
  3986  0372  2BAE               	goto	l1942
  3987  0373  01A8               	clrf	___aldiv@counter
  3988  0374  0AA8               	incf	___aldiv@counter,f
  3989  0375                     l1928:
  3990  0375  1BA3               	btfsc	___aldiv@divisor+3,7
  3991  0376  2B83               	goto	l1930
  3992  0377  3001               	movlw	1
  3993  0378                     u1365:
  3994  0378  35A0               	lslf	___aldiv@divisor,f
  3995  0379  0DA1               	rlf	___aldiv@divisor+1,f
  3996  037A  0DA2               	rlf	___aldiv@divisor+2,f
  3997  037B  0DA3               	rlf	___aldiv@divisor+3,f
  3998  037C  0B89               	decfsz	9,f
  3999  037D  2B78               	goto	u1365
  4000  037E  3001               	movlw	1
  4001  037F  00FC               	movwf	??___aldiv
  4002  0380  087C               	movf	??___aldiv,w
  4003  0381  07A8               	addwf	___aldiv@counter,f
  4004  0382  2B75               	goto	l1928
  4005  0383                     l1930:
  4006  0383  3001               	movlw	1
  4007  0384                     u1385:
  4008  0384  35AA               	lslf	___aldiv@quotient,f
  4009  0385  0DAB               	rlf	___aldiv@quotient+1,f
  4010  0386  0DAC               	rlf	___aldiv@quotient+2,f
  4011  0387  0DAD               	rlf	___aldiv@quotient+3,f
  4012  0388  0B89               	decfsz	9,f
  4013  0389  2B84               	goto	u1385
  4014  038A  0823               	movf	___aldiv@divisor+3,w
  4015  038B  0227               	subwf	___aldiv@dividend+3,w
  4016  038C  1D03               	skipz
  4017  038D  2B98               	goto	u1395
  4018  038E  0822               	movf	___aldiv@divisor+2,w
  4019  038F  0226               	subwf	___aldiv@dividend+2,w
  4020  0390  1D03               	skipz
  4021  0391  2B98               	goto	u1395
  4022  0392  0821               	movf	___aldiv@divisor+1,w
  4023  0393  0225               	subwf	___aldiv@dividend+1,w
  4024  0394  1D03               	skipz
  4025  0395  2B98               	goto	u1395
  4026  0396  0820               	movf	___aldiv@divisor,w
  4027  0397  0224               	subwf	___aldiv@dividend,w
  4028  0398                     u1395:
  4029  0398  1C03               	skipc
  4030  0399  2BA3               	goto	l1938
  4031  039A  0820               	movf	___aldiv@divisor,w
  4032  039B  02A4               	subwf	___aldiv@dividend,f
  4033  039C  0821               	movf	___aldiv@divisor+1,w
  4034  039D  3BA5               	subwfb	___aldiv@dividend+1,f
  4035  039E  0822               	movf	___aldiv@divisor+2,w
  4036  039F  3BA6               	subwfb	___aldiv@dividend+2,f
  4037  03A0  0823               	movf	___aldiv@divisor+3,w
  4038  03A1  3BA7               	subwfb	___aldiv@dividend+3,f
  4039  03A2  142A               	bsf	___aldiv@quotient,0
  4040  03A3                     l1938:
  4041  03A3  3001               	movlw	1
  4042  03A4                     u1405:
  4043  03A4  36A3               	lsrf	___aldiv@divisor+3,f
  4044  03A5  0CA2               	rrf	___aldiv@divisor+2,f
  4045  03A6  0CA1               	rrf	___aldiv@divisor+1,f
  4046  03A7  0CA0               	rrf	___aldiv@divisor,f
  4047  03A8  0B89               	decfsz	9,f
  4048  03A9  2BA4               	goto	u1405
  4049  03AA  3001               	movlw	1
  4050  03AB  02A8               	subwf	___aldiv@counter,f
  4051  03AC  1D03               	btfss	3,2
  4052  03AD  2B83               	goto	l1930
  4053  03AE                     l1942:
  4054  03AE  0829               	movf	___aldiv@sign,w
  4055  03AF  1903               	btfsc	3,2
  4056  03B0  2BBC               	goto	l1946
  4057  03B1  09AA               	comf	___aldiv@quotient,f
  4058  03B2  09AB               	comf	___aldiv@quotient+1,f
  4059  03B3  09AC               	comf	___aldiv@quotient+2,f
  4060  03B4  09AD               	comf	___aldiv@quotient+3,f
  4061  03B5  0AAA               	incf	___aldiv@quotient,f
  4062  03B6  1903               	skipnz
  4063  03B7  0AAB               	incf	___aldiv@quotient+1,f
  4064  03B8  1903               	skipnz
  4065  03B9  0AAC               	incf	___aldiv@quotient+2,f
  4066  03BA  1903               	skipnz
  4067  03BB  0AAD               	incf	___aldiv@quotient+3,f
  4068  03BC                     l1946:
  4069  03BC  082D               	movf	___aldiv@quotient+3,w
  4070  03BD  00A3               	movwf	?___aldiv+3
  4071  03BE  082C               	movf	___aldiv@quotient+2,w
  4072  03BF  00A2               	movwf	?___aldiv+2
  4073  03C0  082B               	movf	___aldiv@quotient+1,w
  4074  03C1  00A1               	movwf	?___aldiv+1
  4075  03C2  082A               	movf	___aldiv@quotient,w
  4076  03C3  00A0               	movwf	?___aldiv
  4077  03C4  0008               	return
  4078  03C5                     __end_of___aldiv:
  4079                           
  4080                           	psect	text12
  4081  063F                     __ptext12:	
  4082 ;; *************** function _TMR2_StartTimer *****************
  4083 ;; Defined at:
  4084 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;		None
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;		None
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      void 
  4091 ;; Registers used:
  4092 ;;		None
  4093 ;; Tracked objects:
  4094 ;;		On entry : 1F/0
  4095 ;;		On exit  : 1F/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMMON   BANK0   BANK1
  4098 ;;      Params:         0       0       0
  4099 ;;      Locals:         0       0       0
  4100 ;;      Temps:          0       0       0
  4101 ;;      Totals:         0       0       0
  4102 ;;Total ram usage:        0 bytes
  4103 ;; Hardware stack levels used:    1
  4104 ;; Hardware stack levels required when called:    4
  4105 ;; This function calls:
  4106 ;;		Nothing
  4107 ;; This function is called by:
  4108 ;;		_main
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           
  4113                           ;psect for function _TMR2_StartTimer
  4114  063F                     _TMR2_StartTimer:
  4115                           
  4116                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  4117                           
  4118                           ;incstack = 0
  4119                           ; Regs used in _TMR2_StartTimer: []
  4120  063F  151C               	bsf	28,2	;volatile
  4121  0640  0008               	return
  4122  0641                     __end_of_TMR2_StartTimer:
  4123                           
  4124                           	psect	text13
  4125  05FA                     __ptext13:	
  4126 ;; *************** function _SYSTEM_Initialize *****************
  4127 ;; Defined at:
  4128 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, status,2, status,0, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : B1F/0
  4139 ;;		On exit  : 1F/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1
  4142 ;;      Params:         0       0       0
  4143 ;;      Locals:         0       0       0
  4144 ;;      Temps:          0       0       0
  4145 ;;      Totals:         0       0       0
  4146 ;;Total ram usage:        0 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    6
  4149 ;; This function calls:
  4150 ;;		_ADC_Initialize
  4151 ;;		_OSCILLATOR_Initialize
  4152 ;;		_PIN_MANAGER_Initialize
  4153 ;;		_PWM3_Initialize
  4154 ;;		_TMR0_Initialize
  4155 ;;		_TMR2_Initialize
  4156 ;;		_WDT_Initialize
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function _SYSTEM_Initialize
  4164  05FA                     _SYSTEM_Initialize:
  4165                           
  4166                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4170  05FA  257D               	fcall	_PIN_MANAGER_Initialize
  4171                           
  4172                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4173  05FB  2626               	fcall	_OSCILLATOR_Initialize
  4174                           
  4175                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4176  05FC  263B               	fcall	_WDT_Initialize
  4177                           
  4178                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  4179  05FD  2612               	fcall	_ADC_Initialize
  4180                           
  4181                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  4182  05FE  260A               	fcall	_PWM3_Initialize
  4183                           
  4184                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  4185  05FF  2602               	fcall	_TMR2_Initialize
  4186                           
  4187                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  4188  0600  25C3               	fcall	_TMR0_Initialize
  4189  0601  0008               	return
  4190  0602                     __end_of_SYSTEM_Initialize:
  4191                           
  4192                           	psect	text14
  4193  063B                     __ptext14:	
  4194 ;; *************** function _WDT_Initialize *****************
  4195 ;; Defined at:
  4196 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  1    wreg      void 
  4203 ;; Registers used:
  4204 ;;		wreg
  4205 ;; Tracked objects:
  4206 ;;		On entry : B1F/2
  4207 ;;		On exit  : B1F/1
  4208 ;;		Unchanged: B00/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1
  4210 ;;      Params:         0       0       0
  4211 ;;      Locals:         0       0       0
  4212 ;;      Temps:          0       0       0
  4213 ;;      Totals:         0       0       0
  4214 ;;Total ram usage:        0 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    4
  4217 ;; This function calls:
  4218 ;;		Nothing
  4219 ;; This function is called by:
  4220 ;;		_SYSTEM_Initialize
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function _WDT_Initialize
  4226  063B                     _WDT_Initialize:
  4227                           
  4228                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _WDT_Initialize: [wreg]
  4232  063B  3016               	movlw	22
  4233  063C  0021               	movlb	1	; select bank1
  4234  063D  0097               	movwf	23	;volatile
  4235  063E  0008               	return
  4236  063F                     __end_of_WDT_Initialize:
  4237                           
  4238                           	psect	text15
  4239  0602                     __ptext15:	
  4240 ;; *************** function _TMR2_Initialize *****************
  4241 ;; Defined at:
  4242 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		wreg, status,2
  4251 ;; Tracked objects:
  4252 ;;		On entry : B1F/C
  4253 ;;		On exit  : B1F/0
  4254 ;;		Unchanged: B00/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1
  4256 ;;      Params:         0       0       0
  4257 ;;      Locals:         0       0       0
  4258 ;;      Temps:          0       0       0
  4259 ;;      Totals:         0       0       0
  4260 ;;Total ram usage:        0 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    4
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_SYSTEM_Initialize
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _TMR2_Initialize
  4272  0602                     _TMR2_Initialize:
  4273                           
  4274                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4275                           
  4276                           ;incstack = 0
  4277                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4278  0602  30FF               	movlw	255
  4279  0603  0020               	movlb	0	; select bank0
  4280  0604  009B               	movwf	27	;volatile
  4281                           
  4282                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4283  0605  019A               	clrf	26	;volatile
  4284                           
  4285                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4286  0606  1091               	bcf	17,1	;volatile
  4287                           
  4288                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  4289  0607  301C               	movlw	28
  4290  0608  009C               	movwf	28	;volatile
  4291  0609  0008               	return
  4292  060A                     __end_of_TMR2_Initialize:
  4293                           
  4294                           	psect	text16
  4295  05C3                     __ptext16:	
  4296 ;; *************** function _TMR0_Initialize *****************
  4297 ;; Defined at:
  4298 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  1    wreg      void 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0, pclath, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : B1F/0
  4309 ;;		On exit  : 1F/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1
  4312 ;;      Params:         0       0       0
  4313 ;;      Locals:         0       0       0
  4314 ;;      Temps:          1       0       0
  4315 ;;      Totals:         1       0       0
  4316 ;;Total ram usage:        1 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    5
  4319 ;; This function calls:
  4320 ;;		_TMR0_SetInterruptHandler
  4321 ;; This function is called by:
  4322 ;;		_SYSTEM_Initialize
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function _TMR0_Initialize
  4328  05C3                     _TMR0_Initialize:
  4329                           
  4330                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4334  05C3  0021               	movlb	1	; select bank1
  4335  05C4  0815               	movf	21,w	;volatile
  4336  05C5  39C0               	andlw	192
  4337  05C6  3811               	iorlw	17
  4338  05C7  0095               	movwf	21	;volatile
  4339                           
  4340                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  4341  05C8  3006               	movlw	6
  4342  05C9  0020               	movlb	0	; select bank0
  4343  05CA  0095               	movwf	21	;volatile
  4344                           
  4345                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  4346  05CB  3006               	movlw	6
  4347  05CC  00F2               	movwf	??_TMR0_Initialize
  4348  05CD  0872               	movf	??_TMR0_Initialize,w
  4349  05CE  00E7               	movwf	_timer0ReloadVal	;volatile
  4350                           
  4351                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  4352  05CF  110B               	bcf	11,2	;volatile
  4353                           
  4354                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  4355  05D0  168B               	bsf	11,5	;volatile
  4356                           
  4357                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  4358  05D1  3041               	movlw	low _TMR0_DefaultInterruptHandler
  4359  05D2  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4360  05D3  3006               	movlw	high _TMR0_DefaultInterruptHandler
  4361  05D4  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4362  05D5  2632               	fcall	_TMR0_SetInterruptHandler
  4363  05D6  0008               	return
  4364  05D7                     __end_of_TMR0_Initialize:
  4365                           
  4366                           	psect	text17
  4367  0632                     __ptext17:	
  4368 ;; *************** function _TMR0_SetInterruptHandler *****************
  4369 ;; Defined at:
  4370 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4373 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg
  4380 ;; Tracked objects:
  4381 ;;		On entry : 1F/0
  4382 ;;		On exit  : 1F/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMMON   BANK0   BANK1
  4385 ;;      Params:         2       0       0
  4386 ;;      Locals:         0       0       0
  4387 ;;      Temps:          0       0       0
  4388 ;;      Totals:         2       0       0
  4389 ;;Total ram usage:        2 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    4
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_TMR0_Initialize
  4396 ;;		_main
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function _TMR0_SetInterruptHandler
  4402  0632                     _TMR0_SetInterruptHandler:
  4403                           
  4404                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4408  0632  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4409  0633  00E6               	movwf	_TMR0_InterruptHandler+1
  4410  0634  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4411  0635  00E5               	movwf	_TMR0_InterruptHandler
  4412  0636  0008               	return
  4413  0637                     __end_of_TMR0_SetInterruptHandler:
  4414                           
  4415                           	psect	text18
  4416  060A                     __ptext18:	
  4417 ;; *************** function _PWM3_Initialize *****************
  4418 ;; Defined at:
  4419 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg
  4428 ;; Tracked objects:
  4429 ;;		On entry : B1F/1
  4430 ;;		On exit  : B1F/C
  4431 ;;		Unchanged: B00/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1
  4433 ;;      Params:         0       0       0
  4434 ;;      Locals:         0       0       0
  4435 ;;      Temps:          0       0       0
  4436 ;;      Totals:         0       0       0
  4437 ;;Total ram usage:        0 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    4
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_SYSTEM_Initialize
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           
  4448                           ;psect for function _PWM3_Initialize
  4449  060A                     _PWM3_Initialize:
  4450                           
  4451                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  4452                           
  4453                           ;incstack = 0
  4454                           ; Regs used in _PWM3_Initialize: [wreg]
  4455  060A  30D0               	movlw	208
  4456  060B  002C               	movlb	12	; select bank12
  4457  060C  0099               	movwf	25	;volatile
  4458                           
  4459                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  4460  060D  30FF               	movlw	255
  4461  060E  0098               	movwf	24	;volatile
  4462                           
  4463                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  4464  060F  30C0               	movlw	192
  4465  0610  0097               	movwf	23	;volatile
  4466  0611  0008               	return
  4467  0612                     __end_of_PWM3_Initialize:
  4468                           
  4469                           	psect	text19
  4470  057D                     __ptext19:	
  4471 ;; *************** function _PIN_MANAGER_Initialize *****************
  4472 ;; Defined at:
  4473 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;		None
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;		None
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  1    wreg      void 
  4480 ;; Registers used:
  4481 ;;		wreg, status,2
  4482 ;; Tracked objects:
  4483 ;;		On entry : B1F/0
  4484 ;;		On exit  : B1F/2
  4485 ;;		Unchanged: B00/0
  4486 ;; Data sizes:     COMMON   BANK0   BANK1
  4487 ;;      Params:         0       0       0
  4488 ;;      Locals:         0       0       0
  4489 ;;      Temps:          0       0       0
  4490 ;;      Totals:         0       0       0
  4491 ;;Total ram usage:        0 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:    4
  4494 ;; This function calls:
  4495 ;;		Nothing
  4496 ;; This function is called by:
  4497 ;;		_SYSTEM_Initialize
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           
  4502                           ;psect for function _PIN_MANAGER_Initialize
  4503  057D                     _PIN_MANAGER_Initialize:
  4504                           
  4505                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4509  057D  0022               	movlb	2	; select bank2
  4510  057E  018C               	clrf	12	;volatile
  4511                           
  4512                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4513  057F  018D               	clrf	13	;volatile
  4514                           
  4515                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4516  0580  018E               	clrf	14	;volatile
  4517                           
  4518                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  4519  0581  303B               	movlw	59
  4520  0582  0021               	movlb	1	; select bank1
  4521  0583  008C               	movwf	12	;volatile
  4522                           
  4523                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  4524  0584  3010               	movlw	16
  4525  0585  008D               	movwf	13	;volatile
  4526                           
  4527                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  4528  0586  018E               	clrf	14	;volatile
  4529                           
  4530                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4531  0587  0023               	movlb	3	; select bank3
  4532  0588  018E               	clrf	14	;volatile
  4533                           
  4534                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  4535  0589  3030               	movlw	48
  4536  058A  008D               	movwf	13	;volatile
  4537                           
  4538                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  4539  058B  3013               	movlw	19
  4540  058C  008C               	movwf	12	;volatile
  4541                           
  4542                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4543  058D  0024               	movlb	4	; select bank4
  4544  058E  018D               	clrf	13	;volatile
  4545                           
  4546                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4547  058F  018C               	clrf	12	;volatile
  4548                           
  4549                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4550  0590  0021               	movlb	1	; select bank1
  4551  0591  1795               	bsf	21,7	;volatile
  4552                           
  4553                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4554  0592  0022               	movlb	2	; select bank2
  4555  0593  019D               	clrf	29	;volatile
  4556  0594  0008               	return
  4557  0595                     __end_of_PIN_MANAGER_Initialize:
  4558                           
  4559                           	psect	text20
  4560  0626                     __ptext20:	
  4561 ;; *************** function _OSCILLATOR_Initialize *****************
  4562 ;; Defined at:
  4563 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;		None
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      void 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2
  4572 ;; Tracked objects:
  4573 ;;		On entry : B1F/2
  4574 ;;		On exit  : B1F/2
  4575 ;;		Unchanged: B00/0
  4576 ;; Data sizes:     COMMON   BANK0   BANK1
  4577 ;;      Params:         0       0       0
  4578 ;;      Locals:         0       0       0
  4579 ;;      Temps:          0       0       0
  4580 ;;      Totals:         0       0       0
  4581 ;;Total ram usage:        0 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    4
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_SYSTEM_Initialize
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           
  4592                           ;psect for function _OSCILLATOR_Initialize
  4593  0626                     _OSCILLATOR_Initialize:
  4594                           
  4595                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  4596                           
  4597                           ;incstack = 0
  4598                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4599  0626  306A               	movlw	106
  4600  0627  0021               	movlb	1	; select bank1
  4601  0628  0099               	movwf	25	;volatile
  4602                           
  4603                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4604  0629  0022               	movlb	2	; select bank2
  4605  062A  0196               	clrf	22	;volatile
  4606  062B  0008               	return
  4607  062C                     __end_of_OSCILLATOR_Initialize:
  4608                           
  4609                           	psect	text21
  4610  0612                     __ptext21:	
  4611 ;; *************** function _ADC_Initialize *****************
  4612 ;; Defined at:
  4613 ;;		line 67 in file "mcc_generated_files/adc.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2
  4622 ;; Tracked objects:
  4623 ;;		On entry : B1F/1
  4624 ;;		On exit  : B1F/1
  4625 ;;		Unchanged: B00/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1
  4627 ;;      Params:         0       0       0
  4628 ;;      Locals:         0       0       0
  4629 ;;      Temps:          0       0       0
  4630 ;;      Totals:         0       0       0
  4631 ;;Total ram usage:        0 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    4
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_SYSTEM_Initialize
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           
  4642                           ;psect for function _ADC_Initialize
  4643  0612                     _ADC_Initialize:
  4644                           
  4645                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xC0;
  4646                           
  4647                           ;incstack = 0
  4648                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4649  0612  30C0               	movlw	192
  4650  0613  009E               	movwf	30	;volatile
  4651                           
  4652                           ;mcc_generated_files/adc.c: 75:     ADCON2 = 0x00;
  4653  0614  019F               	clrf	31	;volatile
  4654                           
  4655                           ;mcc_generated_files/adc.c: 78:     ADRESL = 0x00;
  4656  0615  019B               	clrf	27	;volatile
  4657                           
  4658                           ;mcc_generated_files/adc.c: 81:     ADRESH = 0x00;
  4659  0616  019C               	clrf	28	;volatile
  4660                           
  4661                           ;mcc_generated_files/adc.c: 84:     ADCON0 = 0x01;
  4662  0617  3001               	movlw	1
  4663  0618  009D               	movwf	29	;volatile
  4664  0619  0008               	return
  4665  061A                     __end_of_ADC_Initialize:
  4666                           
  4667                           	psect	text22
  4668  05AD                     __ptext22:	
  4669 ;; *************** function _PWM3_LoadDutyValue *****************
  4670 ;; Defined at:
  4671 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  dutyValue       2    4[COMMON] unsigned short 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;		None
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      void 
  4678 ;; Registers used:
  4679 ;;		wreg, status,2, status,0
  4680 ;; Tracked objects:
  4681 ;;		On entry : 1F/1
  4682 ;;		On exit  : 1F/C
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMMON   BANK0   BANK1
  4685 ;;      Params:         2       0       0
  4686 ;;      Locals:         0       0       0
  4687 ;;      Temps:          2       0       0
  4688 ;;      Totals:         4       0       0
  4689 ;;Total ram usage:        4 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    4
  4692 ;; This function calls:
  4693 ;;		Nothing
  4694 ;; This function is called by:
  4695 ;;		_main
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _PWM3_LoadDutyValue
  4701  05AD                     _PWM3_LoadDutyValue:
  4702                           
  4703                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  4704                           
  4705                           ;incstack = 0
  4706                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  4707  05AD  0875               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  4708  05AE  00F7               	movwf	??_PWM3_LoadDutyValue+1
  4709  05AF  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4710  05B0  00F6               	movwf	??_PWM3_LoadDutyValue
  4711  05B1  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4712  05B2  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4713  05B3  36F7               	lsrf	??_PWM3_LoadDutyValue+1,f
  4714  05B4  0CF6               	rrf	??_PWM3_LoadDutyValue,f
  4715  05B5  0876               	movf	??_PWM3_LoadDutyValue,w
  4716  05B6  002C               	movlb	12	; select bank12
  4717  05B7  0098               	movwf	24	;volatile
  4718                           
  4719                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  4720  05B8  0874               	movf	PWM3_LoadDutyValue@dutyValue,w
  4721  05B9  3903               	andlw	3
  4722  05BA  00F6               	movwf	??_PWM3_LoadDutyValue
  4723  05BB  3005               	movlw	5
  4724  05BC                     u1075:
  4725  05BC  35F6               	lslf	??_PWM3_LoadDutyValue,f
  4726  05BD  3EFF               	addlw	-1
  4727  05BE  1D03               	skipz
  4728  05BF  2DBC               	goto	u1075
  4729  05C0  3576               	lslf	??_PWM3_LoadDutyValue,w
  4730  05C1  0097               	movwf	23	;volatile
  4731  05C2  0008               	return
  4732  05C3                     __end_of_PWM3_LoadDutyValue:
  4733                           
  4734                           	psect	text23
  4735  0595                     __ptext23:	
  4736 ;; *************** function _ADC_GetConversion *****************
  4737 ;; Defined at:
  4738 ;;		line 115 in file "mcc_generated_files/adc.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  channel         1    wreg     enum E2336
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  channel         1    3[COMMON] enum E2336
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  2    0[COMMON] unsigned short 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 1F/0
  4749 ;;		On exit  : 1F/1
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1
  4752 ;;      Params:         2       0       0
  4753 ;;      Locals:         1       0       0
  4754 ;;      Temps:          1       0       0
  4755 ;;      Totals:         4       0       0
  4756 ;;Total ram usage:        4 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    4
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_main
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           
  4767                           ;psect for function _ADC_GetConversion
  4768  0595                     _ADC_GetConversion:
  4769                           
  4770                           ;incstack = 0
  4771                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4772                           ;ADC_GetConversion@channel stored from wreg
  4773  0595  00F3               	movwf	ADC_GetConversion@channel
  4774                           
  4775                           ;mcc_generated_files/adc.c: 115: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 116: {;mcc_generated_files/adc.c: 118:     ADCON0bits.CHS = ch
      +                          annel;
  4776  0596  0873               	movf	ADC_GetConversion@channel,w
  4777  0597  00F2               	movwf	??_ADC_GetConversion
  4778  0598  0DF2               	rlf	??_ADC_GetConversion,f
  4779  0599  0DF2               	rlf	??_ADC_GetConversion,f
  4780  059A  0021               	movlb	1	; select bank1
  4781  059B  081D               	movf	29,w	;volatile
  4782  059C  0672               	xorwf	??_ADC_GetConversion,w
  4783  059D  3983               	andlw	-125
  4784  059E  0672               	xorwf	??_ADC_GetConversion,w
  4785  059F  009D               	movwf	29	;volatile
  4786                           
  4787                           ;mcc_generated_files/adc.c: 121:     ADCON0bits.ADON = 1;
  4788  05A0  141D               	bsf	29,0	;volatile
  4789                           
  4790                           ;mcc_generated_files/adc.c: 124:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4791  05A1  3200               	nop2	;2 cycle nop
  4792  05A2  3200               	nop2	;2 cycle nop
  4793  05A3  0000               	nop
  4794                           
  4795                           ;mcc_generated_files/adc.c: 127:     ADCON0bits.GO_nDONE = 1;
  4796  05A4  0021               	movlb	1	; select bank1
  4797  05A5  149D               	bsf	29,1	;volatile
  4798  05A6                     l34:	
  4799                           ;mcc_generated_files/adc.c: 131:     {;mcc_generated_files/adc.c: 132:     }
  4800                           
  4801                           
  4802                           ;mcc_generated_files/adc.c: 130:     while (ADCON0bits.GO_nDONE)
  4803  05A6  189D               	btfsc	29,1	;volatile
  4804  05A7  2DA6               	goto	l34
  4805                           
  4806                           ;mcc_generated_files/adc.c: 135:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4807  05A8  081C               	movf	28,w	;volatile
  4808  05A9  00F1               	movwf	?_ADC_GetConversion+1
  4809  05AA  081B               	movf	27,w	;volatile
  4810  05AB  00F0               	movwf	?_ADC_GetConversion
  4811  05AC  0008               	return
  4812  05AD                     __end_of_ADC_GetConversion:
  4813                           
  4814                           	psect	intentry
  4815  0004                     __pintentry:	
  4816 ;; *************** function _INTERRUPT_InterruptManager *****************
  4817 ;; Defined at:
  4818 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;		None
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg, status,2, status,0, pclath, cstack
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMMON   BANK0   BANK1
  4832 ;;      Params:         0       0       0
  4833 ;;      Locals:         0       0       0
  4834 ;;      Temps:          0       0       0
  4835 ;;      Totals:         0       0       0
  4836 ;;Total ram usage:        0 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    3
  4839 ;; This function calls:
  4840 ;;		_TMR0_ISR
  4841 ;; This function is called by:
  4842 ;;		Interrupt level 1
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846  0004                     _INTERRUPT_InterruptManager:
  4847                           
  4848                           ;incstack = 0
  4849  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4850                           
  4851                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4852  0005  3180               	pagesel	$
  4853                           
  4854                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4855  0006  1A8B               	btfsc	11,5	;volatile
  4856  0007  1D0B               	btfss	11,2	;volatile
  4857  0008  280A               	goto	i1l197
  4858                           
  4859                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4860  0009  262C               	fcall	_TMR0_ISR
  4861  000A                     i1l197:	
  4862                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4863                           
  4864  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4865  000B  0009               	retfie
  4866  000C                     __end_of_INTERRUPT_InterruptManager:
  4867                           
  4868                           	psect	text25
  4869  062C                     __ptext25:	
  4870 ;; *************** function _TMR0_ISR *****************
  4871 ;; Defined at:
  4872 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;		None
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0, pclath, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1
  4886 ;;      Params:         0       0       0
  4887 ;;      Locals:         0       0       0
  4888 ;;      Temps:          0       0       0
  4889 ;;      Totals:         0       0       0
  4890 ;;Total ram usage:        0 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    2
  4893 ;; This function calls:
  4894 ;;		_TMR0_CallBack
  4895 ;; This function is called by:
  4896 ;;		_INTERRUPT_InterruptManager
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _TMR0_ISR
  4902  062C                     _TMR0_ISR:
  4903                           
  4904                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4908  062C  110B               	bcf	11,2	;volatile
  4909                           
  4910                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  4911  062D  0020               	movlb	0	; select bank0
  4912  062E  0867               	movf	_timer0ReloadVal,w	;volatile
  4913  062F  0095               	movwf	21	;volatile
  4914                           
  4915                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
  4916  0630  25E7               	fcall	_TMR0_CallBack
  4917  0631  0008               	return
  4918  0632                     __end_of_TMR0_ISR:
  4919                           
  4920                           	psect	text26
  4921  05E7                     __ptext26:	
  4922 ;; *************** function _TMR0_CallBack *****************
  4923 ;; Defined at:
  4924 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4925 ;; Parameters:    Size  Location     Type
  4926 ;;		None
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;		None
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  1    wreg      void 
  4931 ;; Registers used:
  4932 ;;		wreg, status,2, status,0, pclath, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 1F/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMMON   BANK0   BANK1
  4938 ;;      Params:         0       0       0
  4939 ;;      Locals:         0       0       0
  4940 ;;      Temps:          0       0       0
  4941 ;;      Totals:         0       0       0
  4942 ;;Total ram usage:        0 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:    1
  4945 ;; This function calls:
  4946 ;;		Absolute function
  4947 ;;		_TMR0_DefaultInterruptHandler
  4948 ;;		_timer0CallBack
  4949 ;; This function is called by:
  4950 ;;		_TMR0_ISR
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           
  4955                           ;psect for function _TMR0_CallBack
  4956  05E7                     _TMR0_CallBack:
  4957                           
  4958                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
  4959                           
  4960                           ;incstack = 0
  4961                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4962  05E7  0865               	movf	_TMR0_InterruptHandler,w
  4963  05E8  0466               	iorwf	_TMR0_InterruptHandler+1,w
  4964  05E9  1903               	btfsc	3,2
  4965  05EA  0008               	return
  4966                           
  4967                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
  4968  05EB  0866               	movf	_TMR0_InterruptHandler+1,w
  4969  05EC  008A               	movwf	10
  4970  05ED  0865               	movf	_TMR0_InterruptHandler,w
  4971  05EE  000A               	callw
  4972  05EF  3185               	pagesel	$
  4973  05F0  0008               	return
  4974  05F1                     __end_of_TMR0_CallBack:
  4975                           
  4976                           	psect	text27
  4977  0641                     __ptext27:	
  4978 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4979 ;; Defined at:
  4980 ;;		line 137 in file "mcc_generated_files/tmr0.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		None
  4989 ;; Tracked objects:
  4990 ;;		On entry : 1F/0
  4991 ;;		On exit  : 1F/0
  4992 ;;		Unchanged: 1F/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1
  4994 ;;      Params:         0       0       0
  4995 ;;      Locals:         0       0       0
  4996 ;;      Temps:          0       0       0
  4997 ;;      Totals:         0       0       0
  4998 ;;Total ram usage:        0 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_TMR0_Initialize
  5004 ;;		_TMR0_CallBack
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _TMR0_DefaultInterruptHandler
  5010  0641                     _TMR0_DefaultInterruptHandler:
  5011                           
  5012                           ;incstack = 0
  5013                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5014  0641  0008               	return
  5015  0642                     __end_of_TMR0_DefaultInterruptHandler:
  5016                           
  5017                           	psect	text28
  5018  05D7                     __ptext28:	
  5019 ;; *************** function _timer0CallBack *****************
  5020 ;; Defined at:
  5021 ;;		line 117 in file "main.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;		None
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, status,2
  5030 ;; Tracked objects:
  5031 ;;		On entry : 1F/0
  5032 ;;		On exit  : 1F/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1
  5035 ;;      Params:         0       0       0
  5036 ;;      Locals:         0       0       0
  5037 ;;      Temps:          0       0       0
  5038 ;;      Totals:         0       0       0
  5039 ;;Total ram usage:        0 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; This function calls:
  5042 ;;		Nothing
  5043 ;; This function is called by:
  5044 ;;		_main
  5045 ;;		_TMR0_CallBack
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           
  5050                           ;psect for function _timer0CallBack
  5051  05D7                     _timer0CallBack:
  5052                           
  5053                           ;main.c: 119:     msTick++;
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in _timer0CallBack: [wreg+status,2]
  5057  05D7  3001               	movlw	1
  5058  05D8  07D5               	addwf	_msTick,f	;volatile
  5059  05D9  3000               	movlw	0
  5060  05DA  3DD6               	addwfc	_msTick+1,f	;volatile
  5061                           
  5062                           ;main.c: 121:     if(msTick > 200)
  5063  05DB  3000               	movlw	0
  5064  05DC  0256               	subwf	_msTick+1,w	;volatile
  5065  05DD  30C9               	movlw	201
  5066  05DE  1903               	skipnz
  5067  05DF  0255               	subwf	_msTick,w	;volatile
  5068  05E0  1C03               	skipc
  5069  05E1  0008               	return
  5070                           
  5071                           ;main.c: 122:     {;main.c: 123:         doToggle = 1;
  5072  05E2  01DA               	clrf	_doToggle
  5073  05E3  0ADA               	incf	_doToggle,f
  5074                           
  5075                           ;main.c: 124:         msTick = 0;
  5076  05E4  01D5               	clrf	_msTick	;volatile
  5077  05E5  01D6               	clrf	_msTick+1	;volatile
  5078  05E6  0008               	return
  5079  05E7                     __end_of_timer0CallBack:
  5080  007E                     btemp	set	126	;btemp
  5081  007E                     int$flags	set	126
  5082  007E                     wtemp0	set	126
  5083                           
  5084                           	psect	config
  5085                           
  5086                           ;Config register CONFIG1 @ 0x8007
  5087                           ;	Oscillator Selection bits
  5088                           ;	FOSC = INTOSC, Internal Oscillator, I/O Function on OSC1
  5089                           ;	Watchdog Timer Enable
  5090                           ;	WDTE = OFF, WDT disabled
  5091                           ;	Power-up Timer Enable
  5092                           ;	PWRTE = OFF, PWRT disabled
  5093                           ;	MCLR Pin Function Select
  5094                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  5095                           ;	Flash Program Memory Code Protection
  5096                           ;	CP = OFF, Program memory code protection is disabled
  5097                           ;	Brown-out Reset Enable
  5098                           ;	BOREN = ON, Brown-out Reset enabled
  5099                           ;	Clock Out Enable
  5100                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5101  8007                     	org	32775
  5102  8007  3FE4               	dw	16356
  5103                           
  5104                           ;Config register CONFIG2 @ 0x8008
  5105                           ;	Flash Memory Self-Write Protection
  5106                           ;	WRT = OFF, Write protection off
  5107                           ;	Stack Overflow/Underflow Reset Enable
  5108                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5109                           ;	Brown-out Reset Voltage Selection
  5110                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5111                           ;	Low-Power Brown Out Reset
  5112                           ;	LPBOR = OFF, Low-Power BOR is disabled
  5113                           ;	Low-Voltage Programming Enable
  5114                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  5115  8008                     	org	32776
  5116  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        9
    BSS         20
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      72
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 32
		 -> writeFlash@wrBlockData(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_writeFlash
    _writeFlash->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setState->___lldiv
    _readFlash->_FLASH_ReadWord
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PWM3_LoadDutyValue->_ADC_GetConversion

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_writeFlash

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    3869
                                             32 BANK0      8     8      0
                  _ADC_GetConversion
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___aldiv
                             ___lmul
              _setLedsForPositioning
                           _setState
                         _writeFlash
 ---------------------------------------------------------------------------------
 (1) _writeFlash                                          33    33      0    1152
                                             13 COMMON     1     1      0
                                              0 BANK0     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                    10     7      3     812
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     220
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setState                                             5     5      0    1059
                                              0 BANK0      5     5      0
                            ___lldiv
                             ___tmul
                          _readFlash
 ---------------------------------------------------------------------------------
 (2) _readFlash                                            4     4      0     435
                                              3 COMMON     4     4      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     435
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _setLedsForPositioning                                4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     452
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     120
                                              4 COMMON     4     2      2
                  _ADC_GetConversion (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _PWM3_LoadDutyValue
     _ADC_GetConversion (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___aldiv
     ___lmul (ARG)
   ___lmul
   _setLedsForPositioning
   _setState
     ___lldiv
     ___tmul
     _readFlash
       _FLASH_ReadWord
   _writeFlash
     _FLASH_EraseBlock
     _FLASH_WriteBlock
       _FLASH_EraseBlock

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      56       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      56       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Sep 15 15:35:08 2020

                                       _b 0050                                         _m 005C  
                                      l34 05A6                           _timer0ReloadVal 0067  
          __size_of_setLedsForPositioning 0138             __end_of_setLedsForPositioning 02AB  
                                     l332 0322                                       l501 0296  
                                     l325 02D1                                       l510 02A9  
                                     l335 0325                                       l505 02A6  
                                     l425 018E                                       l361 006B  
                                     l435 01B1                                       l355 0060  
                                     l445 01D3                                       l429 019F  
                                     l381 0111                                       l471 0233  
                                     l455 01F4                                       l439 01C2  
                                     l391 0140                                       l383 011B  
                                     l481 0254                                       l465 0215  
                                     l449 01E3                                       l393 014A  
                                     l377 00FD                                       l491 0275  
                                     l475 0243                                       l459 0204  
                                     l395 0154                                       l379 0107  
                                     l645 0354                                       l485 0264  
                                     l389 0136                                       l495 0285  
                                     _PR2 001B                                       u905 043D  
                                     u935 03D9                                       u945 0410  
                                     u965 0511                                       u975 0517  
                         _TMR2_Initialize 0602                                       wreg 0009  
                             main@channel 0060            FLASH_WriteBlock@flashWordArray 0075  
                                    l2002 007C                                      l2010 0088  
                                    l2012 009B                                      l2022 0125  
                                    l2014 009D                                      l2024 0128  
                                    l2032 015F                                      l2130 0331  
                                    l2018 00EF                                      l2126 0090  
                                    l2128 0167                                      l1716 0449  
                                    l1902 04E5                                      l1830 02BE  
                                    l1920 0365                                      l1930 0383  
                                    l1754 0508                                      l1850 033C  
                                    l1842 02E9                                      l1860 0190  
                                    l1772 0491                                      l1836 02C9  
                                    l1942 03AE                                      l1870 01E6  
                                    l1862 01A2                                      l1782 04BF  
                                    l1774 049F                                      l1758 0510  
                                    l1928 0375                                      l1880 0225  
                                    l1872 01F6                                      l1864 01B3  
                                    l1848 0328                                      l1946 03BC  
                                    l1938 03A3                                      l1890 0277  
                                    l1882 0235                                      l1874 0207  
                                    l1866 01C5                                      l1786 04CA  
                                    l1970 0031                                      l1892 0288  
                                    l1884 0246                                      l1876 0217  
                                    l1868 01D5                                      l1894 0298  
                                    l1886 0256                                      l1990 0065  
                                    l1966 002A                                      l1888 0267  
                                    l1992 0067                                      l1976 0043  
                                    l1898 04DB                                      l1978 004A  
                                    l1996 006E                                      l1988 0063  
                                    l1998 0071                                      u1005 0494  
                                    u1025 04A0                                      u1105 02DF  
                                    u1035 04B4                                      u1045 04C0  
                                    u1305 04E6                                      u1075 05BC  
                                    u1315 04ED                                      u1405 03A4  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u1600 0119  
                                    u1620 0123                                      u1540 00FB  
                                    u1365 0378                                      u1710 0152  
                                    u1560 0105                                      u1385 0384  
                                    u1730 015C                                      u1650 0134  
                                    u1395 0398                                      u1580 010F  
                                    u1670 013E                                      u1690 0148  
                                    _TMR0 0015                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUB 020D  
                                    _main 0020                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                       ?_FLASH_WriteBlock 0073                                      start 000C  
                      ??_FLASH_WriteBlock 0076                   __end_of_TMR0_Initialize 05D7  
          ??_TMR0_DefaultInterruptHandler 0070            __size_of_OSCILLATOR_Initialize 0006  
           __end_of_OSCILLATOR_Initialize 062C                           __end_of___aldiv 03C5  
                                   ?_main 0070                           __end_of___lldiv 04D3  
                                   _T2CON 001C                                     i1l197 000A  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E         __size_of_TMR0_SetInterruptHandler 0005  
                     ___lmul@multiplicand 0074                 ?_TMR0_SetInterruptHandler 0070  
                        __end_of_TMR0_ISR 0632                            _WDT_Initialize 063B  
                 __end_of_PWM3_Initialize 0612                                     pclath 000A  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 063F                           __initialization 000D  
                            __end_of_main 0173                   __end_of_TMR2_Initialize 060A  
             ?_INTERRUPT_InterruptManager 0070                                    ??_main 0040  
                   writeFlash@wrBlockData 0020                   __size_of_FLASH_ReadWord 0019  
                  __end_of_WDT_Initialize 063F                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADCON2 009F  
               FLASH_WriteBlock@writeAddr 0073                                    _ADRESH 009C  
                                  _ADRESL 009B                                    _APFCON 011D  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                 __size_of_FLASH_EraseBlock 001C  
                                  _OSCCON 0099                                    _WDTCON 0097  
                                  ___lmul 04D3               __size_of_PWM3_LoadDutyValue 0016  
                               ??___aldiv 007C                                    ___tmul 0502  
                               ??___lldiv 0078                                    _msTick 0055  
                        ?_TMR0_Initialize 0070                          __end_of_setState 0344  
                 FLASH_ReadWord@flashAddr 0070                           ?_WDT_Initialize 0070  
                ADC_GetConversion@channel 0073                     __end_of_TMR0_CallBack 05F1  
                 __end_of_TMR2_StartTimer 0641  TMR0_SetInterruptHandler@InterruptHandler 0070  
                        ?_PWM3_Initialize 0070                         _SYSTEM_Initialize 05FA  
                 __end_of__initialization 001D                        ?_SYSTEM_Initialize 0070  
                        _fixedPointFactor 0637                            __pcstackCOMMON 0070  
                 __size_of_timer0CallBack 0010                              __pidataBANK0 05F1  
                     ??_SYSTEM_Initialize 0073                                 ?_TMR0_ISR 0070  
                        ?_TMR2_Initialize 0070                            _OPTION_REGbits 0095  
             FLASH_WriteBlock@GIEBitValue 007B                 __end_of_SYSTEM_Initialize 0602  
                              __pbssBANK0 0048                        __size_of_readFlash 0068  
                              __pmaintext 0020          __end_of_TMR0_SetInterruptHandler 0637  
                                 ?___lmul 0070                                   ?___tmul 0070  
                              ??_TMR0_ISR 0070                                __pintentry 0004  
                          ___lmul@product 0078                 __size_of_FLASH_WriteBlock 0054  
                 __size_of_ADC_Initialize 0008                            _FLASH_ReadWord 0564  
                   _setLedsForPositioning 0173                                   _PWM3DCH 0618  
                                 _PWM3DCL 0617                                   _PWM3CON 0619  
                        ?_TMR2_StartTimer 0070                          _FLASH_EraseBlock 0548  
                    _ADC_InterruptHandler 0057                                 ?_setState 0070  
                                 ___aldiv 0344                           __size_of___lmul 002F  
                         __size_of___tmul 0026                                   ___lldiv 0481  
                  __end_of_FLASH_ReadWord 057D                                   __ptext1 0528  
                                 __ptext2 042D                                   __ptext3 0548  
                                 __ptext4 02AB                                   __ptext5 03C5  
                                 __ptext6 0564                                   __ptext7 0502  
                                 __ptext8 0481                                   __ptext9 0173  
                       __end_of_readFlash 042D                     _OSCILLATOR_Initialize 0626  
                               _T2CONbits 001C                          ___aldiv@dividend 0024  
                ??_PIN_MANAGER_Initialize 0070                __size_of_SYSTEM_Initialize 0008  
                                 clrloop0 0621                      end_of_initialization 001D  
                                 init_ram 061A                                   initloop 061B  
                              _lowerLimit 0048                           ___lldiv@divisor 0070  
                         ___lldiv@counter 007D                                ??_setState 0020  
                          _timer0CallBack 05D7                          ___aldiv@quotient 002A  
               FLASH_ReadWord@GIEBitValue 0072                           ?_FLASH_ReadWord 0070  
                        ??_WDT_Initialize 0070                  _TMR0_SetInterruptHandler 0632  
                               _PORTAbits 000C                    ?_setLedsForPositioning 0070  
                __end_of_fixedPointFactor 063B                                _upperLimit 0061  
                  __end_of_timer0CallBack 05E7                __end_of_PWM3_LoadDutyValue 05C3  
                       FLASH_WriteBlock@i 007C                                _writeFlash 0528  
                          __end_of___lmul 0502                            __end_of___tmul 0528  
                       __size_of_TMR0_ISR 0006                            _ADC_Initialize 0612  
                        _FLASH_WriteBlock 042D                    ?_OSCILLATOR_Initialize 0070  
                     start_initialization 000D                  __size_of_TMR0_Initialize 0014  
         __size_of_PIN_MANAGER_Initialize 0018                           ?_timer0CallBack 0070  
                __size_of_PWM3_Initialize 0008                                  ??___lmul 0078  
                                ??___tmul 0076                    __size_of_TMR0_CallBack 000A  
                  __end_of_ADC_Initialize 061A                               __pdataBANK0 005C  
             FLASH_EraseBlock@GIEBitValue 0072                  __end_of_FLASH_EraseBlock 0564  
                          ___tmul@product 0076                                 ___latbits 0000  
                           __pcstackBANK0 0020                  __size_of_TMR2_Initialize 0008  
                        setState@newState 0024                              _currentState 0059  
                   _TMR0_InterruptHandler 0065                                 __pnvBANK0 0065  
                  _PIN_MANAGER_Initialize 057D                                  ?___aldiv 0020  
                       __size_of_setState 0099                                  ?___lldiv 0070  
                             ?_writeFlash 0070                           ?_ADC_Initialize 0070  
            ??_INTERRUPT_InterruptManager 0070                                 _readFlash 03C5  
                           _TMR0_CallBack 05E7                                 _msPressed 0053  
                        _adcValuePosition 004C            FLASH_WriteBlock@blockStartAddr 0079  
                         ___aldiv@divisor 0020                         ??_TMR0_Initialize 0072  
                         ___aldiv@counter 0028                                  _LATBbits 010D  
                                _LATCbits 010E                                 clear_ram0 0620  
                __size_of_TMR2_StartTimer 0002       __size_of_INTERRUPT_InterruptManager 0008  
              ??_TMR0_SetInterruptHandler 0072                                  _PIR1bits 0011  
               FLASH_EraseBlock@startAddr 0070                          ??_FLASH_ReadWord 0072  
                                _TMR0_ISR 062C                   ??_setLedsForPositioning 0074  
                       ??_PWM3_Initialize 0070                                _ADCON0bits 009D  
                     ___tmul@multiplicand 0073                                ?_readFlash 0070  
                          ?_TMR0_CallBack 0070                         ___lmul@multiplier 0070  
                     __size_of_writeFlash 0020                         ??_TMR2_Initialize 0070  
                __end_of_FLASH_WriteBlock 0481             setLedsForPositioning@adcValue 0070  
                       _ADC_GetConversion 0595                   ??_OSCILLATOR_Initialize 0070  
                      ?_ADC_GetConversion 0070                          __size_of___aldiv 0081  
                        __size_of___lldiv 0052                        _PWM3_LoadDutyValue 05AD  
                     ??_ADC_GetConversion 0072                                  _doToggle 005A  
                                __ptext10 04D3                                  __ptext11 0344  
                                __ptext20 0626                                  __ptext12 063F  
                                __ptext21 0612                                  __ptext13 05FA  
                                __ptext22 05AD                                  __ptext14 063B  
                                __ptext23 0595                                  __ptext15 0602  
                                __ptext16 05C3                                  __ptext25 062C  
                                __ptext17 0632                                  __ptext26 05E7  
                                __ptext18 060A                                  __ptext27 0641  
                                __ptext19 057D                                  __ptext28 05D7  
                     ?_PWM3_LoadDutyValue 0074                          ??_timer0CallBack 0070  
                           __size_of_main 0153      __end_of_TMR0_DefaultInterruptHandler 0642  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0641  
               __end_of_ADC_GetConversion 05AD                                  _setState 02AB  
                    ??_PWM3_LoadDutyValue 0076                                  int$flags 007E  
                       ??_TMR2_StartTimer 0070        __end_of_INTERRUPT_InterruptManager 000C  
              _INTERRUPT_InterruptManager 0004                         ?_FLASH_EraseBlock 0070  
                      ??_FLASH_EraseBlock 0072                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0070                               ??_readFlash 0073  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                          _doButtonAction 005B                                _PMCON1bits 0195  
                        ___lldiv@dividend 0074                   ?_PIN_MANAGER_Initialize 0070  
                        ??_ADC_Initialize 0070             ?_TMR0_DefaultInterruptHandler 0070  
                            ??_writeFlash 007D                         ___tmul@multiplier 0070  
             PWM3_LoadDutyValue@dutyValue 0074                             __pstringtext1 0637  
                              _OPTION_REG 0095                          ___lldiv@quotient 0079  
                         _TMR0_Initialize 05C3                              ___aldiv@sign 0029  
          __end_of_PIN_MANAGER_Initialize 0595                        __end_of_writeFlash 0548  
              __size_of_ADC_GetConversion 0018                           _PWM3_Initialize 060A  
