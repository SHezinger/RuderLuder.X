

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Sep 18 08:59:16 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F1507
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F1507 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0197                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0391                     	;# 
   145  0392                     	;# 
   146  0393                     	;# 
   147  0394                     	;# 
   148  0395                     	;# 
   149  0396                     	;# 
   150  0498                     	;# 
   151  0498                     	;# 
   152  0499                     	;# 
   153  049A                     	;# 
   154  049B                     	;# 
   155  049B                     	;# 
   156  049C                     	;# 
   157  049D                     	;# 
   158  049E                     	;# 
   159  049F                     	;# 
   160  0611                     	;# 
   161  0612                     	;# 
   162  0613                     	;# 
   163  0613                     	;# 
   164  0614                     	;# 
   165  0615                     	;# 
   166  0616                     	;# 
   167  0616                     	;# 
   168  0617                     	;# 
   169  0618                     	;# 
   170  0619                     	;# 
   171  0619                     	;# 
   172  061A                     	;# 
   173  061B                     	;# 
   174  061C                     	;# 
   175  061C                     	;# 
   176  0691                     	;# 
   177  0692                     	;# 
   178  0693                     	;# 
   179  0694                     	;# 
   180  0695                     	;# 
   181  0F0F                     	;# 
   182  0F10                     	;# 
   183  0F11                     	;# 
   184  0F12                     	;# 
   185  0F13                     	;# 
   186  0F14                     	;# 
   187  0F15                     	;# 
   188  0F16                     	;# 
   189  0F17                     	;# 
   190  0F18                     	;# 
   191  0F19                     	;# 
   192  0F1A                     	;# 
   193  0F1B                     	;# 
   194  0F1C                     	;# 
   195  0F1D                     	;# 
   196  0F1E                     	;# 
   197  0F1F                     	;# 
   198  0FE3                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0015                     	;# 
   229  0016                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001C                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0097                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  0116                     	;# 
   258  0117                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0194                     	;# 
   269  0195                     	;# 
   270  0196                     	;# 
   271  0197                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0613                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0616                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  0619                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061C                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0F0F                     	;# 
   312  0F10                     	;# 
   313  0F11                     	;# 
   314  0F12                     	;# 
   315  0F13                     	;# 
   316  0F14                     	;# 
   317  0F15                     	;# 
   318  0F16                     	;# 
   319  0F17                     	;# 
   320  0F18                     	;# 
   321  0F19                     	;# 
   322  0F1A                     	;# 
   323  0F1B                     	;# 
   324  0F1C                     	;# 
   325  0F1D                     	;# 
   326  0F1E                     	;# 
   327  0F1F                     	;# 
   328  0FE3                     	;# 
   329  0FE4                     	;# 
   330  0FE5                     	;# 
   331  0FE6                     	;# 
   332  0FE7                     	;# 
   333  0FE8                     	;# 
   334  0FE9                     	;# 
   335  0FEA                     	;# 
   336  0FEB                     	;# 
   337  0FED                     	;# 
   338  0FEE                     	;# 
   339  0FEF                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0099                     	;# 
   377  009A                     	;# 
   378  009B                     	;# 
   379  009B                     	;# 
   380  009C                     	;# 
   381  009D                     	;# 
   382  009E                     	;# 
   383  009F                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  011D                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  020C                     	;# 
   403  020D                     	;# 
   404  0391                     	;# 
   405  0392                     	;# 
   406  0393                     	;# 
   407  0394                     	;# 
   408  0395                     	;# 
   409  0396                     	;# 
   410  0498                     	;# 
   411  0498                     	;# 
   412  0499                     	;# 
   413  049A                     	;# 
   414  049B                     	;# 
   415  049B                     	;# 
   416  049C                     	;# 
   417  049D                     	;# 
   418  049E                     	;# 
   419  049F                     	;# 
   420  0611                     	;# 
   421  0612                     	;# 
   422  0613                     	;# 
   423  0613                     	;# 
   424  0614                     	;# 
   425  0615                     	;# 
   426  0616                     	;# 
   427  0616                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0FE3                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0013                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  008C                     	;# 
   498  008D                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0099                     	;# 
   507  009A                     	;# 
   508  009B                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  020C                     	;# 
   533  020D                     	;# 
   534  0391                     	;# 
   535  0392                     	;# 
   536  0393                     	;# 
   537  0394                     	;# 
   538  0395                     	;# 
   539  0396                     	;# 
   540  0498                     	;# 
   541  0498                     	;# 
   542  0499                     	;# 
   543  049A                     	;# 
   544  049B                     	;# 
   545  049B                     	;# 
   546  049C                     	;# 
   547  049D                     	;# 
   548  049E                     	;# 
   549  049F                     	;# 
   550  0611                     	;# 
   551  0612                     	;# 
   552  0613                     	;# 
   553  0613                     	;# 
   554  0614                     	;# 
   555  0615                     	;# 
   556  0616                     	;# 
   557  0616                     	;# 
   558  0617                     	;# 
   559  0618                     	;# 
   560  0619                     	;# 
   561  0619                     	;# 
   562  061A                     	;# 
   563  061B                     	;# 
   564  061C                     	;# 
   565  061C                     	;# 
   566  0691                     	;# 
   567  0692                     	;# 
   568  0693                     	;# 
   569  0694                     	;# 
   570  0695                     	;# 
   571  0F0F                     	;# 
   572  0F10                     	;# 
   573  0F11                     	;# 
   574  0F12                     	;# 
   575  0F13                     	;# 
   576  0F14                     	;# 
   577  0F15                     	;# 
   578  0F16                     	;# 
   579  0F17                     	;# 
   580  0F18                     	;# 
   581  0F19                     	;# 
   582  0F1A                     	;# 
   583  0F1B                     	;# 
   584  0F1C                     	;# 
   585  0F1D                     	;# 
   586  0F1E                     	;# 
   587  0F1F                     	;# 
   588  0FE3                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0013                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  009F                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  020C                     	;# 
   663  020D                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0498                     	;# 
   671  0498                     	;# 
   672  0499                     	;# 
   673  049A                     	;# 
   674  049B                     	;# 
   675  049B                     	;# 
   676  049C                     	;# 
   677  049D                     	;# 
   678  049E                     	;# 
   679  049F                     	;# 
   680  0611                     	;# 
   681  0612                     	;# 
   682  0613                     	;# 
   683  0613                     	;# 
   684  0614                     	;# 
   685  0615                     	;# 
   686  0616                     	;# 
   687  0616                     	;# 
   688  0617                     	;# 
   689  0618                     	;# 
   690  0619                     	;# 
   691  0619                     	;# 
   692  061A                     	;# 
   693  061B                     	;# 
   694  061C                     	;# 
   695  061C                     	;# 
   696  0691                     	;# 
   697  0692                     	;# 
   698  0693                     	;# 
   699  0694                     	;# 
   700  0695                     	;# 
   701  0F0F                     	;# 
   702  0F10                     	;# 
   703  0F11                     	;# 
   704  0F12                     	;# 
   705  0F13                     	;# 
   706  0F14                     	;# 
   707  0F15                     	;# 
   708  0F16                     	;# 
   709  0F17                     	;# 
   710  0F18                     	;# 
   711  0F19                     	;# 
   712  0F1A                     	;# 
   713  0F1B                     	;# 
   714  0F1C                     	;# 
   715  0F1D                     	;# 
   716  0F1E                     	;# 
   717  0F1F                     	;# 
   718  0FE3                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0011                     	;# 
   746  0012                     	;# 
   747  0013                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0091                     	;# 
   761  0092                     	;# 
   762  0093                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  0116                     	;# 
   778  0117                     	;# 
   779  011D                     	;# 
   780  018C                     	;# 
   781  018D                     	;# 
   782  018E                     	;# 
   783  0191                     	;# 
   784  0191                     	;# 
   785  0192                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0197                     	;# 
   792  020C                     	;# 
   793  020D                     	;# 
   794  0391                     	;# 
   795  0392                     	;# 
   796  0393                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0498                     	;# 
   801  0498                     	;# 
   802  0499                     	;# 
   803  049A                     	;# 
   804  049B                     	;# 
   805  049B                     	;# 
   806  049C                     	;# 
   807  049D                     	;# 
   808  049E                     	;# 
   809  049F                     	;# 
   810  0611                     	;# 
   811  0612                     	;# 
   812  0613                     	;# 
   813  0613                     	;# 
   814  0614                     	;# 
   815  0615                     	;# 
   816  0616                     	;# 
   817  0616                     	;# 
   818  0617                     	;# 
   819  0618                     	;# 
   820  0619                     	;# 
   821  0619                     	;# 
   822  061A                     	;# 
   823  061B                     	;# 
   824  061C                     	;# 
   825  061C                     	;# 
   826  0691                     	;# 
   827  0692                     	;# 
   828  0693                     	;# 
   829  0694                     	;# 
   830  0695                     	;# 
   831  0F0F                     	;# 
   832  0F10                     	;# 
   833  0F11                     	;# 
   834  0F12                     	;# 
   835  0F13                     	;# 
   836  0F14                     	;# 
   837  0F15                     	;# 
   838  0F16                     	;# 
   839  0F17                     	;# 
   840  0F18                     	;# 
   841  0F19                     	;# 
   842  0F1A                     	;# 
   843  0F1B                     	;# 
   844  0F1C                     	;# 
   845  0F1D                     	;# 
   846  0F1E                     	;# 
   847  0F1F                     	;# 
   848  0FE3                     	;# 
   849  0FE4                     	;# 
   850  0FE5                     	;# 
   851  0FE6                     	;# 
   852  0FE7                     	;# 
   853  0FE8                     	;# 
   854  0FE9                     	;# 
   855  0FEA                     	;# 
   856  0FEB                     	;# 
   857  0FED                     	;# 
   858  0FEE                     	;# 
   859  0FEF                     	;# 
   860  0000                     	;# 
   861  0001                     	;# 
   862  0002                     	;# 
   863  0003                     	;# 
   864  0004                     	;# 
   865  0005                     	;# 
   866  0006                     	;# 
   867  0007                     	;# 
   868  0008                     	;# 
   869  0009                     	;# 
   870  000A                     	;# 
   871  000B                     	;# 
   872  000C                     	;# 
   873  000D                     	;# 
   874  000E                     	;# 
   875  0011                     	;# 
   876  0012                     	;# 
   877  0013                     	;# 
   878  0015                     	;# 
   879  0016                     	;# 
   880  0016                     	;# 
   881  0017                     	;# 
   882  0018                     	;# 
   883  0019                     	;# 
   884  001A                     	;# 
   885  001B                     	;# 
   886  001C                     	;# 
   887  008C                     	;# 
   888  008D                     	;# 
   889  008E                     	;# 
   890  0091                     	;# 
   891  0092                     	;# 
   892  0093                     	;# 
   893  0095                     	;# 
   894  0096                     	;# 
   895  0097                     	;# 
   896  0099                     	;# 
   897  009A                     	;# 
   898  009B                     	;# 
   899  009B                     	;# 
   900  009C                     	;# 
   901  009D                     	;# 
   902  009E                     	;# 
   903  009F                     	;# 
   904  010C                     	;# 
   905  010D                     	;# 
   906  010E                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  011D                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  0191                     	;# 
   914  0191                     	;# 
   915  0192                     	;# 
   916  0193                     	;# 
   917  0193                     	;# 
   918  0194                     	;# 
   919  0195                     	;# 
   920  0196                     	;# 
   921  0197                     	;# 
   922  020C                     	;# 
   923  020D                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0498                     	;# 
   931  0498                     	;# 
   932  0499                     	;# 
   933  049A                     	;# 
   934  049B                     	;# 
   935  049B                     	;# 
   936  049C                     	;# 
   937  049D                     	;# 
   938  049E                     	;# 
   939  049F                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0613                     	;# 
   944  0614                     	;# 
   945  0615                     	;# 
   946  0616                     	;# 
   947  0616                     	;# 
   948  0617                     	;# 
   949  0618                     	;# 
   950  0619                     	;# 
   951  0619                     	;# 
   952  061A                     	;# 
   953  061B                     	;# 
   954  061C                     	;# 
   955  061C                     	;# 
   956  0691                     	;# 
   957  0692                     	;# 
   958  0693                     	;# 
   959  0694                     	;# 
   960  0695                     	;# 
   961  0F0F                     	;# 
   962  0F10                     	;# 
   963  0F11                     	;# 
   964  0F12                     	;# 
   965  0F13                     	;# 
   966  0F14                     	;# 
   967  0F15                     	;# 
   968  0F16                     	;# 
   969  0F17                     	;# 
   970  0F18                     	;# 
   971  0F19                     	;# 
   972  0F1A                     	;# 
   973  0F1B                     	;# 
   974  0F1C                     	;# 
   975  0F1D                     	;# 
   976  0F1E                     	;# 
   977  0F1F                     	;# 
   978  0FE3                     	;# 
   979  0FE4                     	;# 
   980  0FE5                     	;# 
   981  0FE6                     	;# 
   982  0FE7                     	;# 
   983  0FE8                     	;# 
   984  0FE9                     	;# 
   985  0FEA                     	;# 
   986  0FEB                     	;# 
   987  0FED                     	;# 
   988  0FEE                     	;# 
   989  0FEF                     	;# 
   990  0000                     	;# 
   991  0001                     	;# 
   992  0002                     	;# 
   993  0003                     	;# 
   994  0004                     	;# 
   995  0005                     	;# 
   996  0006                     	;# 
   997  0007                     	;# 
   998  0008                     	;# 
   999  0009                     	;# 
  1000  000A                     	;# 
  1001  000B                     	;# 
  1002  000C                     	;# 
  1003  000D                     	;# 
  1004  000E                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0015                     	;# 
  1009  0016                     	;# 
  1010  0016                     	;# 
  1011  0017                     	;# 
  1012  0018                     	;# 
  1013  0019                     	;# 
  1014  001A                     	;# 
  1015  001B                     	;# 
  1016  001C                     	;# 
  1017  008C                     	;# 
  1018  008D                     	;# 
  1019  008E                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010E                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018E                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0197                     	;# 
  1052  020C                     	;# 
  1053  020D                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0394                     	;# 
  1058  0395                     	;# 
  1059  0396                     	;# 
  1060  0498                     	;# 
  1061  0498                     	;# 
  1062  0499                     	;# 
  1063  049A                     	;# 
  1064  049B                     	;# 
  1065  049B                     	;# 
  1066  049C                     	;# 
  1067  049D                     	;# 
  1068  049E                     	;# 
  1069  049F                     	;# 
  1070  0611                     	;# 
  1071  0612                     	;# 
  1072  0613                     	;# 
  1073  0613                     	;# 
  1074  0614                     	;# 
  1075  0615                     	;# 
  1076  0616                     	;# 
  1077  0616                     	;# 
  1078  0617                     	;# 
  1079  0618                     	;# 
  1080  0619                     	;# 
  1081  0619                     	;# 
  1082  061A                     	;# 
  1083  061B                     	;# 
  1084  061C                     	;# 
  1085  061C                     	;# 
  1086  0691                     	;# 
  1087  0692                     	;# 
  1088  0693                     	;# 
  1089  0694                     	;# 
  1090  0695                     	;# 
  1091  0F0F                     	;# 
  1092  0F10                     	;# 
  1093  0F11                     	;# 
  1094  0F12                     	;# 
  1095  0F13                     	;# 
  1096  0F14                     	;# 
  1097  0F15                     	;# 
  1098  0F16                     	;# 
  1099  0F17                     	;# 
  1100  0F18                     	;# 
  1101  0F19                     	;# 
  1102  0F1A                     	;# 
  1103  0F1B                     	;# 
  1104  0F1C                     	;# 
  1105  0F1D                     	;# 
  1106  0F1E                     	;# 
  1107  0F1F                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0013                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0093                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0099                     	;# 
  1157  009A                     	;# 
  1158  009B                     	;# 
  1159  009B                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009E                     	;# 
  1163  009F                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  011D                     	;# 
  1170  018C                     	;# 
  1171  018D                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0194                     	;# 
  1179  0195                     	;# 
  1180  0196                     	;# 
  1181  0197                     	;# 
  1182  020C                     	;# 
  1183  020D                     	;# 
  1184  0391                     	;# 
  1185  0392                     	;# 
  1186  0393                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  0498                     	;# 
  1191  0498                     	;# 
  1192  0499                     	;# 
  1193  049A                     	;# 
  1194  049B                     	;# 
  1195  049B                     	;# 
  1196  049C                     	;# 
  1197  049D                     	;# 
  1198  049E                     	;# 
  1199  049F                     	;# 
  1200  0611                     	;# 
  1201  0612                     	;# 
  1202  0613                     	;# 
  1203  0613                     	;# 
  1204  0614                     	;# 
  1205  0615                     	;# 
  1206  0616                     	;# 
  1207  0616                     	;# 
  1208  0617                     	;# 
  1209  0618                     	;# 
  1210  0619                     	;# 
  1211  0619                     	;# 
  1212  061A                     	;# 
  1213  061B                     	;# 
  1214  061C                     	;# 
  1215  061C                     	;# 
  1216  0691                     	;# 
  1217  0692                     	;# 
  1218  0693                     	;# 
  1219  0694                     	;# 
  1220  0695                     	;# 
  1221  0F0F                     	;# 
  1222  0F10                     	;# 
  1223  0F11                     	;# 
  1224  0F12                     	;# 
  1225  0F13                     	;# 
  1226  0F14                     	;# 
  1227  0F15                     	;# 
  1228  0F16                     	;# 
  1229  0F17                     	;# 
  1230  0F18                     	;# 
  1231  0F19                     	;# 
  1232  0F1A                     	;# 
  1233  0F1B                     	;# 
  1234  0F1C                     	;# 
  1235  0F1D                     	;# 
  1236  0F1E                     	;# 
  1237  0F1F                     	;# 
  1238  0FE3                     	;# 
  1239  0FE4                     	;# 
  1240  0FE5                     	;# 
  1241  0FE6                     	;# 
  1242  0FE7                     	;# 
  1243  0FE8                     	;# 
  1244  0FE9                     	;# 
  1245  0FEA                     	;# 
  1246  0FEB                     	;# 
  1247  0FED                     	;# 
  1248  0FEE                     	;# 
  1249  0FEF                     	;# 
  1250                           
  1251                           	psect	idataBANK0
  1252  05AE                     __pidataBANK0:
  1253                           
  1254                           ;initializer for _m
  1255  05AE  34E8               	retlw	232
  1256  05AF  3403               	retlw	3
  1257  05B0  3400               	retlw	0
  1258  05B1  3400               	retlw	0
  1259                           
  1260                           ;initializer for main@channel
  1261  05B2  340A               	retlw	10
  1262                           
  1263                           ;initializer for _upperLimit
  1264  05B3  34FF               	retlw	255
  1265  05B4  3403               	retlw	3
  1266  05B5  3400               	retlw	0
  1267  05B6  3400               	retlw	0
  1268                           
  1269                           	psect	stringtext1
  1270  05F4                     __pstringtext1:
  1271  05F4                     _fixedPointFactor:
  1272  05F4  34E8               	retlw	232
  1273  05F5  3403               	retlw	3
  1274  05F6  3400               	retlw	0
  1275  05F7  3400               	retlw	0
  1276  05F8                     __end_of_fixedPointFactor:
  1277                           
  1278                           	psect	nvBANK0
  1279  0067                     __pnvBANK0:
  1280  0067                     _TMR0_InterruptHandler:
  1281  0067                     	ds	2
  1282  0069                     _timer0ReloadVal:
  1283  0069                     	ds	1
  1284  000C                     _PORTAbits	set	12
  1285  000B                     _INTCONbits	set	11
  1286  0015                     _TMR0	set	21
  1287  001C                     _T2CONbits	set	28
  1288  001C                     _T2CON	set	28
  1289  0011                     _PIR1bits	set	17
  1290  001A                     _TMR2	set	26
  1291  001B                     _PR2	set	27
  1292  0095                     _OPTION_REG	set	149
  1293  0095                     _OPTION_REGbits	set	149
  1294  008E                     _TRISC	set	142
  1295  008D                     _TRISB	set	141
  1296  008C                     _TRISA	set	140
  1297  0097                     _WDTCON	set	151
  1298  0099                     _OSCCON	set	153
  1299  009D                     _ADCON0bits	set	157
  1300  009D                     _ADCON0	set	157
  1301  009C                     _ADRESH	set	156
  1302  009B                     _ADRESL	set	155
  1303  009F                     _ADCON2	set	159
  1304  009E                     _ADCON1	set	158
  1305  010D                     _LATBbits	set	269
  1306  010E                     _LATCbits	set	270
  1307  011D                     _APFCON	set	285
  1308  010E                     _LATC	set	270
  1309  010D                     _LATB	set	269
  1310  010C                     _LATA	set	268
  1311  0116                     _BORCON	set	278
  1312  0196                     _PMCON2	set	406
  1313  0193                     _PMDATL	set	403
  1314  0194                     _PMDATH	set	404
  1315  0195                     _PMCON1bits	set	405
  1316  0192                     _PMADRH	set	402
  1317  0191                     _PMADRL	set	401
  1318  018C                     _ANSELA	set	396
  1319  018D                     _ANSELB	set	397
  1320  018E                     _ANSELC	set	398
  1321  020C                     _WPUA	set	524
  1322  020D                     _WPUB	set	525
  1323  0617                     _PWM3DCL	set	1559
  1324  0618                     _PWM3DCH	set	1560
  1325  0619                     _PWM3CON	set	1561
  1326                           
  1327                           	psect	cinit
  1328  000D                     start_initialization:	
  1329                           ; #config settings
  1330                           
  1331  000D                     __initialization:
  1332                           
  1333                           ; Initialize objects allocated to BANK0
  1334  000D  30AE               	movlw	low __pidataBANK0
  1335  000E  0084               	movwf	4
  1336  000F  3085               	movlw	(high __pidataBANK0)| (0+128)
  1337  0010  0085               	movwf	5
  1338  0011  305E               	movlw	low __pdataBANK0
  1339  0012  0086               	movwf	6
  1340  0013  3000               	movlw	high __pdataBANK0
  1341  0014  0087               	movwf	7
  1342  0015  3009               	movlw	9
  1343  0016  25D7               	fcall	init_ram
  1344                           
  1345                           ; Clear objects allocated to BANK0
  1346  0017  304A               	movlw	low __pbssBANK0
  1347  0018  0084               	movwf	4
  1348  0019  3000               	movlw	high __pbssBANK0
  1349  001A  0085               	movwf	5
  1350  001B  3014               	movlw	20
  1351  001C  25DD               	fcall	clear_ram0
  1352  001D                     end_of_initialization:	
  1353                           ;End of C runtime variable initialization code
  1354                           
  1355  001D                     __end_of__initialization:
  1356  001D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1357  001E  0020               	movlb	0
  1358  001F  2820               	ljmp	_main	;jump to C main() function
  1359                           
  1360                           	psect	bssBANK0
  1361  004A                     __pbssBANK0:
  1362  004A                     _lowerLimit:
  1363  004A                     	ds	4
  1364  004E                     _adcValuePosition:
  1365  004E                     	ds	4
  1366  0052                     _b:
  1367  0052                     	ds	3
  1368  0055                     _msPressed:
  1369  0055                     	ds	2
  1370  0057                     _msTick:
  1371  0057                     	ds	2
  1372  0059                     _ADC_InterruptHandler:
  1373  0059                     	ds	2
  1374  005B                     _currentState:
  1375  005B                     	ds	1
  1376  005C                     _doToggle:
  1377  005C                     	ds	1
  1378  005D                     _doButtonAction:
  1379  005D                     	ds	1
  1380                           
  1381                           	psect	dataBANK0
  1382  005E                     __pdataBANK0:
  1383  005E                     _m:
  1384  005E                     	ds	4
  1385  0062                     main@channel:
  1386  0062                     	ds	1
  1387  0063                     _upperLimit:
  1388  0063                     	ds	4
  1389                           
  1390                           	psect	inittext
  1391  05D7                     init_ram:
  1392  05D7  00FE               	movwf	126
  1393  05D8                     initloop:
  1394  05D8  0012               	moviw fsr0++
  1395  05D9  001E               	movwi fsr1++
  1396  05DA  0BFE               	decfsz	126,f
  1397  05DB  2DD8               	goto	initloop
  1398  05DC  3400               	retlw	0
  1399                           
  1400                           	psect	clrtext
  1401  05DD                     clear_ram0:	
  1402                           ;	Called with FSR0 containing the base address, and
  1403                           ;	WREG with the size to clear
  1404                           
  1405  05DD  0064               	clrwdt	;clear the watchdog before getting into this loop
  1406  05DE                     clrloop0:
  1407  05DE  0180               	clrf	0	;clear RAM location pointed to by FSR
  1408  05DF  3101               	addfsr 0,1
  1409  05E0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1410  05E1  2DDE               	goto	clrloop0	;have we reached the end yet?
  1411  05E2  3400               	retlw	0	;all done for this memory range, return
  1412                           
  1413                           	psect	cstackCOMMON
  1414  0070                     __pcstackCOMMON:
  1415  0070                     ?_PIN_MANAGER_Initialize:
  1416  0070                     ??_PIN_MANAGER_Initialize:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0070                     ?_OSCILLATOR_Initialize:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0070                     ??_OSCILLATOR_Initialize:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0070                     ?_WDT_Initialize:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0070                     ??_WDT_Initialize:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0070                     ?_PWM3_Initialize:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0070                     ??_PWM3_Initialize:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0070                     ?_TMR2_Initialize:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0070                     ??_TMR2_Initialize:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0070                     ?_TMR0_Initialize:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0070                     ?_TMR0_SetInterruptHandler:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0070                     ?_TMR0_DefaultInterruptHandler:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0070                     ??_TMR0_DefaultInterruptHandler:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0070                     ?_TMR0_CallBack:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0070                     ??_TMR0_CallBack:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0070                     ?_FLASH_EraseBlock:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0070                     ?_setLedsForPositioning:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0070                     ?_ADC_Initialize:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0070                     ??_ADC_Initialize:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0070                     ?_SYSTEM_Initialize:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0070                     ?_PWM3_LoadDutyValue:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0070                     ?_TMR2_StartTimer:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0070                     ??_TMR2_StartTimer:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0070                     ?_TMR0_ISR:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0070                     ??_TMR0_ISR:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0070                     ?_INTERRUPT_InterruptManager:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0070                     ??_INTERRUPT_InterruptManager:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0070                     ?_readFlash:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0070                     ?_writeFlash:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0070                     ?_timer0CallBack:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ??_timer0CallBack:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ?_setState:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_main:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_ADC_GetConversion:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0070                     ?_FLASH_ReadWord:	
  1519                           ; 2 bytes @ 0x0
  1520                           
  1521  0070                     ?___tmul:	
  1522                           ; 2 bytes @ 0x0
  1523                           
  1524  0070                     ?___lmul:	
  1525                           ; 3 bytes @ 0x0
  1526                           
  1527  0070                     ?___lldiv:	
  1528                           ; 4 bytes @ 0x0
  1529                           
  1530  0070                     PWM3_LoadDutyValue@dutyValue:	
  1531                           ; 4 bytes @ 0x0
  1532                           
  1533  0070                     TMR0_SetInterruptHandler@InterruptHandler:	
  1534                           ; 2 bytes @ 0x0
  1535                           
  1536  0070                     FLASH_ReadWord@flashAddr:	
  1537                           ; 2 bytes @ 0x0
  1538                           
  1539  0070                     FLASH_EraseBlock@startAddr:	
  1540                           ; 2 bytes @ 0x0
  1541                           
  1542  0070                     ___tmul@multiplier:	
  1543                           ; 2 bytes @ 0x0
  1544                           
  1545  0070                     setLedsForPositioning@adcValue:	
  1546                           ; 3 bytes @ 0x0
  1547                           
  1548  0070                     ___lmul@multiplier:	
  1549                           ; 4 bytes @ 0x0
  1550                           
  1551  0070                     ___lldiv@divisor:	
  1552                           ; 4 bytes @ 0x0
  1553                           
  1554                           
  1555                           ; 4 bytes @ 0x0
  1556  0070                     	ds	2
  1557  0072                     ??_TMR0_Initialize:
  1558  0072                     ??_TMR0_SetInterruptHandler:	
  1559                           ; 1 bytes @ 0x2
  1560                           
  1561  0072                     ??_FLASH_EraseBlock:	
  1562                           ; 1 bytes @ 0x2
  1563                           
  1564  0072                     ??_ADC_GetConversion:	
  1565                           ; 1 bytes @ 0x2
  1566                           
  1567  0072                     ??_PWM3_LoadDutyValue:	
  1568                           ; 1 bytes @ 0x2
  1569                           
  1570  0072                     ??_FLASH_ReadWord:	
  1571                           ; 1 bytes @ 0x2
  1572                           
  1573  0072                     FLASH_ReadWord@GIEBitValue:	
  1574                           ; 1 bytes @ 0x2
  1575                           
  1576  0072                     FLASH_EraseBlock@GIEBitValue:	
  1577                           ; 1 bytes @ 0x2
  1578                           
  1579                           
  1580                           ; 1 bytes @ 0x2
  1581  0072                     	ds	1
  1582  0073                     ?_FLASH_WriteBlock:
  1583  0073                     ??_SYSTEM_Initialize:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0073                     ??_readFlash:	
  1587                           ; 1 bytes @ 0x3
  1588                           
  1589  0073                     ADC_GetConversion@channel:	
  1590                           ; 1 bytes @ 0x3
  1591                           
  1592  0073                     FLASH_WriteBlock@writeAddr:	
  1593                           ; 1 bytes @ 0x3
  1594                           
  1595  0073                     ___tmul@multiplicand:	
  1596                           ; 2 bytes @ 0x3
  1597                           
  1598                           
  1599                           ; 3 bytes @ 0x3
  1600  0073                     	ds	1
  1601  0074                     ??_setLedsForPositioning:
  1602  0074                     ___lmul@multiplicand:	
  1603                           ; 1 bytes @ 0x4
  1604                           
  1605  0074                     ___lldiv@dividend:	
  1606                           ; 4 bytes @ 0x4
  1607                           
  1608                           
  1609                           ; 4 bytes @ 0x4
  1610  0074                     	ds	1
  1611  0075                     FLASH_WriteBlock@flashWordArray:
  1612                           
  1613                           ; 1 bytes @ 0x5
  1614  0075                     	ds	1
  1615  0076                     ??_FLASH_WriteBlock:
  1616  0076                     ??___tmul:	
  1617                           ; 1 bytes @ 0x6
  1618                           
  1619  0076                     ___tmul@product:	
  1620                           ; 1 bytes @ 0x6
  1621                           
  1622                           
  1623                           ; 3 bytes @ 0x6
  1624  0076                     	ds	2
  1625  0078                     ??___lmul:
  1626  0078                     ??___lldiv:	
  1627                           ; 1 bytes @ 0x8
  1628                           
  1629  0078                     ___lmul@product:	
  1630                           ; 1 bytes @ 0x8
  1631                           
  1632                           
  1633                           ; 4 bytes @ 0x8
  1634  0078                     	ds	1
  1635  0079                     FLASH_WriteBlock@blockStartAddr:
  1636  0079                     ___lldiv@quotient:	
  1637                           ; 2 bytes @ 0x9
  1638                           
  1639                           
  1640                           ; 4 bytes @ 0x9
  1641  0079                     	ds	2
  1642  007B                     FLASH_WriteBlock@GIEBitValue:
  1643                           
  1644                           ; 1 bytes @ 0xB
  1645  007B                     	ds	1
  1646  007C                     ??___aldiv:
  1647  007C                     FLASH_WriteBlock@i:	
  1648                           ; 1 bytes @ 0xC
  1649                           
  1650                           
  1651                           ; 1 bytes @ 0xC
  1652  007C                     	ds	1
  1653  007D                     ??_writeFlash:
  1654  007D                     ___lldiv@counter:	
  1655                           ; 1 bytes @ 0xD
  1656                           
  1657                           
  1658                           ; 1 bytes @ 0xD
  1659  007D                     	ds	1
  1660                           
  1661                           	psect	cstackBANK0
  1662  0020                     __pcstackBANK0:
  1663  0020                     ??_setState:
  1664  0020                     ?___aldiv:	
  1665                           ; 1 bytes @ 0x0
  1666                           
  1667  0020                     ___aldiv@divisor:	
  1668                           ; 4 bytes @ 0x0
  1669                           
  1670  0020                     writeFlash@wrBlockData:	
  1671                           ; 4 bytes @ 0x0
  1672                           
  1673                           
  1674                           ; 32 bytes @ 0x0
  1675  0020                     	ds	4
  1676  0024                     setState@newState:
  1677  0024                     ___aldiv@dividend:	
  1678                           ; 1 bytes @ 0x4
  1679                           
  1680                           
  1681                           ; 4 bytes @ 0x4
  1682  0024                     	ds	4
  1683  0028                     ___aldiv@counter:
  1684                           
  1685                           ; 1 bytes @ 0x8
  1686  0028                     	ds	1
  1687  0029                     ___aldiv@sign:
  1688                           
  1689                           ; 1 bytes @ 0x9
  1690  0029                     	ds	1
  1691  002A                     ___aldiv@quotient:
  1692                           
  1693                           ; 4 bytes @ 0xA
  1694  002A                     	ds	22
  1695  0040                     ??_main:
  1696                           
  1697                           ; 1 bytes @ 0x20
  1698  0040                     	ds	8
  1699  0048                     main@dimming:
  1700                           
  1701                           ; 2 bytes @ 0x28
  1702  0048                     	ds	2
  1703                           
  1704                           	psect	maintext
  1705  0020                     __pmaintext:	
  1706 ;;
  1707 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1708 ;;
  1709 ;; *************** function _main *****************
  1710 ;; Defined at:
  1711 ;;		line 187 in file "main.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;		None
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  dimming         2   40[BANK0 ] short 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : B1F/0
  1722 ;;		On exit  : 1F/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMMON   BANK0   BANK1
  1725 ;;      Params:         0       0       0
  1726 ;;      Locals:         0       2       0
  1727 ;;      Temps:          0       8       0
  1728 ;;      Totals:         0      10       0
  1729 ;;Total ram usage:       10 bytes
  1730 ;; Hardware stack levels required when called:    7
  1731 ;; This function calls:
  1732 ;;		_ADC_GetConversion
  1733 ;;		_PWM3_LoadDutyValue
  1734 ;;		_SYSTEM_Initialize
  1735 ;;		_TMR0_SetInterruptHandler
  1736 ;;		_TMR2_StartTimer
  1737 ;;		___aldiv
  1738 ;;		___lmul
  1739 ;;		_setLedsForPositioning
  1740 ;;		_setState
  1741 ;;		_writeFlash
  1742 ;; This function is called by:
  1743 ;;		Startup code after reset
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           
  1748                           ;psect for function _main
  1749  0020                     _main:
  1750                           
  1751                           ;main.c: 190:     SYSTEM_Initialize();
  1752                           
  1753                           ;incstack = 0
  1754                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1755  0020  25B7               	fcall	_SYSTEM_Initialize
  1756                           
  1757                           ;main.c: 193:     (INTCONbits.GIE = 1);
  1758  0021  178B               	bsf	11,7	;volatile
  1759                           
  1760                           ;main.c: 195:     setState(STATE_NORMAL);
  1761  0022  3001               	movlw	1
  1762  0023  2268               	fcall	_setState
  1763                           
  1764                           ;main.c: 198:     TMR0_SetInterruptHandler(timer0CallBack);
  1765  0024  3094               	movlw	low _timer0CallBack
  1766  0025  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1767  0026  3005               	movlw	high _timer0CallBack
  1768  0027  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1769  0028  25EF               	fcall	_TMR0_SetInterruptHandler
  1770                           
  1771                           ;main.c: 199:     TMR2_StartTimer();
  1772  0029  25FC               	fcall	_TMR2_StartTimer
  1773  002A                     l1953:
  1774                           
  1775                           ;main.c: 203:     {;main.c: 204:         static adc_channel_t channel = channelBrightnes
      +                          s;;main.c: 207:         channel = (channel == channelRudder) ? channelBrightness : chann
      +                          elRudder;
  1776  002A  3003               	movlw	3
  1777  002B  0020               	movlb	0	; select bank0
  1778  002C  0662               	xorwf	main@channel,w
  1779  002D  1903               	btfsc	3,2
  1780  002E  2831               	goto	l1957
  1781  002F  3003               	movlw	3
  1782  0030  2832               	goto	L1
  1783  0031                     l1957:
  1784  0031  300A               	movlw	10
  1785  0032                     L1:
  1786  0032  00C0               	movwf	??_main
  1787  0033  0840               	movf	??_main,w
  1788  0034  00E2               	movwf	main@channel
  1789                           
  1790                           ;main.c: 212:         if(channel == channelRudder)
  1791  0035  3003               	movlw	3
  1792  0036  0662               	xorwf	main@channel,w
  1793  0037  1D03               	btfss	3,2
  1794  0038  2843               	goto	l1963
  1795                           
  1796                           ;main.c: 213:         {;main.c: 214:             adcValuePosition = ADC_GetConversion(ch
      +                          annel);
  1797  0039  0862               	movf	main@channel,w
  1798  003A  2552               	fcall	_ADC_GetConversion
  1799  003B  0870               	movf	?_ADC_GetConversion,w
  1800  003C  0020               	movlb	0	; select bank0
  1801  003D  00CE               	movwf	_adcValuePosition
  1802  003E  0871               	movf	?_ADC_GetConversion+1,w
  1803  003F  00CF               	movwf	_adcValuePosition+1
  1804  0040  01D0               	clrf	_adcValuePosition+2
  1805  0041  01D1               	clrf	_adcValuePosition+3
  1806                           
  1807                           ;main.c: 215:         }
  1808  0042  2871               	goto	l1975
  1809  0043                     l1963:
  1810                           
  1811                           ;main.c: 217:         {;main.c: 219:             int16_t dimming = (int16_t)ADC_GetConve
      +                          rsion(channel);
  1812  0043  0862               	movf	main@channel,w
  1813  0044  2552               	fcall	_ADC_GetConversion
  1814  0045  0871               	movf	?_ADC_GetConversion+1,w
  1815  0046  0020               	movlb	0	; select bank0
  1816  0047  00C9               	movwf	main@dimming+1
  1817  0048  0870               	movf	?_ADC_GetConversion,w
  1818  0049  00C8               	movwf	main@dimming
  1819                           
  1820                           ;main.c: 221:             dimming = (dimming << 1) +24 ;
  1821  004A  0849               	movf	main@dimming+1,w
  1822  004B  00C1               	movwf	??_main+1
  1823  004C  0848               	movf	main@dimming,w
  1824  004D  00C0               	movwf	??_main
  1825  004E  35C0               	lslf	??_main,f
  1826  004F  0DC1               	rlf	??_main+1,f
  1827  0050  0840               	movf	??_main,w
  1828  0051  3E18               	addlw	24
  1829  0052  00C8               	movwf	main@dimming
  1830  0053  3000               	movlw	0
  1831  0054  3D41               	addwfc	??_main+1,w
  1832  0055  00C9               	movwf	main@dimming+1
  1833                           
  1834                           ;main.c: 224:             if(dimming > 1000)
  1835  0056  0849               	movf	main@dimming+1,w
  1836  0057  3A80               	xorlw	128
  1837  0058  00C0               	movwf	??_main
  1838  0059  3083               	movlw	131
  1839  005A  0240               	subwf	??_main,w
  1840  005B  1D03               	skipz
  1841  005C  285F               	goto	u1335
  1842  005D  30E9               	movlw	233
  1843  005E  0248               	subwf	main@dimming,w
  1844  005F                     u1335:
  1845  005F  1C03               	skipc
  1846  0060  2867               	goto	l350
  1847                           
  1848                           ;main.c: 225:             {;main.c: 226:                 dimming = 1000;
  1849  0061  30E8               	movlw	232
  1850  0062  0020               	movlb	0	; select bank0
  1851  0063  00C8               	movwf	main@dimming
  1852  0064  3003               	movlw	3
  1853  0065  00C9               	movwf	main@dimming+1
  1854                           
  1855                           ;main.c: 227:             }
  1856  0066  286C               	goto	l1973
  1857  0067                     l350:	
  1858                           ;main.c: 228:             else if(dimming < (0))
  1859                           
  1860  0067  0020               	movlb	0	; select bank0
  1861  0068  1FC9               	btfss	main@dimming+1,7
  1862  0069  286C               	goto	l1973
  1863                           
  1864                           ;main.c: 229:             {;main.c: 230:                 dimming = (0);
  1865  006A  01C8               	clrf	main@dimming
  1866  006B  01C9               	clrf	main@dimming+1
  1867  006C                     l1973:
  1868                           
  1869                           ;main.c: 233:             PWM3_LoadDutyValue(dimming);
  1870  006C  0849               	movf	main@dimming+1,w
  1871  006D  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  1872  006E  0848               	movf	main@dimming,w
  1873  006F  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
  1874  0070  256A               	fcall	_PWM3_LoadDutyValue
  1875  0071                     l1975:
  1876                           
  1877                           ;main.c: 238:         if(!PORTAbits.RA5 && !doButtonAction)
  1878  0071  0020               	movlb	0	; select bank0
  1879  0072  1A8C               	btfsc	12,5	;volatile
  1880  0073  288C               	goto	l1985
  1881  0074  085D               	movf	_doButtonAction,w	;volatile
  1882  0075  1D03               	btfss	3,2
  1883  0076  288C               	goto	l1985
  1884                           
  1885                           ;main.c: 239:         {;main.c: 240:             msPressed++;
  1886  0077  3001               	movlw	1
  1887  0078  07D5               	addwf	_msPressed,f	;volatile
  1888  0079  3000               	movlw	0
  1889  007A  3DD6               	addwfc	_msPressed+1,f	;volatile
  1890                           
  1891                           ;main.c: 242:             if(msPressed > 3000)
  1892  007B  300B               	movlw	11
  1893  007C  0256               	subwf	_msPressed+1,w	;volatile
  1894  007D  30B9               	movlw	185
  1895  007E  1903               	skipnz
  1896  007F  0255               	subwf	_msPressed,w	;volatile
  1897  0080  1C03               	skipc
  1898  0081  2889               	goto	l358
  1899                           
  1900                           ;main.c: 243:             {;main.c: 244:                 doButtonAction = 1;
  1901  0082  3001               	movlw	1
  1902  0083  00C0               	movwf	??_main
  1903  0084  0840               	movf	??_main,w
  1904  0085  00DD               	movwf	_doButtonAction	;volatile
  1905  0086  0022               	movlb	2	; select bank2
  1906  0087  128E               	bcf	14,5	;volatile
  1907  0088  288E               	goto	l1987
  1908  0089                     l358:	
  1909                           ;main.c: 248:             {;main.c: 249:                 do { LATCbits.LATC5 = 1; } whil
      +                          e(0);
  1910                           
  1911  0089  0022               	movlb	2	; select bank2
  1912  008A  168E               	bsf	14,5	;volatile
  1913  008B  288E               	goto	l1987
  1914  008C                     l1985:
  1915                           
  1916                           ;main.c: 253:         {;main.c: 254:             msPressed = 0;
  1917  008C  01D5               	clrf	_msPressed	;volatile
  1918  008D  01D6               	clrf	_msPressed+1	;volatile
  1919  008E                     l1987:
  1920                           
  1921                           ;main.c: 260:         if(doButtonAction)
  1922  008E  0020               	movlb	0	; select bank0
  1923  008F  085D               	movf	_doButtonAction,w	;volatile
  1924  0090  1903               	btfsc	3,2
  1925  0091  2986               	goto	l2027
  1926  0092                     l362:	
  1927                           ;main.c: 264:             {;main.c: 266:             }
  1928                           
  1929                           
  1930                           ;main.c: 263:             while(!PORTAbits.RA5)
  1931  0092  1A8C               	btfsc	12,5	;volatile
  1932  0093  28AF               	goto	l2005
  1933  0094  2892               	goto	l362
  1934  0095                     l1991:
  1935                           
  1936                           ;main.c: 273:                     setState(STATE_TEACH_LEFT);
  1937  0095  3002               	movlw	2
  1938  0096  2268               	fcall	_setState
  1939                           
  1940                           ;main.c: 274:                     break;
  1941  0097  28C2               	goto	l2007
  1942  0098                     l1993:
  1943                           
  1944                           ;main.c: 277:                     lowerLimit = adcValuePosition;
  1945  0098  0851               	movf	_adcValuePosition+3,w
  1946  0099  00CD               	movwf	_lowerLimit+3
  1947  009A  0850               	movf	_adcValuePosition+2,w
  1948  009B  00CC               	movwf	_lowerLimit+2
  1949  009C  084F               	movf	_adcValuePosition+1,w
  1950  009D  00CB               	movwf	_lowerLimit+1
  1951  009E  084E               	movf	_adcValuePosition,w
  1952  009F  00CA               	movwf	_lowerLimit
  1953                           
  1954                           ;main.c: 279:                     setState(STATE_TEACH_RIGHT);
  1955  00A0  3003               	movlw	3
  1956  00A1  2268               	fcall	_setState
  1957                           
  1958                           ;main.c: 280:                     break;
  1959  00A2  28C2               	goto	l2007
  1960  00A3                     l1997:
  1961                           
  1962                           ;main.c: 283:                 {;main.c: 284:                     upperLimit = adcValuePo
      +                          sition;
  1963  00A3  0851               	movf	_adcValuePosition+3,w
  1964  00A4  00E6               	movwf	_upperLimit+3
  1965  00A5  0850               	movf	_adcValuePosition+2,w
  1966  00A6  00E5               	movwf	_upperLimit+2
  1967  00A7  084F               	movf	_adcValuePosition+1,w
  1968  00A8  00E4               	movwf	_upperLimit+1
  1969  00A9  084E               	movf	_adcValuePosition,w
  1970  00AA  00E3               	movwf	_upperLimit
  1971                           
  1972                           ;main.c: 286:                     writeFlash();
  1973  00AB  24E5               	fcall	_writeFlash
  1974                           
  1975                           ;main.c: 287:                     setState(STATE_NORMAL);
  1976  00AC  3001               	movlw	1
  1977  00AD  2268               	fcall	_setState
  1978                           
  1979                           ;main.c: 288:                     break;
  1980  00AE  28C2               	goto	l2007
  1981  00AF                     l2005:
  1982  00AF  085B               	movf	_currentState,w
  1983  00B0  00C0               	movwf	??_main
  1984  00B1  01C1               	clrf	??_main+1
  1985                           
  1986                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1987                           ; Switch size 1, requested type "simple"
  1988                           ; Number of cases is 1, Range of values is 0 to 0
  1989                           ; switch strategies available:
  1990                           ; Name         Instructions Cycles
  1991                           ; simple_byte            4     3 (average)
  1992                           ; direct_byte            8     6 (fixed)
  1993                           ; jumptable            260     6 (fixed)
  1994                           ;	Chosen strategy is simple_byte
  1995  00B2  0841               	movf	??_main+1,w
  1996  00B3  3A00               	xorlw	0	; case 0
  1997  00B4  1903               	skipnz
  1998  00B5  28B7               	goto	l2121
  1999  00B6  28C2               	goto	l2007
  2000  00B7                     l2121:
  2001                           
  2002                           ; Switch size 1, requested type "simple"
  2003                           ; Number of cases is 3, Range of values is 1 to 3
  2004                           ; switch strategies available:
  2005                           ; Name         Instructions Cycles
  2006                           ; simple_byte           10     6 (average)
  2007                           ; direct_byte           15     9 (fixed)
  2008                           ; jumptable            263     9 (fixed)
  2009                           ;	Chosen strategy is simple_byte
  2010  00B7  0840               	movf	??_main,w
  2011  00B8  3A01               	xorlw	1	; case 1
  2012  00B9  1903               	skipnz
  2013  00BA  2895               	goto	l1991
  2014  00BB  3A03               	xorlw	3	; case 2
  2015  00BC  1903               	skipnz
  2016  00BD  2898               	goto	l1993
  2017  00BE  3A01               	xorlw	1	; case 3
  2018  00BF  1903               	skipnz
  2019  00C0  28A3               	goto	l1997
  2020  00C1  28C2               	goto	l2007
  2021  00C2                     l2007:
  2022                           
  2023                           ;main.c: 292:             doButtonAction = 0;
  2024  00C2  01DD               	clrf	_doButtonAction	;volatile
  2025  00C3  2986               	goto	l2027
  2026  00C4                     l2009:
  2027                           
  2028                           ;main.c: 300:                 if(channel == channelBrightness)
  2029  00C4  300A               	movlw	10
  2030  00C5  0662               	xorwf	main@channel,w
  2031  00C6  1D03               	btfss	3,2
  2032  00C7  282A               	goto	l1953
  2033                           
  2034                           ;main.c: 301:                 {;main.c: 302:                     adcValuePosition = (adc
      +                          ValuePosition*m-b)/fixedPointFactor;
  2035  00C8  3000               	movlw	0
  2036  00C9  00A3               	movwf	___aldiv@divisor+3
  2037  00CA  3000               	movlw	0
  2038  00CB  00A2               	movwf	___aldiv@divisor+2
  2039  00CC  3003               	movlw	3
  2040  00CD  00A1               	movwf	___aldiv@divisor+1
  2041  00CE  30E8               	movlw	232
  2042  00CF  00A0               	movwf	___aldiv@divisor
  2043  00D0  0852               	movf	_b,w
  2044  00D1  00C0               	movwf	??_main
  2045  00D2  0853               	movf	_b+1,w
  2046  00D3  00C1               	movwf	??_main+1
  2047  00D4  0854               	movf	_b+2,w
  2048  00D5  00C2               	movwf	??_main+2
  2049  00D6  3000               	movlw	0
  2050  00D7  1BC2               	btfsc	??_main+2,7
  2051  00D8  30FF               	movlw	255
  2052  00D9  00C3               	movwf	??_main+3
  2053  00DA  0851               	movf	_adcValuePosition+3,w
  2054  00DB  00F3               	movwf	___lmul@multiplier+3
  2055  00DC  0850               	movf	_adcValuePosition+2,w
  2056  00DD  00F2               	movwf	___lmul@multiplier+2
  2057  00DE  084F               	movf	_adcValuePosition+1,w
  2058  00DF  00F1               	movwf	___lmul@multiplier+1
  2059  00E0  084E               	movf	_adcValuePosition,w
  2060  00E1  00F0               	movwf	___lmul@multiplier
  2061  00E2  0861               	movf	_m+3,w
  2062  00E3  00F7               	movwf	___lmul@multiplicand+3
  2063  00E4  0860               	movf	_m+2,w
  2064  00E5  00F6               	movwf	___lmul@multiplicand+2
  2065  00E6  085F               	movf	_m+1,w
  2066  00E7  00F5               	movwf	___lmul@multiplicand+1
  2067  00E8  085E               	movf	_m,w
  2068  00E9  00F4               	movwf	___lmul@multiplicand
  2069  00EA  2490               	fcall	___lmul
  2070  00EB  0870               	movf	?___lmul,w
  2071  00EC  00C4               	movwf	??_main+4
  2072  00ED  0871               	movf	?___lmul+1,w
  2073  00EE  00C5               	movwf	??_main+5
  2074  00EF  0872               	movf	?___lmul+2,w
  2075  00F0  00C6               	movwf	??_main+6
  2076  00F1  0873               	movf	?___lmul+3,w
  2077  00F2  00C7               	movwf	??_main+7
  2078  00F3  0840               	movf	??_main,w
  2079  00F4  02C4               	subwf	??_main+4,f
  2080  00F5  0841               	movf	??_main+1,w
  2081  00F6  3BC5               	subwfb	??_main+5,f
  2082  00F7  0842               	movf	??_main+2,w
  2083  00F8  3BC6               	subwfb	??_main+6,f
  2084  00F9  0843               	movf	??_main+3,w
  2085  00FA  3BC7               	subwfb	??_main+7,f
  2086  00FB  0847               	movf	??_main+7,w
  2087  00FC  00A7               	movwf	___aldiv@dividend+3
  2088  00FD  0846               	movf	??_main+6,w
  2089  00FE  00A6               	movwf	___aldiv@dividend+2
  2090  00FF  0845               	movf	??_main+5,w
  2091  0100  00A5               	movwf	___aldiv@dividend+1
  2092  0101  0844               	movf	??_main+4,w
  2093  0102  00A4               	movwf	___aldiv@dividend
  2094  0103  2301               	fcall	___aldiv
  2095  0104  0823               	movf	?___aldiv+3,w
  2096  0105  00D1               	movwf	_adcValuePosition+3
  2097  0106  0822               	movf	?___aldiv+2,w
  2098  0107  00D0               	movwf	_adcValuePosition+2
  2099  0108  0821               	movf	?___aldiv+1,w
  2100  0109  00CF               	movwf	_adcValuePosition+1
  2101  010A  0820               	movf	?___aldiv,w
  2102  010B  00CE               	movwf	_adcValuePosition
  2103                           
  2104                           ;main.c: 303:                     setLedsForPositioning(adcValuePosition);
  2105  010C  0851               	movf	_adcValuePosition+3,w
  2106  010D  00F3               	movwf	setLedsForPositioning@adcValue+3
  2107  010E  0850               	movf	_adcValuePosition+2,w
  2108  010F  00F2               	movwf	setLedsForPositioning@adcValue+2
  2109  0110  084F               	movf	_adcValuePosition+1,w
  2110  0111  00F1               	movwf	setLedsForPositioning@adcValue+1
  2111  0112  084E               	movf	_adcValuePosition,w
  2112  0113  00F0               	movwf	setLedsForPositioning@adcValue
  2113  0114  219A               	fcall	_setLedsForPositioning
  2114  0115  282A               	goto	l1953
  2115  0116                     l2013:
  2116                           
  2117                           ;main.c: 308:                 if(doToggle)
  2118  0116  085C               	movf	_doToggle,w
  2119  0117  1903               	btfsc	3,2
  2120  0118  282A               	goto	l1953
  2121  0119  1003               	clrc
  2122  011A  0022               	movlb	2	; select bank2
  2123  011B  1C0E               	btfss	14,0	;volatile
  2124  011C  1403               	setc
  2125  011D  1C03               	btfss	3,0
  2126  011E  2922               	goto	u1420
  2127  011F  0022               	movlb	2	; select bank2
  2128  0120  140E               	bsf	14,0	;volatile
  2129  0121  2924               	goto	l378
  2130  0122                     u1420:
  2131  0122  0022               	movlb	2	; select bank2
  2132  0123  100E               	bcf	14,0	;volatile
  2133  0124                     l378:	
  2134                           ;main.c: 311:                     do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
  2135                           
  2136  0124  1003               	clrc
  2137  0125  1C8E               	btfss	14,1	;volatile
  2138  0126  1403               	setc
  2139  0127  1C03               	btfss	3,0
  2140  0128  292C               	goto	u1440
  2141  0129  0022               	movlb	2	; select bank2
  2142  012A  148E               	bsf	14,1	;volatile
  2143  012B  292E               	goto	l380
  2144  012C                     u1440:
  2145  012C  0022               	movlb	2	; select bank2
  2146  012D  108E               	bcf	14,1	;volatile
  2147  012E                     l380:	
  2148                           ;main.c: 312:                     do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
  2149                           
  2150  012E  1003               	clrc
  2151  012F  1D0E               	btfss	14,2	;volatile
  2152  0130  1403               	setc
  2153  0131  1C03               	btfss	3,0
  2154  0132  2936               	goto	u1460
  2155  0133  0022               	movlb	2	; select bank2
  2156  0134  150E               	bsf	14,2	;volatile
  2157  0135  2938               	goto	l382
  2158  0136                     u1460:
  2159  0136  0022               	movlb	2	; select bank2
  2160  0137  110E               	bcf	14,2	;volatile
  2161  0138                     l382:	
  2162                           ;main.c: 313:                     do { LATCbits.LATC3 = ~LATCbits.LATC3; } while(0);
  2163                           
  2164  0138  1003               	clrc
  2165  0139  1D8E               	btfss	14,3	;volatile
  2166  013A  1403               	setc
  2167  013B  1C03               	btfss	3,0
  2168  013C  2940               	goto	u1480
  2169  013D  0022               	movlb	2	; select bank2
  2170  013E  158E               	bsf	14,3	;volatile
  2171  013F  2942               	goto	l384
  2172  0140                     u1480:
  2173  0140  0022               	movlb	2	; select bank2
  2174  0141  118E               	bcf	14,3	;volatile
  2175  0142                     l384:	
  2176                           ;main.c: 314:                     do { LATCbits.LATC4 = ~LATCbits.LATC4; } while(0);
  2177                           
  2178  0142  1003               	clrc
  2179  0143  1E0E               	btfss	14,4	;volatile
  2180  0144  1403               	setc
  2181  0145  1C03               	btfss	3,0
  2182  0146  294A               	goto	u1500
  2183  0147  0022               	movlb	2	; select bank2
  2184  0148  160E               	bsf	14,4	;volatile
  2185  0149  294C               	goto	l2017
  2186  014A                     u1500:
  2187  014A  0022               	movlb	2	; select bank2
  2188  014B  120E               	bcf	14,4	;volatile
  2189  014C                     l2017:
  2190                           
  2191                           ;main.c: 315:                     doToggle = 0;
  2192  014C  0020               	movlb	0	; select bank0
  2193  014D  01DC               	clrf	_doToggle
  2194  014E  282A               	goto	l1953
  2195  014F                     l2019:
  2196                           
  2197                           ;main.c: 322:                 if(doToggle)
  2198  014F  085C               	movf	_doToggle,w
  2199  0150  1903               	btfsc	3,2
  2200  0151  282A               	goto	l1953
  2201  0152  1003               	clrc
  2202  0153  0022               	movlb	2	; select bank2
  2203  0154  1F0E               	btfss	14,6	;volatile
  2204  0155  1403               	setc
  2205  0156  1C03               	btfss	3,0
  2206  0157  295B               	goto	u1530
  2207  0158  0022               	movlb	2	; select bank2
  2208  0159  170E               	bsf	14,6	;volatile
  2209  015A  295D               	goto	l390
  2210  015B                     u1530:
  2211  015B  0022               	movlb	2	; select bank2
  2212  015C  130E               	bcf	14,6	;volatile
  2213  015D                     l390:	
  2214                           ;main.c: 325:                     do { LATCbits.LATC7 = ~LATCbits.LATC7; } while(0);
  2215                           
  2216  015D  1003               	clrc
  2217  015E  1F8E               	btfss	14,7	;volatile
  2218  015F  1403               	setc
  2219  0160  1C03               	btfss	3,0
  2220  0161  2965               	goto	u1550
  2221  0162  0022               	movlb	2	; select bank2
  2222  0163  178E               	bsf	14,7	;volatile
  2223  0164  2967               	goto	l392
  2224  0165                     u1550:
  2225  0165  0022               	movlb	2	; select bank2
  2226  0166  138E               	bcf	14,7	;volatile
  2227  0167                     l392:	
  2228                           ;main.c: 326:                     do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  2229                           
  2230  0167  1003               	clrc
  2231  0168  1E8D               	btfss	13,5	;volatile
  2232  0169  1403               	setc
  2233  016A  1C03               	btfss	3,0
  2234  016B  296F               	goto	u1570
  2235  016C  0022               	movlb	2	; select bank2
  2236  016D  168D               	bsf	13,5	;volatile
  2237  016E  2971               	goto	l394
  2238  016F                     u1570:
  2239  016F  0022               	movlb	2	; select bank2
  2240  0170  128D               	bcf	13,5	;volatile
  2241  0171                     l394:	
  2242                           ;main.c: 327:                     do { LATBbits.LATB6 = ~LATBbits.LATB6; } while(0);
  2243                           
  2244  0171  1003               	clrc
  2245  0172  1F0D               	btfss	13,6	;volatile
  2246  0173  1403               	setc
  2247  0174  1C03               	btfss	3,0
  2248  0175  2979               	goto	u1590
  2249  0176  0022               	movlb	2	; select bank2
  2250  0177  170D               	bsf	13,6	;volatile
  2251  0178  297B               	goto	l396
  2252  0179                     u1590:
  2253  0179  0022               	movlb	2	; select bank2
  2254  017A  130D               	bcf	13,6	;volatile
  2255  017B                     l396:	
  2256                           ;main.c: 328:                     do { LATBbits.LATB7 = ~LATBbits.LATB7; } while(0);
  2257                           
  2258  017B  1003               	clrc
  2259  017C  1F8D               	btfss	13,7	;volatile
  2260  017D  1403               	setc
  2261  017E  1C03               	btfss	3,0
  2262  017F  2983               	goto	u1610
  2263  0180  0022               	movlb	2	; select bank2
  2264  0181  178D               	bsf	13,7	;volatile
  2265  0182  294C               	goto	l2017
  2266  0183                     u1610:
  2267  0183  0022               	movlb	2	; select bank2
  2268  0184  138D               	bcf	13,7	;volatile
  2269  0185  294C               	goto	l2017
  2270  0186                     l2027:
  2271  0186  085B               	movf	_currentState,w
  2272  0187  00C0               	movwf	??_main
  2273  0188  01C1               	clrf	??_main+1
  2274                           
  2275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2276                           ; Switch size 1, requested type "simple"
  2277                           ; Number of cases is 1, Range of values is 0 to 0
  2278                           ; switch strategies available:
  2279                           ; Name         Instructions Cycles
  2280                           ; simple_byte            4     3 (average)
  2281                           ; direct_byte            8     6 (fixed)
  2282                           ; jumptable            260     6 (fixed)
  2283                           ;	Chosen strategy is simple_byte
  2284  0189  0841               	movf	??_main+1,w
  2285  018A  3A00               	xorlw	0	; case 0
  2286  018B  1903               	skipnz
  2287  018C  298E               	goto	l2123
  2288  018D  282A               	goto	l1953
  2289  018E                     l2123:
  2290                           
  2291                           ; Switch size 1, requested type "simple"
  2292                           ; Number of cases is 3, Range of values is 1 to 3
  2293                           ; switch strategies available:
  2294                           ; Name         Instructions Cycles
  2295                           ; simple_byte           10     6 (average)
  2296                           ; direct_byte           15     9 (fixed)
  2297                           ; jumptable            263     9 (fixed)
  2298                           ;	Chosen strategy is simple_byte
  2299  018E  0840               	movf	??_main,w
  2300  018F  3A01               	xorlw	1	; case 1
  2301  0190  1903               	skipnz
  2302  0191  28C4               	goto	l2009
  2303  0192  3A03               	xorlw	3	; case 2
  2304  0193  1903               	skipnz
  2305  0194  2916               	goto	l2013
  2306  0195  3A01               	xorlw	1	; case 3
  2307  0196  1903               	skipnz
  2308  0197  294F               	goto	l2019
  2309  0198  282A               	goto	l1953
  2310  0199  280C               	ljmp	start
  2311  019A                     __end_of_main:
  2312                           
  2313                           	psect	text1
  2314  04E5                     __ptext1:	
  2315 ;; *************** function _writeFlash *****************
  2316 ;; Defined at:
  2317 ;;		line 95 in file "main.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  wrBlockData    32    0[BANK0 ] unsigned short [16]
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 1F/0
  2328 ;;		On exit  : 1C/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1
  2331 ;;      Params:         0       0       0
  2332 ;;      Locals:         0      32       0
  2333 ;;      Temps:          1       0       0
  2334 ;;      Totals:         1      32       0
  2335 ;;Total ram usage:       33 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    6
  2338 ;; This function calls:
  2339 ;;		_FLASH_EraseBlock
  2340 ;;		_FLASH_WriteBlock
  2341 ;; This function is called by:
  2342 ;;		_main
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           
  2347                           ;psect for function _writeFlash
  2348  04E5                     _writeFlash:
  2349                           
  2350                           ;main.c: 100:     FLASH_EraseBlock((uint16_t)( 0x800 -16));
  2351                           
  2352                           ;incstack = 0
  2353                           ; Regs used in _writeFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2354  04E5  30F0               	movlw	240
  2355  04E6  00F0               	movwf	FLASH_EraseBlock@startAddr
  2356  04E7  3007               	movlw	7
  2357  04E8  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2358  04E9  2505               	fcall	_FLASH_EraseBlock
  2359                           
  2360                           ;main.c: 102:     uint16_t wrBlockData[16];;main.c: 104:     wrBlockData[16 -1] = (uint1
      +                          6_t)(upperLimit);
  2361  04EA  0020               	movlb	0	; select bank0
  2362  04EB  0864               	movf	_upperLimit+1,w
  2363  04EC  00BF               	movwf	writeFlash@wrBlockData+31
  2364  04ED  0863               	movf	_upperLimit,w
  2365  04EE  00BE               	movwf	writeFlash@wrBlockData+30
  2366                           
  2367                           ;main.c: 105:     wrBlockData[16 -2] = (uint16_t)(upperLimit >> 16);
  2368  04EF  0866               	movf	_upperLimit+3,w
  2369  04F0  00BD               	movwf	writeFlash@wrBlockData+29
  2370  04F1  0865               	movf	_upperLimit+2,w
  2371  04F2  00BC               	movwf	writeFlash@wrBlockData+28
  2372                           
  2373                           ;main.c: 106:     wrBlockData[16 -3] = (uint16_t)(lowerLimit);
  2374  04F3  084B               	movf	_lowerLimit+1,w
  2375  04F4  00BB               	movwf	writeFlash@wrBlockData+27
  2376  04F5  084A               	movf	_lowerLimit,w
  2377  04F6  00BA               	movwf	writeFlash@wrBlockData+26
  2378                           
  2379                           ;main.c: 107:     wrBlockData[16 -4] = (uint16_t)(lowerLimit >> 16);
  2380  04F7  084D               	movf	_lowerLimit+3,w
  2381  04F8  00B9               	movwf	writeFlash@wrBlockData+25
  2382  04F9  084C               	movf	_lowerLimit+2,w
  2383  04FA  00B8               	movwf	writeFlash@wrBlockData+24
  2384                           
  2385                           ;main.c: 110:     FLASH_WriteBlock((uint16_t)( 0x800 -16), (uint16_t*)wrBlockData);
  2386  04FB  30F0               	movlw	240
  2387  04FC  00F3               	movwf	FLASH_WriteBlock@writeAddr
  2388  04FD  3007               	movlw	7
  2389  04FE  00F4               	movwf	FLASH_WriteBlock@writeAddr+1
  2390  04FF  3020               	movlw	(low (writeFlash@wrBlockData| 0))& (0+255)
  2391  0500  00FD               	movwf	??_writeFlash
  2392  0501  087D               	movf	??_writeFlash,w
  2393  0502  00F5               	movwf	FLASH_WriteBlock@flashWordArray
  2394  0503  23EA               	fcall	_FLASH_WriteBlock
  2395  0504  0008               	return
  2396  0505                     __end_of_writeFlash:
  2397                           
  2398                           	psect	text2
  2399  03EA                     __ptext2:	
  2400 ;; *************** function _FLASH_WriteBlock *****************
  2401 ;; Defined at:
  2402 ;;		line 94 in file "mcc_generated_files/memory.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  writeAddr       2    3[COMMON] unsigned short 
  2405 ;;  flashWordArr    1    5[COMMON] PTR unsigned short 
  2406 ;;		 -> writeFlash@wrBlockData(32), 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  blockStartAd    2    9[COMMON] unsigned short 
  2409 ;;  i               1   12[COMMON] unsigned char 
  2410 ;;  GIEBitValue     1   11[COMMON] unsigned char 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      char 
  2413 ;; Registers used:
  2414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 1F/0
  2417 ;;		On exit  : 1C/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1
  2420 ;;      Params:         3       0       0
  2421 ;;      Locals:         4       0       0
  2422 ;;      Temps:          3       0       0
  2423 ;;      Totals:        10       0       0
  2424 ;;Total ram usage:       10 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    5
  2427 ;; This function calls:
  2428 ;;		_FLASH_EraseBlock
  2429 ;; This function is called by:
  2430 ;;		_writeFlash
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _FLASH_WriteBlock
  2436  03EA                     _FLASH_WriteBlock:
  2437                           
  2438                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x800 -1) ^ (16 -1)));
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2442  03EA  30F0               	movlw	240
  2443  03EB  0573               	andwf	FLASH_WriteBlock@writeAddr,w
  2444  03EC  00F9               	movwf	FLASH_WriteBlock@blockStartAddr
  2445  03ED  3007               	movlw	7
  2446  03EE  0574               	andwf	FLASH_WriteBlock@writeAddr+1,w
  2447  03EF  00FA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  2448                           
  2449                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
  2450  03F0  3000               	movlw	0
  2451  03F1  1B8B               	btfsc	11,7	;volatile
  2452  03F2  3001               	movlw	1
  2453  03F3  00FB               	movwf	FLASH_WriteBlock@GIEBitValue
  2454                           
  2455                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
  2456  03F4  087A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  2457  03F5  0674               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  2458  03F6  1D03               	skipz
  2459  03F7  2BFA               	goto	u845
  2460  03F8  0879               	movf	FLASH_WriteBlock@blockStartAddr,w
  2461  03F9  0673               	xorwf	FLASH_WriteBlock@writeAddr,w
  2462  03FA                     u845:
  2463  03FA  1D03               	btfss	3,2
  2464  03FB  0008               	return
  2465                           
  2466                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
  2467                           
  2468                           ;mcc_generated_files/memory.c: 104:     }
  2469  03FC  138B               	bcf	11,7	;volatile
  2470                           
  2471                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
  2472  03FD  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2473  03FE  00F1               	movwf	FLASH_EraseBlock@startAddr+1
  2474  03FF  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2475  0400  00F0               	movwf	FLASH_EraseBlock@startAddr
  2476  0401  2505               	fcall	_FLASH_EraseBlock
  2477                           
  2478                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
  2479  0402  1315               	bcf	21,6	;volatile
  2480                           
  2481                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
  2482  0403  1515               	bsf	21,2	;volatile
  2483                           
  2484                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
  2485  0404  1695               	bsf	21,5	;volatile
  2486                           
  2487                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<16; i++)
  2488  0405  01FC               	clrf	FLASH_WriteBlock@i
  2489  0406                     l1721:
  2490                           
  2491                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
  2492  0406  0873               	movf	FLASH_WriteBlock@writeAddr,w
  2493  0407  0023               	movlb	3	; select bank3
  2494  0408  0091               	movwf	17	;volatile
  2495                           
  2496                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  2497  0409  0874               	movf	FLASH_WriteBlock@writeAddr+1,w
  2498  040A  0092               	movwf	18	;volatile
  2499                           
  2500                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
  2501  040B  357C               	lslf	FLASH_WriteBlock@i,w
  2502  040C  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2503  040D  00F6               	movwf	??_FLASH_WriteBlock
  2504  040E  0876               	movf	??_FLASH_WriteBlock,w
  2505  040F  0086               	movwf	6
  2506  0410  0187               	clrf	7
  2507  0411  0801               	movf	1,w
  2508  0412  0093               	movwf	19	;volatile
  2509                           
  2510                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  2511  0413  357C               	lslf	FLASH_WriteBlock@i,w
  2512  0414  0775               	addwf	FLASH_WriteBlock@flashWordArray,w
  2513  0415  00F6               	movwf	??_FLASH_WriteBlock
  2514  0416  0876               	movf	??_FLASH_WriteBlock,w
  2515  0417  0086               	movwf	6
  2516  0418  0187               	clrf	7
  2517  0419  3F40               	moviw [0]fsr1
  2518  041A  00F7               	movwf	??_FLASH_WriteBlock+1
  2519  041B  3F41               	moviw [1]fsr1
  2520  041C  00F8               	movwf	??_FLASH_WriteBlock+2
  2521  041D  0878               	movf	??_FLASH_WriteBlock+2,w
  2522  041E  0094               	movwf	20	;volatile
  2523                           
  2524                           ;mcc_generated_files/memory.c: 127:         if(i == (16 -1))
  2525  041F  300F               	movlw	15
  2526  0420  067C               	xorwf	FLASH_WriteBlock@i,w
  2527  0421  1903               	btfsc	3,2
  2528                           
  2529                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
  2530  0422  1295               	bcf	21,5	;volatile
  2531                           
  2532                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
  2533  0423  3055               	movlw	85
  2534  0424  0096               	movwf	22	;volsfr
  2535                           
  2536                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
  2537  0425  30AA               	movlw	170
  2538  0426  0096               	movwf	22	;volsfr
  2539                           
  2540                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
  2541  0427  1495               	bsf	21,1	;volatile
  2542                           
  2543                           ;mcc_generated_files/memory.c: 136:         __nop();
  2544  0428  0000               	nop
  2545                           
  2546                           ;mcc_generated_files/memory.c: 137:         __nop();
  2547  0429  0000               	nop
  2548                           
  2549                           ;mcc_generated_files/memory.c: 139:  writeAddr++;
  2550  042A  3001               	movlw	1
  2551  042B  07F3               	addwf	FLASH_WriteBlock@writeAddr,f
  2552  042C  3000               	movlw	0
  2553  042D  3DF4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  2554                           
  2555                           ;mcc_generated_files/memory.c: 140:     }
  2556  042E  3001               	movlw	1
  2557  042F  00F6               	movwf	??_FLASH_WriteBlock
  2558  0430  0876               	movf	??_FLASH_WriteBlock,w
  2559  0431  07FC               	addwf	FLASH_WriteBlock@i,f
  2560  0432  3010               	movlw	16
  2561  0433  027C               	subwf	FLASH_WriteBlock@i,w
  2562  0434  1C03               	skipc
  2563  0435  2C06               	goto	l1721
  2564                           
  2565                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
  2566  0436  0023               	movlb	3	; select bank3
  2567  0437  1115               	bcf	21,2	;volatile
  2568                           
  2569                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
  2570  0438  0C7B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  2571  0439  1C03               	skipc
  2572  043A  138B               	bcf	11,7	;volatile
  2573  043B  1803               	skipnc
  2574  043C  178B               	bsf	11,7	;volatile
  2575  043D  0008               	return
  2576  043E                     __end_of_FLASH_WriteBlock:
  2577                           
  2578                           	psect	text3
  2579  0505                     __ptext3:	
  2580 ;; *************** function _FLASH_EraseBlock *****************
  2581 ;; Defined at:
  2582 ;;		line 148 in file "mcc_generated_files/memory.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  startAddr       2    0[COMMON] unsigned short 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0
  2591 ;; Tracked objects:
  2592 ;;		On entry : 1F/0
  2593 ;;		On exit  : 1F/3
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMMON   BANK0   BANK1
  2596 ;;      Params:         2       0       0
  2597 ;;      Locals:         1       0       0
  2598 ;;      Temps:          0       0       0
  2599 ;;      Totals:         3       0       0
  2600 ;;Total ram usage:        3 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    4
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_FLASH_WriteBlock
  2607 ;;		_writeFlash
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function _FLASH_EraseBlock
  2613  0505                     _FLASH_EraseBlock:
  2614                           
  2615                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  2619  0505  3000               	movlw	0
  2620  0506  1B8B               	btfsc	11,7	;volatile
  2621  0507  3001               	movlw	1
  2622  0508  00F2               	movwf	FLASH_EraseBlock@GIEBitValue
  2623                           
  2624                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
  2625  0509  138B               	bcf	11,7	;volatile
  2626                           
  2627                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
  2628  050A  0870               	movf	FLASH_EraseBlock@startAddr,w
  2629  050B  0023               	movlb	3	; select bank3
  2630  050C  0091               	movwf	17	;volatile
  2631                           
  2632                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
  2633  050D  0871               	movf	FLASH_EraseBlock@startAddr+1,w
  2634  050E  0092               	movwf	18	;volatile
  2635                           
  2636                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
  2637  050F  1315               	bcf	21,6	;volatile
  2638                           
  2639                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
  2640  0510  1615               	bsf	21,4	;volatile
  2641                           
  2642                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
  2643  0511  1515               	bsf	21,2	;volatile
  2644                           
  2645                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
  2646  0512  3055               	movlw	85
  2647  0513  0096               	movwf	22	;volsfr
  2648                           
  2649                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
  2650  0514  30AA               	movlw	170
  2651  0515  0096               	movwf	22	;volsfr
  2652                           
  2653                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
  2654  0516  1495               	bsf	21,1	;volatile
  2655                           
  2656                           ;mcc_generated_files/memory.c: 168:     __nop();
  2657  0517  0000               	nop
  2658                           
  2659                           ;mcc_generated_files/memory.c: 169:     __nop();
  2660  0518  0000               	nop
  2661                           
  2662                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
  2663  0519  0023               	movlb	3	; select bank3
  2664  051A  1115               	bcf	21,2	;volatile
  2665                           
  2666                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
  2667  051B  0C72               	rrf	FLASH_EraseBlock@GIEBitValue,w
  2668  051C  1C03               	skipc
  2669  051D  138B               	bcf	11,7	;volatile
  2670  051E  1803               	skipnc
  2671  051F  178B               	bsf	11,7	;volatile
  2672  0520  0008               	return
  2673  0521                     __end_of_FLASH_EraseBlock:
  2674                           
  2675                           	psect	text4
  2676  0268                     __ptext4:	
  2677 ;; *************** function _setState *****************
  2678 ;; Defined at:
  2679 ;;		line 132 in file "main.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  newState        1    wreg     enum E2406
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  newState        1    4[BANK0 ] enum E2406
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 1C/0
  2690 ;;		On exit  : 1F/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1
  2693 ;;      Params:         0       0       0
  2694 ;;      Locals:         0       1       0
  2695 ;;      Temps:          0       4       0
  2696 ;;      Totals:         0       5       0
  2697 ;;Total ram usage:        5 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    6
  2700 ;; This function calls:
  2701 ;;		___lldiv
  2702 ;;		___tmul
  2703 ;;		_readFlash
  2704 ;; This function is called by:
  2705 ;;		_main
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           
  2710                           ;psect for function _setState
  2711  0268                     _setState:
  2712                           
  2713                           ;incstack = 0
  2714                           ; Regs used in _setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2715                           ;setState@newState stored from wreg
  2716  0268  0020               	movlb	0	; select bank0
  2717  0269  00A4               	movwf	setState@newState
  2718                           
  2719                           ;main.c: 132: void setState(state_t newState);main.c: 133: {;main.c: 134:     if(newStat
      +                          e == currentState)
  2720  026A  0824               	movf	setState@newState,w
  2721  026B  065B               	xorwf	_currentState,w
  2722  026C  1903               	btfsc	3,2
  2723  026D  0008               	return
  2724                           
  2725                           ;main.c: 140:     do { LATCbits.LATC0 = 0; } while(0);
  2726  026E  0022               	movlb	2	; select bank2
  2727  026F  100E               	bcf	14,0	;volatile
  2728                           
  2729                           ;main.c: 141:     do { LATCbits.LATC1 = 0; } while(0);
  2730  0270  108E               	bcf	14,1	;volatile
  2731                           
  2732                           ;main.c: 142:     do { LATCbits.LATC2 = 0; } while(0);
  2733  0271  110E               	bcf	14,2	;volatile
  2734                           
  2735                           ;main.c: 143:     do { LATCbits.LATC3 = 0; } while(0);
  2736  0272  118E               	bcf	14,3	;volatile
  2737                           
  2738                           ;main.c: 144:     do { LATCbits.LATC4 = 0; } while(0);
  2739  0273  120E               	bcf	14,4	;volatile
  2740                           
  2741                           ;main.c: 145:     do { LATCbits.LATC5 = 0; } while(0);
  2742  0274  128E               	bcf	14,5	;volatile
  2743                           
  2744                           ;main.c: 146:     do { LATCbits.LATC6 = 0; } while(0);
  2745  0275  130E               	bcf	14,6	;volatile
  2746                           
  2747                           ;main.c: 147:     do { LATCbits.LATC7 = 0; } while(0);
  2748  0276  138E               	bcf	14,7	;volatile
  2749                           
  2750                           ;main.c: 148:     do { LATBbits.LATB5 = 0; } while(0);
  2751  0277  128D               	bcf	13,5	;volatile
  2752                           
  2753                           ;main.c: 149:     do { LATBbits.LATB6 = 0; } while(0);
  2754  0278  130D               	bcf	13,6	;volatile
  2755                           
  2756                           ;main.c: 150:     do { LATBbits.LATB7 = 0; } while(0);
  2757  0279  138D               	bcf	13,7	;volatile
  2758  027A  2AE5               	goto	l1853
  2759  027B                     l1835:
  2760                           
  2761                           ;main.c: 159:             readFlash();
  2762  027B  2382               	fcall	_readFlash
  2763                           
  2764                           ;main.c: 162:             upperLimit = (upperLimit > (1023)) ? (1023) : upperLimit;
  2765  027C  0866               	movf	_upperLimit+3,w
  2766  027D  1D03               	btfss	3,2
  2767  027E  2A86               	goto	l1841
  2768  027F  0865               	movf	_upperLimit+2,w
  2769  0280  1D03               	btfss	3,2
  2770  0281  2A86               	goto	l1841
  2771  0282  3004               	movlw	4
  2772  0283  0264               	subwf	_upperLimit+1,w
  2773  0284  1C03               	btfss	3,0
  2774  0285  2A8E               	goto	l325
  2775  0286                     l1841:
  2776  0286  3000               	movlw	0
  2777  0287  00E6               	movwf	_upperLimit+3
  2778  0288  3000               	movlw	0
  2779  0289  00E5               	movwf	_upperLimit+2
  2780  028A  3003               	movlw	3
  2781  028B  00E4               	movwf	_upperLimit+1
  2782  028C  30FF               	movlw	255
  2783  028D  00E3               	movwf	_upperLimit
  2784  028E                     l325:
  2785                           
  2786                           ;main.c: 164:             lowerLimit = (lowerLimit < (0)) || (lowerLimit > upperLimit) ?
      +                           (0) : lowerLimit;
  2787  028E  084D               	movf	_lowerLimit+3,w
  2788  028F  0266               	subwf	_upperLimit+3,w
  2789  0290  1D03               	skipz
  2790  0291  2A9C               	goto	u1045
  2791  0292  084C               	movf	_lowerLimit+2,w
  2792  0293  0265               	subwf	_upperLimit+2,w
  2793  0294  1D03               	skipz
  2794  0295  2A9C               	goto	u1045
  2795  0296  084B               	movf	_lowerLimit+1,w
  2796  0297  0264               	subwf	_upperLimit+1,w
  2797  0298  1D03               	skipz
  2798  0299  2A9C               	goto	u1045
  2799  029A  084A               	movf	_lowerLimit,w
  2800  029B  0263               	subwf	_upperLimit,w
  2801  029C                     u1045:
  2802  029C  1803               	btfsc	3,0
  2803  029D  2AA6               	goto	l1847
  2804  029E  3000               	movlw	0
  2805  029F  00CD               	movwf	_lowerLimit+3
  2806  02A0  3000               	movlw	0
  2807  02A1  00CC               	movwf	_lowerLimit+2
  2808  02A2  3000               	movlw	0
  2809  02A3  00CB               	movwf	_lowerLimit+1
  2810  02A4  3000               	movlw	0
  2811  02A5  00CA               	movwf	_lowerLimit
  2812  02A6                     l1847:
  2813                           
  2814                           ;main.c: 167:             m = (1023*fixedPointFactor)/(upperLimit - lowerLimit);
  2815  02A6  084A               	movf	_lowerLimit,w
  2816  02A7  0263               	subwf	_upperLimit,w
  2817  02A8  00A0               	movwf	??_setState
  2818  02A9  084B               	movf	_lowerLimit+1,w
  2819  02AA  3B64               	subwfb	_upperLimit+1,w
  2820  02AB  00A1               	movwf	??_setState+1
  2821  02AC  084C               	movf	_lowerLimit+2,w
  2822  02AD  3B65               	subwfb	_upperLimit+2,w
  2823  02AE  00A2               	movwf	??_setState+2
  2824  02AF  084D               	movf	_lowerLimit+3,w
  2825  02B0  3B66               	subwfb	_upperLimit+3,w
  2826  02B1  00A3               	movwf	??_setState+3
  2827  02B2  0823               	movf	??_setState+3,w
  2828  02B3  00F3               	movwf	___lldiv@divisor+3
  2829  02B4  0822               	movf	??_setState+2,w
  2830  02B5  00F2               	movwf	___lldiv@divisor+2
  2831  02B6  0821               	movf	??_setState+1,w
  2832  02B7  00F1               	movwf	___lldiv@divisor+1
  2833  02B8  0820               	movf	??_setState,w
  2834  02B9  00F0               	movwf	___lldiv@divisor
  2835  02BA  3000               	movlw	0
  2836  02BB  00F7               	movwf	___lldiv@dividend+3
  2837  02BC  300F               	movlw	15
  2838  02BD  00F6               	movwf	___lldiv@dividend+2
  2839  02BE  309C               	movlw	156
  2840  02BF  00F5               	movwf	___lldiv@dividend+1
  2841  02C0  3018               	movlw	24
  2842  02C1  00F4               	movwf	___lldiv@dividend
  2843  02C2  243E               	fcall	___lldiv
  2844  02C3  0873               	movf	?___lldiv+3,w
  2845  02C4  00E1               	movwf	_m+3
  2846  02C5  0872               	movf	?___lldiv+2,w
  2847  02C6  00E0               	movwf	_m+2
  2848  02C7  0871               	movf	?___lldiv+1,w
  2849  02C8  00DF               	movwf	_m+1
  2850  02C9  0870               	movf	?___lldiv,w
  2851  02CA  00DE               	movwf	_m
  2852                           
  2853                           ;main.c: 168:             b = lowerLimit*m;
  2854  02CB  085E               	movf	_m,w
  2855  02CC  00F0               	movwf	___tmul@multiplier
  2856  02CD  085F               	movf	_m+1,w
  2857  02CE  00F1               	movwf	___tmul@multiplier+1
  2858  02CF  0860               	movf	_m+2,w
  2859  02D0  00F2               	movwf	___tmul@multiplier+2
  2860  02D1  084A               	movf	_lowerLimit,w
  2861  02D2  00F3               	movwf	___tmul@multiplicand
  2862  02D3  084B               	movf	_lowerLimit+1,w
  2863  02D4  00F4               	movwf	___tmul@multiplicand+1
  2864  02D5  084C               	movf	_lowerLimit+2,w
  2865  02D6  00F5               	movwf	___tmul@multiplicand+2
  2866  02D7  24BF               	fcall	___tmul
  2867  02D8  0870               	movf	?___tmul,w
  2868  02D9  00D2               	movwf	_b
  2869  02DA  0871               	movf	?___tmul+1,w
  2870  02DB  00D3               	movwf	_b+1
  2871  02DC  0872               	movf	?___tmul+2,w
  2872  02DD  00D4               	movwf	_b+2
  2873                           
  2874                           ;main.c: 169:             break;
  2875  02DE  2AF9               	goto	l1855
  2876  02DF                     l332:	
  2877                           ;main.c: 173:             do { LATCbits.LATC0 = 1; } while(0);
  2878                           
  2879  02DF  0022               	movlb	2	; select bank2
  2880  02E0  140E               	bsf	14,0	;volatile
  2881  02E1  2AF9               	goto	l1855
  2882  02E2                     l335:	
  2883                           ;main.c: 177:             do { LATBbits.LATB7 = 1; } while(0);
  2884                           
  2885  02E2  0022               	movlb	2	; select bank2
  2886  02E3  178D               	bsf	13,7	;volatile
  2887  02E4  2AF9               	goto	l1855
  2888  02E5                     l1853:
  2889  02E5  0020               	movlb	0	; select bank0
  2890  02E6  0824               	movf	setState@newState,w
  2891  02E7  00A0               	movwf	??_setState
  2892  02E8  01A1               	clrf	??_setState+1
  2893                           
  2894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2895                           ; Switch size 1, requested type "simple"
  2896                           ; Number of cases is 1, Range of values is 0 to 0
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte            4     3 (average)
  2900                           ; direct_byte            8     6 (fixed)
  2901                           ; jumptable            260     6 (fixed)
  2902                           ;	Chosen strategy is simple_byte
  2903  02E9  0821               	movf	??_setState+1,w
  2904  02EA  3A00               	xorlw	0	; case 0
  2905  02EB  1903               	skipnz
  2906  02EC  2AEE               	goto	l2125
  2907  02ED  2AF9               	goto	l1855
  2908  02EE                     l2125:
  2909                           
  2910                           ; Switch size 1, requested type "simple"
  2911                           ; Number of cases is 3, Range of values is 1 to 3
  2912                           ; switch strategies available:
  2913                           ; Name         Instructions Cycles
  2914                           ; simple_byte           10     6 (average)
  2915                           ; direct_byte           15     9 (fixed)
  2916                           ; jumptable            263     9 (fixed)
  2917                           ;	Chosen strategy is simple_byte
  2918  02EE  0820               	movf	??_setState,w
  2919  02EF  3A01               	xorlw	1	; case 1
  2920  02F0  1903               	skipnz
  2921  02F1  2A7B               	goto	l1835
  2922  02F2  3A03               	xorlw	3	; case 2
  2923  02F3  1903               	skipnz
  2924  02F4  2ADF               	goto	l332
  2925  02F5  3A01               	xorlw	1	; case 3
  2926  02F6  1903               	skipnz
  2927  02F7  2AE2               	goto	l335
  2928  02F8  2AF9               	goto	l1855
  2929  02F9                     l1855:
  2930                           
  2931                           ;main.c: 181:     msTick = 0;
  2932  02F9  0020               	movlb	0	; select bank0
  2933  02FA  01D7               	clrf	_msTick	;volatile
  2934  02FB  01D8               	clrf	_msTick+1	;volatile
  2935                           
  2936                           ;main.c: 183:     currentState = newState;
  2937  02FC  0824               	movf	setState@newState,w
  2938  02FD  00A0               	movwf	??_setState
  2939  02FE  0820               	movf	??_setState,w
  2940  02FF  00DB               	movwf	_currentState
  2941  0300  0008               	return
  2942  0301                     __end_of_setState:
  2943                           
  2944                           	psect	text5
  2945  0382                     __ptext5:	
  2946 ;; *************** function _readFlash *****************
  2947 ;; Defined at:
  2948 ;;		line 82 in file "main.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, pclath, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 1F/0
  2959 ;;		On exit  : 1F/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1
  2962 ;;      Params:         0       0       0
  2963 ;;      Locals:         0       0       0
  2964 ;;      Temps:          4       0       0
  2965 ;;      Totals:         4       0       0
  2966 ;;Total ram usage:        4 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    5
  2969 ;; This function calls:
  2970 ;;		_FLASH_ReadWord
  2971 ;; This function is called by:
  2972 ;;		_setState
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _readFlash
  2978  0382                     _readFlash:
  2979                           
  2980                           ;main.c: 85:     lowerLimit = 0;
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _readFlash: [wreg+status,2+status,0+pclath+cstack]
  2984  0382  3000               	movlw	0
  2985  0383  00CD               	movwf	_lowerLimit+3
  2986  0384  3000               	movlw	0
  2987  0385  00CC               	movwf	_lowerLimit+2
  2988  0386  3000               	movlw	0
  2989  0387  00CB               	movwf	_lowerLimit+1
  2990  0388  3000               	movlw	0
  2991  0389  00CA               	movwf	_lowerLimit
  2992                           
  2993                           ;main.c: 86:     lowerLimit += (uint32_t)FLASH_ReadWord(0x800 -4) << 16;
  2994  038A  30FC               	movlw	252
  2995  038B  00F0               	movwf	FLASH_ReadWord@flashAddr
  2996  038C  3007               	movlw	7
  2997  038D  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  2998  038E  2521               	fcall	_FLASH_ReadWord
  2999  038F  0870               	movf	?_FLASH_ReadWord,w
  3000  0390  00F3               	movwf	??_readFlash
  3001  0391  0871               	movf	?_FLASH_ReadWord+1,w
  3002  0392  00F4               	movwf	??_readFlash+1
  3003  0393  01F5               	clrf	??_readFlash+2
  3004  0394  01F6               	clrf	??_readFlash+3
  3005  0395  3010               	movlw	16
  3006  0396                     u875:
  3007  0396  35F3               	lslf	??_readFlash,f
  3008  0397  0DF4               	rlf	??_readFlash+1,f
  3009  0398  0DF5               	rlf	??_readFlash+2,f
  3010  0399  0DF6               	rlf	??_readFlash+3,f
  3011  039A  0B89               	decfsz	9,f
  3012  039B  2B96               	goto	u875
  3013  039C  0873               	movf	??_readFlash,w
  3014  039D  0020               	movlb	0	; select bank0
  3015  039E  07CA               	addwf	_lowerLimit,f
  3016  039F  0874               	movf	??_readFlash+1,w
  3017  03A0  3DCB               	addwfc	_lowerLimit+1,f
  3018  03A1  0875               	movf	??_readFlash+2,w
  3019  03A2  3DCC               	addwfc	_lowerLimit+2,f
  3020  03A3  0876               	movf	??_readFlash+3,w
  3021  03A4  3DCD               	addwfc	_lowerLimit+3,f
  3022                           
  3023                           ;main.c: 87:     lowerLimit |= (uint32_t)FLASH_ReadWord(0x800 -3);
  3024  03A5  30FD               	movlw	253
  3025  03A6  00F0               	movwf	FLASH_ReadWord@flashAddr
  3026  03A7  3007               	movlw	7
  3027  03A8  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3028  03A9  2521               	fcall	_FLASH_ReadWord
  3029  03AA  0870               	movf	?_FLASH_ReadWord,w
  3030  03AB  00F3               	movwf	??_readFlash
  3031  03AC  0871               	movf	?_FLASH_ReadWord+1,w
  3032  03AD  00F4               	movwf	??_readFlash+1
  3033  03AE  01F5               	clrf	??_readFlash+2
  3034  03AF  01F6               	clrf	??_readFlash+3
  3035  03B0  0873               	movf	??_readFlash,w
  3036  03B1  0020               	movlb	0	; select bank0
  3037  03B2  04CA               	iorwf	_lowerLimit,f
  3038  03B3  0874               	movf	??_readFlash+1,w
  3039  03B4  04CB               	iorwf	_lowerLimit+1,f
  3040  03B5  0875               	movf	??_readFlash+2,w
  3041  03B6  04CC               	iorwf	_lowerLimit+2,f
  3042  03B7  0876               	movf	??_readFlash+3,w
  3043  03B8  04CD               	iorwf	_lowerLimit+3,f
  3044                           
  3045                           ;main.c: 90:     upperLimit = 0;
  3046  03B9  3000               	movlw	0
  3047  03BA  00E6               	movwf	_upperLimit+3
  3048  03BB  3000               	movlw	0
  3049  03BC  00E5               	movwf	_upperLimit+2
  3050  03BD  3000               	movlw	0
  3051  03BE  00E4               	movwf	_upperLimit+1
  3052  03BF  3000               	movlw	0
  3053  03C0  00E3               	movwf	_upperLimit
  3054                           
  3055                           ;main.c: 91:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -2) << 16;
  3056  03C1  30FE               	movlw	254
  3057  03C2  00F0               	movwf	FLASH_ReadWord@flashAddr
  3058  03C3  3007               	movlw	7
  3059  03C4  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3060  03C5  2521               	fcall	_FLASH_ReadWord
  3061  03C6  0870               	movf	?_FLASH_ReadWord,w
  3062  03C7  00F3               	movwf	??_readFlash
  3063  03C8  0871               	movf	?_FLASH_ReadWord+1,w
  3064  03C9  00F4               	movwf	??_readFlash+1
  3065  03CA  01F5               	clrf	??_readFlash+2
  3066  03CB  01F6               	clrf	??_readFlash+3
  3067  03CC  3010               	movlw	16
  3068  03CD                     u885:
  3069  03CD  35F3               	lslf	??_readFlash,f
  3070  03CE  0DF4               	rlf	??_readFlash+1,f
  3071  03CF  0DF5               	rlf	??_readFlash+2,f
  3072  03D0  0DF6               	rlf	??_readFlash+3,f
  3073  03D1  0B89               	decfsz	9,f
  3074  03D2  2BCD               	goto	u885
  3075  03D3  0873               	movf	??_readFlash,w
  3076  03D4  0020               	movlb	0	; select bank0
  3077  03D5  07E3               	addwf	_upperLimit,f
  3078  03D6  0874               	movf	??_readFlash+1,w
  3079  03D7  3DE4               	addwfc	_upperLimit+1,f
  3080  03D8  0875               	movf	??_readFlash+2,w
  3081  03D9  3DE5               	addwfc	_upperLimit+2,f
  3082  03DA  0876               	movf	??_readFlash+3,w
  3083  03DB  3DE6               	addwfc	_upperLimit+3,f
  3084                           
  3085                           ;main.c: 92:     upperLimit += (uint32_t)FLASH_ReadWord(0x800 -1) ;
  3086  03DC  30FF               	movlw	255
  3087  03DD  00F0               	movwf	FLASH_ReadWord@flashAddr
  3088  03DE  3007               	movlw	7
  3089  03DF  00F1               	movwf	FLASH_ReadWord@flashAddr+1
  3090  03E0  2521               	fcall	_FLASH_ReadWord
  3091  03E1  0870               	movf	?_FLASH_ReadWord,w
  3092  03E2  0020               	movlb	0	; select bank0
  3093  03E3  07E3               	addwf	_upperLimit,f
  3094  03E4  0871               	movf	?_FLASH_ReadWord+1,w
  3095  03E5  3DE4               	addwfc	_upperLimit+1,f
  3096  03E6  3000               	movlw	0
  3097  03E7  3DE5               	addwfc	_upperLimit+2,f
  3098  03E8  3DE6               	addwfc	_upperLimit+3,f
  3099  03E9  0008               	return
  3100  03EA                     __end_of_readFlash:
  3101                           
  3102                           	psect	text6
  3103  0521                     __ptext6:	
  3104 ;; *************** function _FLASH_ReadWord *****************
  3105 ;; Defined at:
  3106 ;;		line 58 in file "mcc_generated_files/memory.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;  flashAddr       2    0[COMMON] unsigned short 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  GIEBitValue     1    2[COMMON] unsigned char 
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  2    0[COMMON] unsigned short 
  3113 ;; Registers used:
  3114 ;;		wreg, status,2, status,0
  3115 ;; Tracked objects:
  3116 ;;		On entry : 1F/0
  3117 ;;		On exit  : 1F/3
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1
  3120 ;;      Params:         2       0       0
  3121 ;;      Locals:         1       0       0
  3122 ;;      Temps:          0       0       0
  3123 ;;      Totals:         3       0       0
  3124 ;;Total ram usage:        3 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    4
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_readFlash
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _FLASH_ReadWord
  3136  0521                     _FLASH_ReadWord:
  3137                           
  3138                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3142  0521  3000               	movlw	0
  3143  0522  1B8B               	btfsc	11,7	;volatile
  3144  0523  3001               	movlw	1
  3145  0524  00F2               	movwf	FLASH_ReadWord@GIEBitValue
  3146                           
  3147                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
  3148  0525  138B               	bcf	11,7	;volatile
  3149                           
  3150                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
  3151  0526  0870               	movf	FLASH_ReadWord@flashAddr,w
  3152  0527  0023               	movlb	3	; select bank3
  3153  0528  0091               	movwf	17	;volatile
  3154                           
  3155                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
  3156  0529  0871               	movf	FLASH_ReadWord@flashAddr+1,w
  3157  052A  0092               	movwf	18	;volatile
  3158                           
  3159                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
  3160  052B  1315               	bcf	21,6	;volatile
  3161                           
  3162                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
  3163  052C  1415               	bsf	21,0	;volatile
  3164                           
  3165                           ;mcc_generated_files/memory.c: 68:     __nop();
  3166  052D  0000               	nop
  3167                           
  3168                           ;mcc_generated_files/memory.c: 69:     __nop();
  3169  052E  0000               	nop
  3170                           
  3171                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
  3172  052F  0C72               	rrf	FLASH_ReadWord@GIEBitValue,w
  3173  0530  1C03               	skipc
  3174  0531  138B               	bcf	11,7	;volatile
  3175  0532  1803               	skipnc
  3176  0533  178B               	bsf	11,7	;volatile
  3177                           
  3178                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
  3179  0534  0023               	movlb	3	; select bank3
  3180  0535  0814               	movf	20,w	;volatile
  3181  0536  00F1               	movwf	?_FLASH_ReadWord+1
  3182  0537  0813               	movf	19,w	;volatile
  3183  0538  00F0               	movwf	?_FLASH_ReadWord
  3184  0539  0008               	return
  3185  053A                     __end_of_FLASH_ReadWord:
  3186                           
  3187                           	psect	text7
  3188  04BF                     __ptext7:	
  3189 ;; *************** function ___tmul *****************
  3190 ;; Defined at:
  3191 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul24.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  multiplier      3    0[COMMON] unsigned um
  3194 ;;  multiplicand    3    3[COMMON] unsigned um
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  product         3    6[COMMON] unsigned um
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  3    0[COMMON] unsigned um
  3199 ;; Registers used:
  3200 ;;		wreg, status,2, status,0
  3201 ;; Tracked objects:
  3202 ;;		On entry : 1F/0
  3203 ;;		On exit  : 1F/0
  3204 ;;		Unchanged: 1F/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1
  3206 ;;      Params:         6       0       0
  3207 ;;      Locals:         3       0       0
  3208 ;;      Temps:          0       0       0
  3209 ;;      Totals:         9       0       0
  3210 ;;Total ram usage:        9 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    4
  3213 ;; This function calls:
  3214 ;;		Nothing
  3215 ;; This function is called by:
  3216 ;;		_setState
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           
  3221                           ;psect for function ___tmul
  3222  04BF                     ___tmul:
  3223                           
  3224                           ;incstack = 0
  3225                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  3226  04BF  3000               	movlw	0
  3227  04C0  00F6               	movwf	___tmul@product
  3228  04C1  3000               	movlw	0
  3229  04C2  00F7               	movwf	___tmul@product+1
  3230  04C3  3000               	movlw	0
  3231  04C4  00F8               	movwf	___tmul@product+2
  3232  04C5                     l1759:
  3233  04C5  1C70               	btfss	___tmul@multiplier,0
  3234  04C6  2CCD               	goto	l1763
  3235  04C7  0873               	movf	___tmul@multiplicand,w
  3236  04C8  07F6               	addwf	___tmul@product,f
  3237  04C9  0874               	movf	___tmul@multiplicand+1,w
  3238  04CA  3DF7               	addwfc	___tmul@product+1,f
  3239  04CB  0875               	movf	___tmul@multiplicand+2,w
  3240  04CC  3DF8               	addwfc	___tmul@product+2,f
  3241  04CD                     l1763:
  3242  04CD  3001               	movlw	1
  3243  04CE                     u905:
  3244  04CE  35F3               	lslf	___tmul@multiplicand,f
  3245  04CF  0DF4               	rlf	___tmul@multiplicand+1,f
  3246  04D0  0DF5               	rlf	___tmul@multiplicand+2,f
  3247  04D1  0B89               	decfsz	9,f
  3248  04D2  2CCE               	goto	u905
  3249  04D3  3001               	movlw	1
  3250  04D4                     u915:
  3251  04D4  36F2               	lsrf	___tmul@multiplier+2,f
  3252  04D5  0CF1               	rrf	___tmul@multiplier+1,f
  3253  04D6  0CF0               	rrf	___tmul@multiplier,f
  3254  04D7  0B89               	decfsz	9,f
  3255  04D8  2CD4               	goto	u915
  3256  04D9  0872               	movf	___tmul@multiplier+2,w
  3257  04DA  0471               	iorwf	___tmul@multiplier+1,w
  3258  04DB  0470               	iorwf	___tmul@multiplier,w
  3259  04DC  1D03               	skipz
  3260  04DD  2CC5               	goto	l1759
  3261  04DE  0876               	movf	___tmul@product,w
  3262  04DF  00F0               	movwf	?___tmul
  3263  04E0  0877               	movf	___tmul@product+1,w
  3264  04E1  00F1               	movwf	?___tmul+1
  3265  04E2  0878               	movf	___tmul@product+2,w
  3266  04E3  00F2               	movwf	?___tmul+2
  3267  04E4  0008               	return
  3268  04E5                     __end_of___tmul:
  3269                           
  3270                           	psect	text8
  3271  043E                     __ptext8:	
  3272 ;; *************** function ___lldiv *****************
  3273 ;; Defined at:
  3274 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\__lldiv.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  divisor         4    0[COMMON] unsigned long 
  3277 ;;  dividend        4    4[COMMON] unsigned long 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;  quotient        4    9[COMMON] unsigned long 
  3280 ;;  counter         1   13[COMMON] unsigned char 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  4    0[COMMON] unsigned long 
  3283 ;; Registers used:
  3284 ;;		wreg, status,2, status,0
  3285 ;; Tracked objects:
  3286 ;;		On entry : 1F/0
  3287 ;;		On exit  : 1F/0
  3288 ;;		Unchanged: 1F/0
  3289 ;; Data sizes:     COMMON   BANK0   BANK1
  3290 ;;      Params:         8       0       0
  3291 ;;      Locals:         5       0       0
  3292 ;;      Temps:          1       0       0
  3293 ;;      Totals:        14       0       0
  3294 ;;Total ram usage:       14 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    4
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_setState
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           
  3305                           ;psect for function ___lldiv
  3306  043E                     ___lldiv:
  3307                           
  3308                           ;incstack = 0
  3309                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3310  043E  3000               	movlw	0
  3311  043F  00FC               	movwf	___lldiv@quotient+3
  3312  0440  3000               	movlw	0
  3313  0441  00FB               	movwf	___lldiv@quotient+2
  3314  0442  3000               	movlw	0
  3315  0443  00FA               	movwf	___lldiv@quotient+1
  3316  0444  3000               	movlw	0
  3317  0445  00F9               	movwf	___lldiv@quotient
  3318  0446  0873               	movf	___lldiv@divisor+3,w
  3319  0447  0472               	iorwf	___lldiv@divisor+2,w
  3320  0448  0471               	iorwf	___lldiv@divisor+1,w
  3321  0449  0470               	iorwf	___lldiv@divisor,w
  3322  044A  1903               	skipnz
  3323  044B  2C87               	goto	l1791
  3324  044C  01FD               	clrf	___lldiv@counter
  3325  044D  0AFD               	incf	___lldiv@counter,f
  3326  044E                     l1777:
  3327  044E  1BF3               	btfsc	___lldiv@divisor+3,7
  3328  044F  2C5C               	goto	l1779
  3329  0450  3001               	movlw	1
  3330  0451                     u945:
  3331  0451  35F0               	lslf	___lldiv@divisor,f
  3332  0452  0DF1               	rlf	___lldiv@divisor+1,f
  3333  0453  0DF2               	rlf	___lldiv@divisor+2,f
  3334  0454  0DF3               	rlf	___lldiv@divisor+3,f
  3335  0455  0B89               	decfsz	9,f
  3336  0456  2C51               	goto	u945
  3337  0457  3001               	movlw	1
  3338  0458  00F8               	movwf	??___lldiv
  3339  0459  0878               	movf	??___lldiv,w
  3340  045A  07FD               	addwf	___lldiv@counter,f
  3341  045B  2C4E               	goto	l1777
  3342  045C                     l1779:
  3343  045C  3001               	movlw	1
  3344  045D                     u965:
  3345  045D  35F9               	lslf	___lldiv@quotient,f
  3346  045E  0DFA               	rlf	___lldiv@quotient+1,f
  3347  045F  0DFB               	rlf	___lldiv@quotient+2,f
  3348  0460  0DFC               	rlf	___lldiv@quotient+3,f
  3349  0461  0B89               	decfsz	9,f
  3350  0462  2C5D               	goto	u965
  3351  0463  0873               	movf	___lldiv@divisor+3,w
  3352  0464  0277               	subwf	___lldiv@dividend+3,w
  3353  0465  1D03               	skipz
  3354  0466  2C71               	goto	u975
  3355  0467  0872               	movf	___lldiv@divisor+2,w
  3356  0468  0276               	subwf	___lldiv@dividend+2,w
  3357  0469  1D03               	skipz
  3358  046A  2C71               	goto	u975
  3359  046B  0871               	movf	___lldiv@divisor+1,w
  3360  046C  0275               	subwf	___lldiv@dividend+1,w
  3361  046D  1D03               	skipz
  3362  046E  2C71               	goto	u975
  3363  046F  0870               	movf	___lldiv@divisor,w
  3364  0470  0274               	subwf	___lldiv@dividend,w
  3365  0471                     u975:
  3366  0471  1C03               	skipc
  3367  0472  2C7C               	goto	l1787
  3368  0473  0870               	movf	___lldiv@divisor,w
  3369  0474  02F4               	subwf	___lldiv@dividend,f
  3370  0475  0871               	movf	___lldiv@divisor+1,w
  3371  0476  3BF5               	subwfb	___lldiv@dividend+1,f
  3372  0477  0872               	movf	___lldiv@divisor+2,w
  3373  0478  3BF6               	subwfb	___lldiv@dividend+2,f
  3374  0479  0873               	movf	___lldiv@divisor+3,w
  3375  047A  3BF7               	subwfb	___lldiv@dividend+3,f
  3376  047B  1479               	bsf	___lldiv@quotient,0
  3377  047C                     l1787:
  3378  047C  3001               	movlw	1
  3379  047D                     u985:
  3380  047D  36F3               	lsrf	___lldiv@divisor+3,f
  3381  047E  0CF2               	rrf	___lldiv@divisor+2,f
  3382  047F  0CF1               	rrf	___lldiv@divisor+1,f
  3383  0480  0CF0               	rrf	___lldiv@divisor,f
  3384  0481  0B89               	decfsz	9,f
  3385  0482  2C7D               	goto	u985
  3386  0483  3001               	movlw	1
  3387  0484  02FD               	subwf	___lldiv@counter,f
  3388  0485  1D03               	btfss	3,2
  3389  0486  2C5C               	goto	l1779
  3390  0487                     l1791:
  3391  0487  087C               	movf	___lldiv@quotient+3,w
  3392  0488  00F3               	movwf	?___lldiv+3
  3393  0489  087B               	movf	___lldiv@quotient+2,w
  3394  048A  00F2               	movwf	?___lldiv+2
  3395  048B  087A               	movf	___lldiv@quotient+1,w
  3396  048C  00F1               	movwf	?___lldiv+1
  3397  048D  0879               	movf	___lldiv@quotient,w
  3398  048E  00F0               	movwf	?___lldiv
  3399  048F  0008               	return
  3400  0490                     __end_of___lldiv:
  3401                           
  3402                           	psect	text9
  3403  019A                     __ptext9:	
  3404 ;; *************** function _setLedsForPositioning *****************
  3405 ;; Defined at:
  3406 ;;		line 340 in file "main.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  adcValue        4    0[COMMON] long 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 1F/0
  3417 ;;		On exit  : 1F/2
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1
  3420 ;;      Params:         4       0       0
  3421 ;;      Locals:         0       0       0
  3422 ;;      Temps:          0       0       0
  3423 ;;      Totals:         4       0       0
  3424 ;;Total ram usage:        4 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    4
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_main
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function _setLedsForPositioning
  3436  019A                     _setLedsForPositioning:
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _setLedsForPositioning: [wreg+status,2+status,0]
  3440                           ;main.c: 340: void setLedsForPositioning(int32_t adcValue);main.c: 341: {;main.c: 342:  
      +                             do { LATCbits.LATC0 = 0; } while(0);
  3441  019A  0022               	movlb	2	; select bank2
  3442  019B  100E               	bcf	14,0	;volatile
  3443                           
  3444                           ;main.c: 343:     do { LATCbits.LATC1 = 0; } while(0);
  3445  019C  108E               	bcf	14,1	;volatile
  3446                           
  3447                           ;main.c: 344:     do { LATCbits.LATC2 = 0; } while(0);
  3448  019D  110E               	bcf	14,2	;volatile
  3449                           
  3450                           ;main.c: 345:     do { LATCbits.LATC3 = 0; } while(0);
  3451  019E  118E               	bcf	14,3	;volatile
  3452                           
  3453                           ;main.c: 346:     do { LATCbits.LATC4 = 0; } while(0);
  3454  019F  120E               	bcf	14,4	;volatile
  3455                           
  3456                           ;main.c: 347:     do { LATCbits.LATC5 = 1; } while(0);
  3457  01A0  168E               	bsf	14,5	;volatile
  3458                           
  3459                           ;main.c: 348:     do { LATCbits.LATC6 = 0; } while(0);
  3460  01A1  130E               	bcf	14,6	;volatile
  3461                           
  3462                           ;main.c: 349:     do { LATCbits.LATC7 = 0; } while(0);
  3463  01A2  138E               	bcf	14,7	;volatile
  3464                           
  3465                           ;main.c: 350:     do { LATBbits.LATB5 = 0; } while(0);
  3466  01A3  128D               	bcf	13,5	;volatile
  3467                           
  3468                           ;main.c: 351:     do { LATBbits.LATB6 = 0; } while(0);
  3469  01A4  130D               	bcf	13,6	;volatile
  3470                           
  3471                           ;main.c: 352:     do { LATBbits.LATB7 = 0; } while(0);
  3472  01A5  138D               	bcf	13,7	;volatile
  3473                           
  3474                           ;main.c: 354:     if(adcValue < 93)
  3475  01A6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3476  01A7  29B5               	goto	l426
  3477  01A8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3478  01A9  1D03               	btfss	3,2
  3479  01AA  29BC               	goto	l1865
  3480  01AB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3481  01AC  1D03               	btfss	3,2
  3482  01AD  29BC               	goto	l1865
  3483  01AE  0871               	movf	setLedsForPositioning@adcValue+1,w
  3484  01AF  1D03               	btfss	3,2
  3485  01B0  29BC               	goto	l1865
  3486  01B1  305D               	movlw	93
  3487  01B2  0270               	subwf	setLedsForPositioning@adcValue,w
  3488  01B3  1803               	btfsc	3,0
  3489  01B4  29BC               	goto	l1865
  3490  01B5                     l426:	
  3491                           ;main.c: 355:     {;main.c: 356:         do { LATCbits.LATC0 = 1; } while(0);
  3492                           
  3493  01B5  140E               	bsf	14,0	;volatile
  3494                           
  3495                           ;main.c: 357:         do { LATCbits.LATC1 = 1; } while(0);
  3496  01B6  148E               	bsf	14,1	;volatile
  3497                           
  3498                           ;main.c: 358:         do { LATCbits.LATC2 = 1; } while(0);
  3499  01B7  150E               	bsf	14,2	;volatile
  3500                           
  3501                           ;main.c: 359:         do { LATCbits.LATC3 = 1; } while(0);
  3502  01B8  158E               	bsf	14,3	;volatile
  3503                           
  3504                           ;main.c: 360:         do { LATCbits.LATC4 = 1; } while(0);
  3505  01B9  160E               	bsf	14,4	;volatile
  3506                           
  3507                           ;main.c: 361:         do { LATCbits.LATC5 = 1; } while(0);
  3508  01BA  168E               	bsf	14,5	;volatile
  3509  01BB  0008               	return
  3510  01BC                     l1865:
  3511  01BC  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3512  01BD  29CB               	goto	l440
  3513  01BE  0873               	movf	setLedsForPositioning@adcValue+3,w
  3514  01BF  1D03               	btfss	3,2
  3515  01C0  29D1               	goto	l1867
  3516  01C1  0872               	movf	setLedsForPositioning@adcValue+2,w
  3517  01C2  1D03               	btfss	3,2
  3518  01C3  29D1               	goto	l1867
  3519  01C4  0871               	movf	setLedsForPositioning@adcValue+1,w
  3520  01C5  1D03               	btfss	3,2
  3521  01C6  29D1               	goto	l1867
  3522  01C7  30BA               	movlw	186
  3523  01C8  0270               	subwf	setLedsForPositioning@adcValue,w
  3524  01C9  1803               	btfsc	3,0
  3525  01CA  29D1               	goto	l1867
  3526  01CB                     l440:	
  3527                           ;main.c: 364:     {;main.c: 365:         do { LATCbits.LATC1 = 1; } while(0);
  3528                           
  3529  01CB  148E               	bsf	14,1	;volatile
  3530                           
  3531                           ;main.c: 366:         do { LATCbits.LATC2 = 1; } while(0);
  3532  01CC  150E               	bsf	14,2	;volatile
  3533                           
  3534                           ;main.c: 367:         do { LATCbits.LATC3 = 1; } while(0);
  3535  01CD  158E               	bsf	14,3	;volatile
  3536                           
  3537                           ;main.c: 368:         do { LATCbits.LATC4 = 1; } while(0);
  3538  01CE  160E               	bsf	14,4	;volatile
  3539                           
  3540                           ;main.c: 369:         do { LATCbits.LATC5 = 1; } while(0);
  3541  01CF  168E               	bsf	14,5	;volatile
  3542  01D0  0008               	return
  3543  01D1                     l1867:
  3544  01D1  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3545  01D2  29DF               	goto	l452
  3546  01D3  0873               	movf	setLedsForPositioning@adcValue+3,w
  3547  01D4  1D03               	btfss	3,2
  3548  01D5  29E4               	goto	l1869
  3549  01D6  0872               	movf	setLedsForPositioning@adcValue+2,w
  3550  01D7  1D03               	btfss	3,2
  3551  01D8  29E4               	goto	l1869
  3552  01D9  3017               	movlw	23
  3553  01DA  0270               	subwf	setLedsForPositioning@adcValue,w
  3554  01DB  3001               	movlw	1
  3555  01DC  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3556  01DD  1803               	btfsc	3,0
  3557  01DE  29E4               	goto	l1869
  3558  01DF                     l452:	
  3559                           ;main.c: 372:     {;main.c: 373:         do { LATCbits.LATC2 = 1; } while(0);
  3560                           
  3561  01DF  150E               	bsf	14,2	;volatile
  3562                           
  3563                           ;main.c: 374:         do { LATCbits.LATC3 = 1; } while(0);
  3564  01E0  158E               	bsf	14,3	;volatile
  3565                           
  3566                           ;main.c: 375:         do { LATCbits.LATC4 = 1; } while(0);
  3567  01E1  160E               	bsf	14,4	;volatile
  3568                           
  3569                           ;main.c: 376:         do { LATCbits.LATC5 = 1; } while(0);
  3570  01E2  168E               	bsf	14,5	;volatile
  3571  01E3  0008               	return
  3572  01E4                     l1869:
  3573  01E4  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3574  01E5  29F2               	goto	l462
  3575  01E6  0873               	movf	setLedsForPositioning@adcValue+3,w
  3576  01E7  1D03               	btfss	3,2
  3577  01E8  29F6               	goto	l1871
  3578  01E9  0872               	movf	setLedsForPositioning@adcValue+2,w
  3579  01EA  1D03               	btfss	3,2
  3580  01EB  29F6               	goto	l1871
  3581  01EC  3074               	movlw	116
  3582  01ED  0270               	subwf	setLedsForPositioning@adcValue,w
  3583  01EE  3001               	movlw	1
  3584  01EF  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3585  01F0  1803               	btfsc	3,0
  3586  01F1  29F6               	goto	l1871
  3587  01F2                     l462:	
  3588                           ;main.c: 379:     {;main.c: 380:         do { LATCbits.LATC3 = 1; } while(0);
  3589                           
  3590  01F2  158E               	bsf	14,3	;volatile
  3591                           
  3592                           ;main.c: 381:         do { LATCbits.LATC4 = 1; } while(0);
  3593  01F3  160E               	bsf	14,4	;volatile
  3594                           
  3595                           ;main.c: 382:         do { LATCbits.LATC5 = 1; } while(0);
  3596  01F4  168E               	bsf	14,5	;volatile
  3597  01F5  0008               	return
  3598  01F6                     l1871:
  3599  01F6  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3600  01F7  2A04               	goto	l470
  3601  01F8  0873               	movf	setLedsForPositioning@adcValue+3,w
  3602  01F9  1D03               	btfss	3,2
  3603  01FA  2A07               	goto	l1873
  3604  01FB  0872               	movf	setLedsForPositioning@adcValue+2,w
  3605  01FC  1D03               	btfss	3,2
  3606  01FD  2A07               	goto	l1873
  3607  01FE  30D1               	movlw	209
  3608  01FF  0270               	subwf	setLedsForPositioning@adcValue,w
  3609  0200  3001               	movlw	1
  3610  0201  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3611  0202  1803               	btfsc	3,0
  3612  0203  2A07               	goto	l1873
  3613  0204                     l470:	
  3614                           ;main.c: 385:     {;main.c: 386:         do { LATCbits.LATC4 = 1; } while(0);
  3615                           
  3616  0204  160E               	bsf	14,4	;volatile
  3617                           
  3618                           ;main.c: 387:         do { LATCbits.LATC5 = 1; } while(0);
  3619  0205  168E               	bsf	14,5	;volatile
  3620  0206  0008               	return
  3621  0207                     l1873:
  3622  0207  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3623  0208  2A15               	goto	l476
  3624  0209  0873               	movf	setLedsForPositioning@adcValue+3,w
  3625  020A  1D03               	btfss	3,2
  3626  020B  2A17               	goto	l1875
  3627  020C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3628  020D  1D03               	btfss	3,2
  3629  020E  2A17               	goto	l1875
  3630  020F  302E               	movlw	46
  3631  0210  0270               	subwf	setLedsForPositioning@adcValue,w
  3632  0211  3002               	movlw	2
  3633  0212  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3634  0213  1803               	btfsc	3,0
  3635  0214  2A17               	goto	l1875
  3636  0215                     l476:	
  3637                           ;main.c: 390:     {;main.c: 391:         do { LATCbits.LATC5 = 1; } while(0);
  3638                           
  3639  0215  168E               	bsf	14,5	;volatile
  3640  0216  0008               	return
  3641  0217                     l1875:
  3642  0217  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3643  0218  2A25               	goto	l480
  3644  0219  0873               	movf	setLedsForPositioning@adcValue+3,w
  3645  021A  1D03               	btfss	3,2
  3646  021B  2A28               	goto	l1877
  3647  021C  0872               	movf	setLedsForPositioning@adcValue+2,w
  3648  021D  1D03               	btfss	3,2
  3649  021E  2A28               	goto	l1877
  3650  021F  308B               	movlw	139
  3651  0220  0270               	subwf	setLedsForPositioning@adcValue,w
  3652  0221  3002               	movlw	2
  3653  0222  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3654  0223  1803               	btfsc	3,0
  3655  0224  2A28               	goto	l1877
  3656  0225                     l480:	
  3657                           ;main.c: 394:     {;main.c: 395:         do { LATCbits.LATC5 = 1; } while(0);
  3658                           
  3659  0225  168E               	bsf	14,5	;volatile
  3660                           
  3661                           ;main.c: 396:         do { LATCbits.LATC6 = 1; } while(0);
  3662  0226  170E               	bsf	14,6	;volatile
  3663  0227  0008               	return
  3664  0228                     l1877:
  3665  0228  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3666  0229  2A36               	goto	l486
  3667  022A  0873               	movf	setLedsForPositioning@adcValue+3,w
  3668  022B  1D03               	btfss	3,2
  3669  022C  2A3A               	goto	l1879
  3670  022D  0872               	movf	setLedsForPositioning@adcValue+2,w
  3671  022E  1D03               	btfss	3,2
  3672  022F  2A3A               	goto	l1879
  3673  0230  30E8               	movlw	232
  3674  0231  0270               	subwf	setLedsForPositioning@adcValue,w
  3675  0232  3002               	movlw	2
  3676  0233  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3677  0234  1803               	btfsc	3,0
  3678  0235  2A3A               	goto	l1879
  3679  0236                     l486:	
  3680                           ;main.c: 399:     {;main.c: 400:         do { LATCbits.LATC5 = 1; } while(0);
  3681                           
  3682  0236  168E               	bsf	14,5	;volatile
  3683                           
  3684                           ;main.c: 401:         do { LATCbits.LATC6 = 1; } while(0);
  3685  0237  170E               	bsf	14,6	;volatile
  3686                           
  3687                           ;main.c: 402:         do { LATCbits.LATC7 = 1; } while(0);
  3688  0238  178E               	bsf	14,7	;volatile
  3689  0239  0008               	return
  3690  023A                     l1879:
  3691  023A  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3692  023B  2A48               	goto	l494
  3693  023C  0873               	movf	setLedsForPositioning@adcValue+3,w
  3694  023D  1D03               	btfss	3,2
  3695  023E  2A4D               	goto	l1881
  3696  023F  0872               	movf	setLedsForPositioning@adcValue+2,w
  3697  0240  1D03               	btfss	3,2
  3698  0241  2A4D               	goto	l1881
  3699  0242  3045               	movlw	69
  3700  0243  0270               	subwf	setLedsForPositioning@adcValue,w
  3701  0244  3003               	movlw	3
  3702  0245  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3703  0246  1803               	btfsc	3,0
  3704  0247  2A4D               	goto	l1881
  3705  0248                     l494:	
  3706                           ;main.c: 405:     {;main.c: 406:         do { LATCbits.LATC5 = 1; } while(0);
  3707                           
  3708  0248  168E               	bsf	14,5	;volatile
  3709                           
  3710                           ;main.c: 407:         do { LATCbits.LATC6 = 1; } while(0);
  3711  0249  170E               	bsf	14,6	;volatile
  3712                           
  3713                           ;main.c: 408:         do { LATCbits.LATC7 = 1; } while(0);
  3714  024A  178E               	bsf	14,7	;volatile
  3715                           
  3716                           ;main.c: 409:         do { LATBbits.LATB5 = 1; } while(0);
  3717  024B  168D               	bsf	13,5	;volatile
  3718  024C  0008               	return
  3719  024D                     l1881:
  3720  024D  1BF3               	btfsc	setLedsForPositioning@adcValue+3,7
  3721  024E  2A5B               	goto	l504
  3722  024F  0873               	movf	setLedsForPositioning@adcValue+3,w
  3723  0250  1D03               	btfss	3,2
  3724  0251  2A61               	goto	l515
  3725  0252  0872               	movf	setLedsForPositioning@adcValue+2,w
  3726  0253  1D03               	btfss	3,2
  3727  0254  2A61               	goto	l515
  3728  0255  30A2               	movlw	162
  3729  0256  0270               	subwf	setLedsForPositioning@adcValue,w
  3730  0257  3003               	movlw	3
  3731  0258  3B71               	subwfb	setLedsForPositioning@adcValue+1,w
  3732  0259  1803               	btfsc	3,0
  3733  025A  2A61               	goto	l515
  3734  025B                     l504:	
  3735                           ;main.c: 412:     {;main.c: 413:         do { LATCbits.LATC5 = 1; } while(0);
  3736                           
  3737  025B  168E               	bsf	14,5	;volatile
  3738                           
  3739                           ;main.c: 414:         do { LATCbits.LATC6 = 1; } while(0);
  3740  025C  170E               	bsf	14,6	;volatile
  3741                           
  3742                           ;main.c: 415:         do { LATCbits.LATC7 = 1; } while(0);
  3743  025D  178E               	bsf	14,7	;volatile
  3744                           
  3745                           ;main.c: 416:         do { LATBbits.LATB5 = 1; } while(0);
  3746  025E  168D               	bsf	13,5	;volatile
  3747                           
  3748                           ;main.c: 417:         do { LATBbits.LATB6 = 1; } while(0);
  3749  025F  170D               	bsf	13,6	;volatile
  3750  0260  0008               	return
  3751  0261                     l515:	
  3752                           ;main.c: 420:     {;main.c: 421:         do { LATCbits.LATC5 = 1; } while(0);
  3753                           
  3754  0261  168E               	bsf	14,5	;volatile
  3755                           
  3756                           ;main.c: 422:         do { LATCbits.LATC6 = 1; } while(0);
  3757  0262  170E               	bsf	14,6	;volatile
  3758                           
  3759                           ;main.c: 423:         do { LATCbits.LATC7 = 1; } while(0);
  3760  0263  178E               	bsf	14,7	;volatile
  3761                           
  3762                           ;main.c: 424:         do { LATBbits.LATB5 = 1; } while(0);
  3763  0264  168D               	bsf	13,5	;volatile
  3764                           
  3765                           ;main.c: 425:         do { LATBbits.LATB6 = 1; } while(0);
  3766  0265  170D               	bsf	13,6	;volatile
  3767                           
  3768                           ;main.c: 426:         do { LATBbits.LATB7 = 1; } while(0);
  3769  0266  178D               	bsf	13,7	;volatile
  3770  0267  0008               	return
  3771  0268                     __end_of_setLedsForPositioning:
  3772                           
  3773                           	psect	text10
  3774  0490                     __ptext10:	
  3775 ;; *************** function ___lmul *****************
  3776 ;; Defined at:
  3777 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul32.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  multiplier      4    0[COMMON] unsigned long 
  3780 ;;  multiplicand    4    4[COMMON] unsigned long 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  product         4    8[COMMON] unsigned long 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  4    0[COMMON] unsigned long 
  3785 ;; Registers used:
  3786 ;;		wreg, status,2, status,0
  3787 ;; Tracked objects:
  3788 ;;		On entry : 1F/0
  3789 ;;		On exit  : 1F/0
  3790 ;;		Unchanged: 1F/0
  3791 ;; Data sizes:     COMMON   BANK0   BANK1
  3792 ;;      Params:         8       0       0
  3793 ;;      Locals:         4       0       0
  3794 ;;      Temps:          0       0       0
  3795 ;;      Totals:        12       0       0
  3796 ;;Total ram usage:       12 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    4
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           
  3807                           ;psect for function ___lmul
  3808  0490                     ___lmul:
  3809                           
  3810                           ;incstack = 0
  3811                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3812  0490  3000               	movlw	0
  3813  0491  00FB               	movwf	___lmul@product+3
  3814  0492  3000               	movlw	0
  3815  0493  00FA               	movwf	___lmul@product+2
  3816  0494  3000               	movlw	0
  3817  0495  00F9               	movwf	___lmul@product+1
  3818  0496  3000               	movlw	0
  3819  0497  00F8               	movwf	___lmul@product
  3820  0498                     l1885:
  3821  0498  1C70               	btfss	___lmul@multiplier,0
  3822  0499  2CA2               	goto	l1889
  3823  049A  0874               	movf	___lmul@multiplicand,w
  3824  049B  07F8               	addwf	___lmul@product,f
  3825  049C  0875               	movf	___lmul@multiplicand+1,w
  3826  049D  3DF9               	addwfc	___lmul@product+1,f
  3827  049E  0876               	movf	___lmul@multiplicand+2,w
  3828  049F  3DFA               	addwfc	___lmul@product+2,f
  3829  04A0  0877               	movf	___lmul@multiplicand+3,w
  3830  04A1  3DFB               	addwfc	___lmul@product+3,f
  3831  04A2                     l1889:
  3832  04A2  3001               	movlw	1
  3833  04A3                     u1165:
  3834  04A3  35F4               	lslf	___lmul@multiplicand,f
  3835  04A4  0DF5               	rlf	___lmul@multiplicand+1,f
  3836  04A5  0DF6               	rlf	___lmul@multiplicand+2,f
  3837  04A6  0DF7               	rlf	___lmul@multiplicand+3,f
  3838  04A7  0B89               	decfsz	9,f
  3839  04A8  2CA3               	goto	u1165
  3840  04A9  3001               	movlw	1
  3841  04AA                     u1175:
  3842  04AA  36F3               	lsrf	___lmul@multiplier+3,f
  3843  04AB  0CF2               	rrf	___lmul@multiplier+2,f
  3844  04AC  0CF1               	rrf	___lmul@multiplier+1,f
  3845  04AD  0CF0               	rrf	___lmul@multiplier,f
  3846  04AE  0B89               	decfsz	9,f
  3847  04AF  2CAA               	goto	u1175
  3848  04B0  0873               	movf	___lmul@multiplier+3,w
  3849  04B1  0472               	iorwf	___lmul@multiplier+2,w
  3850  04B2  0471               	iorwf	___lmul@multiplier+1,w
  3851  04B3  0470               	iorwf	___lmul@multiplier,w
  3852  04B4  1D03               	skipz
  3853  04B5  2C98               	goto	l1885
  3854  04B6  087B               	movf	___lmul@product+3,w
  3855  04B7  00F3               	movwf	?___lmul+3
  3856  04B8  087A               	movf	___lmul@product+2,w
  3857  04B9  00F2               	movwf	?___lmul+2
  3858  04BA  0879               	movf	___lmul@product+1,w
  3859  04BB  00F1               	movwf	?___lmul+1
  3860  04BC  0878               	movf	___lmul@product,w
  3861  04BD  00F0               	movwf	?___lmul
  3862  04BE  0008               	return
  3863  04BF                     __end_of___lmul:
  3864                           
  3865                           	psect	text11
  3866  0301                     __ptext11:	
  3867 ;; *************** function ___aldiv *****************
  3868 ;; Defined at:
  3869 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  divisor         4    0[BANK0 ] long 
  3872 ;;  dividend        4    4[BANK0 ] long 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  quotient        4   10[BANK0 ] long 
  3875 ;;  sign            1    9[BANK0 ] unsigned char 
  3876 ;;  counter         1    8[BANK0 ] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  4    0[BANK0 ] long 
  3879 ;; Registers used:
  3880 ;;		wreg, status,2, status,0
  3881 ;; Tracked objects:
  3882 ;;		On entry : 1F/0
  3883 ;;		On exit  : 1F/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1
  3886 ;;      Params:         0       8       0
  3887 ;;      Locals:         0       6       0
  3888 ;;      Temps:          1       0       0
  3889 ;;      Totals:         1      14       0
  3890 ;;Total ram usage:       15 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    4
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_main
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           
  3901                           ;psect for function ___aldiv
  3902  0301                     ___aldiv:
  3903                           
  3904                           ;incstack = 0
  3905                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3906  0301  01A9               	clrf	___aldiv@sign
  3907  0302  1FA3               	btfss	___aldiv@divisor+3,7
  3908  0303  2B11               	goto	l660
  3909  0304  09A0               	comf	___aldiv@divisor,f
  3910  0305  09A1               	comf	___aldiv@divisor+1,f
  3911  0306  09A2               	comf	___aldiv@divisor+2,f
  3912  0307  09A3               	comf	___aldiv@divisor+3,f
  3913  0308  0AA0               	incf	___aldiv@divisor,f
  3914  0309  1903               	skipnz
  3915  030A  0AA1               	incf	___aldiv@divisor+1,f
  3916  030B  1903               	skipnz
  3917  030C  0AA2               	incf	___aldiv@divisor+2,f
  3918  030D  1903               	skipnz
  3919  030E  0AA3               	incf	___aldiv@divisor+3,f
  3920  030F  01A9               	clrf	___aldiv@sign
  3921  0310  0AA9               	incf	___aldiv@sign,f
  3922  0311                     l660:
  3923  0311  1FA7               	btfss	___aldiv@dividend+3,7
  3924  0312  2B22               	goto	l1907
  3925  0313  09A4               	comf	___aldiv@dividend,f
  3926  0314  09A5               	comf	___aldiv@dividend+1,f
  3927  0315  09A6               	comf	___aldiv@dividend+2,f
  3928  0316  09A7               	comf	___aldiv@dividend+3,f
  3929  0317  0AA4               	incf	___aldiv@dividend,f
  3930  0318  1903               	skipnz
  3931  0319  0AA5               	incf	___aldiv@dividend+1,f
  3932  031A  1903               	skipnz
  3933  031B  0AA6               	incf	___aldiv@dividend+2,f
  3934  031C  1903               	skipnz
  3935  031D  0AA7               	incf	___aldiv@dividend+3,f
  3936  031E  3001               	movlw	1
  3937  031F  00FC               	movwf	??___aldiv
  3938  0320  087C               	movf	??___aldiv,w
  3939  0321  06A9               	xorwf	___aldiv@sign,f
  3940  0322                     l1907:
  3941  0322  3000               	movlw	0
  3942  0323  00AD               	movwf	___aldiv@quotient+3
  3943  0324  3000               	movlw	0
  3944  0325  00AC               	movwf	___aldiv@quotient+2
  3945  0326  3000               	movlw	0
  3946  0327  00AB               	movwf	___aldiv@quotient+1
  3947  0328  3000               	movlw	0
  3948  0329  00AA               	movwf	___aldiv@quotient
  3949  032A  0823               	movf	___aldiv@divisor+3,w
  3950  032B  0422               	iorwf	___aldiv@divisor+2,w
  3951  032C  0421               	iorwf	___aldiv@divisor+1,w
  3952  032D  0420               	iorwf	___aldiv@divisor,w
  3953  032E  1903               	skipnz
  3954  032F  2B6B               	goto	l1929
  3955  0330  01A8               	clrf	___aldiv@counter
  3956  0331  0AA8               	incf	___aldiv@counter,f
  3957  0332                     l1915:
  3958  0332  1BA3               	btfsc	___aldiv@divisor+3,7
  3959  0333  2B40               	goto	l1917
  3960  0334  3001               	movlw	1
  3961  0335                     u1225:
  3962  0335  35A0               	lslf	___aldiv@divisor,f
  3963  0336  0DA1               	rlf	___aldiv@divisor+1,f
  3964  0337  0DA2               	rlf	___aldiv@divisor+2,f
  3965  0338  0DA3               	rlf	___aldiv@divisor+3,f
  3966  0339  0B89               	decfsz	9,f
  3967  033A  2B35               	goto	u1225
  3968  033B  3001               	movlw	1
  3969  033C  00FC               	movwf	??___aldiv
  3970  033D  087C               	movf	??___aldiv,w
  3971  033E  07A8               	addwf	___aldiv@counter,f
  3972  033F  2B32               	goto	l1915
  3973  0340                     l1917:
  3974  0340  3001               	movlw	1
  3975  0341                     u1245:
  3976  0341  35AA               	lslf	___aldiv@quotient,f
  3977  0342  0DAB               	rlf	___aldiv@quotient+1,f
  3978  0343  0DAC               	rlf	___aldiv@quotient+2,f
  3979  0344  0DAD               	rlf	___aldiv@quotient+3,f
  3980  0345  0B89               	decfsz	9,f
  3981  0346  2B41               	goto	u1245
  3982  0347  0823               	movf	___aldiv@divisor+3,w
  3983  0348  0227               	subwf	___aldiv@dividend+3,w
  3984  0349  1D03               	skipz
  3985  034A  2B55               	goto	u1255
  3986  034B  0822               	movf	___aldiv@divisor+2,w
  3987  034C  0226               	subwf	___aldiv@dividend+2,w
  3988  034D  1D03               	skipz
  3989  034E  2B55               	goto	u1255
  3990  034F  0821               	movf	___aldiv@divisor+1,w
  3991  0350  0225               	subwf	___aldiv@dividend+1,w
  3992  0351  1D03               	skipz
  3993  0352  2B55               	goto	u1255
  3994  0353  0820               	movf	___aldiv@divisor,w
  3995  0354  0224               	subwf	___aldiv@dividend,w
  3996  0355                     u1255:
  3997  0355  1C03               	skipc
  3998  0356  2B60               	goto	l1925
  3999  0357  0820               	movf	___aldiv@divisor,w
  4000  0358  02A4               	subwf	___aldiv@dividend,f
  4001  0359  0821               	movf	___aldiv@divisor+1,w
  4002  035A  3BA5               	subwfb	___aldiv@dividend+1,f
  4003  035B  0822               	movf	___aldiv@divisor+2,w
  4004  035C  3BA6               	subwfb	___aldiv@dividend+2,f
  4005  035D  0823               	movf	___aldiv@divisor+3,w
  4006  035E  3BA7               	subwfb	___aldiv@dividend+3,f
  4007  035F  142A               	bsf	___aldiv@quotient,0
  4008  0360                     l1925:
  4009  0360  3001               	movlw	1
  4010  0361                     u1265:
  4011  0361  36A3               	lsrf	___aldiv@divisor+3,f
  4012  0362  0CA2               	rrf	___aldiv@divisor+2,f
  4013  0363  0CA1               	rrf	___aldiv@divisor+1,f
  4014  0364  0CA0               	rrf	___aldiv@divisor,f
  4015  0365  0B89               	decfsz	9,f
  4016  0366  2B61               	goto	u1265
  4017  0367  3001               	movlw	1
  4018  0368  02A8               	subwf	___aldiv@counter,f
  4019  0369  1D03               	btfss	3,2
  4020  036A  2B40               	goto	l1917
  4021  036B                     l1929:
  4022  036B  0829               	movf	___aldiv@sign,w
  4023  036C  1903               	btfsc	3,2
  4024  036D  2B79               	goto	l1933
  4025  036E  09AA               	comf	___aldiv@quotient,f
  4026  036F  09AB               	comf	___aldiv@quotient+1,f
  4027  0370  09AC               	comf	___aldiv@quotient+2,f
  4028  0371  09AD               	comf	___aldiv@quotient+3,f
  4029  0372  0AAA               	incf	___aldiv@quotient,f
  4030  0373  1903               	skipnz
  4031  0374  0AAB               	incf	___aldiv@quotient+1,f
  4032  0375  1903               	skipnz
  4033  0376  0AAC               	incf	___aldiv@quotient+2,f
  4034  0377  1903               	skipnz
  4035  0378  0AAD               	incf	___aldiv@quotient+3,f
  4036  0379                     l1933:
  4037  0379  082D               	movf	___aldiv@quotient+3,w
  4038  037A  00A3               	movwf	?___aldiv+3
  4039  037B  082C               	movf	___aldiv@quotient+2,w
  4040  037C  00A2               	movwf	?___aldiv+2
  4041  037D  082B               	movf	___aldiv@quotient+1,w
  4042  037E  00A1               	movwf	?___aldiv+1
  4043  037F  082A               	movf	___aldiv@quotient,w
  4044  0380  00A0               	movwf	?___aldiv
  4045  0381  0008               	return
  4046  0382                     __end_of___aldiv:
  4047                           
  4048                           	psect	text12
  4049  05FC                     __ptext12:	
  4050 ;; *************** function _TMR2_StartTimer *****************
  4051 ;; Defined at:
  4052 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		None
  4061 ;; Tracked objects:
  4062 ;;		On entry : 1F/0
  4063 ;;		On exit  : 1F/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1
  4066 ;;      Params:         0       0       0
  4067 ;;      Locals:         0       0       0
  4068 ;;      Temps:          0       0       0
  4069 ;;      Totals:         0       0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    4
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function _TMR2_StartTimer
  4082  05FC                     _TMR2_StartTimer:
  4083                           
  4084                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in _TMR2_StartTimer: []
  4088  05FC  151C               	bsf	28,2	;volatile
  4089  05FD  0008               	return
  4090  05FE                     __end_of_TMR2_StartTimer:
  4091                           
  4092                           	psect	text13
  4093  05B7                     __ptext13:	
  4094 ;; *************** function _SYSTEM_Initialize *****************
  4095 ;; Defined at:
  4096 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;		None
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;		None
  4101 ;; Return value:  Size  Location     Type
  4102 ;;                  1    wreg      void 
  4103 ;; Registers used:
  4104 ;;		wreg, status,2, status,0, pclath, cstack
  4105 ;; Tracked objects:
  4106 ;;		On entry : B1F/0
  4107 ;;		On exit  : 1F/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMMON   BANK0   BANK1
  4110 ;;      Params:         0       0       0
  4111 ;;      Locals:         0       0       0
  4112 ;;      Temps:          0       0       0
  4113 ;;      Totals:         0       0       0
  4114 ;;Total ram usage:        0 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    6
  4117 ;; This function calls:
  4118 ;;		_ADC_Initialize
  4119 ;;		_OSCILLATOR_Initialize
  4120 ;;		_PIN_MANAGER_Initialize
  4121 ;;		_PWM3_Initialize
  4122 ;;		_TMR0_Initialize
  4123 ;;		_TMR2_Initialize
  4124 ;;		_WDT_Initialize
  4125 ;; This function is called by:
  4126 ;;		_main
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           
  4131                           ;psect for function _SYSTEM_Initialize
  4132  05B7                     _SYSTEM_Initialize:
  4133                           
  4134                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4138  05B7  253A               	fcall	_PIN_MANAGER_Initialize
  4139                           
  4140                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4141  05B8  25E3               	fcall	_OSCILLATOR_Initialize
  4142                           
  4143                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4144  05B9  25F8               	fcall	_WDT_Initialize
  4145                           
  4146                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  4147  05BA  25CF               	fcall	_ADC_Initialize
  4148                           
  4149                           ;mcc_generated_files/mcc.c: 57:     PWM3_Initialize();
  4150  05BB  25C7               	fcall	_PWM3_Initialize
  4151                           
  4152                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  4153  05BC  25BF               	fcall	_TMR2_Initialize
  4154                           
  4155                           ;mcc_generated_files/mcc.c: 59:     TMR0_Initialize();
  4156  05BD  2580               	fcall	_TMR0_Initialize
  4157  05BE  0008               	return
  4158  05BF                     __end_of_SYSTEM_Initialize:
  4159                           
  4160                           	psect	text14
  4161  05F8                     __ptext14:	
  4162 ;; *************** function _WDT_Initialize *****************
  4163 ;; Defined at:
  4164 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg
  4173 ;; Tracked objects:
  4174 ;;		On entry : B1F/2
  4175 ;;		On exit  : B1F/1
  4176 ;;		Unchanged: B00/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1
  4178 ;;      Params:         0       0       0
  4179 ;;      Locals:         0       0       0
  4180 ;;      Temps:          0       0       0
  4181 ;;      Totals:         0       0       0
  4182 ;;Total ram usage:        0 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    4
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_SYSTEM_Initialize
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _WDT_Initialize
  4194  05F8                     _WDT_Initialize:
  4195                           
  4196                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4197                           
  4198                           ;incstack = 0
  4199                           ; Regs used in _WDT_Initialize: [wreg]
  4200  05F8  3016               	movlw	22
  4201  05F9  0021               	movlb	1	; select bank1
  4202  05FA  0097               	movwf	23	;volatile
  4203  05FB  0008               	return
  4204  05FC                     __end_of_WDT_Initialize:
  4205                           
  4206                           	psect	text15
  4207  05BF                     __ptext15:	
  4208 ;; *************** function _TMR2_Initialize *****************
  4209 ;; Defined at:
  4210 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, status,2
  4219 ;; Tracked objects:
  4220 ;;		On entry : B1F/C
  4221 ;;		On exit  : B1F/0
  4222 ;;		Unchanged: B00/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1
  4224 ;;      Params:         0       0       0
  4225 ;;      Locals:         0       0       0
  4226 ;;      Temps:          0       0       0
  4227 ;;      Totals:         0       0       0
  4228 ;;Total ram usage:        0 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    4
  4231 ;; This function calls:
  4232 ;;		Nothing
  4233 ;; This function is called by:
  4234 ;;		_SYSTEM_Initialize
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function _TMR2_Initialize
  4240  05BF                     _TMR2_Initialize:
  4241                           
  4242                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4246  05BF  30FF               	movlw	255
  4247  05C0  0020               	movlb	0	; select bank0
  4248  05C1  009B               	movwf	27	;volatile
  4249                           
  4250                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4251  05C2  019A               	clrf	26	;volatile
  4252                           
  4253                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4254  05C3  1091               	bcf	17,1	;volatile
  4255                           
  4256                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x1C;
  4257  05C4  301C               	movlw	28
  4258  05C5  009C               	movwf	28	;volatile
  4259  05C6  0008               	return
  4260  05C7                     __end_of_TMR2_Initialize:
  4261                           
  4262                           	psect	text16
  4263  0580                     __ptext16:	
  4264 ;; *************** function _TMR0_Initialize *****************
  4265 ;; Defined at:
  4266 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0, pclath, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : B1F/0
  4277 ;;		On exit  : 1F/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1
  4280 ;;      Params:         0       0       0
  4281 ;;      Locals:         0       0       0
  4282 ;;      Temps:          1       0       0
  4283 ;;      Totals:         1       0       0
  4284 ;;Total ram usage:        1 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    5
  4287 ;; This function calls:
  4288 ;;		_TMR0_SetInterruptHandler
  4289 ;; This function is called by:
  4290 ;;		_SYSTEM_Initialize
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           
  4295                           ;psect for function _TMR0_Initialize
  4296  0580                     _TMR0_Initialize:
  4297                           
  4298                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4302  0580  0021               	movlb	1	; select bank1
  4303  0581  0815               	movf	21,w	;volatile
  4304  0582  39C0               	andlw	192
  4305  0583  3811               	iorlw	17
  4306  0584  0095               	movwf	21	;volatile
  4307                           
  4308                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x06;
  4309  0585  3006               	movlw	6
  4310  0586  0020               	movlb	0	; select bank0
  4311  0587  0095               	movwf	21	;volatile
  4312                           
  4313                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 6;
  4314  0588  3006               	movlw	6
  4315  0589  00F2               	movwf	??_TMR0_Initialize
  4316  058A  0872               	movf	??_TMR0_Initialize,w
  4317  058B  00E9               	movwf	_timer0ReloadVal	;volatile
  4318                           
  4319                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  4320  058C  110B               	bcf	11,2	;volatile
  4321                           
  4322                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  4323  058D  168B               	bsf	11,5	;volatile
  4324                           
  4325                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  4326  058E  30FE               	movlw	low _TMR0_DefaultInterruptHandler
  4327  058F  00F0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4328  0590  3005               	movlw	high _TMR0_DefaultInterruptHandler
  4329  0591  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4330  0592  25EF               	fcall	_TMR0_SetInterruptHandler
  4331  0593  0008               	return
  4332  0594                     __end_of_TMR0_Initialize:
  4333                           
  4334                           	psect	text17
  4335  05EF                     __ptext17:	
  4336 ;; *************** function _TMR0_SetInterruptHandler *****************
  4337 ;; Defined at:
  4338 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  4341 ;;		 -> timer0CallBack(1), TMR0_DefaultInterruptHandler(1), 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg
  4348 ;; Tracked objects:
  4349 ;;		On entry : 1F/0
  4350 ;;		On exit  : 1F/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1
  4353 ;;      Params:         2       0       0
  4354 ;;      Locals:         0       0       0
  4355 ;;      Temps:          0       0       0
  4356 ;;      Totals:         2       0       0
  4357 ;;Total ram usage:        2 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    4
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_TMR0_Initialize
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           
  4369                           ;psect for function _TMR0_SetInterruptHandler
  4370  05EF                     _TMR0_SetInterruptHandler:
  4371                           
  4372                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4376  05EF  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4377  05F0  00E8               	movwf	_TMR0_InterruptHandler+1
  4378  05F1  0870               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4379  05F2  00E7               	movwf	_TMR0_InterruptHandler
  4380  05F3  0008               	return
  4381  05F4                     __end_of_TMR0_SetInterruptHandler:
  4382                           
  4383                           	psect	text18
  4384  05C7                     __ptext18:	
  4385 ;; *************** function _PWM3_Initialize *****************
  4386 ;; Defined at:
  4387 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg
  4396 ;; Tracked objects:
  4397 ;;		On entry : B1F/1
  4398 ;;		On exit  : B1F/C
  4399 ;;		Unchanged: B00/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1
  4401 ;;      Params:         0       0       0
  4402 ;;      Locals:         0       0       0
  4403 ;;      Temps:          0       0       0
  4404 ;;      Totals:         0       0       0
  4405 ;;Total ram usage:        0 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    4
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_SYSTEM_Initialize
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           
  4416                           ;psect for function _PWM3_Initialize
  4417  05C7                     _PWM3_Initialize:
  4418                           
  4419                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0xD0;
  4420                           
  4421                           ;incstack = 0
  4422                           ; Regs used in _PWM3_Initialize: [wreg]
  4423  05C7  30D0               	movlw	208
  4424  05C8  002C               	movlb	12	; select bank12
  4425  05C9  0099               	movwf	25	;volatile
  4426                           
  4427                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xFF;
  4428  05CA  30FF               	movlw	255
  4429  05CB  0098               	movwf	24	;volatile
  4430                           
  4431                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  4432  05CC  30C0               	movlw	192
  4433  05CD  0097               	movwf	23	;volatile
  4434  05CE  0008               	return
  4435  05CF                     __end_of_PWM3_Initialize:
  4436                           
  4437                           	psect	text19
  4438  053A                     __ptext19:	
  4439 ;; *************** function _PIN_MANAGER_Initialize *****************
  4440 ;; Defined at:
  4441 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;		None
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2
  4450 ;; Tracked objects:
  4451 ;;		On entry : B1F/0
  4452 ;;		On exit  : B1F/2
  4453 ;;		Unchanged: B00/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1
  4455 ;;      Params:         0       0       0
  4456 ;;      Locals:         0       0       0
  4457 ;;      Temps:          0       0       0
  4458 ;;      Totals:         0       0       0
  4459 ;;Total ram usage:        0 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    4
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_SYSTEM_Initialize
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           
  4470                           ;psect for function _PIN_MANAGER_Initialize
  4471  053A                     _PIN_MANAGER_Initialize:
  4472                           
  4473                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4474                           
  4475                           ;incstack = 0
  4476                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4477  053A  0022               	movlb	2	; select bank2
  4478  053B  018C               	clrf	12	;volatile
  4479                           
  4480                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4481  053C  018D               	clrf	13	;volatile
  4482                           
  4483                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4484  053D  018E               	clrf	14	;volatile
  4485                           
  4486                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3B;
  4487  053E  303B               	movlw	59
  4488  053F  0021               	movlb	1	; select bank1
  4489  0540  008C               	movwf	12	;volatile
  4490                           
  4491                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x10;
  4492  0541  3010               	movlw	16
  4493  0542  008D               	movwf	13	;volatile
  4494                           
  4495                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  4496  0543  018E               	clrf	14	;volatile
  4497                           
  4498                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  4499  0544  0023               	movlb	3	; select bank3
  4500  0545  018E               	clrf	14	;volatile
  4501                           
  4502                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
  4503  0546  3030               	movlw	48
  4504  0547  008D               	movwf	13	;volatile
  4505                           
  4506                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x13;
  4507  0548  3013               	movlw	19
  4508  0549  008C               	movwf	12	;volatile
  4509                           
  4510                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4511  054A  0024               	movlb	4	; select bank4
  4512  054B  018D               	clrf	13	;volatile
  4513                           
  4514                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4515  054C  018C               	clrf	12	;volatile
  4516                           
  4517                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4518  054D  0021               	movlb	1	; select bank1
  4519  054E  1795               	bsf	21,7	;volatile
  4520                           
  4521                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4522  054F  0022               	movlb	2	; select bank2
  4523  0550  019D               	clrf	29	;volatile
  4524  0551  0008               	return
  4525  0552                     __end_of_PIN_MANAGER_Initialize:
  4526                           
  4527                           	psect	text20
  4528  05E3                     __ptext20:	
  4529 ;; *************** function _OSCILLATOR_Initialize *****************
  4530 ;; Defined at:
  4531 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2
  4540 ;; Tracked objects:
  4541 ;;		On entry : B1F/2
  4542 ;;		On exit  : B1F/2
  4543 ;;		Unchanged: B00/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1
  4545 ;;      Params:         0       0       0
  4546 ;;      Locals:         0       0       0
  4547 ;;      Temps:          0       0       0
  4548 ;;      Totals:         0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    4
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_SYSTEM_Initialize
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           
  4560                           ;psect for function _OSCILLATOR_Initialize
  4561  05E3                     _OSCILLATOR_Initialize:
  4562                           
  4563                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x6A;
  4564                           
  4565                           ;incstack = 0
  4566                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4567  05E3  306A               	movlw	106
  4568  05E4  0021               	movlb	1	; select bank1
  4569  05E5  0099               	movwf	25	;volatile
  4570                           
  4571                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4572  05E6  0022               	movlb	2	; select bank2
  4573  05E7  0196               	clrf	22	;volatile
  4574  05E8  0008               	return
  4575  05E9                     __end_of_OSCILLATOR_Initialize:
  4576                           
  4577                           	psect	text21
  4578  05CF                     __ptext21:	
  4579 ;; *************** function _ADC_Initialize *****************
  4580 ;; Defined at:
  4581 ;;		line 67 in file "mcc_generated_files/adc.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;		None
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2
  4590 ;; Tracked objects:
  4591 ;;		On entry : B1F/1
  4592 ;;		On exit  : B1F/1
  4593 ;;		Unchanged: B00/0
  4594 ;; Data sizes:     COMMON   BANK0   BANK1
  4595 ;;      Params:         0       0       0
  4596 ;;      Locals:         0       0       0
  4597 ;;      Temps:          0       0       0
  4598 ;;      Totals:         0       0       0
  4599 ;;Total ram usage:        0 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    4
  4602 ;; This function calls:
  4603 ;;		Nothing
  4604 ;; This function is called by:
  4605 ;;		_SYSTEM_Initialize
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           
  4610                           ;psect for function _ADC_Initialize
  4611  05CF                     _ADC_Initialize:
  4612                           
  4613                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0xC0;
  4614                           
  4615                           ;incstack = 0
  4616                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  4617  05CF  30C0               	movlw	192
  4618  05D0  009E               	movwf	30	;volatile
  4619                           
  4620                           ;mcc_generated_files/adc.c: 75:     ADCON2 = 0x00;
  4621  05D1  019F               	clrf	31	;volatile
  4622                           
  4623                           ;mcc_generated_files/adc.c: 78:     ADRESL = 0x00;
  4624  05D2  019B               	clrf	27	;volatile
  4625                           
  4626                           ;mcc_generated_files/adc.c: 81:     ADRESH = 0x00;
  4627  05D3  019C               	clrf	28	;volatile
  4628                           
  4629                           ;mcc_generated_files/adc.c: 84:     ADCON0 = 0x01;
  4630  05D4  3001               	movlw	1
  4631  05D5  009D               	movwf	29	;volatile
  4632  05D6  0008               	return
  4633  05D7                     __end_of_ADC_Initialize:
  4634                           
  4635                           	psect	text22
  4636  056A                     __ptext22:	
  4637 ;; *************** function _PWM3_LoadDutyValue *****************
  4638 ;; Defined at:
  4639 ;;		line 72 in file "mcc_generated_files/pwm3.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  dutyValue       2    0[COMMON] unsigned short 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;		None
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  1    wreg      void 
  4646 ;; Registers used:
  4647 ;;		wreg, status,2, status,0
  4648 ;; Tracked objects:
  4649 ;;		On entry : 1F/0
  4650 ;;		On exit  : 1F/C
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMMON   BANK0   BANK1
  4653 ;;      Params:         2       0       0
  4654 ;;      Locals:         0       0       0
  4655 ;;      Temps:          2       0       0
  4656 ;;      Totals:         4       0       0
  4657 ;;Total ram usage:        4 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    4
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_main
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           
  4668                           ;psect for function _PWM3_LoadDutyValue
  4669  056A                     _PWM3_LoadDutyValue:
  4670                           
  4671                           ;mcc_generated_files/pwm3.c: 72:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 73:  {;mcc_generated_files/pwm3.c: 75:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
  4675  056A  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  4676  056B  00F3               	movwf	??_PWM3_LoadDutyValue+1
  4677  056C  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  4678  056D  00F2               	movwf	??_PWM3_LoadDutyValue
  4679  056E  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  4680  056F  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  4681  0570  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
  4682  0571  0CF2               	rrf	??_PWM3_LoadDutyValue,f
  4683  0572  0872               	movf	??_PWM3_LoadDutyValue,w
  4684  0573  002C               	movlb	12	; select bank12
  4685  0574  0098               	movwf	24	;volatile
  4686                           
  4687                           ;mcc_generated_files/pwm3.c: 78:      PWM3DCL = (dutyValue & 0x0003)<<6;
  4688  0575  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
  4689  0576  3903               	andlw	3
  4690  0577  00F2               	movwf	??_PWM3_LoadDutyValue
  4691  0578  3005               	movlw	5
  4692  0579                     u1015:
  4693  0579  35F2               	lslf	??_PWM3_LoadDutyValue,f
  4694  057A  3EFF               	addlw	-1
  4695  057B  1D03               	skipz
  4696  057C  2D79               	goto	u1015
  4697  057D  3572               	lslf	??_PWM3_LoadDutyValue,w
  4698  057E  0097               	movwf	23	;volatile
  4699  057F  0008               	return
  4700  0580                     __end_of_PWM3_LoadDutyValue:
  4701                           
  4702                           	psect	text23
  4703  0552                     __ptext23:	
  4704 ;; *************** function _ADC_GetConversion *****************
  4705 ;; Defined at:
  4706 ;;		line 115 in file "mcc_generated_files/adc.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  channel         1    wreg     enum E2336
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  channel         1    3[COMMON] enum E2336
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  2    0[COMMON] unsigned short 
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0
  4715 ;; Tracked objects:
  4716 ;;		On entry : 1F/0
  4717 ;;		On exit  : 1F/1
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1
  4720 ;;      Params:         2       0       0
  4721 ;;      Locals:         1       0       0
  4722 ;;      Temps:          1       0       0
  4723 ;;      Totals:         4       0       0
  4724 ;;Total ram usage:        4 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    4
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_main
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function _ADC_GetConversion
  4736  0552                     _ADC_GetConversion:
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  4740                           ;ADC_GetConversion@channel stored from wreg
  4741  0552  00F3               	movwf	ADC_GetConversion@channel
  4742                           
  4743                           ;mcc_generated_files/adc.c: 115: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 116: {;mcc_generated_files/adc.c: 118:     ADCON0bits.CHS = ch
      +                          annel;
  4744  0553  0873               	movf	ADC_GetConversion@channel,w
  4745  0554  00F2               	movwf	??_ADC_GetConversion
  4746  0555  0DF2               	rlf	??_ADC_GetConversion,f
  4747  0556  0DF2               	rlf	??_ADC_GetConversion,f
  4748  0557  0021               	movlb	1	; select bank1
  4749  0558  081D               	movf	29,w	;volatile
  4750  0559  0672               	xorwf	??_ADC_GetConversion,w
  4751  055A  3983               	andlw	-125
  4752  055B  0672               	xorwf	??_ADC_GetConversion,w
  4753  055C  009D               	movwf	29	;volatile
  4754                           
  4755                           ;mcc_generated_files/adc.c: 121:     ADCON0bits.ADON = 1;
  4756  055D  141D               	bsf	29,0	;volatile
  4757                           
  4758                           ;mcc_generated_files/adc.c: 124:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4759  055E  3200               	nop2	;2 cycle nop
  4760  055F  3200               	nop2	;2 cycle nop
  4761  0560  0000               	nop
  4762                           
  4763                           ;mcc_generated_files/adc.c: 127:     ADCON0bits.GO_nDONE = 1;
  4764  0561  0021               	movlb	1	; select bank1
  4765  0562  149D               	bsf	29,1	;volatile
  4766  0563                     l34:	
  4767                           ;mcc_generated_files/adc.c: 131:     {;mcc_generated_files/adc.c: 132:     }
  4768                           
  4769                           
  4770                           ;mcc_generated_files/adc.c: 130:     while (ADCON0bits.GO_nDONE)
  4771  0563  189D               	btfsc	29,1	;volatile
  4772  0564  2D63               	goto	l34
  4773                           
  4774                           ;mcc_generated_files/adc.c: 135:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4775  0565  081C               	movf	28,w	;volatile
  4776  0566  00F1               	movwf	?_ADC_GetConversion+1
  4777  0567  081B               	movf	27,w	;volatile
  4778  0568  00F0               	movwf	?_ADC_GetConversion
  4779  0569  0008               	return
  4780  056A                     __end_of_ADC_GetConversion:
  4781                           
  4782                           	psect	intentry
  4783  0004                     __pintentry:	
  4784 ;; *************** function _INTERRUPT_InterruptManager *****************
  4785 ;; Defined at:
  4786 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;		None
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  1    wreg      void 
  4793 ;; Registers used:
  4794 ;;		wreg, status,2, status,0, pclath, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1
  4800 ;;      Params:         0       0       0
  4801 ;;      Locals:         0       0       0
  4802 ;;      Temps:          0       0       0
  4803 ;;      Totals:         0       0       0
  4804 ;;Total ram usage:        0 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    3
  4807 ;; This function calls:
  4808 ;;		_TMR0_ISR
  4809 ;; This function is called by:
  4810 ;;		Interrupt level 1
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814  0004                     _INTERRUPT_InterruptManager:
  4815                           
  4816                           ;incstack = 0
  4817  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4818                           
  4819                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4820  0005  3180               	pagesel	$
  4821                           
  4822                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4823  0006  1A8B               	btfsc	11,5	;volatile
  4824  0007  1D0B               	btfss	11,2	;volatile
  4825  0008  280A               	goto	i1l197
  4826                           
  4827                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4828  0009  25E9               	fcall	_TMR0_ISR
  4829  000A                     i1l197:	
  4830                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4831                           
  4832  000A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4833  000B  0009               	retfie
  4834  000C                     __end_of_INTERRUPT_InterruptManager:
  4835                           
  4836                           	psect	text25
  4837  05E9                     __ptext25:	
  4838 ;; *************** function _TMR0_ISR *****************
  4839 ;; Defined at:
  4840 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;		None
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0, pclath, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMMON   BANK0   BANK1
  4854 ;;      Params:         0       0       0
  4855 ;;      Locals:         0       0       0
  4856 ;;      Temps:          0       0       0
  4857 ;;      Totals:         0       0       0
  4858 ;;Total ram usage:        0 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    2
  4861 ;; This function calls:
  4862 ;;		_TMR0_CallBack
  4863 ;; This function is called by:
  4864 ;;		_INTERRUPT_InterruptManager
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           
  4869                           ;psect for function _TMR0_ISR
  4870  05E9                     _TMR0_ISR:
  4871                           
  4872                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  4873                           
  4874                           ;incstack = 0
  4875                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4876  05E9  110B               	bcf	11,2	;volatile
  4877                           
  4878                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  4879  05EA  0020               	movlb	0	; select bank0
  4880  05EB  0869               	movf	_timer0ReloadVal,w	;volatile
  4881  05EC  0095               	movwf	21	;volatile
  4882                           
  4883                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
  4884  05ED  25A4               	fcall	_TMR0_CallBack
  4885  05EE  0008               	return
  4886  05EF                     __end_of_TMR0_ISR:
  4887                           
  4888                           	psect	text26
  4889  05A4                     __ptext26:	
  4890 ;; *************** function _TMR0_CallBack *****************
  4891 ;; Defined at:
  4892 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;		None
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0, pclath, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 1F/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1
  4906 ;;      Params:         0       0       0
  4907 ;;      Locals:         0       0       0
  4908 ;;      Temps:          0       0       0
  4909 ;;      Totals:         0       0       0
  4910 ;;Total ram usage:        0 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    1
  4913 ;; This function calls:
  4914 ;;		Absolute function
  4915 ;;		_TMR0_DefaultInterruptHandler
  4916 ;;		_timer0CallBack
  4917 ;; This function is called by:
  4918 ;;		_TMR0_ISR
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _TMR0_CallBack
  4924  05A4                     _TMR0_CallBack:
  4925                           
  4926                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
  4927                           
  4928                           ;incstack = 0
  4929                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4930  05A4  0867               	movf	_TMR0_InterruptHandler,w
  4931  05A5  0468               	iorwf	_TMR0_InterruptHandler+1,w
  4932  05A6  1903               	btfsc	3,2
  4933  05A7  0008               	return
  4934                           
  4935                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
  4936  05A8  0868               	movf	_TMR0_InterruptHandler+1,w
  4937  05A9  008A               	movwf	10
  4938  05AA  0867               	movf	_TMR0_InterruptHandler,w
  4939  05AB  000A               	callw
  4940  05AC  3185               	pagesel	$
  4941  05AD  0008               	return
  4942  05AE                     __end_of_TMR0_CallBack:
  4943                           
  4944                           	psect	text27
  4945  05FE                     __ptext27:	
  4946 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4947 ;; Defined at:
  4948 ;;		line 137 in file "mcc_generated_files/tmr0.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      void 
  4955 ;; Registers used:
  4956 ;;		None
  4957 ;; Tracked objects:
  4958 ;;		On entry : 1F/0
  4959 ;;		On exit  : 1F/0
  4960 ;;		Unchanged: 1F/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1
  4962 ;;      Params:         0       0       0
  4963 ;;      Locals:         0       0       0
  4964 ;;      Temps:          0       0       0
  4965 ;;      Totals:         0       0       0
  4966 ;;Total ram usage:        0 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_TMR0_Initialize
  4972 ;;		_TMR0_CallBack
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           
  4977                           ;psect for function _TMR0_DefaultInterruptHandler
  4978  05FE                     _TMR0_DefaultInterruptHandler:
  4979                           
  4980                           ;incstack = 0
  4981                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  4982  05FE  0008               	return
  4983  05FF                     __end_of_TMR0_DefaultInterruptHandler:
  4984                           
  4985                           	psect	text28
  4986  0594                     __ptext28:	
  4987 ;; *************** function _timer0CallBack *****************
  4988 ;; Defined at:
  4989 ;;		line 117 in file "main.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2
  4998 ;; Tracked objects:
  4999 ;;		On entry : 1F/0
  5000 ;;		On exit  : 1F/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMMON   BANK0   BANK1
  5003 ;;      Params:         0       0       0
  5004 ;;      Locals:         0       0       0
  5005 ;;      Temps:          0       0       0
  5006 ;;      Totals:         0       0       0
  5007 ;;Total ram usage:        0 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_main
  5013 ;;		_TMR0_CallBack
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           
  5018                           ;psect for function _timer0CallBack
  5019  0594                     _timer0CallBack:
  5020                           
  5021                           ;main.c: 119:     msTick++;
  5022                           
  5023                           ;incstack = 0
  5024                           ; Regs used in _timer0CallBack: [wreg+status,2]
  5025  0594  3001               	movlw	1
  5026  0595  07D7               	addwf	_msTick,f	;volatile
  5027  0596  3000               	movlw	0
  5028  0597  3DD8               	addwfc	_msTick+1,f	;volatile
  5029                           
  5030                           ;main.c: 121:     if(msTick > 200)
  5031  0598  3000               	movlw	0
  5032  0599  0258               	subwf	_msTick+1,w	;volatile
  5033  059A  30C9               	movlw	201
  5034  059B  1903               	skipnz
  5035  059C  0257               	subwf	_msTick,w	;volatile
  5036  059D  1C03               	skipc
  5037  059E  0008               	return
  5038                           
  5039                           ;main.c: 122:     {;main.c: 123:         doToggle = 1;
  5040  059F  01DC               	clrf	_doToggle
  5041  05A0  0ADC               	incf	_doToggle,f
  5042                           
  5043                           ;main.c: 124:         msTick = 0;
  5044  05A1  01D7               	clrf	_msTick	;volatile
  5045  05A2  01D8               	clrf	_msTick+1	;volatile
  5046  05A3  0008               	return
  5047  05A4                     __end_of_timer0CallBack:
  5048  007E                     btemp	set	126	;btemp
  5049  007E                     int$flags	set	126
  5050  007E                     wtemp0	set	126
  5051                           
  5052                           	psect	config
  5053                           
  5054                           ;Config register CONFIG1 @ 0x8007
  5055                           ;	Oscillator Selection bits
  5056                           ;	FOSC = INTOSC, Internal Oscillator, I/O Function on OSC1
  5057                           ;	Watchdog Timer Enable
  5058                           ;	WDTE = OFF, WDT disabled
  5059                           ;	Power-up Timer Enable
  5060                           ;	PWRTE = OFF, PWRT disabled
  5061                           ;	MCLR Pin Function Select
  5062                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  5063                           ;	Flash Program Memory Code Protection
  5064                           ;	CP = ON, Program memory code protection is enabled
  5065                           ;	Brown-out Reset Enable
  5066                           ;	BOREN = ON, Brown-out Reset enabled
  5067                           ;	Clock Out Enable
  5068                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5069  8007                     	org	32775
  5070  8007  3F64               	dw	16228
  5071                           
  5072                           ;Config register CONFIG2 @ 0x8008
  5073                           ;	Flash Memory Self-Write Protection
  5074                           ;	WRT = OFF, Write protection off
  5075                           ;	Stack Overflow/Underflow Reset Enable
  5076                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5077                           ;	Brown-out Reset Voltage Selection
  5078                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5079                           ;	Low-Power Brown Out Reset
  5080                           ;	LPBOR = OFF, Low-Power BOR is disabled
  5081                           ;	Low-Voltage Programming Enable
  5082                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  5083  8008                     	org	32776
  5084  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    4
    Data        9
    BSS         20
    Persistent  35
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      74
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 32
		 -> writeFlash@wrBlockData(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer0CallBack(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_writeFlash
    _writeFlash->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _setState->___lldiv
    _readFlash->_FLASH_ReadWord
    ___aldiv->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_writeFlash

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    3785
                                             32 BANK0     10    10      0
                  _ADC_GetConversion
                 _PWM3_LoadDutyValue
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                            ___aldiv
                             ___lmul
              _setLedsForPositioning
                           _setState
                         _writeFlash
 ---------------------------------------------------------------------------------
 (1) _writeFlash                                          33    33      0    1152
                                             13 COMMON     1     1      0
                                              0 BANK0     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                    10     7      3     812
                                              3 COMMON    10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     220
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setState                                             5     5      0    1059
                                              0 BANK0      5     5      0
                            ___lldiv
                             ___tmul
                          _readFlash
 ---------------------------------------------------------------------------------
 (2) _readFlash                                            4     4      0     435
                                              3 COMMON     4     4      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     435
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _setLedsForPositioning                                4     0      4     296
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     452
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     174
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              2 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM3_LoadDutyValue                                   4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _timer0CallBack *
 ---------------------------------------------------------------------------------
 (7) _timer0CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _PWM3_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___aldiv
     ___lmul (ARG)
   ___lmul
   _setLedsForPositioning
   _setState
     ___lldiv
     ___tmul
     _readFlash
       _FLASH_ReadWord
   _writeFlash
     _FLASH_EraseBlock
     _FLASH_WriteBlock
       _FLASH_EraseBlock

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer0CallBack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      58       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2A      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      58       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Sep 18 08:59:16 2020

                                       _b 0052                                         _m 005E  
                                      l34 0563                           _timer0ReloadVal 0069  
          __size_of_setLedsForPositioning 00CE             __end_of_setLedsForPositioning 0268  
                                     l332 02DF                                       l325 028E  
                                     l350 0067                                       l335 02E2  
                                     l504 025B                                       l440 01CB  
                                     l426 01B5                                       l362 0092  
                                     l515 0261                                       l452 01DF  
                                     l380 012E                                       l470 0204  
                                     l462 01F2                                       l390 015D  
                                     l382 0138                                       l358 0089  
                                     l480 0225                                       l392 0167  
                                     l384 0142                                       l394 0171  
                                     l378 0124                                       l660 0311  
                                     l476 0215                                       l396 017B  
                                     l494 0248                                       l486 0236  
                                     _PR2 001B                                       u905 04CE  
                                     u915 04D4                                       u845 03FA  
                                     u945 0451                                       u875 0396  
                                     u965 045D                                       u885 03CD  
                                     u975 0471                                       u985 047D  
                         _TMR2_Initialize 05BF                                       wreg 0009  
                             main@channel 0062            FLASH_WriteBlock@flashWordArray 0075  
                             main@dimming 0048                                      l2013 0116  
                                    l2005 00AF                                      l2007 00C2  
                                    l2017 014C                                      l2009 00C4  
                                    l2121 00B7                                      l2123 018E  
                                    l2019 014F                                      l2027 0186  
                                    l2125 02EE                                      l1721 0406  
                                    l1841 0286                                      l1915 0332  
                                    l1907 0322                                      l1763 04CD  
                                    l1835 027B                                      l1933 0379  
                                    l1925 0360                                      l1917 0340  
                                    l1853 02E5                                      l1871 01F6  
                                    l1791 0487                                      l1759 04C5  
                                    l1855 02F9                                      l1847 02A6  
                                    l1929 036B                                      l1881 024D  
                                    l1873 0207                                      l1865 01BC  
                                    l1777 044E                                      l1953 002A  
                                    l1875 0217                                      l1867 01D1  
                                    l1787 047C                                      l1779 045C  
                                    l1963 0043                                      l1885 0498  
                                    l1877 0228                                      l1869 01E4  
                                    l1973 006C                                      l1957 0031  
                                    l1879 023A                                      l1991 0095  
                                    l1975 0071                                      l1889 04A2  
                                    l1993 0098                                      l1985 008C  
                                    l1987 008E                                      l1997 00A3  
                                    u1015 0579                                      u1045 029C  
                                    u1225 0335                                      u1500 014A  
                                    u1420 0122                                      u1245 0341  
                                    u1165 04A3                                      _LATA 010C  
                                    _LATB 010D                                      u1255 0355  
                                    u1175 04AA                                      u1335 005F  
                                    _LATC 010E                                      u1440 012C  
                                    u1265 0361                                      u1610 0183  
                                    u1530 015B                                      u1460 0136  
                                    u1550 0165                                      u1480 0140  
                                    u1570 016F                                      u1590 0179  
                                    _TMR0 0015                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUB 020D  
                                    _main 0020                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                       ?_FLASH_WriteBlock 0073                                      start 000C  
                      ??_FLASH_WriteBlock 0076                   __end_of_TMR0_Initialize 0594  
          ??_TMR0_DefaultInterruptHandler 0070            __size_of_OSCILLATOR_Initialize 0006  
           __end_of_OSCILLATOR_Initialize 05E9                           __end_of___aldiv 0382  
                                   ?_main 0070                           __end_of___lldiv 0490  
                                   _T2CON 001C                                     i1l197 000A  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E         __size_of_TMR0_SetInterruptHandler 0005  
                     ___lmul@multiplicand 0074                 ?_TMR0_SetInterruptHandler 0070  
                        __end_of_TMR0_ISR 05EF                            _WDT_Initialize 05F8  
                 __end_of_PWM3_Initialize 05CF                                     pclath 000A  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 05FC                           __initialization 000D  
                            __end_of_main 019A                   __end_of_TMR2_Initialize 05C7  
             ?_INTERRUPT_InterruptManager 0070                                    ??_main 0040  
                   writeFlash@wrBlockData 0020                   __size_of_FLASH_ReadWord 0019  
                  __end_of_WDT_Initialize 05FC                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADCON2 009F  
               FLASH_WriteBlock@writeAddr 0073                                    _ADRESH 009C  
                                  _ADRESL 009B                                    _APFCON 011D  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                 __size_of_FLASH_EraseBlock 001C  
                                  _OSCCON 0099                                    _WDTCON 0097  
                                  ___lmul 0490               __size_of_PWM3_LoadDutyValue 0016  
                               ??___aldiv 007C                                    ___tmul 04BF  
                               ??___lldiv 0078                                    _msTick 0057  
                        ?_TMR0_Initialize 0070                          __end_of_setState 0301  
                 FLASH_ReadWord@flashAddr 0070                           ?_WDT_Initialize 0070  
                ADC_GetConversion@channel 0073                     __end_of_TMR0_CallBack 05AE  
                 __end_of_TMR2_StartTimer 05FE  TMR0_SetInterruptHandler@InterruptHandler 0070  
                        ?_PWM3_Initialize 0070                         _SYSTEM_Initialize 05B7  
                 __end_of__initialization 001D                        ?_SYSTEM_Initialize 0070  
                        _fixedPointFactor 05F4                            __pcstackCOMMON 0070  
                 __size_of_timer0CallBack 0010                              __pidataBANK0 05AE  
                     ??_SYSTEM_Initialize 0073                                 ?_TMR0_ISR 0070  
                        ?_TMR2_Initialize 0070                            _OPTION_REGbits 0095  
             FLASH_WriteBlock@GIEBitValue 007B                 __end_of_SYSTEM_Initialize 05BF  
                              __pbssBANK0 004A                        __size_of_readFlash 0068  
                              __pmaintext 0020          __end_of_TMR0_SetInterruptHandler 05F4  
                                 ?___lmul 0070                                   ?___tmul 0070  
                              ??_TMR0_ISR 0070                                __pintentry 0004  
                          ___lmul@product 0078                 __size_of_FLASH_WriteBlock 0054  
                 __size_of_ADC_Initialize 0008                            _FLASH_ReadWord 0521  
                   _setLedsForPositioning 019A                                   _PWM3DCH 0618  
                                 _PWM3DCL 0617                                   _PWM3CON 0619  
                        ?_TMR2_StartTimer 0070                          _FLASH_EraseBlock 0505  
                    _ADC_InterruptHandler 0059                                 ?_setState 0070  
                                 ___aldiv 0301                           __size_of___lmul 002F  
                         __size_of___tmul 0026                                   ___lldiv 043E  
                  __end_of_FLASH_ReadWord 053A                                   __ptext1 04E5  
                                 __ptext2 03EA                                   __ptext3 0505  
                                 __ptext4 0268                                   __ptext5 0382  
                                 __ptext6 0521                                   __ptext7 04BF  
                                 __ptext8 043E                                   __ptext9 019A  
                       __end_of_readFlash 03EA                     _OSCILLATOR_Initialize 05E3  
                               _T2CONbits 001C                          ___aldiv@dividend 0024  
                ??_PIN_MANAGER_Initialize 0070                __size_of_SYSTEM_Initialize 0008  
                                 clrloop0 05DE                      end_of_initialization 001D  
                                 init_ram 05D7                                   initloop 05D8  
                              _lowerLimit 004A                           ___lldiv@divisor 0070  
                         ___lldiv@counter 007D                                ??_setState 0020  
                          _timer0CallBack 0594                          ___aldiv@quotient 002A  
               FLASH_ReadWord@GIEBitValue 0072                           ?_FLASH_ReadWord 0070  
                        ??_WDT_Initialize 0070                  _TMR0_SetInterruptHandler 05EF  
                               _PORTAbits 000C                    ?_setLedsForPositioning 0070  
                __end_of_fixedPointFactor 05F8                                _upperLimit 0063  
                  __end_of_timer0CallBack 05A4                __end_of_PWM3_LoadDutyValue 0580  
                       FLASH_WriteBlock@i 007C                                _writeFlash 04E5  
                          __end_of___lmul 04BF                            __end_of___tmul 04E5  
                       __size_of_TMR0_ISR 0006                            _ADC_Initialize 05CF  
                        _FLASH_WriteBlock 03EA                    ?_OSCILLATOR_Initialize 0070  
                     start_initialization 000D                  __size_of_TMR0_Initialize 0014  
         __size_of_PIN_MANAGER_Initialize 0018                           ?_timer0CallBack 0070  
                __size_of_PWM3_Initialize 0008                                  ??___lmul 0078  
                                ??___tmul 0076                    __size_of_TMR0_CallBack 000A  
                  __end_of_ADC_Initialize 05D7                               __pdataBANK0 005E  
             FLASH_EraseBlock@GIEBitValue 0072                  __end_of_FLASH_EraseBlock 0521  
                          ___tmul@product 0076                                 ___latbits 0000  
                           __pcstackBANK0 0020                  __size_of_TMR2_Initialize 0008  
                        setState@newState 0024                              _currentState 005B  
                   _TMR0_InterruptHandler 0067                                 __pnvBANK0 0067  
                  _PIN_MANAGER_Initialize 053A                                  ?___aldiv 0020  
                       __size_of_setState 0099                                  ?___lldiv 0070  
                             ?_writeFlash 0070                           ?_ADC_Initialize 0070  
            ??_INTERRUPT_InterruptManager 0070                                 _readFlash 0382  
                           _TMR0_CallBack 05A4                                 _msPressed 0055  
                        _adcValuePosition 004E            FLASH_WriteBlock@blockStartAddr 0079  
                         ___aldiv@divisor 0020                         ??_TMR0_Initialize 0072  
                         ___aldiv@counter 0028                                  _LATBbits 010D  
                                _LATCbits 010E                                 clear_ram0 05DD  
                __size_of_TMR2_StartTimer 0002       __size_of_INTERRUPT_InterruptManager 0008  
              ??_TMR0_SetInterruptHandler 0072                                  _PIR1bits 0011  
               FLASH_EraseBlock@startAddr 0070                          ??_FLASH_ReadWord 0072  
                                _TMR0_ISR 05E9                   ??_setLedsForPositioning 0074  
                       ??_PWM3_Initialize 0070                                _ADCON0bits 009D  
                     ___tmul@multiplicand 0073                                ?_readFlash 0070  
                          ?_TMR0_CallBack 0070                         ___lmul@multiplier 0070  
                     __size_of_writeFlash 0020                         ??_TMR2_Initialize 0070  
                __end_of_FLASH_WriteBlock 043E             setLedsForPositioning@adcValue 0070  
                       _ADC_GetConversion 0552                   ??_OSCILLATOR_Initialize 0070  
                      ?_ADC_GetConversion 0070                          __size_of___aldiv 0081  
                        __size_of___lldiv 0052                        _PWM3_LoadDutyValue 056A  
                     ??_ADC_GetConversion 0072                                  _doToggle 005C  
                                __ptext10 0490                                  __ptext11 0301  
                                __ptext20 05E3                                  __ptext12 05FC  
                                __ptext21 05CF                                  __ptext13 05B7  
                                __ptext22 056A                                  __ptext14 05F8  
                                __ptext23 0552                                  __ptext15 05BF  
                                __ptext16 0580                                  __ptext25 05E9  
                                __ptext17 05EF                                  __ptext26 05A4  
                                __ptext18 05C7                                  __ptext27 05FE  
                                __ptext19 053A                                  __ptext28 0594  
                     ?_PWM3_LoadDutyValue 0070                          ??_timer0CallBack 0070  
                           __size_of_main 017A      __end_of_TMR0_DefaultInterruptHandler 05FF  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 05FE  
               __end_of_ADC_GetConversion 056A                                  _setState 0268  
                    ??_PWM3_LoadDutyValue 0072                                  int$flags 007E  
                       ??_TMR2_StartTimer 0070        __end_of_INTERRUPT_InterruptManager 000C  
              _INTERRUPT_InterruptManager 0004                         ?_FLASH_EraseBlock 0070  
                      ??_FLASH_EraseBlock 0072                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0070                               ??_readFlash 0073  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                          _doButtonAction 005D                                _PMCON1bits 0195  
                        ___lldiv@dividend 0074                   ?_PIN_MANAGER_Initialize 0070  
                        ??_ADC_Initialize 0070             ?_TMR0_DefaultInterruptHandler 0070  
                            ??_writeFlash 007D                         ___tmul@multiplier 0070  
             PWM3_LoadDutyValue@dutyValue 0070                             __pstringtext1 05F4  
                              _OPTION_REG 0095                          ___lldiv@quotient 0079  
                         _TMR0_Initialize 0580                              ___aldiv@sign 0029  
          __end_of_PIN_MANAGER_Initialize 0552                        __end_of_writeFlash 0505  
              __size_of_ADC_GetConversion 0018                           _PWM3_Initialize 05C7  
